
#include "Baldur-v2.6.6.0_generated.h"

CVariableHash::type_FindKey CVariableHash::p_FindKey;
CVariableHash::type_AddKey CVariableHash::p_AddKey;
CGameObjectArray::type_GetShare CGameObjectArray::p_GetShare;
bool EEex::Opcode_LuaHook_AfterListsResolved_Enabled;
bool EEex::Projectile_LuaHook_GlobalMutators_Enabled;
bool EEex::bInTrackedResponse;
bool EEex::bStripUUID;
bool EEex::bNoUUID;
bool EEex::StutterDetector_Enabled;
CString::type_Construct_Overload_String CString::p_Construct_Overload_String;
CString::type_Construct_Overload_CString CString::p_Construct_Overload_CString;
CString::type_Destruct CString::p_Destruct;
CString::type_AssignmentOperator_Overload_String CString::p_AssignmentOperator_Overload_String;
CString::type_AssignmentOperator_Overload_CString CString::p_AssignmentOperator_Overload_CString;
CRes::type_Construct CRes::p_Construct;
CRes::type_Destruct CRes::p_Destruct;
CRes::type_Demand CRes::p_Demand;
CResPVR::type_Demand CResPVR::p_Demand;
CMessageHandler::type_AddMessage CMessageHandler::p_AddMessage;
CAICondition::type_Hold CAICondition::p_Hold;
CAICondition::type_TriggerHolds CAICondition::p_TriggerHolds;
CImmunitiesAIType::type_OnList CImmunitiesAIType::p_OnList;
CObList::type_Construct CObList::p_Construct;
CObList::type_RemoveHead CObList::p_RemoveHead;
CObList::type_RemoveAt CObList::p_RemoveAt;
CObList::type_Destruct CObList::p_Destruct;
CObList::type_AddTail CObList::p_AddTail;
CObList::type_Find CObList::p_Find;
void* CMessageUpdateReaction::VFTable;
void* CMessageSetDirection::VFTable;
void* CMessageDisplayTextRef::VFTable;
void* CMessageDisplayText::VFTable;
void* CMessageAddEffect::VFTable;
CContingencyList::type_ProcessTrigger CContingencyList::p_ProcessTrigger;
CContingencyList::type_Process CContingencyList::p_Process;
CAIGroup::type_FollowLeader CAIGroup::p_FollowLeader;
CAIGroup::type_RemoveFromSearch CAIGroup::p_RemoveFromSearch;
CAIGroup::type_AddToSearch CAIGroup::p_AddToSearch;
CAIGroup::type_GetFacings CAIGroup::p_GetFacings;
CAIGroup::type_GetOffsets CAIGroup::p_GetOffsets;
CVariable::type_Construct CVariable::p_Construct;
type_findMenu p_findMenu;
type_saveMenuStack p_saveMenuStack;
type_uiLoadMenu p_uiLoadMenu;
type_bsearch p_bsearch;
type_restoreMenuStack p_restoreMenuStack;
type_CompareCResByTypeThenName p_CompareCResByTypeThenName;
type_SDL_GetKeyFromName p_SDL_GetKeyFromName;
type_rand p_rand;
type_l_log_print p_l_log_print;
type_panic p_panic;
type_Chitin_GetSectionCallback p_Chitin_GetSectionCallback;
type_OpenIniFile p_OpenIniFile;
type_dimmGetResObject p_dimmGetResObject;
type_DrawPushState p_DrawPushState;
type_DrawBindTexture p_DrawBindTexture;
type_DrawEnable p_DrawEnable;
type_DrawBlendFunc p_DrawBlendFunc;
type_DrawColor p_DrawColor;
type_DrawAlpha p_DrawAlpha;
type_DrawPopState p_DrawPopState;
type_drawSlice p_drawSlice;
type_drawSliceSide p_drawSliceSide;
type_uiVariantAsInt p_uiVariantAsInt;
type_uiDrawSlicedRect p_uiDrawSlicedRect;
type_uiExecLuaInt p_uiExecLuaInt;
type_SDL_GetWindowFromID p_SDL_GetWindowFromID;
type_SDL_GetWindowFlags p_SDL_GetWindowFlags;
char** p_afxPchNil;
_9B9540D9920A90D57A3D80DDD1A70514* p_capture;
Array<keyword,124>* p_g_keywords;
lua_State** p_g_lua;
CBaldurChitin** p_g_pBaldurChitin;
int* p_menuLength;
Array<uiMenu,256>* p_menus;
CResText** p_menuSrc;
Array<uiMenu*,256>* p_menuStack;
int* p_nextStackMenuIdx;
int* p_numMenus;
int* p_optionsHaveChanged;
CTypedPtrArray<CPtrArray,CRes*>* p_resources;
Array<slicedRect,6>* p_slicedRects;
ConstArray<ushort,1765>* p_yy_action;
ConstArray<ushort,329>* p_yy_default;
ConstArray<byte,1765>* p_yy_lookahead;
ConstArray<short,122>* p_yy_reduce_ofst;
ConstArray<short,174>* p_yy_shift_ofst;
ConstArray<_D98D369160A0DDA2B95F5D0F301081BB,157>* p_yyRuleInfo;
CTlkTable::type_Fetch CTlkTable::p_Fetch;
CAIScript::type_Construct_Overload_Manual CAIScript::p_Construct_Overload_Manual;
CAIScript::type_Destruct CAIScript::p_Destruct;
CAbilityId::type_Construct CAbilityId::p_Construct;
CButtonData::type_Construct CButtonData::p_Construct;
C2DArray::type_Construct C2DArray::p_Construct;
C2DArray::type_Load C2DArray::p_Load;
C2DArray::type_GetAtLabels C2DArray::p_GetAtLabels;
C2DArray::type_Destruct C2DArray::p_Destruct;
CAIIdList::type_Construct_Overload_Default CAIIdList::p_Construct_Overload_Default;
CAIIdList::type_Destruct CAIIdList::p_Destruct;
CAIIdList::type_LoadList_Overload_Resref CAIIdList::p_LoadList_Overload_Resref;
CAIIdList::type_Find_Overload_ID CAIIdList::p_Find_Overload_ID;
CRuleTables::type_MapCharacterSpecializationToSchool CRuleTables::p_MapCharacterSpecializationToSchool;
CAIScriptFile::type_Construct CAIScriptFile::p_Construct;
CAIScriptFile::type_Destruct CAIScriptFile::p_Destruct;
CAIScriptFile::type_ParseConditionalString CAIScriptFile::p_ParseConditionalString;
CAIScriptFile::type_ParseObjectType CAIScriptFile::p_ParseObjectType;
CAIScriptFile::type_ParseResponseString CAIScriptFile::p_ParseResponseString;
CSearchBitmap::type_GetCost CSearchBitmap::p_GetCost;
ushort* CVidMode::p_SCREENWIDTH;
ushort* CVidMode::p_SCREENHEIGHT;
CSpell::type_Construct CSpell::p_Construct;
CSound::type_Construct CSound::p_Construct;
CSound::type_Destruct CSound::p_Destruct;
CScreenWorld::type_TogglePauseGame CScreenWorld::p_TogglePauseGame;
CChitin::type_OnResizeWindow CChitin::p_OnResizeWindow;
uint* CChitin::p_TIMER_UPDATES_PER_SECOND;
CItem::type_Construct_Overload_Manual CItem::p_Construct_Overload_Manual;
CItem::type_GetAbility CItem::p_GetAbility;
CInfButtonArray::type_SetState CInfButtonArray::p_SetState;
CInfButtonArray::type_SetQuickSlot CInfButtonArray::p_SetQuickSlot;
CInfGame::type_OnPortraitLDblClick CInfGame::p_OnPortraitLDblClick;
CInfGame::type_SelectCharacter CInfGame::p_SelectCharacter;
CInfGame::type_SelectToolbar CInfGame::p_SelectToolbar;
CInfGame::type_SetState CInfGame::p_SetState;
CInfGame::type_SetIconIndex CInfGame::p_SetIconIndex;
CInfGame::type_UnselectAll CInfGame::p_UnselectAll;
CInfGame::type_GetCharacterPortraitNum CInfGame::p_GetCharacterPortraitNum;
CGameEffect::type_DecodeEffect CGameEffect::p_DecodeEffect;
CDerivedStats::type_Construct CDerivedStats::p_Construct;
CDerivedStats::type_Destruct CDerivedStats::p_Destruct;
CDerivedStats::type_GetAtOffset CDerivedStats::p_GetAtOffset;
CDerivedStats::type_GetSpellState CDerivedStats::p_GetSpellState;
CDerivedStats::type_GetWizardLevelCast CDerivedStats::p_GetWizardLevelCast;
CDerivedStats::type_GetPriestLevelCast CDerivedStats::p_GetPriestLevelCast;
CDerivedStats::type_GetAverageLevel CDerivedStats::p_GetAverageLevel;
CGameArea::type_GetNearest_Overload_Point CGameArea::p_GetNearest_Overload_Point;
CGameArea::type_AdjustTarget CGameArea::p_AdjustTarget;
CGameArea::type_CheckWalkable CGameArea::p_CheckWalkable;
CGameArea::type_CheckLOS CGameArea::p_CheckLOS;
CGameArea::type_GetAllInRange_Overload_Point CGameArea::p_GetAllInRange_Overload_Point;
CGameArea::type_GetAllInRange_Overload_VertListPos CGameArea::p_GetAllInRange_Overload_VertListPos;
CGameArea::type_ApplyEffect CGameArea::p_ApplyEffect;
CGameArea::type_OnActionButtonClickGround CGameArea::p_OnActionButtonClickGround;
CAIObjectType::type_Construct_Overload_Manual CAIObjectType::p_Construct_Overload_Manual;
CAIObjectType::type_Decode CAIObjectType::p_Decode;
CAIObjectType::type_GetShare CAIObjectType::p_GetShare;
CAIObjectType::type_GetShareType CAIObjectType::p_GetShareType;
CAIObjectType::type_OfType CAIObjectType::p_OfType;
CAIObjectType::type_Set CAIObjectType::p_Set;
CAIObjectType::type_operator_equ_equ CAIObjectType::p_operator_equ_equ;
CAIObjectType* CAIObjectType::p_NOONE;
CAIAction::type_Construct_Overload_ActionID_DestPoint_SpecificID_SpecificID2 CAIAction::p_Construct_Overload_ActionID_DestPoint_SpecificID_SpecificID2;
CAIAction::type_Construct_Overload_Copy CAIAction::p_Construct_Overload_Copy;
CAIAction::type_Destruct CAIAction::p_Destruct;
CAIAction::type_AssignmentOperator CAIAction::p_AssignmentOperator;
CAIAction::type_Decode CAIAction::p_Decode;
CGameObject::type_InControl CGameObject::p_InControl;
Array<byte,16>* CGameObject::p_DEFAULT_VISIBLE_TERRAIN_TABLE;
Array<byte,16>* CGameObject::p_DEFAULT_TERRAIN_TABLE;
CProjectile::type_AddEffect CProjectile::p_AddEffect;
CProjectile::type_ClearEffects CProjectile::p_ClearEffects;
CAITrigger::type_OfType CAITrigger::p_OfType;
CAITrigger::type_Construct_Overload_Copy CAITrigger::p_Construct_Overload_Copy;
CGameAIBase::type_ApplyEffectToParty CGameAIBase::p_ApplyEffectToParty;
CGameAIBase::type_ForceSpell CGameAIBase::p_ForceSpell;
CGameAIBase::type_ForceSpellPoint CGameAIBase::p_ForceSpellPoint;
CGameAIBase::type_GetTargetShare CGameAIBase::p_GetTargetShare;
CGameAIBase::type_GetTargetShareType_Overload_AIType_ObjectType CGameAIBase::p_GetTargetShareType_Overload_AIType_ObjectType;
CGameAIBase::type_GetTargetShareType_Overload_ObjectType CGameAIBase::p_GetTargetShareType_Overload_ObjectType;
CGameTrigger::type_SetDrawPoly CGameTrigger::p_SetDrawPoly;
CGameSprite::type_CheckQuickLists CGameSprite::p_CheckQuickLists;
CGameSprite::type_Damage CGameSprite::p_Damage;
CGameSprite::type_FeedBack CGameSprite::p_FeedBack;
CGameSprite::type_GetActiveStats CGameSprite::p_GetActiveStats;
CGameSprite::type_GetCasterLevel CGameSprite::p_GetCasterLevel;
CGameSprite::type_GetInternalButtonList CGameSprite::p_GetInternalButtonList;
CGameSprite::type_GetKitMask CGameSprite::p_GetKitMask;
CGameSprite::type_GetKnownSpellInnate CGameSprite::p_GetKnownSpellInnate;
CGameSprite::type_GetKnownSpellMage CGameSprite::p_GetKnownSpellMage;
CGameSprite::type_GetKnownSpellPriest CGameSprite::p_GetKnownSpellPriest;
CGameSprite::type_GetLauncher CGameSprite::p_GetLauncher;
CGameSprite::type_GetLauncherSlot CGameSprite::p_GetLauncherSlot;
CGameSprite::type_GetName CGameSprite::p_GetName;
CGameSprite::type_GetNameRef CGameSprite::p_GetNameRef;
CGameSprite::type_GetQuickButtons CGameSprite::p_GetQuickButtons;
CGameSprite::type_PlaySound CGameSprite::p_PlaySound;
CGameSprite::type_ReadyOffInternalList CGameSprite::p_ReadyOffInternalList;
CGameSprite::type_ReadySpell CGameSprite::p_ReadySpell;
CGameSprite::type_SpellPoint CGameSprite::p_SpellPoint;
CGameSprite::type_UpdateTarget CGameSprite::p_UpdateTarget;
CGameDoor::type_SetDrawPoly CGameDoor::p_SetDrawPoly;
CGameContainer::type_SetDrawPoly CGameContainer::p_SetDrawPoly;

template<typename OutType>
static void attemptFillPointer(const String& patternName, OutType& pointerOut) {
	PatternValueHandle patternHandle;
	switch (sharedState().GetPatternValue(patternName, patternHandle)) {
		case PatternValueType::SINGLE: {
			pointerOut = reinterpret_cast<OutType>(sharedState().GetSinglePatternValue(patternHandle));
			break;
		}
		case PatternValueType::INVALID: {
			FPrintT(TEXT("[!][EEex.dll] attemptFillPointer() - Binding pattern [%s] missing; using this binding will crash the game\n"), patternName.c_str());
			break;
		}
		default: {
			FPrintT(TEXT("[!][EEex.dll] attemptFillPointer() - Binding pattern [%s].Type not SINGLE; using this binding will crash the game\n"), patternName.c_str());
			break;
		}
	}
}

void InitBindingsInternal() {
	attemptFillPointer(TEXT("CVariableHash::FindKey"), CVariableHash::p_FindKey);
	attemptFillPointer(TEXT("CVariableHash::AddKey"), CVariableHash::p_AddKey);
	attemptFillPointer(TEXT("CGameObjectArray::GetShare"), CGameObjectArray::p_GetShare);
	attemptFillPointer(TEXT("CString::Construct(char*)"), CString::p_Construct_Overload_String);
	attemptFillPointer(TEXT("CString::Construct(CString*)"), CString::p_Construct_Overload_CString);
	attemptFillPointer(TEXT("CString::Destruct"), CString::p_Destruct);
	attemptFillPointer(TEXT("CString::operator=(char*)"), CString::p_AssignmentOperator_Overload_String);
	attemptFillPointer(TEXT("CString::operator=(CString*)"), CString::p_AssignmentOperator_Overload_CString);
	attemptFillPointer(TEXT("CRes::Construct"), CRes::p_Construct);
	attemptFillPointer(TEXT("CRes::Destruct"), CRes::p_Destruct);
	attemptFillPointer(TEXT("CRes::Demand"), CRes::p_Demand);
	attemptFillPointer(TEXT("CResPVR::Demand"), CResPVR::p_Demand);
	attemptFillPointer(TEXT("CMessageHandler::AddMessage"), CMessageHandler::p_AddMessage);
	attemptFillPointer(TEXT("CAICondition::Hold"), CAICondition::p_Hold);
	attemptFillPointer(TEXT("CAICondition::TriggerHolds"), CAICondition::p_TriggerHolds);
	attemptFillPointer(TEXT("CImmunitiesAIType::OnList"), CImmunitiesAIType::p_OnList);
	attemptFillPointer(TEXT("CObList::Construct"), CObList::p_Construct);
	attemptFillPointer(TEXT("CObList::RemoveHead"), CObList::p_RemoveHead);
	attemptFillPointer(TEXT("CObList::RemoveAt"), CObList::p_RemoveAt);
	attemptFillPointer(TEXT("CObList::Destruct"), CObList::p_Destruct);
	attemptFillPointer(TEXT("CObList::AddTail"), CObList::p_AddTail);
	attemptFillPointer(TEXT("CObList::Find"), CObList::p_Find);
	attemptFillPointer(TEXT("CMessageUpdateReaction::VFTable"), CMessageUpdateReaction::VFTable);
	attemptFillPointer(TEXT("CMessageSetDirection::VFTable"), CMessageSetDirection::VFTable);
	attemptFillPointer(TEXT("CMessageDisplayTextRef::VFTable"), CMessageDisplayTextRef::VFTable);
	attemptFillPointer(TEXT("CMessageDisplayText::VFTable"), CMessageDisplayText::VFTable);
	attemptFillPointer(TEXT("CMessageAddEffect::VFTable"), CMessageAddEffect::VFTable);
	attemptFillPointer(TEXT("CContingencyList::ProcessTrigger"), CContingencyList::p_ProcessTrigger);
	attemptFillPointer(TEXT("CContingencyList::Process"), CContingencyList::p_Process);
	attemptFillPointer(TEXT("CAIGroup::FollowLeader"), CAIGroup::p_FollowLeader);
	attemptFillPointer(TEXT("CAIGroup::RemoveFromSearch"), CAIGroup::p_RemoveFromSearch);
	attemptFillPointer(TEXT("CAIGroup::AddToSearch"), CAIGroup::p_AddToSearch);
	attemptFillPointer(TEXT("CAIGroup::GetFacings"), CAIGroup::p_GetFacings);
	attemptFillPointer(TEXT("CAIGroup::GetOffsets"), CAIGroup::p_GetOffsets);
	attemptFillPointer(TEXT("CVariable::Construct"), CVariable::p_Construct);
	attemptFillPointer(TEXT("findMenu"), p_findMenu);
	attemptFillPointer(TEXT("saveMenuStack"), p_saveMenuStack);
	attemptFillPointer(TEXT("uiLoadMenu"), p_uiLoadMenu);
	attemptFillPointer(TEXT("bsearch"), p_bsearch);
	attemptFillPointer(TEXT("restoreMenuStack"), p_restoreMenuStack);
	attemptFillPointer(TEXT("CompareCResByTypeThenName"), p_CompareCResByTypeThenName);
	attemptFillPointer(TEXT("SDL_GetKeyFromName"), p_SDL_GetKeyFromName);
	attemptFillPointer(TEXT("rand"), p_rand);
	attemptFillPointer(TEXT("l_log_print"), p_l_log_print);
	attemptFillPointer(TEXT("panic"), p_panic);
	attemptFillPointer(TEXT("Chitin_GetSectionCallback"), p_Chitin_GetSectionCallback);
	attemptFillPointer(TEXT("OpenIniFile"), p_OpenIniFile);
	attemptFillPointer(TEXT("dimmGetResObject"), p_dimmGetResObject);
	attemptFillPointer(TEXT("DrawPushState"), p_DrawPushState);
	attemptFillPointer(TEXT("DrawBindTexture"), p_DrawBindTexture);
	attemptFillPointer(TEXT("DrawEnable"), p_DrawEnable);
	attemptFillPointer(TEXT("DrawBlendFunc"), p_DrawBlendFunc);
	attemptFillPointer(TEXT("DrawColor"), p_DrawColor);
	attemptFillPointer(TEXT("DrawAlpha"), p_DrawAlpha);
	attemptFillPointer(TEXT("DrawPopState"), p_DrawPopState);
	attemptFillPointer(TEXT("drawSlice"), p_drawSlice);
	attemptFillPointer(TEXT("drawSliceSide"), p_drawSliceSide);
	attemptFillPointer(TEXT("uiVariantAsInt"), p_uiVariantAsInt);
	attemptFillPointer(TEXT("uiDrawSlicedRect"), p_uiDrawSlicedRect);
	attemptFillPointer(TEXT("uiExecLuaInt"), p_uiExecLuaInt);
	attemptFillPointer(TEXT("SDL_GetWindowFromID"), p_SDL_GetWindowFromID);
	attemptFillPointer(TEXT("SDL_GetWindowFlags"), p_SDL_GetWindowFlags);
	attemptFillPointer(TEXT("afxPchNil"), p_afxPchNil);
	attemptFillPointer(TEXT("capture"), p_capture);
	attemptFillPointer(TEXT("g_keywords"), p_g_keywords);
	attemptFillPointer(TEXT("g_lua"), p_g_lua);
	attemptFillPointer(TEXT("g_pBaldurChitin"), p_g_pBaldurChitin);
	attemptFillPointer(TEXT("menuLength"), p_menuLength);
	attemptFillPointer(TEXT("menus"), p_menus);
	attemptFillPointer(TEXT("menuSrc"), p_menuSrc);
	attemptFillPointer(TEXT("menuStack"), p_menuStack);
	attemptFillPointer(TEXT("nextStackMenuIdx"), p_nextStackMenuIdx);
	attemptFillPointer(TEXT("numMenus"), p_numMenus);
	attemptFillPointer(TEXT("optionsHaveChanged"), p_optionsHaveChanged);
	attemptFillPointer(TEXT("resources"), p_resources);
	attemptFillPointer(TEXT("slicedRects"), p_slicedRects);
	attemptFillPointer(TEXT("yy_action"), p_yy_action);
	attemptFillPointer(TEXT("yy_default"), p_yy_default);
	attemptFillPointer(TEXT("yy_lookahead"), p_yy_lookahead);
	attemptFillPointer(TEXT("yy_reduce_ofst"), p_yy_reduce_ofst);
	attemptFillPointer(TEXT("yy_shift_ofst"), p_yy_shift_ofst);
	attemptFillPointer(TEXT("yyRuleInfo"), p_yyRuleInfo);
	attemptFillPointer(TEXT("CTlkTable::Fetch"), CTlkTable::p_Fetch);
	attemptFillPointer(TEXT("CAIScript::Construct(CResRef,int)"), CAIScript::p_Construct_Overload_Manual);
	attemptFillPointer(TEXT("CAIScript::Destruct"), CAIScript::p_Destruct);
	attemptFillPointer(TEXT("CAbilityId::Construct"), CAbilityId::p_Construct);
	attemptFillPointer(TEXT("CButtonData::Construct"), CButtonData::p_Construct);
	attemptFillPointer(TEXT("C2DArray::Construct"), C2DArray::p_Construct);
	attemptFillPointer(TEXT("C2DArray::Load"), C2DArray::p_Load);
	attemptFillPointer(TEXT("C2DArray::GetAtLabels"), C2DArray::p_GetAtLabels);
	attemptFillPointer(TEXT("C2DArray::Destruct"), C2DArray::p_Destruct);
	attemptFillPointer(TEXT("CAIIdList::Construct()"), CAIIdList::p_Construct_Overload_Default);
	attemptFillPointer(TEXT("CAIIdList::Destruct"), CAIIdList::p_Destruct);
	attemptFillPointer(TEXT("CAIIdList::LoadList(CResRef,int)"), CAIIdList::p_LoadList_Overload_Resref);
	attemptFillPointer(TEXT("CAIIdList::Find(int)"), CAIIdList::p_Find_Overload_ID);
	attemptFillPointer(TEXT("CRuleTables::MapCharacterSpecializationToSchool"), CRuleTables::p_MapCharacterSpecializationToSchool);
	attemptFillPointer(TEXT("CAIScriptFile::Construct"), CAIScriptFile::p_Construct);
	attemptFillPointer(TEXT("CAIScriptFile::Destruct"), CAIScriptFile::p_Destruct);
	attemptFillPointer(TEXT("CAIScriptFile::ParseConditionalString"), CAIScriptFile::p_ParseConditionalString);
	attemptFillPointer(TEXT("CAIScriptFile::ParseObjectType"), CAIScriptFile::p_ParseObjectType);
	attemptFillPointer(TEXT("CAIScriptFile::ParseResponseString"), CAIScriptFile::p_ParseResponseString);
	attemptFillPointer(TEXT("CSearchBitmap::GetCost"), CSearchBitmap::p_GetCost);
	attemptFillPointer(TEXT("CVidMode::SCREENWIDTH"), CVidMode::p_SCREENWIDTH);
	attemptFillPointer(TEXT("CVidMode::SCREENHEIGHT"), CVidMode::p_SCREENHEIGHT);
	attemptFillPointer(TEXT("CSpell::Construct"), CSpell::p_Construct);
	attemptFillPointer(TEXT("CSound::Construct"), CSound::p_Construct);
	attemptFillPointer(TEXT("CSound::Destruct"), CSound::p_Destruct);
	attemptFillPointer(TEXT("CScreenWorld::TogglePauseGame"), CScreenWorld::p_TogglePauseGame);
	attemptFillPointer(TEXT("CChitin::OnResizeWindow"), CChitin::p_OnResizeWindow);
	attemptFillPointer(TEXT("CChitin::TIMER_UPDATES_PER_SECOND"), CChitin::p_TIMER_UPDATES_PER_SECOND);
	attemptFillPointer(TEXT("CItem::Construct(CResRef,ushort,ushort,ushort,ushort,uint)"), CItem::p_Construct_Overload_Manual);
	attemptFillPointer(TEXT("CItem::GetAbility"), CItem::p_GetAbility);
	attemptFillPointer(TEXT("CInfButtonArray::SetState"), CInfButtonArray::p_SetState);
	attemptFillPointer(TEXT("CInfButtonArray::SetQuickSlot"), CInfButtonArray::p_SetQuickSlot);
	attemptFillPointer(TEXT("CInfGame::OnPortraitLDblClick"), CInfGame::p_OnPortraitLDblClick);
	attemptFillPointer(TEXT("CInfGame::SelectCharacter"), CInfGame::p_SelectCharacter);
	attemptFillPointer(TEXT("CInfGame::SelectToolbar"), CInfGame::p_SelectToolbar);
	attemptFillPointer(TEXT("CInfGame::SetState"), CInfGame::p_SetState);
	attemptFillPointer(TEXT("CInfGame::SetIconIndex"), CInfGame::p_SetIconIndex);
	attemptFillPointer(TEXT("CInfGame::UnselectAll"), CInfGame::p_UnselectAll);
	attemptFillPointer(TEXT("CInfGame::GetCharacterPortraitNum"), CInfGame::p_GetCharacterPortraitNum);
	attemptFillPointer(TEXT("CGameEffect::DecodeEffect"), CGameEffect::p_DecodeEffect);
	attemptFillPointer(TEXT("CDerivedStats::Construct"), CDerivedStats::p_Construct);
	attemptFillPointer(TEXT("CDerivedStats::Destruct"), CDerivedStats::p_Destruct);
	attemptFillPointer(TEXT("CDerivedStats::GetAtOffset"), CDerivedStats::p_GetAtOffset);
	attemptFillPointer(TEXT("CDerivedStats::GetSpellState"), CDerivedStats::p_GetSpellState);
	attemptFillPointer(TEXT("CDerivedStats::GetWizardLevelCast"), CDerivedStats::p_GetWizardLevelCast);
	attemptFillPointer(TEXT("CDerivedStats::GetPriestLevelCast"), CDerivedStats::p_GetPriestLevelCast);
	attemptFillPointer(TEXT("CDerivedStats::GetAverageLevel"), CDerivedStats::p_GetAverageLevel);
	attemptFillPointer(TEXT("CGameArea::GetNearest(CPoint,CAIObjectType*,short,byte*,int,int,byte)"), CGameArea::p_GetNearest_Overload_Point);
	attemptFillPointer(TEXT("CGameArea::AdjustTarget"), CGameArea::p_AdjustTarget);
	attemptFillPointer(TEXT("CGameArea::CheckWalkable"), CGameArea::p_CheckWalkable);
	attemptFillPointer(TEXT("CGameArea::CheckLOS"), CGameArea::p_CheckLOS);
	attemptFillPointer(TEXT("CGameArea::GetAllInRange(CPoint*,CAIObjectType*,short,byte*,CTypedPtrList<CPtrList,long>*,int,int)"), CGameArea::p_GetAllInRange_Overload_Point);
	attemptFillPointer(TEXT("CGameArea::GetAllInRange(__POSITION*,CPoint*,CAIObjectType*,short,byte*,CTypedPtrList<CPtrList,long>*,int,int)"), CGameArea::p_GetAllInRange_Overload_VertListPos);
	attemptFillPointer(TEXT("CGameArea::ApplyEffect"), CGameArea::p_ApplyEffect);
	attemptFillPointer(TEXT("CGameArea::OnActionButtonClickGround"), CGameArea::p_OnActionButtonClickGround);
	attemptFillPointer(TEXT("CAIObjectType::Construct(byte,byte,byte,byte,byte,byte,byte,int)"), CAIObjectType::p_Construct_Overload_Manual);
	attemptFillPointer(TEXT("CAIObjectType::Decode"), CAIObjectType::p_Decode);
	attemptFillPointer(TEXT("CAIObjectType::GetShare"), CAIObjectType::p_GetShare);
	attemptFillPointer(TEXT("CAIObjectType::GetShareType"), CAIObjectType::p_GetShareType);
	attemptFillPointer(TEXT("CAIObjectType::OfType"), CAIObjectType::p_OfType);
	attemptFillPointer(TEXT("CAIObjectType::Set"), CAIObjectType::p_Set);
	attemptFillPointer(TEXT("CAIObjectType::operator=="), CAIObjectType::p_operator_equ_equ);
	attemptFillPointer(TEXT("CAIObjectType::NOONE"), CAIObjectType::p_NOONE);
	attemptFillPointer(TEXT("CAIAction::Construct(short,CPoint*,int,int)"), CAIAction::p_Construct_Overload_ActionID_DestPoint_SpecificID_SpecificID2);
	attemptFillPointer(TEXT("CAIAction::Construct(CAIAction*)"), CAIAction::p_Construct_Overload_Copy);
	attemptFillPointer(TEXT("CAIAction::Destruct"), CAIAction::p_Destruct);
	attemptFillPointer(TEXT("CAIAction::operator="), CAIAction::p_AssignmentOperator);
	attemptFillPointer(TEXT("CAIAction::Decode"), CAIAction::p_Decode);
	attemptFillPointer(TEXT("CGameObject::InControl"), CGameObject::p_InControl);
	attemptFillPointer(TEXT("CGameObject::DEFAULT_VISIBLE_TERRAIN_TABLE"), CGameObject::p_DEFAULT_VISIBLE_TERRAIN_TABLE);
	attemptFillPointer(TEXT("CGameObject::DEFAULT_TERRAIN_TABLE"), CGameObject::p_DEFAULT_TERRAIN_TABLE);
	attemptFillPointer(TEXT("CProjectile::AddEffect"), CProjectile::p_AddEffect);
	attemptFillPointer(TEXT("CProjectile::ClearEffects"), CProjectile::p_ClearEffects);
	attemptFillPointer(TEXT("CAITrigger::OfType"), CAITrigger::p_OfType);
	attemptFillPointer(TEXT("CAITrigger::Construct(CAITrigger*)"), CAITrigger::p_Construct_Overload_Copy);
	attemptFillPointer(TEXT("CGameAIBase::ApplyEffectToParty"), CGameAIBase::p_ApplyEffectToParty);
	attemptFillPointer(TEXT("CGameAIBase::ForceSpell"), CGameAIBase::p_ForceSpell);
	attemptFillPointer(TEXT("CGameAIBase::ForceSpellPoint"), CGameAIBase::p_ForceSpellPoint);
	attemptFillPointer(TEXT("CGameAIBase::GetTargetShare"), CGameAIBase::p_GetTargetShare);
	attemptFillPointer(TEXT("CGameAIBase::GetTargetShareType(CAIObjectType*,byte)"), CGameAIBase::p_GetTargetShareType_Overload_AIType_ObjectType);
	attemptFillPointer(TEXT("CGameAIBase::GetTargetShareType(byte)"), CGameAIBase::p_GetTargetShareType_Overload_ObjectType);
	attemptFillPointer(TEXT("CGameTrigger::SetDrawPoly"), CGameTrigger::p_SetDrawPoly);
	attemptFillPointer(TEXT("CGameSprite::CheckQuickLists"), CGameSprite::p_CheckQuickLists);
	attemptFillPointer(TEXT("CGameSprite::Damage"), CGameSprite::p_Damage);
	attemptFillPointer(TEXT("CGameSprite::FeedBack"), CGameSprite::p_FeedBack);
	attemptFillPointer(TEXT("CGameSprite::GetActiveStats"), CGameSprite::p_GetActiveStats);
	attemptFillPointer(TEXT("CGameSprite::GetCasterLevel"), CGameSprite::p_GetCasterLevel);
	attemptFillPointer(TEXT("CGameSprite::GetInternalButtonList"), CGameSprite::p_GetInternalButtonList);
	attemptFillPointer(TEXT("CGameSprite::GetKitMask"), CGameSprite::p_GetKitMask);
	attemptFillPointer(TEXT("CGameSprite::GetKnownSpellInnate"), CGameSprite::p_GetKnownSpellInnate);
	attemptFillPointer(TEXT("CGameSprite::GetKnownSpellMage"), CGameSprite::p_GetKnownSpellMage);
	attemptFillPointer(TEXT("CGameSprite::GetKnownSpellPriest"), CGameSprite::p_GetKnownSpellPriest);
	attemptFillPointer(TEXT("CGameSprite::GetLauncher"), CGameSprite::p_GetLauncher);
	attemptFillPointer(TEXT("CGameSprite::GetLauncherSlot"), CGameSprite::p_GetLauncherSlot);
	attemptFillPointer(TEXT("CGameSprite::GetName"), CGameSprite::p_GetName);
	attemptFillPointer(TEXT("CGameSprite::GetNameRef"), CGameSprite::p_GetNameRef);
	attemptFillPointer(TEXT("CGameSprite::GetQuickButtons"), CGameSprite::p_GetQuickButtons);
	attemptFillPointer(TEXT("CGameSprite::PlaySound"), CGameSprite::p_PlaySound);
	attemptFillPointer(TEXT("CGameSprite::ReadyOffInternalList"), CGameSprite::p_ReadyOffInternalList);
	attemptFillPointer(TEXT("CGameSprite::ReadySpell"), CGameSprite::p_ReadySpell);
	attemptFillPointer(TEXT("CGameSprite::SpellPoint"), CGameSprite::p_SpellPoint);
	attemptFillPointer(TEXT("CGameSprite::UpdateTarget"), CGameSprite::p_UpdateTarget);
	attemptFillPointer(TEXT("CGameDoor::SetDrawPoly"), CGameDoor::p_SetDrawPoly);
	attemptFillPointer(TEXT("CGameContainer::SetDrawPoly"), CGameContainer::p_SetDrawPoly);
}
