
#pragma once

#include <queue>
#include <vector>

#include "InfinityLoaderCommon.h"
#include "to_lua_pointers.h"

typedef unsigned short ushort;
typedef unsigned int uint;

template<typename A>
struct W
{

private:

	union {
		A val;
	};

public:

	A* operator->() {
		return &val;
	}

	A& operator*() {
		return val;
	}

	template<typename... Args>
	W(Args&&... args) {
		val.Construct(std::forward<Args>(args)...);
	}

	~W() {
		val.Destruct();
	}
};

