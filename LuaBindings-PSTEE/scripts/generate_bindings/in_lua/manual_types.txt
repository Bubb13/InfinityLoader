
//////////////////////////////////////////////////////////////////////////
// Custom Binding Types                                                 //
// (These have hardcoded uses and MUST be the first thing in this file) //
//////////////////////////////////////////////////////////////////////////

template<class T>
struct VariableArray
{
	nobinding T data;

	T get(size_t index)
	{
		return (&data)[index];
	}

	T* getReference(size_t index)
	{
		return &(&data)[index];
	}

	void set(size_t index, noconst T value)
	{
		(&data)[index] = value;
	}
};

/////////////////////////////////////////////
// Manual Engine Template Type Definitions //
/////////////////////////////////////////////

template<class BASE_CLASS, class RESULT_CLASS>
struct CCallResult : CCallbackBase
{
	unsigned __int64 m_hAPICall;
	BASE_CLASS* m_pObj;
	void(__thiscall* m_Func)(BASE_CLASS*, RESULT_CLASS*, bool);
};

struct CList::CNode
{
	CList::CNode* pNext;
	CList::CNode* pPrev;
	TYPE data;
};

template<class TYPE, class ARG_TYPE>
struct CList : CObject
{
	CList::CNode* m_pNodeHead;
	CList::CNode* m_pNodeTail;
	int m_nCount;
	CList::CNode* m_pNodeFree;
	void* m_pBlocks;
	int m_nBlockSize;
};

template<class TYPE, class ARG_TYPE>
struct CArray : CObject
{
	TYPE* m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

template<class RES_CLASS, int RES_ID>
struct CResHelper
{
	RES_CLASS* pRes;
	CResRef cResRef;
};

template<class BASE_CLASS, class T>
struct CTypedPtrArray : CObject
{
	VariableArray<T>* m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

struct CTypedPtrList::CNode
{
	CTypedPtrList::CNode* pNext;
	CTypedPtrList::CNode* pPrev;
	T data;
};

template<class BASE_CLASS, class T>
struct CTypedPtrList : CObject
{
	CTypedPtrList::CNode* m_pNodeHead;
	CTypedPtrList::CNode* m_pNodeTail;
	int m_nCount;
	CTypedPtrList::CNode* m_pNodeFree;
	void* m_pBlocks;
	int m_nBlockSize;
};
