/*
	 This file has been generated by IDA.
	 It contains local type definitions from
	 the type library 'Baldur'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct IUnknownVtbl;
struct tagVARIANT;
struct IRecordInfo;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct talk_base::MessageHandler;
struct talk_base::MessageHandlerVtbl;
struct talk_base::MessageData;
struct talk_base::MessageDataVtbl;
struct std::_List_node<talk_base::Message,void *>;
struct talk_base::MessageQueueVtbl;
struct sigslot::has_slots_interface;
struct sigslot::has_slots_interfaceVtbl;
struct sigslot::_signal_base_interfaceVtbl;
struct sigslot::single_threadedVtbl;
struct std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base0<sigslot::single_threaded>;
struct sigslot::_connection_base0<sigslot::single_threaded>Vtbl;
struct talk_base::Socket;
struct talk_base::SocketAddress;
struct talk_base::SocketVtbl;
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>;
struct talk_base::AsyncSocket;
struct sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>;
struct sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>Vtbl;
struct talk_base::SocketFactoryVtbl;
struct talk_base::SocketServer;
struct talk_base::DelayedMessage;
struct talk_base::Thread;
struct talk_base::_SendMessage;
struct std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>;
struct talk_base::StreamInterface;
struct sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>Vtbl;
struct std::pair<talk_base::StreamInterface *,int>;
struct std::fpos<int>;
struct std::_Facet_baseVtbl;
struct std::locale::_Locimp;
struct std::locale;
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl;
struct std::exceptionVtbl;
struct std::_Container_base12;
struct std::_Iterator_base12;
struct std::ios_baseVtbl;
struct std::ios_base::_Iosarray;
struct std::ios_base::_Fnarray;
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl;
struct sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded>;
struct std::_Tree_node<sigslot::_signal_base_interface *,void *>;
struct std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>;
struct talk_base::SignalThread;
struct sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>Vtbl;
struct talk_base::AsyncResolver;
struct sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded>Vtbl;
struct std::error_condition;
struct std::error_code;
struct std::error_categoryVtbl;
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl;
struct type_infoVtbl;
struct tagPROPVARIANT;
struct sigslot::multi_threaded_globalVtbl;
struct sigslot::multi_threaded_localVtbl;
struct talk_base::RunnableVtbl;
struct std::vector<unsigned char,std::allocator<unsigned char> >;
struct talk_base::CryptStringImplVtbl;
struct sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>;
struct talk_base::AsyncPacketSocket;
struct sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>;
struct sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>;
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>;
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>;
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>Vtbl;
struct talk_base::RandomGeneratorVtbl;
struct talk_base::MessageDigestVtbl;
struct talk_base::TaskParentVtbl;
struct talk_base::Task;
struct talk_base::TaskRunner;
struct std::_Tree_node<talk_base::Task *,void *>;
struct std::set<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *> >;
struct buzz::XmlAttr;
struct buzz::XmlElement;
struct buzz::XmlText;
struct buzz::XmlChildVtbl;
struct buzz::XmppOutputHandlerVtbl;
struct buzz::Jid;
struct buzz::XmppStanzaHandlerVtbl;
struct buzz::XmppTask;
struct buzz::XmppClientInterfaceVtbl;
struct sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded>;
struct cricket::Transport;
struct sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>;
struct cricket::Candidate;
struct sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>;
struct sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>;
struct sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>Vtbl;
struct std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *>;
struct std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>;
struct cricket::PortAllocatorSessionMuxer;
struct sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>Vtbl;
struct cricket::PortInterface;
struct talk_base::Network;
struct std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>;
struct cricket::Connection;
struct sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>;
struct sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>;
struct cricket::Port;
struct sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded>;
struct sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded>Vtbl;
struct talk_base::PacketSocketFactory;
struct talk_base::PacketSocketFactoryVtbl;
struct std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *>;
struct std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>;
struct cricket::StunMessage;
struct cricket::StunMessageVtbl;
struct cricket::StunAttribute;
struct talk_base::ByteBuffer;
struct cricket::StunAttributeVtbl;
struct std::vector<cricket::StunAttribute *,std::allocator<cricket::StunAttribute *> >;
struct cricket::StunRequest;
struct sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>Vtbl;
struct std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *>;
struct talk_base::RateTrackerVtbl;
struct cricket::PortInterfaceVtbl;
struct std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>;
struct cricket::IceMessage;
struct sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>;
struct sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>;
struct sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>;
struct cricket::PortAllocatorSession;
struct sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>;
struct sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>Vtbl;
struct std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *>;
struct cricket::PortProxy;
struct cricket::PortAllocatorSessionProxy;
struct cricket::PortAllocator;
struct talk_base::SSLFingerprint;
struct cricket::TransportDescription;
struct std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *>;
struct std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>;
struct sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>;
struct sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>;
struct cricket::TransportChannelImpl;
struct sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>Vtbl;
struct buzz::SaslMechanism;
struct buzz::SaslMechanismVtbl;
struct buzz::SaslHandlerVtbl;
struct std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *>;
struct buzz::IqTask;
struct sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl;
struct XmppPumpNotifyVtbl;
struct cricket::ContentDescriptionVtbl;
struct cricket::WriteError;
struct cricket::ContentParserVtbl;
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>;
struct cricket::BaseSession;
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded>;
struct cricket::ContentInfo;
struct sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded>Vtbl;
struct talk_base::SSLIdentity;
struct talk_base::SSLCertificate;
struct talk_base::SSLCertificateVtbl;
struct talk_base::SSLIdentityVtbl;
struct cricket::TransportInfo;
struct cricket::ContentGroup;
struct cricket::SessionDescription;
struct std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *>;
struct cricket::CandidateTranslatorVtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>;
struct cricket::TransportProxy;
struct sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl;
struct talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> >;
struct talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> >Vtbl;
struct std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *>;
struct std::pair<enum talk_base::Socket::Option,int>;
struct cricket::TransportChannelProxy;
struct sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded>;
struct cricket::Session;
struct sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>;
struct sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded>;
struct sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded>Vtbl;
struct std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>;
struct cricket::SessionManager;
struct sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl;
struct std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *>;
struct std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *>;
struct cricket::TransportParser;
struct cricket::TransportParserVtbl;
struct ATTRIBUTE;
struct position;
struct _com_errorVtbl;
struct XML_Encoding;
struct XML_cp;
struct open_internal_entity;
struct ENTITY;
struct prefix;
struct binding;
struct attribute_id;
struct DEFAULT_ATTRIBUTE;
struct ELEMENT_TYPE;
struct NAMED;
struct block;
struct CONTENT_SCAFFOLD;
struct DTD;
struct tag;
struct NS_ATT;
struct XML_ParsingStatus;
struct buzz::XmlParseContext;
struct buzz::XmlParseContextVtbl;
struct buzz::XmlParseHandlerVtbl;
struct buzz::XmlParser;
struct buzz::XmlParserVtbl;
struct _IP_ADAPTER_UNICAST_ADDRESS_LH;
struct _IP_ADAPTER_ANYCAST_ADDRESS_XP;
struct _IP_ADAPTER_MULTICAST_ADDRESS_XP;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS_XP;
struct _IP_ADAPTER_PREFIX_XP;
struct _IP_ADAPTER_WINS_SERVER_ADDRESS_LH;
struct _IP_ADAPTER_GATEWAY_ADDRESS_LH;
struct _IP_ADAPTER_DNS_SUFFIX;
struct talk_base::NetworkManagerVtbl;
struct cricket::ConnectionInfo;
struct cricket::TransportChannelStats;
struct talk_base::RefCountInterfaceVtbl;
struct sigslot::_connection_base2<char const *,int,sigslot::single_threaded>;
struct sigslot::_connection_base2<char const *,int,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded>;
struct sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>;
struct sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>Vtbl;
struct buzz::XmppIqHandlerVtbl;
struct buzz::AsyncSocketVtbl;
struct buzz::XmppSessionHandlerVtbl;
struct buzz::XmppEngineVtbl;
struct buzz::PreXmppAuth;
struct buzz::XmppClient::Private;
struct sigslot::_connection_base1<int,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>;
struct buzz::MucRoomsLookupTask;
struct buzz::MucRoomsInfo;
struct sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>;
struct buzz::MucRoomConfigTask;
struct sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>;
struct buzz::MucRoomDiscoveryTask;
struct std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>;
struct std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >;
struct sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded>;
struct sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded>;
struct sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded>;
struct sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>;
struct sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>Vtbl;
struct cricket::TCPPort::Incoming;
struct sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded>;
struct cricket::AllocationSequence;
struct sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded>Vtbl;
struct cricket::BasicPortAllocator;
struct cricket::BasicPortAllocatorSession::PortData;
struct cricket::BasicPortAllocatorSession;
struct sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded>;
struct cricket::TurnPort;
struct sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded>Vtbl;
struct std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *>;
struct std::_List_node<cricket::TurnEntry *,void *>;
struct std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>;
struct cricket::TurnEntry;
struct sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded>;
struct sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded>Vtbl;
struct cricket::RelayConnection;
struct cricket::RelayEntry;
struct cricket::TunnelSessionClientBase;
struct cricket::PseudoTcp;
struct cricket::PseudoTcpVtbl;
struct std::_List_node<cricket::PseudoTcp::RSegment,void *>;
struct cricket::PseudoTcp::RSegment;
struct std::_List_node<cricket::PseudoTcp::SSegment,void *>;
struct cricket::PseudoTcp::SSegment;
struct cricket::IPseudoTcpNotifyVtbl;
struct std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>;
struct cricket::PseudoTcpChannel;
struct sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>Vtbl;
struct cricket::PseudoTcpChannel::InternalStream;
struct sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>;
struct cricket::TunnelSessionClient;
struct sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>Vtbl;
struct talk_base::AsyncFile;
struct talk_base::AsyncFileVtbl;
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *>;
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *>;
struct sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded>;
struct sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded>Vtbl;
struct talk_base::DispatcherVtbl;
struct talk_base::Signaler;
struct buzz::XmppStanzaParseHandlerVtbl;
struct buzz::XmppStanzaParser;
struct buzz::XmppEngineImpl;
struct buzz::XmppLoginTask;
struct sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>;
struct talk_base::AsyncProxyServerSocket;
struct sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl;
struct talk_base::HttpAuthContextVtbl;
struct talk_base::HttpDataVtbl;
union GCObject;
struct Node;
struct Table;
struct UpVal;
struct lua_State;
struct global_State;
struct CallInfo;
struct lua_Debug;
struct lua_longjmp;
struct Proto;
struct LocVar;
struct Upvaldesc;
struct LexState;
struct BlockCnt;
struct expdesc;
struct CRes;
struct CResRef;
struct CResVtbl;
struct CObjectVtbl;
struct CWarp;
struct CObList::CNode;
struct CPlex;
struct CChitinVtbl;
struct CPtrList::CNode;
struct CSoundMixerImp;
struct CSoundMixer;
struct SDL_Palette;
struct SDL_PixelFormat;
struct SDL_Surface;
struct SDL_BlitMap;
struct SDL_Window;
struct SDL_WindowShaper;
struct SDL_Point;
struct SDL_WindowUserData;
struct tagRGBQUAD;
struct tagBITMAPFILEHEADER;
struct tagBITMAPINFOHEADER;
struct CResBitmap;
struct bamHeader_st;
struct BAMHEADERV2;
struct MOSAICQUAD;
struct frameTableEntry_st;
struct sequenceTableEntry_st;
struct CResCell;
struct CVidCell;
struct CVIDPOLY_VERTEX;
struct _EdgeDescription;
struct CVidPoly;
struct CVidCellVtbl;
struct SDL_Cursor;
struct CVidMode;
struct DP_Packet;
struct IDPPeer;
struct IDPPeerVtbl;
struct DP_Player;
struct IDPProvider;
struct DP_Event;
struct IDPProviderVtbl;
struct CCallbackBaseVtbl;
struct CSteam;
struct CreateItemResult_t;
struct SteamUGCQueryCompleted_t;
struct SubmitItemUpdateResult_t;
struct SteamUGCRequestUGCDetailsResult_t;
struct ISteamRemoteStorage;
struct SteamParamStringArray_t;
struct ISteamRemoteStorageVtbl;
struct ISteamUGC;
struct ISteamUGCVtbl;
struct ISteamUserStats;
struct LeaderboardEntry_t;
struct ISteamUserStatsVtbl;
struct CSoundImp;
struct CAIIdListVtbl;
struct CAIId;
struct CResInfTile;
struct CInfTileSet;
struct st_tiledef;
struct CGameArea;
struct __POSITION;
struct CAITrigger;
struct CGameObjectVtbl;
struct CList<long,long>::CNode;
struct CObjectMarker;
struct CVisibilityMapTreeNode;
struct CVisibilityMapEllipse;
struct CVariable;
struct CMemINISection;
struct CSpawnVar;
struct CSpawnList;
struct CSpawnFile;
struct CPathNode;
struct CPathSearch;
struct Item_ability_st;
struct Item_effect_st;
struct Item_Header_st;
struct CResItem;
struct CItem;
struct CItemVtbl;
struct CWorldMapData;
struct CWorldMapArea;
struct CWorldMapLinks;
struct CAIScript;
struct CAIResponseSet;
struct CAICondition;
struct CAIResponse;
struct CAIScriptFile;
struct CStoreFileDrinks;
struct CStoreFileSpell;
struct CStore;
struct CVVCHashEntry;
struct CSpawnVtbl;
struct CSpawnPointVtbl;
struct CSpawnPointVar;
struct CGameSprite;
struct CGameAnimationType;
struct CGameAnimationTypeVtbl;
struct CSearchRequest;
struct CProjectile;
struct Spell_ability_st;
struct Spell_Header_st;
struct CResSpell;
struct CSpell;
struct CGameButtonList;
struct CGameEffectVtbl;
struct CMessageVtbl;
struct CMemINIValueVtbl;
struct CPersistantEffectVtbl;
struct CMemINIFileVtbl;
struct ISteamHTMLSurfaceVtbl;
struct uiVariant;
struct uiItem;
struct uiColumn;
struct _s__RTTIBaseClassDescriptor2;
struct _s__RTTIBaseClassArray;
struct ISteamUserVtbl;
struct P2PSessionState_t;
struct ISteamNetworkingVtbl;
struct ISteamAppListVtbl;
struct ISteamMusicRemoteVtbl;
struct DIDEVCAPS;
struct DIDEVICEOBJECTINSTANCEW;
struct DIPROPHEADER;
struct DIDEVICEOBJECTDATA;
struct _DIOBJECTDATAFORMAT;
struct _DIDATAFORMAT;
struct DIDEVICEINSTANCEW;
struct DIENVELOPE;
struct DIEFFECT;
struct IDirectInputEffect;
struct DIEFFESCAPE;
struct IDirectInputEffectVtbl;
struct DIEFFECTINFOW;
struct DIFILEEFFECT;
struct _DIACTIONW;
struct _DIACTIONFORMATW;
struct _DIDEVICEIMAGEINFOW;
struct _DIDEVICEIMAGEINFOHEADERW;
struct IDirectInputDevice8WVtbl;
struct ISteamFriends;
struct ISteamFriendsVtbl;
struct ISteamUtils;
struct ISteamUtilsVtbl;
struct ISteamMatchmaking;
struct ISteamMatchmakingVtbl;
struct ISteamMatchmakingServerListResponse;
struct ISteamMatchmakingServerListResponseVtbl;
struct ISteamMatchmakingServers;
struct ISteamMatchmakingPingResponse;
struct ISteamMatchmakingPingResponseVtbl;
struct ISteamMatchmakingPlayersResponse;
struct ISteamMatchmakingPlayersResponseVtbl;
struct ISteamMatchmakingRulesResponse;
struct ISteamMatchmakingRulesResponseVtbl;
struct ISteamMatchmakingServersVtbl;
struct ISteamApps;
struct ISteamAppsVtbl;
struct ISteamScreenshots;
struct ISteamScreenshotsVtbl;
struct ISteamHTTP;
struct ISteamHTTPVtbl;
struct ISteamUnifiedMessages;
struct ISteamUnifiedMessagesVtbl;
struct ISteamController;
struct SteamControllerState_t;
struct ISteamControllerVtbl;
struct ISteamMusic;
struct ISteamMusicVtbl;
struct ISteamClientVtbl;
struct IRunningObjectTable;
struct IMoniker;
struct IEnumMoniker;
struct IEnumMonikerVtbl;
struct IMonikerVtbl;
struct IRunningObjectTableVtbl;
struct IEnumString;
struct IEnumStringVtbl;
struct IBindCtxVtbl;
struct _DEVICE_OBJECT;
struct _DRIVER_OBJECT;
struct _DRIVER_EXTENSION;
struct _FILE_OBJECT;
struct _FILE_BASIC_INFORMATION;
struct _FILE_STANDARD_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _KSEMAPHORE;
struct _ERESOURCE;
struct _MDL;
struct _IRP;
struct _ACCESS_STATE;
struct _IO_SECURITY_CONTEXT;
struct _VPB;
struct _INTERFACE;
struct _DEVICE_CAPABILITIES;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _POWER_SEQUENCE;
struct _CM_RESOURCE_LIST;
struct _IO_STACK_LOCATION;
struct _FAST_IO_DISPATCH;
struct _KDPC;
struct _DEVOBJ_EXTENSION;
struct _SECTION_OBJECT_POINTERS;
struct _IO_COMPLETION_CONTEXT;
struct _LOOKASIDE_LIST_EX;
struct _NET_BUFFER_LIST;
struct _NET_BUFFER;
struct _NET_BUFFER_SHARED_MEMORY;
struct _SCATTER_GATHER_LIST;
struct _NET_BUFFER_LIST_CONTEXT;
struct yfSectionSizeManagerVtbl;
struct z_gz_header_s;
struct static_tree_desc_s;
struct z_internal_state;
struct pool_ctx;
struct list_node;
struct ebml_element_desc;
struct ebml_list_node;
struct ID3DXIncludeVtbl;
struct _ENetChannel;
struct _ENetPeer;
struct DPProviderJingle;
struct std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *>;
struct std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *>;
struct sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded>;
struct cricket::SessionSendTask;
struct sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded>;
struct sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded>Vtbl;
struct sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded>;
struct buzz::MucRoomLookupTask;
struct buzz::MucRoomInfo;
struct sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded>Vtbl;
struct SDL_VideoDisplay;
struct SDL_GLDriverData;
struct SDL_EGL_VideoData;
struct _DICONFIGUREDEVICESPARAMSW;
struct IDirectInput8WVtbl;
struct tWAVEFORMATEX;
struct _DSBUFFERDESC;
struct IDirectSoundBuffer;
struct _DSBCAPS;
struct IDirectSoundBufferVtbl;
struct _DSCAPS;
struct IDirectSoundVtbl;
struct SDL_Texture;
struct SDL_SW_YUVTexture;
struct SDL_FPoint;
struct SDL_FRect;
struct SDL_ShapeTree;
struct IAdviseSinkVtbl;
struct IEnumFORMATETCVtbl;
struct IEnumSTATDATAVtbl;
struct IDataObjectVtbl;
struct TF_HALTCOND;
struct ITfContext;
struct ITfEditSession;
struct ITfEditSessionVtbl;
struct TF_SELECTION;
struct ITfContextView;
struct ITfContextViewVtbl;
struct IEnumTfContextViews;
struct IEnumTfContextViewsVtbl;
struct TS_STATUS;
struct ITfProperty;
struct IEnumTfRanges;
struct IEnumTfRangesVtbl;
struct ITfPropertyStore;
struct ITfPropertyStoreVtbl;
struct ITfPropertyVtbl;
struct ITfReadOnlyProperty;
struct ITfReadOnlyPropertyVtbl;
struct IEnumTfProperties;
struct IEnumTfPropertiesVtbl;
struct ITfDocumentMgr;
struct IEnumTfContexts;
struct IEnumTfContextsVtbl;
struct ITfDocumentMgrVtbl;
struct ITfRangeBackup;
struct ITfRangeBackupVtbl;
struct ITfContextVtbl;
struct ITfRangeVtbl;
struct IEnumGUIDVtbl;
struct ITfCompartmentVtbl;
struct IEnumTfDocumentMgrsVtbl;
struct ITfThreadMgr;
struct ITfFunctionProvider;
struct ITfFunctionProviderVtbl;
struct IEnumTfFunctionProviders;
struct IEnumTfFunctionProvidersVtbl;
struct ITfCompartmentMgr;
struct ITfCompartmentMgrVtbl;
struct ITfThreadMgrEx;
struct ITfUIElement;
struct ITfUIElementVtbl;
struct IEnumTfUIElements;
struct IEnumTfUIElementsVtbl;
struct ITfUIElementMgrVtbl;
struct ITfCandidateListUIElementVtbl;
struct ITfReadingInformationUIElement;
struct ITfSource;
struct ITfUIElementSinkVtbl;
struct ITfInputProcessorProfileActivationSink;
struct IDXGIOutput;
struct DXGI_OUTPUT_DESC;
struct DXGI_MODE_DESC;
struct DXGI_GAMMA_CONTROL_CAPABILITIES;
struct DXGI_FRAME_STATISTICS;
struct IDXGIOutputVtbl;
struct IDXGIAdapterVtbl;
struct IDXGISwapChainVtbl;
struct IDXGIFactory;
struct DNameNodeVtbl;
struct std::_Node_baseVtbl;
struct std::_Node_end_rep;
struct XAUDIO2_FILTER_PARAMETERS;
struct IXAudio2VoiceVtbl;
struct IXAudio2EngineCallbackVtbl;
struct IXAudio2VoiceCallbackVtbl;

/* 1 */
enum DISPLAYCONFIG_SCANLINE_ORDERING
{
	DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
	DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
	DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 2 */
enum _tagINTERNETFEATURELIST
{
	FEATURE_OBJECT_CACHING = 0x0,
	FEATURE_ZONE_ELEVATION = 0x1,
	FEATURE_MIME_HANDLING = 0x2,
	FEATURE_MIME_SNIFFING = 0x3,
	FEATURE_WINDOW_RESTRICTIONS = 0x4,
	FEATURE_WEBOC_POPUPMANAGEMENT = 0x5,
	FEATURE_BEHAVIORS = 0x6,
	FEATURE_DISABLE_MK_PROTOCOL = 0x7,
	FEATURE_LOCALMACHINE_LOCKDOWN = 0x8,
	FEATURE_SECURITYBAND = 0x9,
	FEATURE_RESTRICT_ACTIVEXINSTALL = 0xA,
	FEATURE_VALIDATE_NAVIGATE_URL = 0xB,
	FEATURE_RESTRICT_FILEDOWNLOAD = 0xC,
	FEATURE_ADDON_MANAGEMENT = 0xD,
	FEATURE_PROTOCOL_LOCKDOWN = 0xE,
	FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xF,
	FEATURE_SAFE_BINDTOOBJECT = 0x10,
	FEATURE_UNC_SAVEDFILECHECK = 0x11,
	FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
	FEATURE_TABBED_BROWSING = 0x13,
	FEATURE_SSLUX = 0x14,
	FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
	FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
	FEATURE_FORCE_ADDR_AND_STATUS = 0x17,
	FEATURE_XMLHTTP = 0x18,
	FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
	FEATURE_FEEDS = 0x1A,
	FEATURE_BLOCK_INPUT_PROMPTS = 0x1B,
	FEATURE_ENTRY_COUNT = 0x1C,
};

/* 3 */
enum talk_base::LogErrorContext
{
	ERRCTX_NONE = 0x0,
	ERRCTX_ERRNO = 0x1,
	ERRCTX_HRESULT = 0x2,
	ERRCTX_OSSTATUS = 0x3,
	ERRCTX_EN = 0x1,
	ERRCTX_HR = 0x2,
	ERRCTX_OS = 0x3,
};

/* 4 */
enum talk_base::WindowsMajorVersions
{
	kWindows2000 = 0x5,
	kWindowsVista = 0x6,
};

/* 5 */
enum talk_base::LoggingSeverity
{
	LS_SENSITIVE = 0x0,
	LS_VERBOSE = 0x1,
	LS_INFO = 0x2,
	LS_WARNING = 0x3,
	LS_ERROR = 0x4,
	INFO = 0x2,
	WARNING = 0x3,
	LERROR = 0x4,
};

/* 6 */
enum __MIDL_IUri_0002
{
	Uri_HOST_UNKNOWN = 0x0,
	Uri_HOST_DNS = 0x1,
	Uri_HOST_IPV4 = 0x2,
	Uri_HOST_IPV6 = 0x3,
	Uri_HOST_IDN = 0x4,
};

/* 7 */
enum std::float_round_style
{
	round_indeterminate = 0xFFFFFFFF,
	round_toward_zero = 0x0,
	round_to_nearest = 0x1,
	round_toward_infinity = 0x2,
	round_toward_neg_infinity = 0x3,
};

/* 8 */
enum std::float_denorm_style
{
	denorm_indeterminate = 0xFFFFFFFF,
	denorm_absent = 0x0,
	denorm_present = 0x1,
};

/* 9 */
enum std::memory_order
{
	memory_order_relaxed = 0x0,
	memory_order_consume = 0x1,
	memory_order_acquire = 0x2,
	memory_order_release = 0x3,
	memory_order_acq_rel = 0x4,
	memory_order_seq_cst = 0x5,
};

/* 10 */
enum __MIDL_IUri_0001
{
	Uri_PROPERTY_ABSOLUTE_URI = 0x0,
	Uri_PROPERTY_STRING_START = 0x0,
	Uri_PROPERTY_AUTHORITY = 0x1,
	Uri_PROPERTY_DISPLAY_URI = 0x2,
	Uri_PROPERTY_DOMAIN = 0x3,
	Uri_PROPERTY_EXTENSION = 0x4,
	Uri_PROPERTY_FRAGMENT = 0x5,
	Uri_PROPERTY_HOST = 0x6,
	Uri_PROPERTY_PASSWORD = 0x7,
	Uri_PROPERTY_PATH = 0x8,
	Uri_PROPERTY_PATH_AND_QUERY = 0x9,
	Uri_PROPERTY_QUERY = 0xA,
	Uri_PROPERTY_RAW_URI = 0xB,
	Uri_PROPERTY_SCHEME_NAME = 0xC,
	Uri_PROPERTY_USER_INFO = 0xD,
	Uri_PROPERTY_USER_NAME = 0xE,
	Uri_PROPERTY_STRING_LAST = 0xE,
	Uri_PROPERTY_HOST_TYPE = 0xF,
	Uri_PROPERTY_DWORD_START = 0xF,
	Uri_PROPERTY_PORT = 0x10,
	Uri_PROPERTY_SCHEME = 0x11,
	Uri_PROPERTY_ZONE = 0x12,
	Uri_PROPERTY_DWORD_LAST = 0x12,
};

/* 11 */
enum std::_Uninitialized
{
	_Noinit = 0x0,
};

/* 12 */
enum std::errc
{
	address_family_not_supported = 0x66,
	address_in_use = 0x64,
	address_not_available = 0x65,
	already_connected = 0x71,
	argument_list_too_long = 0x7,
	argument_out_of_domain = 0x21,
	bad_address = 0xE,
	bad_file_descriptor = 0x9,
	bad_message = 0x68,
	broken_pipe = 0x20,
	connection_aborted = 0x6A,
	connection_already_in_progress = 0x67,
	connection_refused = 0x6B,
	connection_reset = 0x6C,
	cross_device_link = 0x12,
	destination_address_required = 0x6D,
	device_or_resource_busy = 0x10,
	directory_not_empty = 0x29,
	executable_format_error = 0x8,
	file_exists = 0x11,
	file_too_large = 0x1B,
	filename_too_long = 0x26,
	function_not_supported = 0x28,
	host_unreachable = 0x6E,
	identifier_removed = 0x6F,
	illegal_byte_sequence = 0x2A,
	inappropriate_io_control_operation = 0x19,
	interrupted = 0x4,
	invalid_argument = 0x16,
	invalid_seek = 0x1D,
	io_error = 0x5,
	is_a_directory = 0x15,
	message_size = 0x73,
	network_down = 0x74,
	network_reset = 0x75,
	network_unreachable = 0x76,
	no_buffer_space = 0x77,
	no_child_process = 0xA,
	no_link = 0x79,
	no_lock_available = 0x27,
	no_message_available = 0x78,
	no_message = 0x7A,
	no_protocol_option = 0x7B,
	no_space_on_device = 0x1C,
	no_stream_resources = 0x7C,
	no_such_device_or_address = 0x6,
	no_such_device = 0x13,
	no_such_file_or_directory = 0x2,
	no_such_process = 0x3,
	not_a_directory = 0x14,
	not_a_socket = 0x80,
	not_a_stream = 0x7D,
	not_connected = 0x7E,
	not_enough_memory = 0xC,
	not_supported = 0x81,
	operation_canceled = 0x69,
	operation_in_progress = 0x70,
	operation_not_permitted = 0x1,
	operation_not_supported = 0x82,
	operation_would_block = 0x8C,
	owner_dead = 0x85,
	permission_denied = 0xD,
	protocol_error = 0x86,
	protocol_not_supported = 0x87,
	read_only_file_system = 0x1E,
	resource_deadlock_would_occur = 0x24,
	resource_unavailable_try_again = 0xB,
	result_out_of_range = 0x22,
	state_not_recoverable = 0x7F,
	stream_timeout = 0x89,
	text_file_busy = 0x8B,
	timed_out = 0x8A,
	too_many_files_open_in_system = 0x17,
	too_many_files_open = 0x18,
	too_many_links = 0x1F,
	too_many_symbolic_link_levels = 0x72,
	value_too_large = 0x84,
	wrong_protocol_type = 0x88,
};

/* 13 */
enum $9ADEBD8A921918A39AFE0B81FE4AC4B2
{
	_Multi = 0x0,
};

/* 14 */
enum $C7A66656BD20095141AF9DA597C58E36
{
	ok = 0x0,
	partial = 0x1,
	error = 0x2,
	noconv = 0x3,
};

/* 15 */
typedef $9ADEBD8A921918A39AFE0B81FE4AC4B2 $58DE2DA9E8DDE5DA2E2F36082422D5FD;

/* 16 */
enum $9E02737228DF5060E759F32703142FF5
{
	_BUF_SIZE = 0x8,
};

/* 17 */
enum $B2FB91FA9CC7CF3BD50434AFDECAC47F
{
	_ALLOC_MASK = 0x7,
};

/* 18 */
enum std::_Iosb<int>::_Dummy_enum
{
	_Dummy_enum_val = 0x1,
};

/* 19 */
enum std::_Iosb<int>::_Fmtflags
{
	_Fmtmask = 0xFFFF,
	_Fmtzero = 0x0,
};

/* 20 */
enum std::_Iosb<int>::_Iostate
{
	_Statmask = 0x17,
};

/* 21 */
enum std::_Iosb<int>::_Openmode
{
	_Openmask = 0xFF,
};

/* 22 */
enum std::_Iosb<int>::_Seekdir
{
	_Seekmask = 0x3,
};

/* 23 */
enum $0AE1ED1D395576D0F5C137E464D7BFE0
{
	_Openprot = 0x40,
};

/* 24 */
enum std::io_errc
{
	stream = 0x1,
};

/* 25 */
enum $DBDE8AE3BE3572C1105E906E611275D1
{
	_Allocated = 0x1,
	_Constant = 0x2,
	_Noread = 0x4,
	_Append = 0x8,
	_Atend = 0x10,
};

/* 26 */
enum $D78A09537603E058867F494A102DE664
{
	_MINSIZE = 0x20,
};

/* 27 */
typedef $9E02737228DF5060E759F32703142FF5 $F0551E099AE6F36F41F19B6664DCAFD9;

/* 28 */
typedef $B2FB91FA9CC7CF3BD50434AFDECAC47F $8B51C3C74DF083A54E50CA72E34056B8;

/* 29 */
enum std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl
{
	_Red = 0x0,
	_Black = 0x1,
};

/* 30 */
enum $3765A173ADD7CE92B6314F58D2CDA9A2
{
	alnum = 0x107,
	alpha = 0x103,
	cntrl = 0x20,
	digit = 0x4,
	graph = 0x117,
	lower = 0x2,
	print = 0x1D7,
	punct = 0x10,
	space = 0x48,
	upper = 0x1,
	xdigit = 0x80,
	blank = 0x48,
};

/* 31 */
enum std::ios_base::event
{
	erase_event = 0x0,
	imbue_event = 0x1,
	copyfmt_event = 0x2,
};

/* 32 */
typedef $80B40C51F983DF6470D1FE94B60AC2DA MULTICAST_MODE_TYPE;

/* 33 */
enum __vc_attributes::threadingAttribute::threading_e
{
	apartment = 0x1,
	single = 0x2,
	free = 0x3,
	neutral = 0x4,
	both = 0x5,
};

/* 34 */
enum __vc_attributes::event_receiverAttribute::type_e
{
	native = 0x0,
	com = 0x1,
	managed = 0x2,
};

/* 35 */
enum __vc_attributes::aggregatableAttribute::type_e
{
	never = 0x0,
	allowed = 0x1,
	always = 0x2,
};

/* 36 */
typedef __vc_attributes::event_receiverAttribute::type_e __vc_attributes::event_sourceAttribute::type_e;

/* 37 */
enum __vc_attributes::event_sourceAttribute::optimize_e
{
	speed = 0x0,
	size = 0x1,
};

/* 38 */
enum __vc_attributes::moduleAttribute::type_e
{
	dll = 0x1,
	exe = 0x2,
	service = 0x3,
	unspecified = 0x4,
	EXE = 0x2,
	SERVICE = 0x3,
};

/* 39 */
enum __vc_attributes::helper_attributes::usageAttribute::usage_e
{
	eAnyUsage = 0x0,
	eCoClassUsage = 0x1,
	eCOMInterfaceUsage = 0x2,
	eInterfaceUsage = 0x6,
	eMemberUsage = 0x8,
	eMethodUsage = 0x10,
	eInterfaceMethodUsage = 0x20,
	eInterfaceMemberUsage = 0x40,
	eCoClassMemberUsage = 0x80,
	eCoClassMethodUsage = 0x100,
	eGlobalMethodUsage = 0x300,
	eGlobalDataUsage = 0x400,
	eClassUsage = 0x800,
	eInterfaceParameterUsage = 0x1000,
	eMethodParameterUsage = 0x3000,
	eIDLModuleUsage = 0x4000,
	eAnonymousUsage = 0x8000,
	eTypedefUsage = 0x10000,
	eUnionUsage = 0x20000,
	eEnumUsage = 0x40000,
	eDefineTagUsage = 0x80000,
	eStructUsage = 0x100000,
	eLocalUsage = 0x200000,
	ePropertyUsage = 0x400000,
	eEventUsage = 0x800000,
	eTemplateUsage = 0x1000000,
	eModuleUsage = 0x1000000,
	eIllegalUsage = 0x2000000,
	eAsynchronousUsage = 0x4000000,
	eAnyIDLUsage = 0x3F7FFF,
};

/* 40 */
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e
{
	eBoolean = 0x0,
	eInteger = 0x1,
	eFloat = 0x2,
	eDouble = 0x3,
};

/* 41 */
enum talk_base::ThreadPriority
{
	PRIORITY_IDLE = 0xFFFFFFFF,
	PRIORITY_NORMAL = 0x0,
	PRIORITY_ABOVE_NORMAL = 0x1,
	PRIORITY_HIGH = 0x2,
};

/* 42 */
enum $2DAD7434F7E61171840453F834529413
{
	ST_MSG_WORKER_DONE = 0x0,
	ST_MSG_FIRST_AVAILABLE = 0x1,
};

/* 43 */
enum talk_base::SignalThread::State
{
	kInit = 0x0,
	kRunning = 0x1,
	kReleasing = 0x2,
	kComplete = 0x3,
	kStopping = 0x4,
};

/* 44 */
typedef CALL_STATE talk_base::Socket::ConnState;

/* 45 */
enum talk_base::Socket::Option
{
	OPT_DONTFRAGMENT = 0x0,
	OPT_RCVBUF = 0x1,
	OPT_SNDBUF = 0x2,
	OPT_NODELAY = 0x3,
	OPT_IPV6_V6ONLY = 0x4,
};

/* 46 */
enum talk_base::StreamResult
{
	SR_ERROR = 0x0,
	SR_SUCCESS = 0x1,
	SR_BLOCK = 0x2,
	SR_EOS = 0x3,
};

/* 47 */
enum buzz::XmppReturnStatus
{
	XMPP_RETURN_OK = 0x0,
	XMPP_RETURN_BADARGUMENT = 0x1,
	XMPP_RETURN_BADSTATE = 0x2,
	XMPP_RETURN_PENDING = 0x3,
	XMPP_RETURN_UNEXPECTED = 0x4,
	XMPP_RETURN_NOTYETIMPLEMENTED = 0x5,
};

/* 48 */
enum cricket::IceRole
{
	ICEROLE_CONTROLLING = 0x0,
	ICEROLE_CONTROLLED = 0x1,
	ICEROLE_UNKNOWN = 0x2,
};

/* 49 */
enum buzz::XmppEngine::State
{
	STATE_NONE = 0x0,
	STATE_START = 0x1,
	STATE_OPENING = 0x2,
	STATE_OPEN = 0x3,
	STATE_CLOSED = 0x4,
};

/* 50 */
enum cricket::TransportProtocol
{
	ICEPROTO_GOOGLE = 0x0,
	ICEPROTO_HYBRID = 0x1,
	ICEPROTO_RFC5245 = 0x2,
};

/* 51 */
enum cricket::IceMode
{
	ICEMODE_FULL = 0x0,
	ICEMODE_LITE = 0x1,
};

/* 52 */
enum $EF7C0E4A8CCB173AAC63430876B3E86B
{
	WCODE_HRESULT_FIRST = 0x80040200,
	WCODE_HRESULT_LAST = 0x8004FFFF,
};

/* 53 */
enum XML_Error
{
	XML_ERROR_NONE = 0x0,
	XML_ERROR_NO_MEMORY = 0x1,
	XML_ERROR_SYNTAX = 0x2,
	XML_ERROR_NO_ELEMENTS = 0x3,
	XML_ERROR_INVALID_TOKEN = 0x4,
	XML_ERROR_UNCLOSED_TOKEN = 0x5,
	XML_ERROR_PARTIAL_CHAR = 0x6,
	XML_ERROR_TAG_MISMATCH = 0x7,
	XML_ERROR_DUPLICATE_ATTRIBUTE = 0x8,
	XML_ERROR_JUNK_AFTER_DOC_ELEMENT = 0x9,
	XML_ERROR_PARAM_ENTITY_REF = 0xA,
	XML_ERROR_UNDEFINED_ENTITY = 0xB,
	XML_ERROR_RECURSIVE_ENTITY_REF = 0xC,
	XML_ERROR_ASYNC_ENTITY = 0xD,
	XML_ERROR_BAD_CHAR_REF = 0xE,
	XML_ERROR_BINARY_ENTITY_REF = 0xF,
	XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF = 0x10,
	XML_ERROR_MISPLACED_XML_PI = 0x11,
	XML_ERROR_UNKNOWN_ENCODING = 0x12,
	XML_ERROR_INCORRECT_ENCODING = 0x13,
	XML_ERROR_UNCLOSED_CDATA_SECTION = 0x14,
	XML_ERROR_EXTERNAL_ENTITY_HANDLING = 0x15,
	XML_ERROR_NOT_STANDALONE = 0x16,
	XML_ERROR_UNEXPECTED_STATE = 0x17,
	XML_ERROR_ENTITY_DECLARED_IN_PE = 0x18,
	XML_ERROR_FEATURE_REQUIRES_XML_DTD = 0x19,
	XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING = 0x1A,
	XML_ERROR_UNBOUND_PREFIX = 0x1B,
	XML_ERROR_UNDECLARING_PREFIX = 0x1C,
	XML_ERROR_INCOMPLETE_PE = 0x1D,
	XML_ERROR_XML_DECL = 0x1E,
	XML_ERROR_TEXT_DECL = 0x1F,
	XML_ERROR_PUBLICID = 0x20,
	XML_ERROR_SUSPENDED = 0x21,
	XML_ERROR_NOT_SUSPENDED = 0x22,
	XML_ERROR_ABORTED = 0x23,
	XML_ERROR_FINISHED = 0x24,
	XML_ERROR_SUSPEND_PE = 0x25,
	XML_ERROR_RESERVED_PREFIX_XML = 0x26,
	XML_ERROR_RESERVED_PREFIX_XMLNS = 0x27,
	XML_ERROR_RESERVED_NAMESPACE_URI = 0x28,
};

/* 54 */
enum talk_base::SChannelAdapter::SSLState
{
	SSL_NONE = 0x0,
	SSL_WAIT = 0x1,
	SSL_CONNECTING = 0x2,
	SSL_CONNECTED = 0x3,
	SSL_ERROR = 0x4,
};

/* 55 */
enum talk_base::StreamState
{
	SS_CLOSED = 0x0,
	SS_OPENING = 0x1,
	SS_OPEN = 0x2,
};

/* 56 */
typedef $CFDB0D303165423155BC335C42AADBEC SCOPE_LEVEL;

/* 57 */
typedef $1D78DD8871C05E6FD7D3820402F49BC1 IF_OPER_STATUS;

/* 58 */
typedef $06D1ED250FD368380D92731A8809DBAC NL_DAD_STATE;

/* 59 */
typedef $4ADD18C59427D2D4505C2F6B781D5A2B NL_SUFFIX_ORIGIN;

/* 60 */
typedef $81C96E3F196AC83D02B4522B31857D28 NL_PREFIX_ORIGIN;

/* 61 */
enum _DOT11_PHY_TYPE
{
	dot11_phy_type_unknown = 0x0,
	dot11_phy_type_any = 0x0,
	dot11_phy_type_fhss = 0x1,
	dot11_phy_type_dsss = 0x2,
	dot11_phy_type_irbaseband = 0x3,
	dot11_phy_type_ofdm = 0x4,
	dot11_phy_type_hrdsss = 0x5,
	dot11_phy_type_erp = 0x6,
	dot11_phy_type_ht = 0x7,
	dot11_phy_type_IHV_start = 0x80000000,
	dot11_phy_type_IHV_end = 0xFFFFFFFF,
};

/* 62 */
typedef $E38CE7F1AC08E248910BE7D26668C82A TUNNEL_TYPE;

/* 63 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > >::_Redbl;

/* 64 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > >::_Redbl;

/* 65 */
enum _NDIS_PROCESSOR_VENDOR
{
	NdisProcessorVendorUnknown = 0x0,
	NdisProcessorVendorGenuinIntel = 0x1,
	NdisProcessorVendorGenuineIntel = 0x1,
	NdisProcessorVendorAuthenticAMD = 0x2,
};

/* 66 */
enum $7D5AB894EE17CA85E9AA0986408F95C1
{
	MSG_POST_EVENT = 0xF1F1,
	MSG_MAX = 0xF1F1,
};

/* 67 */
typedef $3765A173ADD7CE92B6314F58D2CDA9A2 $E0E5A63BEEC24A40788161BF85A9B058;

/* 68 */
enum std::time_base::dateorder
{
	no_order = 0x0,
	dmy = 0x1,
	mdy = 0x2,
	ymd = 0x3,
	ydm = 0x4,
};

/* 69 */
enum talk_base::StreamEvent
{
	SE_OPEN = 0x1,
	SE_READ = 0x2,
	SE_WRITE = 0x4,
	SE_CLOSE = 0x8,
};

/* 70 */
enum LSA_FOREST_TRUST_RECORD_TYPE
{
	ForestTrustTopLevelName = 0x0,
	ForestTrustTopLevelNameEx = 0x1,
	ForestTrustDomainInfo = 0x2,
	ForestTrustRecordTypeLast = 0x2,
};

/* 71 */
enum talk_base::Base64::DecodeOption
{
	DO_PARSE_STRICT = 0x1,
	DO_PARSE_WHITE = 0x2,
	DO_PARSE_ANY = 0x3,
	DO_PARSE_MASK = 0x3,
	DO_PAD_YES = 0x4,
	DO_PAD_ANY = 0x8,
	DO_PAD_NO = 0xC,
	DO_PAD_MASK = 0xC,
	DO_TERM_BUFFER = 0x10,
	DO_TERM_CHAR = 0x20,
	DO_TERM_ANY = 0x30,
	DO_TERM_MASK = 0x30,
	DO_STRICT = 0x15,
	DO_LAX = 0x2B,
};

/* 72 */
enum talk_base::ProxyType
{
	PROXY_NONE = 0x0,
	PROXY_HTTPS = 0x1,
	PROXY_SOCKS5 = 0x2,
	PROXY_UNKNOWN = 0x3,
};

/* 73 */
enum talk_base::SSLRole
{
	SSL_CLIENT = 0x0,
	SSL_SERVER = 0x1,
};

/* 74 */
enum cricket::StunAttributeValueType
{
	STUN_VALUE_UNKNOWN = 0x0,
	STUN_VALUE_ADDRESS = 0x1,
	STUN_VALUE_XOR_ADDRESS = 0x2,
	STUN_VALUE_UINT32 = 0x3,
	STUN_VALUE_UINT64 = 0x4,
	STUN_VALUE_BYTE_STRING = 0x5,
	STUN_VALUE_ERROR_CODE = 0x6,
	STUN_VALUE_UINT16_LIST = 0x7,
};

/* 75 */
enum cricket::TransportState
{
	TRANSPORT_STATE_NONE = 0x0,
	TRANSPORT_STATE_SOME = 0x1,
	TRANSPORT_STATE_ALL = 0x2,
};

/* 76 */
enum cricket::StunAddressFamily
{
	STUN_ADDRESS_UNDEF = 0x0,
	STUN_ADDRESS_IPV4 = 0x1,
	STUN_ADDRESS_IPV6 = 0x2,
};

/* 77 */
enum cricket::ConnectionRole
{
	CONNECTIONROLE_NONE = 0x0,
	CONNECTIONROLE_ACTIVE = 0x1,
	CONNECTIONROLE_PASSIVE = 0x2,
	CONNECTIONROLE_ACTPASS = 0x3,
	CONNECTIONROLE_HOLDCONN = 0x4,
};

/* 78 */
enum cricket::ActionType
{
	ACTION_UNKNOWN = 0x0,
	ACTION_SESSION_INITIATE = 0x1,
	ACTION_SESSION_INFO = 0x2,
	ACTION_SESSION_ACCEPT = 0x3,
	ACTION_SESSION_REJECT = 0x4,
	ACTION_SESSION_TERMINATE = 0x5,
	ACTION_TRANSPORT_INFO = 0x6,
	ACTION_TRANSPORT_ACCEPT = 0x7,
	ACTION_DESCRIPTION_INFO = 0x8,
};

/* 79 */
enum cricket::ProtocolType
{
	PROTO_UDP = 0x0,
	PROTO_TCP = 0x1,
	PROTO_SSLTCP = 0x2,
	PROTO_LAST = 0x2,
};

/* 80 */
enum cricket::IceAttributeType
{
	STUN_ATTR_PRIORITY = 0x24,
	STUN_ATTR_USE_CANDIDATE = 0x25,
	STUN_ATTR_ICE_CONTROLLED = 0x8029,
	STUN_ATTR_ICE_CONTROLLING = 0x802A,
};

/* 81 */
enum cricket::SecurePolicy
{
	SEC_DISABLED = 0x0,
	SEC_ENABLED = 0x1,
	SEC_REQUIRED = 0x2,
};

/* 82 */
enum cricket::RelayAttributeType
{
	STUN_ATTR_LIFETIME = 0xD,
	STUN_ATTR_MAGIC_COOKIE = 0xF,
	STUN_ATTR_BANDWIDTH = 0x10,
	STUN_ATTR_DESTINATION_ADDRESS = 0x11,
	STUN_ATTR_SOURCE_ADDRESS2 = 0x12,
	STUN_ATTR_DATA = 0x13,
	STUN_ATTR_OPTIONS = 0x8001,
};

/* 83 */
enum $0A4C97BC0E03605B44D68CC81FD3C5A0
{
	MSG_TIMEOUT = 0x0,
	MSG_ERROR = 0x1,
	MSG_STATE = 0x2,
};

/* 84 */
enum cricket::BaseSession::State
{
	STATE_INIT = 0x0,
	STATE_SENTINITIATE = 0x1,
	STATE_RECEIVEDINITIATE = 0x2,
	STATE_SENTPRACCEPT = 0x3,
	STATE_SENTACCEPT = 0x4,
	STATE_RECEIVEDPRACCEPT = 0x5,
	STATE_RECEIVEDACCEPT = 0x6,
	STATE_SENTMODIFY = 0x7,
	STATE_RECEIVEDMODIFY = 0x8,
	STATE_SENTREJECT = 0x9,
	STATE_RECEIVEDREJECT = 0xA,
	STATE_SENTREDIRECT = 0xB,
	STATE_SENTTERMINATE = 0xC,
	STATE_RECEIVEDTERMINATE = 0xD,
	STATE_INPROGRESS = 0xE,
	STATE_DEINIT = 0xF,
};

/* 85 */
enum cricket::BaseSession::Error
{
	ERROR_NONE = 0x0,
	ERROR_TIME = 0x1,
	ERROR_RESPONSE = 0x2,
	ERROR_NETWORK = 0x3,
	ERROR_CONTENT = 0x4,
	ERROR_TRANSPORT = 0x5,
};

/* 86 */
enum cricket::ContentSource
{
	CS_LOCAL = 0x0,
	CS_REMOTE = 0x1,
};

/* 87 */
enum cricket::ContentAction
{
	CA_OFFER = 0x0,
	CA_PRANSWER = 0x1,
	CA_ANSWER = 0x2,
	CA_UPDATE = 0x3,
};

/* 88 */
enum cricket::SignalingProtocol
{
	PROTOCOL_JINGLE = 0x0,
	PROTOCOL_GINGLE = 0x1,
	PROTOCOL_HYBRID = 0x2,
};

/* 89 */
enum cricket::PortInterface::CandidateOrigin
{
	ORIGIN_THIS_PORT = 0x0,
	ORIGIN_OTHER_PORT = 0x1,
	ORIGIN_MESSAGE = 0x2,
};

/* 90 */
enum cricket::TurnAttributeType
{
	STUN_ATTR_CHANNEL_NUMBER = 0xC,
	STUN_ATTR_TURN_LIFETIME = 0xD,
	STUN_ATTR_XOR_PEER_ADDRESS = 0x12,
	STUN_ATTR_XOR_RELAYED_ADDRESS = 0x16,
	STUN_ATTR_EVEN_PORT = 0x18,
	STUN_ATTR_REQUESTED_TRANSPORT = 0x19,
	STUN_ATTR_DONT_FRAGMENT = 0x1A,
	STUN_ATTR_RESERVATION_TOKEN = 0x22,
};

/* 91 */
typedef cricket::BaseSession::State cricket::Connection::State;

/* 92 */
enum cricket::Connection::ReadState
{
	STATE_READ_INIT = 0x0,
	STATE_READABLE = 0x1,
	STATE_READ_TIMEOUT = 0x2,
};

/* 93 */
enum cricket::Connection::WriteState
{
	STATE_WRITABLE = 0x0,
	STATE_WRITE_UNRELIABLE = 0x1,
	STATE_WRITE_INIT = 0x2,
	STATE_WRITE_TIMEOUT = 0x3,
};

/* 94 */
enum cricket::Port::Lifetime
{
	LT_PRESTART = 0x0,
	LT_PRETIMEOUT = 0x1,
	LT_POSTTIMEOUT = 0x2,
};

/* 95 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > >::_Redbl;

/* 96 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > >::_Redbl;

/* 97 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > >::_Redbl;

/* 98 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > >::_Redbl;

/* 99 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > >::_Redbl;

/* 100 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > >::_Redbl;

/* 101 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > >::_Redbl;

/* 102 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > >::_Redbl;

/* 103 */
enum talk_base::PacketSocketFactory::Options
{
	OPT_SSLTCP = 0x1,
	OPT_TLS = 0x2,
	OPT_STUN = 0x4,
};

/* 104 */
enum talk_base::ByteBuffer::ByteOrder
{
	ORDER_NETWORK = 0x0,
	ORDER_HOST = 0x1,
};

/* 105 */
enum talk_base::SSLMode
{
	SSL_MODE_TLS = 0x0,
	SSL_MODE_DTLS = 0x1,
};

/* 106 */
enum $E871657D3D06AB0E7460E5297F6A69BA
{
	kMaxSize = 0x40,
};

/* 107 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> >::_Redbl;

/* 108 */
typedef cricket::BaseSession::State $FC84C6C60C2DA410E6C95531EBC1BF7D;

/* 109 */
enum buzz::TlsOptions
{
	TLS_DISABLED = 0x0,
	TLS_ENABLED = 0x1,
	TLS_REQUIRED = 0x2,
};

/* 110 */
enum $5DEB8E1FFA885809882F86DD8A64EFC2
{
	_EEN_DS = 0x4,
};

/* 111 */
typedef $5DEB8E1FFA885809882F86DD8A64EFC2 $99CFD99EBD7400C20E845020E03D0C8E;

/* 112 */
enum buzz::XmppStanzaError
{
	XSE_BAD_REQUEST = 0x0,
	XSE_CONFLICT = 0x1,
	XSE_FEATURE_NOT_IMPLEMENTED = 0x2,
	XSE_FORBIDDEN = 0x3,
	XSE_GONE = 0x4,
	XSE_INTERNAL_SERVER_ERROR = 0x5,
	XSE_ITEM_NOT_FOUND = 0x6,
	XSE_JID_MALFORMED = 0x7,
	XSE_NOT_ACCEPTABLE = 0x8,
	XSE_NOT_ALLOWED = 0x9,
	XSE_PAYMENT_REQUIRED = 0xA,
	XSE_RECIPIENT_UNAVAILABLE = 0xB,
	XSE_REDIRECT = 0xC,
	XSE_REGISTRATION_REQUIRED = 0xD,
	XSE_SERVER_NOT_FOUND = 0xE,
	XSE_SERVER_TIMEOUT = 0xF,
	XSE_RESOURCE_CONSTRAINT = 0x10,
	XSE_SERVICE_UNAVAILABLE = 0x11,
	XSE_SUBSCRIPTION_REQUIRED = 0x12,
	XSE_UNDEFINED_CONDITION = 0x13,
	XSE_UNEXPECTED_REQUEST = 0x14,
};

/* 113 */
enum buzz::XmppEngine::HandlerLevel
{
	HL_NONE = 0x0,
	HL_PEEK = 0x1,
	HL_SINGLE = 0x2,
	HL_SENDER = 0x3,
	HL_TYPE = 0x4,
	HL_ALL = 0x5,
	HL_COUNT = 0x6,
};

/* 114 */
typedef buzz::XmppEngine::State buzz::AsyncSocket::State;

/* 115 */
typedef cricket::BaseSession::Error buzz::AsyncSocket::Error;

/* 116 */
typedef cricket::BaseSession::Error buzz::XmppEngine::Error;

/* 117 */
enum $0C984FF2632AD9E2089A8B33017E145B
{
	STATE_PRE_XMPP_LOGIN = 0x5,
	STATE_START_XMPP_LOGIN = 0x6,
};

/* 118 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Redbl;

/* 119 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Redbl;

/* 120 */
enum buzz::MucPresenceStatus::Role
{
	ROLE_NONE = 0x0,
	ROLE_MODERATOR = 0x1,
	ROLE_PARTICIPANT = 0x2,
	ROLE_VISITOR = 0x3,
};

/* 121 */
enum buzz::MucPresenceStatus::Affiliation
{
	AFFILIATION_NONE = 0x0,
	AFFILIATION_OWNER = 0x1,
	AFFILIATION_ADMIN = 0x2,
	AFFILIATION_MEMBER = 0x3,
};

/* 122 */
enum buzz::PresenceStatus::Show
{
	SHOW_NONE = 0x0,
	SHOW_OFFLINE = 0x1,
	SHOW_XA = 0x2,
	SHOW_AWAY = 0x3,
	SHOW_DND = 0x4,
	SHOW_ONLINE = 0x5,
	SHOW_CHAT = 0x6,
};

/* 123 */
typedef buzz::PresenceStatus::Show buzz::Status::Show;

/* 124 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > >::_Redbl;

/* 125 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > >::_Redbl;

/* 126 */
enum buzz::Muc::State
{
	MUC_JOINING = 0x0,
	MUC_JOINED = 0x1,
	MUC_LEAVING = 0x2,
};

/* 127 */
enum $00C098D28A1F03AF1A81C0140E244F1F
{
	_NUMGET_SIGNOFF = 0xA,
	_NUMGET_EOFF = 0xC,
};

/* 128 */
typedef $00C098D28A1F03AF1A81C0140E244F1F $848243DC7CB868796B7A914E42192D10;

/* 129 */
enum cricket::RelayType
{
	RELAY_GTURN = 0x0,
	RELAY_TURN = 0x1,
};

/* 130 */
typedef talk_base::SignalThread::State cricket::AllocationSequence::State;

/* 131 */
typedef cricket::BaseSession::State cricket::BasicPortAllocatorSession::PortData::State;

/* 132 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > >::_Redbl;

/* 133 */
typedef buzz::XmppEngine::State talk_base::AsyncPacketSocket::State;

/* 134 */
enum $4259709745A8E5BAAA34792FF754DE28
{
	MSG_CLOCK = 0x1,
	MSG_DESTROY = 0x2,
	MSG_TERMINATE = 0x3,
	MSG_EVENT = 0x4,
	MSG_CREATE_TUNNEL = 0x5,
};

/* 135 */
enum cricket::TunnelSessionRole
{
	INITIATOR = 0x0,
	RESPONDER = 0x1,
};

/* 136 */
enum cricket::PseudoTcp::TcpState
{
	TCP_LISTEN = 0x0,
	TCP_SYN_SENT = 0x1,
	TCP_SYN_RECEIVED = 0x2,
	TCP_ESTABLISHED = 0x3,
	TCP_CLOSED = 0x4,
};

/* 137 */
typedef talk_base::Socket::Option cricket::PseudoTcp::Option;

/* 138 */
enum cricket::PseudoTcp::SendFlags
{
	sfNone = 0x0,
	sfDelayedAck = 0x1,
	sfImmediateAck = 0x2,
};

/* 139 */
enum cricket::IPseudoTcpNotify::WriteResult
{
	WR_SUCCESS = 0x0,
	WR_TOO_LARGE = 0x1,
	WR_FAIL = 0x2,
};

/* 140 */
enum cricket::PseudoTcp::Shutdown
{
	SD_NONE = 0x0,
	SD_GRACEFUL = 0x1,
	SD_FORCEFUL = 0x2,
};

/* 141 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<buzz::QName> >::_Redbl;

/* 142 */
enum XML_Status
{
	XML_STATUS_ERROR = 0x0,
	XML_STATUS_OK = 0x1,
	XML_STATUS_SUSPENDED = 0x2,
};

/* 143 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > >::_Redbl;

/* 144 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > >::_Redbl;

/* 145 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > >::_Redbl;

/* 146 */
typedef buzz::XmppEngine::State cricket::DtlsTransportChannelWrapper::State;

/* 147 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > >::_Redbl;

/* 148 */
enum buzz::XmppLoginTask::LoginTaskState
{
	LOGINSTATE_INIT = 0x0,
	LOGINSTATE_STREAMSTART_SENT = 0x1,
	LOGINSTATE_STARTED_XMPP = 0x2,
	LOGINSTATE_TLS_INIT = 0x3,
	LOGINSTATE_AUTH_INIT = 0x4,
	LOGINSTATE_BIND_INIT = 0x5,
	LOGINSTATE_TLS_REQUESTED = 0x6,
	LOGINSTATE_SASL_RUNNING = 0x7,
	LOGINSTATE_BIND_REQUESTED = 0x8,
	LOGINSTATE_SESSION_REQUESTED = 0x9,
	LOGINSTATE_DONE = 0xA,
};

/* 149 */
enum cricket::IcePriorityValue
{
	ICE_TYPE_PREFERENCE_RELAY = 0x2,
	ICE_TYPE_PREFERENCE_HOST_TCP = 0x5A,
	ICE_TYPE_PREFERENCE_SRFLX = 0x64,
	ICE_TYPE_PREFERENCE_PRFLX = 0x6E,
	ICE_TYPE_PREFERENCE_HOST = 0x7E,
};

/* 150 */
enum cricket::StunMessageType
{
	STUN_BINDING_REQUEST = 0x1,
	STUN_BINDING_INDICATION = 0x11,
	STUN_BINDING_RESPONSE = 0x101,
	STUN_BINDING_ERROR_RESPONSE = 0x111,
};

/* 151 */
enum cricket::StunAttributeType
{
	STUN_ATTR_MAPPED_ADDRESS = 0x1,
	STUN_ATTR_USERNAME = 0x6,
	STUN_ATTR_MESSAGE_INTEGRITY = 0x8,
	STUN_ATTR_ERROR_CODE = 0x9,
	STUN_ATTR_UNKNOWN_ATTRIBUTES = 0xA,
	STUN_ATTR_REALM = 0x14,
	STUN_ATTR_NONCE = 0x15,
	STUN_ATTR_XOR_MAPPED_ADDRESS = 0x20,
	STUN_ATTR_SOFTWARE = 0x8022,
	STUN_ATTR_ALTERNATE_SERVER = 0x8023,
	STUN_ATTR_FINGERPRINT = 0x8028,
	STUN_ATTR_RETRANSMIT_COUNT = 0xFF00,
};

/* 152 */
enum cricket::StunErrorCode
{
	STUN_ERROR_TRY_ALTERNATE = 0x12C,
	STUN_ERROR_BAD_REQUEST = 0x190,
	STUN_ERROR_UNAUTHORIZED = 0x191,
	STUN_ERROR_UNKNOWN_ATTRIBUTE = 0x1A4,
	STUN_ERROR_STALE_CREDENTIALS = 0x1AE,
	STUN_ERROR_STALE_NONCE = 0x1B6,
	STUN_ERROR_SERVER_ERROR = 0x1F4,
	STUN_ERROR_GLOBAL_FAILURE = 0x258,
};

/* 153 */
enum cricket::IceErrorCode
{
	STUN_ERROR_ROLE_CONFLICT = 0x1E7,
};

/* 154 */
enum cricket::TurnMessageType
{
	STUN_ALLOCATE_REQUEST = 0x3,
	STUN_ALLOCATE_RESPONSE = 0x103,
	STUN_ALLOCATE_ERROR_RESPONSE = 0x113,
	TURN_REFRESH_REQUEST = 0x4,
	TURN_REFRESH_RESPONSE = 0x104,
	TURN_REFRESH_ERROR_RESPONSE = 0x114,
	TURN_SEND_INDICATION = 0x16,
	TURN_DATA_INDICATION = 0x17,
	TURN_CREATE_PERMISSION_REQUEST = 0x8,
	TURN_CREATE_PERMISSION_RESPONSE = 0x108,
	TURN_CREATE_PERMISSION_ERROR_RESPONSE = 0x118,
	TURN_CHANNEL_BIND_REQUEST = 0x9,
	TURN_CHANNEL_BIND_RESPONSE = 0x109,
	TURN_CHANNEL_BIND_ERROR_RESPONSE = 0x119,
};

/* 155 */
enum $3C43F16F8E9C5D47F9B424282EB2E871
{
	MSG_PORT_ERROR = 0x1,
};

/* 156 */
typedef $BAFBE4AC9B3285BEF72BDB25B79551C4 IPPROTO;

/* 157 */
enum cricket::TurnEntry::BindState
{
	STATE_UNBOUND = 0x0,
	STATE_BINDING = 0x1,
	STATE_BOUND = 0x2,
};

/* 158 */
enum std::_Barg_type
{
	_Reference_wrapper = 0x0,
	_Placeholder = 0x1,
	_Bind_expression = 0x2,
	_UDT = 0x3,
};

/* 159 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > >::_Redbl;

/* 160 */
enum cricket::RelayMessageType
{
	STUN_SEND_REQUEST = 0x4,
	STUN_SEND_RESPONSE = 0x104,
	STUN_SEND_ERROR_RESPONSE = 0x114,
	STUN_DATA_INDICATION = 0x115,
};

/* 161 */
enum talk_base::AsyncHttpsProxySocket::ProxyState
{
	PS_INIT = 0x0,
	PS_LEADER = 0x1,
	PS_AUTHENTICATE = 0x2,
	PS_SKIP_HEADERS = 0x3,
	PS_ERROR_HEADERS = 0x4,
	PS_TUNNEL_HEADERS = 0x5,
	PS_SKIP_BODY = 0x6,
	PS_TUNNEL = 0x7,
	PS_WAIT_CLOSE = 0x8,
	PS_ERROR = 0x9,
};

/* 162 */
enum talk_base::AsyncSocksProxySocket::State
{
	SS_INIT = 0x0,
	SS_HELLO = 0x1,
	SS_AUTH = 0x2,
	SS_CONNECT = 0x3,
	SS_TUNNEL = 0x4,
	SS_ERROR = 0x5,
};

/* 163 */
enum $D74B7B3094F22B9EDFE76EBFDA7D134A
{
	MSG_WK_CLOCK = 0x1,
	MSG_WK_PURGE = 0x2,
	MSG_ST_EVENT = 0x3,
	MSG_SI_DESTROYCHANNEL = 0x4,
	MSG_SI_DESTROY = 0x5,
};

/* 164 */
enum talk_base::DispatcherEvent
{
	DE_READ = 0x1,
	DE_WRITE = 0x2,
	DE_CONNECT = 0x4,
	DE_CLOSE = 0x8,
	DE_ACCEPT = 0x10,
};

/* 165 */
enum talk_base::WinPing::PingResult
{
	PING_FAIL = 0x0,
	PING_INVALID_PARAMS = 0x1,
	PING_TOO_LARGE = 0x2,
	PING_TIMEOUT = 0x3,
	PING_SUCCESS = 0x4,
};

/* 166 */
enum $1B3FAA595DE3B973C54777C0FD504EAA
{
	XML_ROLE_ERROR = 0xFFFFFFFF,
	XML_ROLE_NONE = 0x0,
	XML_ROLE_XML_DECL = 0x1,
	XML_ROLE_INSTANCE_START = 0x2,
	XML_ROLE_DOCTYPE_NONE = 0x3,
	XML_ROLE_DOCTYPE_NAME = 0x4,
	XML_ROLE_DOCTYPE_SYSTEM_ID = 0x5,
	XML_ROLE_DOCTYPE_PUBLIC_ID = 0x6,
	XML_ROLE_DOCTYPE_INTERNAL_SUBSET = 0x7,
	XML_ROLE_DOCTYPE_CLOSE = 0x8,
	XML_ROLE_GENERAL_ENTITY_NAME = 0x9,
	XML_ROLE_PARAM_ENTITY_NAME = 0xA,
	XML_ROLE_ENTITY_NONE = 0xB,
	XML_ROLE_ENTITY_VALUE = 0xC,
	XML_ROLE_ENTITY_SYSTEM_ID = 0xD,
	XML_ROLE_ENTITY_PUBLIC_ID = 0xE,
	XML_ROLE_ENTITY_COMPLETE = 0xF,
	XML_ROLE_ENTITY_NOTATION_NAME = 0x10,
	XML_ROLE_NOTATION_NONE = 0x11,
	XML_ROLE_NOTATION_NAME = 0x12,
	XML_ROLE_NOTATION_SYSTEM_ID = 0x13,
	XML_ROLE_NOTATION_NO_SYSTEM_ID = 0x14,
	XML_ROLE_NOTATION_PUBLIC_ID = 0x15,
	XML_ROLE_ATTRIBUTE_NAME = 0x16,
	XML_ROLE_ATTRIBUTE_TYPE_CDATA = 0x17,
	XML_ROLE_ATTRIBUTE_TYPE_ID = 0x18,
	XML_ROLE_ATTRIBUTE_TYPE_IDREF = 0x19,
	XML_ROLE_ATTRIBUTE_TYPE_IDREFS = 0x1A,
	XML_ROLE_ATTRIBUTE_TYPE_ENTITY = 0x1B,
	XML_ROLE_ATTRIBUTE_TYPE_ENTITIES = 0x1C,
	XML_ROLE_ATTRIBUTE_TYPE_NMTOKEN = 0x1D,
	XML_ROLE_ATTRIBUTE_TYPE_NMTOKENS = 0x1E,
	XML_ROLE_ATTRIBUTE_ENUM_VALUE = 0x1F,
	XML_ROLE_ATTRIBUTE_NOTATION_VALUE = 0x20,
	XML_ROLE_ATTLIST_NONE = 0x21,
	XML_ROLE_ATTLIST_ELEMENT_NAME = 0x22,
	XML_ROLE_IMPLIED_ATTRIBUTE_VALUE = 0x23,
	XML_ROLE_REQUIRED_ATTRIBUTE_VALUE = 0x24,
	XML_ROLE_DEFAULT_ATTRIBUTE_VALUE = 0x25,
	XML_ROLE_FIXED_ATTRIBUTE_VALUE = 0x26,
	XML_ROLE_ELEMENT_NONE = 0x27,
	XML_ROLE_ELEMENT_NAME = 0x28,
	XML_ROLE_CONTENT_ANY = 0x29,
	XML_ROLE_CONTENT_EMPTY = 0x2A,
	XML_ROLE_CONTENT_PCDATA = 0x2B,
	XML_ROLE_GROUP_OPEN = 0x2C,
	XML_ROLE_GROUP_CLOSE = 0x2D,
	XML_ROLE_GROUP_CLOSE_REP = 0x2E,
	XML_ROLE_GROUP_CLOSE_OPT = 0x2F,
	XML_ROLE_GROUP_CLOSE_PLUS = 0x30,
	XML_ROLE_GROUP_CHOICE = 0x31,
	XML_ROLE_GROUP_SEQUENCE = 0x32,
	XML_ROLE_CONTENT_ELEMENT = 0x33,
	XML_ROLE_CONTENT_ELEMENT_REP = 0x34,
	XML_ROLE_CONTENT_ELEMENT_OPT = 0x35,
	XML_ROLE_CONTENT_ELEMENT_PLUS = 0x36,
	XML_ROLE_PI = 0x37,
	XML_ROLE_COMMENT = 0x38,
	XML_ROLE_TEXT_DECL = 0x39,
	XML_ROLE_IGNORE_SECT = 0x3A,
	XML_ROLE_INNER_PARAM_ENTITY_REF = 0x3B,
	XML_ROLE_PARAM_ENTITY_REF = 0x3C,
};

/* 167 */
enum XML_FeatureEnum
{
	XML_FEATURE_END = 0x0,
	XML_FEATURE_UNICODE = 0x1,
	XML_FEATURE_UNICODE_WCHAR_T = 0x2,
	XML_FEATURE_DTD = 0x3,
	XML_FEATURE_CONTEXT_BYTES = 0x4,
	XML_FEATURE_MIN_SIZE = 0x5,
	XML_FEATURE_SIZEOF_XML_CHAR = 0x6,
	XML_FEATURE_SIZEOF_XML_LCHAR = 0x7,
	XML_FEATURE_NS = 0x8,
	XML_FEATURE_LARGE_SIZE = 0x9,
	XML_FEATURE_ATTR_INFO = 0xA,
};

/* 168 */
enum XML_Content_Type
{
	XML_CTYPE_EMPTY = 0x1,
	XML_CTYPE_ANY = 0x2,
	XML_CTYPE_MIXED = 0x3,
	XML_CTYPE_NAME = 0x4,
	XML_CTYPE_CHOICE = 0x5,
	XML_CTYPE_SEQ = 0x6,
};

/* 169 */
enum XML_Content_Quant
{
	XML_CQUANT_NONE = 0x0,
	XML_CQUANT_OPT = 0x1,
	XML_CQUANT_REP = 0x2,
	XML_CQUANT_PLUS = 0x3,
};

/* 170 */
enum XML_Parsing
{
	XML_INITIALIZED = 0x0,
	XML_PARSING = 0x1,
	XML_FINISHED = 0x2,
	XML_SUSPENDED = 0x3,
};

/* 171 */
enum XML_ParamEntityParsing
{
	XML_PARAM_ENTITY_PARSING_NEVER = 0x0,
	XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE = 0x1,
	XML_PARAM_ENTITY_PARSING_ALWAYS = 0x2,
};

/* 172 */
enum cricket::PacketFlags
{
	PF_NORMAL = 0x0,
	PF_SRTP_BYPASS = 0x1,
};

/* 173 */
enum $534F72927E0049F4CCCAF49CDFA51F82
{
	MSG_UPDATESTATE = 0x0,
};

/* 174 */
enum $096A860C12D697FB1D43768A4D64BA13
{
	MSG_CREATECHANNEL = 0x1,
	MSG_DESTROYCHANNEL = 0x2,
	MSG_DESTROYALLCHANNELS = 0x3,
	MSG_CONNECTCHANNELS = 0x4,
	MSG_RESETCHANNELS = 0x5,
	MSG_ONSIGNALINGREADY = 0x6,
	MSG_ONREMOTECANDIDATE = 0x7,
	MSG_READSTATE = 0x8,
	MSG_WRITESTATE = 0x9,
	MSG_REQUESTSIGNALING = 0xA,
	MSG_CANDIDATEREADY = 0xB,
	MSG_ROUTECHANGE = 0xC,
	MSG_CONNECTING = 0xD,
	MSG_CANDIDATEALLOCATIONCOMPLETE = 0xE,
	MSG_ROLECONFLICT = 0xF,
	MSG_SETICEROLE = 0x10,
	MSG_SETLOCALDESCRIPTION = 0x11,
	MSG_SETREMOTEDESCRIPTION = 0x12,
	MSG_GETSTATS = 0x13,
	MSG_SETIDENTITY = 0x14,
};

/* 175 */
enum $A2CCFA0CEB30747E79C3DD44EB3028E8
{
	kSize = 0x10,
};

/* 176 */
typedef $A2CCFA0CEB30747E79C3DD44EB3028E8 $6C0A2A138D379E12812C20F1F1AA45B3;

/* 177 */
enum $B0C7ACCDC0A558AA2DCCDD54190A3F4D
{
	MSG_SEND_ALLOCATION_DONE = 0x1,
	MSG_SEND_ALLOCATED_PORTS = 0x2,
};

/* 178 */
enum talk_base::HttpAuthResult
{
	HAR_RESPONSE = 0x0,
	HAR_IGNORE = 0x1,
	HAR_CREDENTIALS = 0x2,
	HAR_ERROR = 0x3,
};

/* 179 */
enum talk_base::HttpVerb
{
	HV_GET = 0x0,
	HV_POST = 0x1,
	HV_PUT = 0x2,
	HV_DELETE = 0x3,
	HV_CONNECT = 0x4,
	HV_HEAD = 0x5,
	HV_LAST = 0x5,
};

/* 180 */
enum talk_base::HttpError
{
	HE_NONE = 0x0,
	HE_PROTOCOL = 0x1,
	HE_DISCONNECTED = 0x2,
	HE_OVERFLOW = 0x3,
	HE_CONNECT_FAILED = 0x4,
	HE_SOCKET_ERROR = 0x5,
	HE_SHUTDOWN = 0x6,
	HE_OPERATION_CANCELLED = 0x7,
	HE_AUTH = 0x8,
	HE_CERTIFICATE_EXPIRED = 0x9,
	HE_STREAM = 0xA,
	HE_CACHE = 0xB,
	HE_DEFAULT = 0xC,
};

/* 181 */
enum talk_base::HttpCode
{
	HC_OK = 0xC8,
	HC_NON_AUTHORITATIVE = 0xCB,
	HC_NO_CONTENT = 0xCC,
	HC_PARTIAL_CONTENT = 0xCE,
	HC_MULTIPLE_CHOICES = 0x12C,
	HC_MOVED_PERMANENTLY = 0x12D,
	HC_FOUND = 0x12E,
	HC_SEE_OTHER = 0x12F,
	HC_NOT_MODIFIED = 0x130,
	HC_MOVED_TEMPORARILY = 0x133,
	HC_BAD_REQUEST = 0x190,
	HC_UNAUTHORIZED = 0x191,
	HC_FORBIDDEN = 0x193,
	HC_NOT_FOUND = 0x194,
	HC_PROXY_AUTHENTICATION_REQUIRED = 0x197,
	HC_GONE = 0x19A,
	HC_INTERNAL_SERVER_ERROR = 0x1F4,
	HC_NOT_IMPLEMENTED = 0x1F5,
	HC_SERVICE_UNAVAILABLE = 0x1F7,
};

/* 182 */
enum talk_base::HttpVersion
{
	HVER_1_0 = 0x0,
	HVER_1_1 = 0x1,
	HVER_UNKNOWN = 0x2,
	HVER_LAST = 0x2,
};

/* 183 */
enum talk_base::HttpHeader
{
	HH_AGE = 0x0,
	HH_CACHE_CONTROL = 0x1,
	HH_CONNECTION = 0x2,
	HH_CONTENT_DISPOSITION = 0x3,
	HH_CONTENT_LENGTH = 0x4,
	HH_CONTENT_RANGE = 0x5,
	HH_CONTENT_TYPE = 0x6,
	HH_COOKIE = 0x7,
	HH_DATE = 0x8,
	HH_ETAG = 0x9,
	HH_EXPIRES = 0xA,
	HH_HOST = 0xB,
	HH_IF_MODIFIED_SINCE = 0xC,
	HH_IF_NONE_MATCH = 0xD,
	HH_KEEP_ALIVE = 0xE,
	HH_LAST_MODIFIED = 0xF,
	HH_LOCATION = 0x10,
	HH_PROXY_AUTHENTICATE = 0x11,
	HH_PROXY_AUTHORIZATION = 0x12,
	HH_PROXY_CONNECTION = 0x13,
	HH_RANGE = 0x14,
	HH_SET_COOKIE = 0x15,
	HH_TE = 0x16,
	HH_TRAILERS = 0x17,
	HH_TRANSFER_ENCODING = 0x18,
	HH_UPGRADE = 0x19,
	HH_USER_AGENT = 0x1A,
	HH_WWW_AUTHENTICATE = 0x1B,
	HH_LAST = 0x1B,
};

/* 184 */
typedef talk_base::AsyncSocksProxySocket::State talk_base::AsyncSocksProxyServerSocket::State;

/* 185 */
enum talk_base::HttpData::HeaderCombine
{
	HC_YES = 0x0,
	HC_NO = 0x1,
	HC_AUTO = 0x2,
	HC_REPLACE = 0x3,
	HC_NEW = 0x4,
};

/* 186 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<unsigned char> >::_Redbl;

/* 187 */
enum $E0C90490D1E839556ABD2728F984CF67
{
	BT_NONXML = 0x0,
	BT_MALFORM = 0x1,
	BT_LT = 0x2,
	BT_AMP = 0x3,
	BT_RSQB = 0x4,
	BT_LEAD2 = 0x5,
	BT_LEAD3 = 0x6,
	BT_LEAD4 = 0x7,
	BT_TRAIL = 0x8,
	BT_CR = 0x9,
	BT_LF = 0xA,
	BT_GT = 0xB,
	BT_QUOT = 0xC,
	BT_APOS = 0xD,
	BT_EQUALS = 0xE,
	BT_QUEST = 0xF,
	BT_EXCL = 0x10,
	BT_SOL = 0x11,
	BT_SEMI = 0x12,
	BT_NUM = 0x13,
	BT_LSQB = 0x14,
	BT_S = 0x15,
	BT_NMSTRT = 0x16,
	BT_COLON = 0x17,
	BT_HEX = 0x18,
	BT_DIGIT = 0x19,
	BT_NAME = 0x1A,
	BT_MINUS = 0x1B,
	BT_OTHER = 0x1C,
	BT_NONASCII = 0x1D,
	BT_PERCNT = 0x1E,
	BT_LPAR = 0x1F,
	BT_RPAR = 0x20,
	BT_AST = 0x21,
	BT_PLUS = 0x22,
	BT_COMMA = 0x23,
	BT_VERBAR = 0x24,
};

/* 188 */
enum $4AFAEC2BBCCF092A1A96C76067DED60C
{
	UNKNOWN_ENC = 0xFFFFFFFF,
	ISO_8859_1_ENC = 0x0,
	US_ASCII_ENC = 0x1,
	UTF_8_ENC = 0x2,
	UTF_16_ENC = 0x3,
	UTF_16BE_ENC = 0x4,
	UTF_16LE_ENC = 0x5,
	NO_ENC = 0x6,
};

/* 189 */
enum $C11653179A603EA72CB11FFC0468A65C
{
	UTF8_cval1 = 0x0,
	UTF8_cval2 = 0xC0,
	UTF8_cval3 = 0xE0,
	UTF8_cval4 = 0xF0,
};

/* 190 */
enum $AD62F2770B8F55CBB66897901456D49F
{
	min2 = 0x80,
	min3 = 0x800,
	min4 = 0x10000,
};

/* 191 */
enum $0B3E1292D3342227B38D61E3DDBC2D2D
{
	other = 0x0,
	inName = 0x1,
	inValue = 0x2,
};

/* 192 */
enum $A1FA44EF2292B6F876F796E2B0620ADF
{
	MSG_SORT = 0x1,
	MSG_PING = 0x2,
};

/* 193 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> >::_Redbl;

/* 194 */
enum TMS
{
	TM_INDEX = 0x0,
	TM_NEWINDEX = 0x1,
	TM_GC = 0x2,
	TM_MODE = 0x3,
	TM_LEN = 0x4,
	TM_EQ = 0x5,
	TM_ADD = 0x6,
	TM_SUB = 0x7,
	TM_MUL = 0x8,
	TM_DIV = 0x9,
	TM_MOD = 0xA,
	TM_POW = 0xB,
	TM_UNM = 0xC,
	TM_LT = 0xD,
	TM_LE = 0xE,
	TM_CONCAT = 0xF,
	TM_CALL = 0x10,
	TM_N = 0x11,
};

/* 195 */
enum CapKind
{
	Cclose = 0x0,
	Cposition = 0x1,
	Cconst = 0x2,
	Cbackref = 0x3,
	Carg = 0x4,
	Csimple = 0x5,
	Ctable = 0x6,
	Cfunction = 0x7,
	Cquery = 0x8,
	Cstring = 0x9,
	Cnum = 0xA,
	Csubst = 0xB,
	Cfold = 0xC,
	Cruntime = 0xD,
	Cgroup = 0xE,
};

/* 196 */
enum TTag
{
	TChar = 0x0,
	TSet = 0x1,
	TAny = 0x2,
	TTrue = 0x3,
	TFalse = 0x4,
	TRep = 0x5,
	TSeq = 0x6,
	TChoice = 0x7,
	TNot = 0x8,
	TAnd = 0x9,
	TCall = 0xA,
	TOpenCall = 0xB,
	TRule = 0xC,
	TGrammar = 0xD,
	TBehind = 0xE,
	TCapture = 0xF,
	TRunTime = 0x10,
};

/* 197 */
enum $7613945CA6B0BC8E7A666D068A23A994
{
	QP_PLAIN = 0x0,
	QP_QUOTED = 0x1,
	QP_CR = 0x2,
	QP_IF_LAST = 0x3,
};

/* 198 */
enum OpCode
{
	OP_MOVE = 0x0,
	OP_LOADK = 0x1,
	OP_LOADKX = 0x2,
	OP_LOADBOOL = 0x3,
	OP_LOADNIL = 0x4,
	OP_GETUPVAL = 0x5,
	OP_GETTABUP = 0x6,
	OP_GETTABLE = 0x7,
	OP_SETTABUP = 0x8,
	OP_SETUPVAL = 0x9,
	OP_SETTABLE = 0xA,
	OP_NEWTABLE = 0xB,
	OP_SELF = 0xC,
	OP_ADD = 0xD,
	OP_SUB = 0xE,
	OP_MUL = 0xF,
	OP_DIV = 0x10,
	OP_MOD = 0x11,
	OP_POW = 0x12,
	OP_UNM = 0x13,
	OP_NOT = 0x14,
	OP_LEN = 0x15,
	OP_CONCAT = 0x16,
	OP_JMP = 0x17,
	OP_EQ = 0x18,
	OP_LT = 0x19,
	OP_LE = 0x1A,
	OP_TEST = 0x1B,
	OP_TESTSET = 0x1C,
	OP_CALL = 0x1D,
	OP_TAILCALL = 0x1E,
	OP_RETURN = 0x1F,
	OP_FORLOOP = 0x20,
	OP_FORPREP = 0x21,
	OP_TFORCALL = 0x22,
	OP_TFORLOOP = 0x23,
	OP_SETLIST = 0x24,
	OP_CLOSURE = 0x25,
	OP_VARARG = 0x26,
	OP_EXTRAARG = 0x27,
};

/* 199 */
enum Opcode
{
	IAny = 0x0,
	IChar = 0x1,
	ISet = 0x2,
	ITestAny = 0x3,
	ITestChar = 0x4,
	ITestSet = 0x5,
	ISpan = 0x6,
	IBehind = 0x7,
	IRet = 0x8,
	IEnd = 0x9,
	IChoice = 0xA,
	IJmp = 0xB,
	ICall = 0xC,
	IOpenCall = 0xD,
	ICommit = 0xE,
	IPartialCommit = 0xF,
	IBackCommit = 0x10,
	IFailTwice = 0x11,
	IFail = 0x12,
	IGiveup = 0x13,
	IFullCapture = 0x14,
	IOpenCapture = 0x15,
	ICloseCapture = 0x16,
	ICloseRunTime = 0x17,
};

/* 200 */
enum $F1893150FFE5EA0E275CED19363F6F8C
{
	IO_DONE = 0x0,
	IO_TIMEOUT = 0xFFFFFFFF,
	IO_CLOSED = 0xFFFFFFFE,
	IO_UNKNOWN = 0xFFFFFFFD,
};

/* 201 */
enum OpArgMask
{
	OpArgN = 0x0,
	OpArgU = 0x1,
	OpArgR = 0x2,
	OpArgK = 0x3,
};

/* 202 */
enum OpMode
{
	iABC = 0x0,
	iABx = 0x1,
	iAsBx = 0x2,
	iAx = 0x3,
};

/* 203 */
enum RESERVED
{
	TK_AND = 0x101,
	TK_BREAK = 0x102,
	TK_DO = 0x103,
	TK_ELSE = 0x104,
	TK_ELSEIF = 0x105,
	TK_END = 0x106,
	TK_FALSE = 0x107,
	TK_FOR = 0x108,
	TK_FUNCTION = 0x109,
	TK_GOTO = 0x10A,
	TK_IF = 0x10B,
	TK_IN = 0x10C,
	TK_LOCAL = 0x10D,
	TK_NIL = 0x10E,
	TK_NOT = 0x10F,
	TK_OR = 0x110,
	TK_REPEAT = 0x111,
	TK_RETURN = 0x112,
	TK_THEN = 0x113,
	TK_TRUE = 0x114,
	TK_UNTIL = 0x115,
	TK_WHILE = 0x116,
	TK_CONCAT = 0x117,
	TK_DOTS = 0x118,
	TK_EQ = 0x119,
	TK_GE = 0x11A,
	TK_LE = 0x11B,
	TK_NE = 0x11C,
	TK_DBCOLON = 0x11D,
	TK_EOS = 0x11E,
	TK_NUMBER = 0x11F,
	TK_NAME = 0x120,
	TK_STRING = 0x121,
};

/* 204 */
enum BinOpr
{
	OPR_ADD = 0x0,
	OPR_SUB = 0x1,
	OPR_MUL = 0x2,
	OPR_DIV = 0x3,
	OPR_MOD = 0x4,
	OPR_POW = 0x5,
	OPR_CONCAT = 0x6,
	OPR_EQ = 0x7,
	OPR_LT = 0x8,
	OPR_LE = 0x9,
	OPR_NE = 0xA,
	OPR_GT = 0xB,
	OPR_GE = 0xC,
	OPR_AND = 0xD,
	OPR_OR = 0xE,
	OPR_NOBINOPR = 0xF,
};

/* 205 */
enum expkind
{
	VVOID = 0x0,
	VNIL = 0x1,
	VTRUE = 0x2,
	VFALSE = 0x3,
	VK = 0x4,
	VKNUM = 0x5,
	VNONRELOC = 0x6,
	VLOCAL = 0x7,
	VUPVAL = 0x8,
	VINDEXED = 0x9,
	VJMP = 0xA,
	VRELOCABLE = 0xB,
	VCALL = 0xC,
	VVARARG = 0xD,
};

/* 206 */
enum UnOpr
{
	OPR_MINUS = 0x0,
	OPR_NOT = 0x1,
	OPR_LEN = 0x2,
	OPR_NOUNOPR = 0x3,
};

/* 207 */
enum SDL_Scancode
{
	SDL_SCANCODE_UNKNOWN = 0x0,
	SDL_SCANCODE_A = 0x4,
	SDL_SCANCODE_B = 0x5,
	SDL_SCANCODE_C = 0x6,
	SDL_SCANCODE_D = 0x7,
	SDL_SCANCODE_E = 0x8,
	SDL_SCANCODE_F = 0x9,
	SDL_SCANCODE_G = 0xA,
	SDL_SCANCODE_H = 0xB,
	SDL_SCANCODE_I = 0xC,
	SDL_SCANCODE_J = 0xD,
	SDL_SCANCODE_K = 0xE,
	SDL_SCANCODE_L = 0xF,
	SDL_SCANCODE_M = 0x10,
	SDL_SCANCODE_N = 0x11,
	SDL_SCANCODE_O = 0x12,
	SDL_SCANCODE_P = 0x13,
	SDL_SCANCODE_Q = 0x14,
	SDL_SCANCODE_R = 0x15,
	SDL_SCANCODE_S = 0x16,
	SDL_SCANCODE_T = 0x17,
	SDL_SCANCODE_U = 0x18,
	SDL_SCANCODE_V = 0x19,
	SDL_SCANCODE_W = 0x1A,
	SDL_SCANCODE_X = 0x1B,
	SDL_SCANCODE_Y = 0x1C,
	SDL_SCANCODE_Z = 0x1D,
	SDL_SCANCODE_1 = 0x1E,
	SDL_SCANCODE_2 = 0x1F,
	SDL_SCANCODE_3 = 0x20,
	SDL_SCANCODE_4 = 0x21,
	SDL_SCANCODE_5 = 0x22,
	SDL_SCANCODE_6 = 0x23,
	SDL_SCANCODE_7 = 0x24,
	SDL_SCANCODE_8 = 0x25,
	SDL_SCANCODE_9 = 0x26,
	SDL_SCANCODE_0 = 0x27,
	SDL_SCANCODE_RETURN = 0x28,
	SDL_SCANCODE_ESCAPE = 0x29,
	SDL_SCANCODE_BACKSPACE = 0x2A,
	SDL_SCANCODE_TAB = 0x2B,
	SDL_SCANCODE_SPACE = 0x2C,
	SDL_SCANCODE_MINUS = 0x2D,
	SDL_SCANCODE_EQUALS = 0x2E,
	SDL_SCANCODE_LEFTBRACKET = 0x2F,
	SDL_SCANCODE_RIGHTBRACKET = 0x30,
	SDL_SCANCODE_BACKSLASH = 0x31,
	SDL_SCANCODE_NONUSHASH = 0x32,
	SDL_SCANCODE_SEMICOLON = 0x33,
	SDL_SCANCODE_APOSTROPHE = 0x34,
	SDL_SCANCODE_GRAVE = 0x35,
	SDL_SCANCODE_COMMA = 0x36,
	SDL_SCANCODE_PERIOD = 0x37,
	SDL_SCANCODE_SLASH = 0x38,
	SDL_SCANCODE_CAPSLOCK = 0x39,
	SDL_SCANCODE_F1 = 0x3A,
	SDL_SCANCODE_F2 = 0x3B,
	SDL_SCANCODE_F3 = 0x3C,
	SDL_SCANCODE_F4 = 0x3D,
	SDL_SCANCODE_F5 = 0x3E,
	SDL_SCANCODE_F6 = 0x3F,
	SDL_SCANCODE_F7 = 0x40,
	SDL_SCANCODE_F8 = 0x41,
	SDL_SCANCODE_F9 = 0x42,
	SDL_SCANCODE_F10 = 0x43,
	SDL_SCANCODE_F11 = 0x44,
	SDL_SCANCODE_F12 = 0x45,
	SDL_SCANCODE_PRINTSCREEN = 0x46,
	SDL_SCANCODE_SCROLLLOCK = 0x47,
	SDL_SCANCODE_PAUSE = 0x48,
	SDL_SCANCODE_INSERT = 0x49,
	SDL_SCANCODE_HOME = 0x4A,
	SDL_SCANCODE_PAGEUP = 0x4B,
	SDL_SCANCODE_DELETE = 0x4C,
	SDL_SCANCODE_END = 0x4D,
	SDL_SCANCODE_PAGEDOWN = 0x4E,
	SDL_SCANCODE_RIGHT = 0x4F,
	SDL_SCANCODE_LEFT = 0x50,
	SDL_SCANCODE_DOWN = 0x51,
	SDL_SCANCODE_UP = 0x52,
	SDL_SCANCODE_NUMLOCKCLEAR = 0x53,
	SDL_SCANCODE_KP_DIVIDE = 0x54,
	SDL_SCANCODE_KP_MULTIPLY = 0x55,
	SDL_SCANCODE_KP_MINUS = 0x56,
	SDL_SCANCODE_KP_PLUS = 0x57,
	SDL_SCANCODE_KP_ENTER = 0x58,
	SDL_SCANCODE_KP_1 = 0x59,
	SDL_SCANCODE_KP_2 = 0x5A,
	SDL_SCANCODE_KP_3 = 0x5B,
	SDL_SCANCODE_KP_4 = 0x5C,
	SDL_SCANCODE_KP_5 = 0x5D,
	SDL_SCANCODE_KP_6 = 0x5E,
	SDL_SCANCODE_KP_7 = 0x5F,
	SDL_SCANCODE_KP_8 = 0x60,
	SDL_SCANCODE_KP_9 = 0x61,
	SDL_SCANCODE_KP_0 = 0x62,
	SDL_SCANCODE_KP_PERIOD = 0x63,
	SDL_SCANCODE_NONUSBACKSLASH = 0x64,
	SDL_SCANCODE_APPLICATION = 0x65,
	SDL_SCANCODE_POWER = 0x66,
	SDL_SCANCODE_KP_EQUALS = 0x67,
	SDL_SCANCODE_F13 = 0x68,
	SDL_SCANCODE_F14 = 0x69,
	SDL_SCANCODE_F15 = 0x6A,
	SDL_SCANCODE_F16 = 0x6B,
	SDL_SCANCODE_F17 = 0x6C,
	SDL_SCANCODE_F18 = 0x6D,
	SDL_SCANCODE_F19 = 0x6E,
	SDL_SCANCODE_F20 = 0x6F,
	SDL_SCANCODE_F21 = 0x70,
	SDL_SCANCODE_F22 = 0x71,
	SDL_SCANCODE_F23 = 0x72,
	SDL_SCANCODE_F24 = 0x73,
	SDL_SCANCODE_EXECUTE = 0x74,
	SDL_SCANCODE_HELP = 0x75,
	SDL_SCANCODE_MENU = 0x76,
	SDL_SCANCODE_SELECT = 0x77,
	SDL_SCANCODE_STOP = 0x78,
	SDL_SCANCODE_AGAIN = 0x79,
	SDL_SCANCODE_UNDO = 0x7A,
	SDL_SCANCODE_CUT = 0x7B,
	SDL_SCANCODE_COPY = 0x7C,
	SDL_SCANCODE_PASTE = 0x7D,
	SDL_SCANCODE_FIND = 0x7E,
	SDL_SCANCODE_MUTE = 0x7F,
	SDL_SCANCODE_VOLUMEUP = 0x80,
	SDL_SCANCODE_VOLUMEDOWN = 0x81,
	SDL_SCANCODE_KP_COMMA = 0x85,
	SDL_SCANCODE_KP_EQUALSAS400 = 0x86,
	SDL_SCANCODE_INTERNATIONAL1 = 0x87,
	SDL_SCANCODE_INTERNATIONAL2 = 0x88,
	SDL_SCANCODE_INTERNATIONAL3 = 0x89,
	SDL_SCANCODE_INTERNATIONAL4 = 0x8A,
	SDL_SCANCODE_INTERNATIONAL5 = 0x8B,
	SDL_SCANCODE_INTERNATIONAL6 = 0x8C,
	SDL_SCANCODE_INTERNATIONAL7 = 0x8D,
	SDL_SCANCODE_INTERNATIONAL8 = 0x8E,
	SDL_SCANCODE_INTERNATIONAL9 = 0x8F,
	SDL_SCANCODE_LANG1 = 0x90,
	SDL_SCANCODE_LANG2 = 0x91,
	SDL_SCANCODE_LANG3 = 0x92,
	SDL_SCANCODE_LANG4 = 0x93,
	SDL_SCANCODE_LANG5 = 0x94,
	SDL_SCANCODE_LANG6 = 0x95,
	SDL_SCANCODE_LANG7 = 0x96,
	SDL_SCANCODE_LANG8 = 0x97,
	SDL_SCANCODE_LANG9 = 0x98,
	SDL_SCANCODE_ALTERASE = 0x99,
	SDL_SCANCODE_SYSREQ = 0x9A,
	SDL_SCANCODE_CANCEL = 0x9B,
	SDL_SCANCODE_CLEAR = 0x9C,
	SDL_SCANCODE_PRIOR = 0x9D,
	SDL_SCANCODE_RETURN2 = 0x9E,
	SDL_SCANCODE_SEPARATOR = 0x9F,
	SDL_SCANCODE_OUT = 0xA0,
	SDL_SCANCODE_OPER = 0xA1,
	SDL_SCANCODE_CLEARAGAIN = 0xA2,
	SDL_SCANCODE_CRSEL = 0xA3,
	SDL_SCANCODE_EXSEL = 0xA4,
	SDL_SCANCODE_KP_00 = 0xB0,
	SDL_SCANCODE_KP_000 = 0xB1,
	SDL_SCANCODE_THOUSANDSSEPARATOR = 0xB2,
	SDL_SCANCODE_DECIMALSEPARATOR = 0xB3,
	SDL_SCANCODE_CURRENCYUNIT = 0xB4,
	SDL_SCANCODE_CURRENCYSUBUNIT = 0xB5,
	SDL_SCANCODE_KP_LEFTPAREN = 0xB6,
	SDL_SCANCODE_KP_RIGHTPAREN = 0xB7,
	SDL_SCANCODE_KP_LEFTBRACE = 0xB8,
	SDL_SCANCODE_KP_RIGHTBRACE = 0xB9,
	SDL_SCANCODE_KP_TAB = 0xBA,
	SDL_SCANCODE_KP_BACKSPACE = 0xBB,
	SDL_SCANCODE_KP_A = 0xBC,
	SDL_SCANCODE_KP_B = 0xBD,
	SDL_SCANCODE_KP_C = 0xBE,
	SDL_SCANCODE_KP_D = 0xBF,
	SDL_SCANCODE_KP_E = 0xC0,
	SDL_SCANCODE_KP_F = 0xC1,
	SDL_SCANCODE_KP_XOR = 0xC2,
	SDL_SCANCODE_KP_POWER = 0xC3,
	SDL_SCANCODE_KP_PERCENT = 0xC4,
	SDL_SCANCODE_KP_LESS = 0xC5,
	SDL_SCANCODE_KP_GREATER = 0xC6,
	SDL_SCANCODE_KP_AMPERSAND = 0xC7,
	SDL_SCANCODE_KP_DBLAMPERSAND = 0xC8,
	SDL_SCANCODE_KP_VERTICALBAR = 0xC9,
	SDL_SCANCODE_KP_DBLVERTICALBAR = 0xCA,
	SDL_SCANCODE_KP_COLON = 0xCB,
	SDL_SCANCODE_KP_HASH = 0xCC,
	SDL_SCANCODE_KP_SPACE = 0xCD,
	SDL_SCANCODE_KP_AT = 0xCE,
	SDL_SCANCODE_KP_EXCLAM = 0xCF,
	SDL_SCANCODE_KP_MEMSTORE = 0xD0,
	SDL_SCANCODE_KP_MEMRECALL = 0xD1,
	SDL_SCANCODE_KP_MEMCLEAR = 0xD2,
	SDL_SCANCODE_KP_MEMADD = 0xD3,
	SDL_SCANCODE_KP_MEMSUBTRACT = 0xD4,
	SDL_SCANCODE_KP_MEMMULTIPLY = 0xD5,
	SDL_SCANCODE_KP_MEMDIVIDE = 0xD6,
	SDL_SCANCODE_KP_PLUSMINUS = 0xD7,
	SDL_SCANCODE_KP_CLEAR = 0xD8,
	SDL_SCANCODE_KP_CLEARENTRY = 0xD9,
	SDL_SCANCODE_KP_BINARY = 0xDA,
	SDL_SCANCODE_KP_OCTAL = 0xDB,
	SDL_SCANCODE_KP_DECIMAL = 0xDC,
	SDL_SCANCODE_KP_HEXADECIMAL = 0xDD,
	SDL_SCANCODE_LCTRL = 0xE0,
	SDL_SCANCODE_LSHIFT = 0xE1,
	SDL_SCANCODE_LALT = 0xE2,
	SDL_SCANCODE_LGUI = 0xE3,
	SDL_SCANCODE_RCTRL = 0xE4,
	SDL_SCANCODE_RSHIFT = 0xE5,
	SDL_SCANCODE_RALT = 0xE6,
	SDL_SCANCODE_RGUI = 0xE7,
	SDL_SCANCODE_MODE = 0x101,
	SDL_SCANCODE_AUDIONEXT = 0x102,
	SDL_SCANCODE_AUDIOPREV = 0x103,
	SDL_SCANCODE_AUDIOSTOP = 0x104,
	SDL_SCANCODE_AUDIOPLAY = 0x105,
	SDL_SCANCODE_AUDIOMUTE = 0x106,
	SDL_SCANCODE_MEDIASELECT = 0x107,
	SDL_SCANCODE_WWW = 0x108,
	SDL_SCANCODE_MAIL = 0x109,
	SDL_SCANCODE_CALCULATOR = 0x10A,
	SDL_SCANCODE_COMPUTER = 0x10B,
	SDL_SCANCODE_AC_SEARCH = 0x10C,
	SDL_SCANCODE_AC_HOME = 0x10D,
	SDL_SCANCODE_AC_BACK = 0x10E,
	SDL_SCANCODE_AC_FORWARD = 0x10F,
	SDL_SCANCODE_AC_STOP = 0x110,
	SDL_SCANCODE_AC_REFRESH = 0x111,
	SDL_SCANCODE_AC_BOOKMARKS = 0x112,
	SDL_SCANCODE_BRIGHTNESSDOWN = 0x113,
	SDL_SCANCODE_BRIGHTNESSUP = 0x114,
	SDL_SCANCODE_DISPLAYSWITCH = 0x115,
	SDL_SCANCODE_KBDILLUMTOGGLE = 0x116,
	SDL_SCANCODE_KBDILLUMDOWN = 0x117,
	SDL_SCANCODE_KBDILLUMUP = 0x118,
	SDL_SCANCODE_EJECT = 0x119,
	SDL_SCANCODE_SLEEP = 0x11A,
	SDL_SCANCODE_APP1 = 0x11B,
	SDL_SCANCODE_APP2 = 0x11C,
	SDL_NUM_SCANCODES = 0x200,
};

/* 208 */
enum StringID
{
	STRREF_ATTENTION_DIALOG = 0xF00000,
	STRREF_AUTOPAUSE_ATTACKED = 0xF00001,
	STRREF_AUTOPAUSE_BADLYWOUNDED = 0xF00002,
	STRREF_AUTOPAUSE_DEATH = 0xF00003,
	STRREF_AUTOPAUSE_DENIED = 0xF00004,
	STRREF_AUTOPAUSE_ENEMYSIGHTED = 0xF00005,
	STRREF_AUTOPAUSE_HIT = 0xF00006,
	STRREF_AUTOPAUSE_ROUNDEND = 0xF00007,
	STRREF_AUTOPAUSE_SCRIPTED = 0xF00008,
	STRREF_AUTOPAUSE_SPELLCAST = 0xF00009,
	STRREF_AUTOPAUSE_TARGETGONE = 0xF0000A,
	STRREF_AUTOPAUSE_TRAPFOUND = 0xF0000B,
	STRREF_AUTOPAUSE_WEAPONGONE = 0xF0000C,
	STRREF_BIOGRAPHY_STORAGE_1 = 0xF0000D,
	STRREF_BIOGRAPHY_STORAGE_2 = 0xF0000E,
	STRREF_BIOGRAPHY_STORAGE_3 = 0xF0000F,
	STRREF_BIOGRAPHY_STORAGE_4 = 0xF00010,
	STRREF_BIOGRAPHY_STORAGE_5 = 0xF00011,
	STRREF_BIOGRAPHY_STORAGE_6 = 0xF00012,
	STRREF_CANNOT_PUT_TWOHANDED_IN_SLOT = 0xF00013,
	STRREF_CDDRIVEMISSINGONSYSTEM = 0xF00014,
	STRREF_CLICK_TO_CONTINUE = 0xF00015,
	STRREF_CLICK_TO_END = 0xF00016,
	STRREF_DAMAGE_ALMOSTDEAD = 0xF00017,
	STRREF_DAMAGE_BADLYWOUNDED = 0xF00018,
	STRREF_DAMAGE_BAIRLYINJURED = 0xF00019,
	STRREF_DAMAGE_DEAD = 0xF0001A,
	STRREF_DAMAGE_HURT = 0xF0001B,
	STRREF_DAMAGE_STONE_DEAD = 0xF0001C,
	STRREF_DAMAGE_UNINJURED = 0xF0001D,
	STRREF_DEFAULT_CLOSE_CONFIMATION_STR = 0xF0001E,
	STRREF_EFFECT_CHARMED = 0xF0001F,
	STRREF_EFFECT_DIRECHARMED = 0xF00020,
	STRREF_EFFECT_EVIL = 0xF00021,
	STRREF_EFFECT_GOOD = 0xF00022,
	STRREF_EFFECT_HOLD = 0xF00023,
	STRREF_EFFECT_NEUTRAL = 0xF00024,
	STRREF_EFFECT_TURNED = 0xF00025,
	STRREF_ERRORMESSAGE_EXCLUSIVE_MODE = 0xF00026,
	STRREF_ERRORMESSAGE_INVALID_VIDMODE = 0xF00027,
	STRREF_ERROR_BAD_SLOT_NUM = 0xF00028,
	STRREF_ERROR_CANNOT_USE_ITEM = 0xF00029,
	STRREF_ERROR_CAN_NOT_CAST_TWO_CONT = 0xF0002A,
	STRREF_ERROR_CAN_NOT_EQUIP_ARMOR_DURING_COMBAT = 0xF0002B,
	STRREF_ERROR_CAN_NOT_LEAVE_DURING_DIALOG = 0xF0002C,
	STRREF_ERROR_CAN_NOT_LEAVE_DURING_STORE = 0xF0002D,
	STRREF_ERROR_CAN_NOT_REMOVE = 0xF0002E,
	STRREF_ERROR_CLASS_CANNOT_DUAL_WEAPON = 0xF0002F,
	STRREF_ERROR_DONT_CONTROL_SPRITE = 0xF00030,
	STRREF_ERROR_DUPLICATE_LAUNCHER = 0xF00031,
	STRREF_ERROR_INADEQUATE_ATTRIBUTES = 0xF00032,
	STRREF_ERROR_INADEQUATE_CHR = 0xF00033,
	STRREF_ERROR_INADEQUATE_CON = 0xF00034,
	STRREF_ERROR_INADEQUATE_DEX = 0xF00035,
	STRREF_ERROR_INADEQUATE_INT = 0xF00036,
	STRREF_ERROR_INADEQUATE_LEVEL = 0xF00037,
	STRREF_ERROR_INADEQUATE_STR = 0xF00038,
	STRREF_ERROR_INADEQUATE_WIS = 0xF00039,
	STRREF_ERROR_INVENTORY_IS_FULL = 0xF0003A,
	STRREF_ERROR_INVENTORY_IS_FULL_PICKUP = 0xF0003B,
	STRREF_ERROR_ITEMNOTIDENTIFIED = 0xF0003C,
	STRREF_ERROR_ITEM_CURSED = 0xF0003D,
	STRREF_ERROR_MAGICWEAPON = 0xF0003E,
	STRREF_ERROR_MONK_CANNOT_USE_2_HANDED = 0xF0003F,
	STRREF_ERROR_NOABILITY = 0xF00040,
	STRREF_ERROR_NO_DIALOG = 0xF00041,
	STRREF_ERROR_NO_LAUNCHER_IN_OFFHAND = 0xF00042,
	STRREF_ERROR_NO_LAUNCHER_OFFHAND = 0xF00043,
	STRREF_ERROR_NO_OFFHAND_LAUNCHER = 0xF00044,
	STRREF_ERROR_NO_OFFHAND_RANGED = 0xF00045,
	STRREF_ERROR_NO_RANGED_OFFHAND = 0xF00046,
	STRREF_ERROR_NO_SPRITE = 0xF00047,
	STRREF_ERROR_POLYMORPHED = 0xF00048,
	STRREF_ERROR_SHIELD_EQUIPED = 0xF00049,
	STRREF_ERROR_TWO_HANDED_WEAPON_EQUIPED = 0xF0004A,
	STRREF_ERROR_WRONG_ITEM_TYPE = 0xF0004B,
	STRREF_FAILEDSAVE_BREATH = 0xF0004C,
	STRREF_FAILEDSAVE_DEATH = 0xF0004D,
	STRREF_FAILEDSAVE_POLY = 0xF0004E,
	STRREF_FAILEDSAVE_RESISTMAGIC = 0xF0004F,
	STRREF_FAILEDSAVE_SPELL = 0xF00050,
	STRREF_FAILEDSAVE_WANDS = 0xF00051,
	STRREF_FEEDBACK_ATTACKING = 0xF00052,
	STRREF_FEEDBACK_ATTACKROLL = 0xF00053,
	STRREF_FEEDBACK_ATTACKROLL_LEFT = 0xF00054,
	STRREF_FEEDBACK_ATTACKS = 0xF00055,
	STRREF_FEEDBACK_AURA_CLEANSED = 0xF00056,
	STRREF_FEEDBACK_BACKSTAB_2 = 0xF00057,
	STRREF_FEEDBACK_BACKSTAB_3 = 0xF00058,
	STRREF_FEEDBACK_BACKSTAB_4 = 0xF00059,
	STRREF_FEEDBACK_BACKSTAB_5 = 0xF0005A,
	STRREF_FEEDBACK_BACKSTAB_6 = 0xF0005B,
	STRREF_FEEDBACK_BACKSTAB_7 = 0xF0005C,
	STRREF_FEEDBACK_BACKSTAB_8 = 0xF0005D,
	STRREF_FEEDBACK_BACKSTAB_9 = 0xF0005E,
	STRREF_FEEDBACK_BACKSTAB_AVOIDED = 0xF0005F,
	STRREF_FEEDBACK_BACKSTAB_UNUSABLE_WEAPON = 0xF00060,
	STRREF_FEEDBACK_BASHCHESTFAILED = 0xF00061,
	STRREF_FEEDBACK_BASHCHESTSUCCEEDED = 0xF00062,
	STRREF_FEEDBACK_BASHDOORFAILED = 0xF00063,
	STRREF_FEEDBACK_BASHDOORSUCCEEDED = 0xF00064,
	STRREF_FEEDBACK_BATTLESONGBEGIN = 0xF00065,
	STRREF_FEEDBACK_BATTLESONGEND = 0xF00066,
	STRREF_FEEDBACK_CANNOT_TALK_BUSY = 0xF00067,
	STRREF_FEEDBACK_CAN_NOT_TALK_CHARMED = 0xF00068,
	STRREF_FEEDBACK_CASTING = 0xF00069,
	STRREF_FEEDBACK_CASTS = 0xF0006A,
	STRREF_FEEDBACK_CHARACTERS_EXPORTED = 0xF0006B,
	STRREF_FEEDBACK_CRIPPLING_STRIKE = 0xF0006C,
	STRREF_FEEDBACK_CRITICALHIT = 0xF0006D,
	STRREF_FEEDBACK_CRITICALHITAVOIDED = 0xF0006E,
	STRREF_FEEDBACK_CRITICALMISS = 0xF0006F,
	STRREF_FEEDBACK_DETECTTRAPSMODE = 0xF00070,
	STRREF_FEEDBACK_ENCUMBERED_SLOWED = 0xF00071,
	STRREF_FEEDBACK_ENCUMBERED_STOPPED = 0xF00072,
	STRREF_FEEDBACK_EVADE = 0xF00073,
	STRREF_FEEDBACK_EVADE_RESOURCE = 0xF00074,
	STRREF_FEEDBACK_FATIGUED = 0xF00075,
	STRREF_FEEDBACK_GAINEDEXPERIENCE = 0xF00076,
	STRREF_FEEDBACK_GAINEDGOLD = 0xF00077,
	STRREF_FEEDBACK_GAINEDITEM = 0xF00078,
	STRREF_FEEDBACK_GAINEDREPUTATION = 0xF00079,
	STRREF_FEEDBACK_GAINEDSPECIALABILITY = 0xF0007A,
	STRREF_FEEDBACK_GAINED_SPELL = 0xF0007B,
	STRREF_FEEDBACK_GAMEDURATIONFORMAT = 0xF0007C,
	STRREF_FEEDBACK_HIDEFAILED = 0xF0007D,
	STRREF_FEEDBACK_HIDESUCCEEDED = 0xF0007E,
	STRREF_FEEDBACK_HIT = 0xF0007F,
	STRREF_FEEDBACK_IMMUNE_RESOURCE = 0xF00080,
	STRREF_FEEDBACK_IMMUNE_TO_DAMAGE = 0xF00081,
	STRREF_FEEDBACK_IMMUNE_TO_SPELL = 0xF00082,
	STRREF_FEEDBACK_IMMUNE_TO_WEAPON = 0xF00083,
	STRREF_FEEDBACK_INVENTORYFULL_ITEMDROPPED = 0xF00084,
	STRREF_FEEDBACK_ITEMDRAINED = 0xF00085,
	STRREF_FEEDBACK_ITEM_DROPPED_FULL = 0xF00086,
	STRREF_FEEDBACK_JOURNAL_GENERAL_UPDATE = 0xF00087,
	STRREF_FEEDBACK_JOURNAL_UPDATE = 0xF00088,
	STRREF_FEEDBACK_JOURNEYTIMEFORMAT = 0xF00089,
	STRREF_FEEDBACK_LEAVING_SHADOWS = 0xF0008A,
	STRREF_FEEDBACK_LEVELUP = 0xF0008B,
	STRREF_FEEDBACK_LOCKPICKFAILED = 0xF0008C,
	STRREF_FEEDBACK_LOCKPICKSUCCEEDED = 0xF0008D,
	STRREF_FEEDBACK_LOCK_NOTLOCKED = 0xF0008E,
	STRREF_FEEDBACK_LOCK_UNPICKABLE = 0xF0008F,
	STRREF_FEEDBACK_LOSTCLASS_PALADIN = 0xF00090,
	STRREF_FEEDBACK_LOSTCLASS_RANGER = 0xF00091,
	STRREF_FEEDBACK_LOSTEXPERIENCE = 0xF00092,
	STRREF_FEEDBACK_LOSTGOLD = 0xF00093,
	STRREF_FEEDBACK_LOSTITEM = 0xF00094,
	STRREF_FEEDBACK_LOSTREPUTATION = 0xF00095,
	STRREF_FEEDBACK_MISS = 0xF00096,
	STRREF_FEEDBACK_MONK_CAN_NOT_USE_OFFHAND = 0xF00097,
	STRREF_FEEDBACK_MORALEFAILURE_BERSERK = 0xF00098,
	STRREF_FEEDBACK_MORALEFAILURE_PANIC = 0xF00099,
	STRREF_FEEDBACK_MORALEFAILURE_RUN = 0xF0009A,
	STRREF_FEEDBACK_NOSPELLSORITEMS = 0xF0009B,
	STRREF_FEEDBACK_OFF = 0xF0009C,
	STRREF_FEEDBACK_ON = 0xF0009D,
	STRREF_FEEDBACK_PERSONAL_XP = 0xF0009E,
	STRREF_FEEDBACK_PICKPOCKETFAILED_ARMOR = 0xF0009F,
	STRREF_FEEDBACK_PICKPOCKETFAILED_HOSTILE = 0xF000A0,
	STRREF_FEEDBACK_PICKPOCKETFAILED_INVENTORYFULL = 0xF000A1,
	STRREF_FEEDBACK_PICKPOCKETFAILED_NOITEMS = 0xF000A2,
	STRREF_FEEDBACK_PICKPOCKETFAILED_SKILL = 0xF000A3,
	STRREF_FEEDBACK_PICKPOCKETSUCCEEDED = 0xF000A4,
	STRREF_FEEDBACK_PRIEST_SPELLS_DISABLED = 0xF000A5,
	STRREF_FEEDBACK_RESTTIMEFORMAT = 0xF000A6,
	STRREF_FEEDBACK_SHAMANDANCEBEGIN = 0xF000A7,
	STRREF_FEEDBACK_SHAMANDANCEEND = 0xF000A8,
	STRREF_FEEDBACK_SINGING = 0xF000A9,
	STRREF_FEEDBACK_SNAREFAILED = 0xF000AA,
	STRREF_FEEDBACK_SNAREFAILED_ENEMIES = 0xF000AB,
	STRREF_FEEDBACK_SNAREFAILED_TOOMANY = 0xF000AC,
	STRREF_FEEDBACK_SNARESUCCEEDED = 0xF000AD,
	STRREF_FEEDBACK_SNEAK_ATTACK = 0xF000AE,
	STRREF_FEEDBACK_SNEAK_AVOIDED = 0xF000AF,
	STRREF_FEEDBACK_SNEAK_UNUSABLE_WEAPON = 0xF000B0,
	STRREF_FEEDBACK_SPELLABORTED_TARGETINVISIBLEORSANCTUARY = 0xF000B1,
	STRREF_FEEDBACK_SPELLFAILED_CASTFAILURE = 0xF000B2,
	STRREF_FEEDBACK_SPELLFAILED_CASTFAILUREDEAD = 0xF000B3,
	STRREF_FEEDBACK_SPELLFAILED_COMBAT = 0xF000B4,
	STRREF_FEEDBACK_SPELLFAILED_INDOORS = 0xF000B5,
	STRREF_FEEDBACK_SPELLFAILED_POCKETPLANE = 0xF000B6,
	STRREF_FEEDBACK_SPELLFAILED_POCKETPLANE_WATCHERS = 0xF000B7,
	STRREF_FEEDBACK_STUNNED = 0xF000B8,
	STRREF_FEEDBACK_TIMEOUT_SERVER_SEIZED_CHARACTER = 0xF000B9,
	STRREF_FEEDBACK_TOOMANYSOLARS = 0xF000BA,
	STRREF_FEEDBACK_TOOMANYSUMMONED = 0xF000BB,
	STRREF_FEEDBACK_TRACKING = 0xF000BC,
	STRREF_FEEDBACK_TRAPDETECTBEGIN = 0xF000BD,
	STRREF_FEEDBACK_TRAPDETECTED = 0xF000BE,
	STRREF_FEEDBACK_TRAPDETECTEND = 0xF000BF,
	STRREF_FEEDBACK_TRAPDISARMED = 0xF000C0,
	STRREF_FEEDBACK_TRAPDISARMEDFAILED = 0xF000C1,
	STRREF_FEEDBACK_TURNPALADINTURNED = 0xF000C2,
	STRREF_FEEDBACK_TURNUNDEADBEGIN = 0xF000C3,
	STRREF_FEEDBACK_TURNUNDEADEND = 0xF000C4,
	STRREF_FEEDBACK_TURNUNDEADMODE = 0xF000C5,
	STRREF_FEEDBACK_TURNUNDEADTURNED = 0xF000C6,
	STRREF_FEEDBACK_WAITING_FOR_SYNC = 0xF000C7,
	STRREF_FEEDBACK_WILDMAGE_LEVEL_DOWN = 0xF000C8,
	STRREF_FEEDBACK_WILDMAGE_LEVEL_UP = 0xF000C9,
	STRREF_FEEDBACK_WILDSURGE = 0xF000CA,
	STRREF_FEEDBACK_WILDSURGE_AVERTED_CHAOS_SHIELD = 0xF000CB,
	STRREF_FEEDBACK_WIZARD_SPELLS_DISABLED = 0xF000CC,
	STRREF_FEEDBACK_WORLDMAP_UPDATE = 0xF000CD,
	STRREF_GUI_ATTACK_TEXT = 0xF000CE,
	STRREF_GUI_ATTACK_TEXT_RESISTED = 0xF000CF,
	STRREF_GUI_ATTACK_TEXT_VULNERABLE = 0xF000D0,
	STRREF_GUI_BUTTONS_ATTACK = 0xF000D1,
	STRREF_GUI_BUTTONS_BATTLESONG = 0xF000D2,
	STRREF_GUI_BUTTONS_CASTSPELL = 0xF000D3,
	STRREF_GUI_BUTTONS_DETECTTRAPS = 0xF000D4,
	STRREF_GUI_BUTTONS_DIALOG = 0xF000D5,
	STRREF_GUI_BUTTONS_GUARD = 0xF000D6,
	STRREF_GUI_BUTTONS_JUMPTOCLERIC = 0xF000D7,
	STRREF_GUI_BUTTONS_JUMPTOMAGE = 0xF000D8,
	STRREF_GUI_BUTTONS_PICKSPECIALABILITY = 0xF000D9,
	STRREF_GUI_BUTTONS_QUICKFORMATION = 0xF000DA,
	STRREF_GUI_BUTTONS_QUICKITEM = 0xF000DB,
	STRREF_GUI_BUTTONS_QUICKSPELL = 0xF000DC,
	STRREF_GUI_BUTTONS_QUICKWEAPONABILITY = 0xF000DD,
	STRREF_GUI_BUTTONS_SHAMANDANCE = 0xF000DE,
	STRREF_GUI_BUTTONS_SHAPECHANGE = 0xF000DF,
	STRREF_GUI_BUTTONS_STEALTH = 0xF000E0,
	STRREF_GUI_BUTTONS_STOPACTION = 0xF000E1,
	STRREF_GUI_BUTTONS_THIEVING = 0xF000E2,
	STRREF_GUI_BUTTONS_TURNUNDEAD = 0xF000E3,
	STRREF_GUI_BUTTONS_USEITEM = 0xF000E4,
	STRREF_GUI_CANT_PAUSE = 0xF000E5,
	STRREF_GUI_CHAT_TO_ALL_PLAYERS = 0xF000E6,
	STRREF_GUI_DAMAGE_SPECIAL = 0xF000E7,
	STRREF_GUI_DLC_CANCELLED = 0xF000E8,
	STRREF_GUI_DLC_DETAILS = 0xF000E9,
	STRREF_GUI_DLC_DOWNLOAD_TEXT = 0xF000EA,
	STRREF_GUI_DLC_DOWNLOAD_TIME_TEXT = 0xF000EB,
	STRREF_GUI_DLC_FAILED = 0xF000EC,
	STRREF_GUI_DLC_INSTALLED = 0xF000ED,
	STRREF_GUI_DLC_IN_PROGRESS = 0xF000EE,
	STRREF_GUI_DLC_MISSING_CONTENT = 0xF000EF,
	STRREF_GUI_DLC_RESTORE_PURCHASES = 0xF000F0,
	STRREF_GUI_DLC_RESTORING_PURCHASES = 0xF000F1,
	STRREF_GUI_DLC_RESTORING_PURCHASES_COMPLETE = 0xF000F2,
	STRREF_GUI_DLC_SUCCESS = 0xF000F3,
	STRREF_GUI_DLC_WAITING = 0xF000F4,
	STRREF_GUI_FEEDBACK_CONTINGENCY_SPELL_FAILED = 0xF000F5,
	STRREF_GUI_FEEDBACK_CONTINGENCY_TRIGGER = 0xF000F6,
	STRREF_GUI_GAMESPY_BARBARIAN = 0xF000F7,
	STRREF_GUI_GAMESPY_BARD = 0xF000F8,
	STRREF_GUI_GAMESPY_CLERIC = 0xF000F9,
	STRREF_GUI_GAMESPY_CLERIC_RANGER = 0xF000FA,
	STRREF_GUI_GAMESPY_CLERIC_THIEF = 0xF000FB,
	STRREF_GUI_GAMESPY_DRUID = 0xF000FC,
	STRREF_GUI_GAMESPY_FIGHTER = 0xF000FD,
	STRREF_GUI_GAMESPY_FIGHTER_CLERIC = 0xF000FE,
	STRREF_GUI_GAMESPY_FIGHTER_DRUID = 0xF000FF,
	STRREF_GUI_GAMESPY_FIGHTER_MAGE = 0xF00100,
	STRREF_GUI_GAMESPY_FIGHTER_MAGE_CLERIC = 0xF00101,
	STRREF_GUI_GAMESPY_FIGHTER_MAGE_THIEF = 0xF00102,
	STRREF_GUI_GAMESPY_FIGHTER_THIEF = 0xF00103,
	STRREF_GUI_GAMESPY_MAGE = 0xF00104,
	STRREF_GUI_GAMESPY_MAGE_CLERIC = 0xF00105,
	STRREF_GUI_GAMESPY_MAGE_THIEF = 0xF00106,
	STRREF_GUI_GAMESPY_MONK = 0xF00107,
	STRREF_GUI_GAMESPY_PALADIN = 0xF00108,
	STRREF_GUI_GAMESPY_RANGER = 0xF00109,
	STRREF_GUI_GAMESPY_SHAMAN = 0xF0010A,
	STRREF_GUI_GAMESPY_SORCERER = 0xF0010B,
	STRREF_GUI_GAMESPY_THIEF = 0xF0010C,
	STRREF_GUI_HELP_3E_THIEF = 0xF0010D,
	STRREF_GUI_HELP_ABILITIES = 0xF0010E,
	STRREF_GUI_HELP_AI_OFF = 0xF0010F,
	STRREF_GUI_HELP_AI_ON = 0xF00110,
	STRREF_GUI_HELP_ALIGNMENT = 0xF00111,
	STRREF_GUI_HELP_APPEARANCE = 0xF00112,
	STRREF_GUI_HELP_AUTOPAUSE = 0xF00113,
	STRREF_GUI_HELP_AUTOPAUSE_CENTER = 0xF00114,
	STRREF_GUI_HELP_AUTOPAUSE_CHARATTACKED = 0xF00115,
	STRREF_GUI_HELP_AUTOPAUSE_CHARDEAD = 0xF00116,
	STRREF_GUI_HELP_AUTOPAUSE_CHARHIT = 0xF00117,
	STRREF_GUI_HELP_AUTOPAUSE_CHARINJURED = 0xF00118,
	STRREF_GUI_HELP_AUTOPAUSE_CHARTARGDEST = 0xF00119,
	STRREF_GUI_HELP_AUTOPAUSE_ENDOFROUND = 0xF0011A,
	STRREF_GUI_HELP_AUTOPAUSE_ENEMYSIGHTED = 0xF0011B,
	STRREF_GUI_HELP_AUTOPAUSE_SPELLCAST = 0xF0011C,
	STRREF_GUI_HELP_AUTOPAUSE_TRAPFOUND = 0xF0011D,
	STRREF_GUI_HELP_AUTOPAUSE_WEAPONUNUSABLE = 0xF0011E,
	STRREF_GUI_HELP_BARBARIAN = 0xF0011F,
	STRREF_GUI_HELP_BARD = 0xF00120,
	STRREF_GUI_HELP_BRIGHTNESS = 0xF00121,
	STRREF_GUI_HELP_CANTUSEITEMONINVENTORY = 0xF00122,
	STRREF_GUI_HELP_CANT_SPECIALIZE_PROFICIENCY = 0xF00123,
	STRREF_GUI_HELP_CARRION_CRAWLER = 0xF00124,
	STRREF_GUI_HELP_CHAOTIC_EVIL = 0xF00125,
	STRREF_GUI_HELP_CHAOTIC_GOOD = 0xF00126,
	STRREF_GUI_HELP_CHAOTIC_NEUTRAL = 0xF00127,
	STRREF_GUI_HELP_CHARGEN = 0xF00128,
	STRREF_GUI_HELP_CHARISMA = 0xF00129,
	STRREF_GUI_HELP_CHOOSEABILITYLEVELUP = 0xF0012A,
	STRREF_GUI_HELP_CHOOSEMAGE = 0xF0012B,
	STRREF_GUI_HELP_CHOOSEMAGELEVELUP = 0xF0012C,
	STRREF_GUI_HELP_CHOOSESORCEROR = 0xF0012D,
	STRREF_GUI_HELP_CLASS = 0xF0012E,
	STRREF_GUI_HELP_CLERIC = 0xF0012F,
	STRREF_GUI_HELP_CLERIC_RANGER = 0xF00130,
	STRREF_GUI_HELP_CLERIC_THIEF = 0xF00131,
	STRREF_GUI_HELP_COLORDEPTH = 0xF00132,
	STRREF_GUI_HELP_CONSTITUTION = 0xF00133,
	STRREF_GUI_HELP_CONTRAST = 0xF00134,
	STRREF_GUI_HELP_CREATEGAME = 0xF00135,
	STRREF_GUI_HELP_CREATE_CHAR = 0xF00136,
	STRREF_GUI_HELP_CUSTOMIZE = 0xF00137,
	STRREF_GUI_HELP_CUSTOMSOUNDS = 0xF00138,
	STRREF_GUI_HELP_DETECT_ILLUSION = 0xF00139,
	STRREF_GUI_HELP_DETECT_TRAPS = 0xF0013A,
	STRREF_GUI_HELP_DEXTERITY = 0xF0013B,
	STRREF_GUI_HELP_DIFFICULTY = 0xF0013C,
	STRREF_GUI_HELP_DITHERALWAYS = 0xF0013D,
	STRREF_GUI_HELP_DRUID = 0xF0013E,
	STRREF_GUI_HELP_DUALCLASS = 0xF0013F,
	STRREF_GUI_HELP_DUALCLASS_CLASS = 0xF00140,
	STRREF_GUI_HELP_DUALCLASS_CLERIC = 0xF00141,
	STRREF_GUI_HELP_DUALCLASS_DRUID = 0xF00142,
	STRREF_GUI_HELP_DUALCLASS_FIGHTER = 0xF00143,
	STRREF_GUI_HELP_DUALCLASS_MAGE = 0xF00144,
	STRREF_GUI_HELP_DUALCLASS_RANGER = 0xF00145,
	STRREF_GUI_HELP_DUALCLASS_SPECIALISTMAGE = 0xF00146,
	STRREF_GUI_HELP_DUALCLASS_THIEF = 0xF00147,
	STRREF_GUI_HELP_DWARF = 0xF00148,
	STRREF_GUI_HELP_ELF = 0xF00149,
	STRREF_GUI_HELP_ENVIRONMENTALAUDIO = 0xF0014A,
	STRREF_GUI_HELP_ETTERCAP = 0xF0014B,
	STRREF_GUI_HELP_EXPORT = 0xF0014C,
	STRREF_GUI_HELP_EXTRADAMAGE = 0xF0014D,
	STRREF_GUI_HELP_EXTRAXP = 0xF0014E,
	STRREF_GUI_HELP_FEEDBACK = 0xF0014F,
	STRREF_GUI_HELP_FEEDBACK_ACTIONS = 0xF00150,
	STRREF_GUI_HELP_FEEDBACK_COMBATINFO = 0xF00151,
	STRREF_GUI_HELP_FEEDBACK_COSMETIC_ATTACK = 0xF00152,
	STRREF_GUI_HELP_FEEDBACK_LOCATOR = 0xF00153,
	STRREF_GUI_HELP_FEEDBACK_MARKER = 0xF00154,
	STRREF_GUI_HELP_FEEDBACK_MARKER_COLOR = 0xF00155,
	STRREF_GUI_HELP_FEEDBACK_MISC = 0xF00156,
	STRREF_GUI_HELP_FEEDBACK_OVERCONFIRM = 0xF00157,
	STRREF_GUI_HELP_FEEDBACK_SELECTIONTEXT = 0xF00158,
	STRREF_GUI_HELP_FEEDBACK_STATE = 0xF00159,
	STRREF_GUI_HELP_FEEDBACK_TOHITROLLS = 0xF0015A,
	STRREF_GUI_HELP_FEMALE = 0xF0015B,
	STRREF_GUI_HELP_FIGHTER = 0xF0015C,
	STRREF_GUI_HELP_FIGHTER_CLERIC = 0xF0015D,
	STRREF_GUI_HELP_FIGHTER_DRUID = 0xF0015E,
	STRREF_GUI_HELP_FIGHTER_MAGE = 0xF0015F,
	STRREF_GUI_HELP_FIGHTER_MAGE_CLERIC = 0xF00160,
	STRREF_GUI_HELP_FIGHTER_MAGE_THIEF = 0xF00161,
	STRREF_GUI_HELP_FIGHTER_THIEF = 0xF00162,
	STRREF_GUI_HELP_FULLSCREEN = 0xF00163,
	STRREF_GUI_HELP_GAMEPLAY = 0xF00164,
	STRREF_GUI_HELP_GENDER = 0xF00165,
	STRREF_GUI_HELP_GHOUL = 0xF00166,
	STRREF_GUI_HELP_GIBBERLING = 0xF00167,
	STRREF_GUI_HELP_GNOLL = 0xF00168,
	STRREF_GUI_HELP_GNOME = 0xF00169,
	STRREF_GUI_HELP_GORE = 0xF0016A,
	STRREF_GUI_HELP_GRAPHICS = 0xF0016B,
	STRREF_GUI_HELP_HAIRSKIN = 0xF0016C,
	STRREF_GUI_HELP_HALFLING = 0xF0016D,
	STRREF_GUI_HELP_HALFORC = 0xF0016E,
	STRREF_GUI_HELP_HALF_ELF = 0xF0016F,
	STRREF_GUI_HELP_HARDWARE_CURSOR = 0xF00170,
	STRREF_GUI_HELP_HATEDRACE = 0xF00171,
	STRREF_GUI_HELP_HIDE_IN_SHADOWS = 0xF00172,
	STRREF_GUI_HELP_HOBGOBLIN = 0xF00173,
	STRREF_GUI_HELP_HOF = 0xF00174,
	STRREF_GUI_HELP_HUMAN = 0xF00175,
	STRREF_GUI_HELP_IMPORT = 0xF00176,
	STRREF_GUI_HELP_IMPORTCHARFROMGAME = 0xF00177,
	STRREF_GUI_HELP_IMPORTCHOICE = 0xF00178,
	STRREF_GUI_HELP_IMPORTGAME = 0xF00179,
	STRREF_GUI_HELP_IMPORTINVALIDCHAR = 0xF0017A,
	STRREF_GUI_HELP_IMPORTOPTIONS = 0xF0017B,
	STRREF_GUI_HELP_IMPORTOPTIONS_STATS = 0xF0017C,
	STRREF_GUI_HELP_IMPORTOPTIONS_STATSXP = 0xF0017D,
	STRREF_GUI_HELP_IMPORTOPTIONS_STATSXPITEMS = 0xF0017E,
	STRREF_GUI_HELP_INFRAVISION = 0xF0017F,
	STRREF_GUI_HELP_INTELLIGENCE = 0xF00180,
	STRREF_GUI_HELP_ITEMABILITIES = 0xF00181,
	STRREF_GUI_HELP_KEYBOARDSPEED = 0xF00182,
	STRREF_GUI_HELP_KIT_ASSASIN = 0xF00183,
	STRREF_GUI_HELP_KIT_BEASTFRIEND = 0xF00184,
	STRREF_GUI_HELP_KIT_BEASTMASTER = 0xF00185,
	STRREF_GUI_HELP_KIT_BERSERKER = 0xF00186,
	STRREF_GUI_HELP_KIT_BLADE = 0xF00187,
	STRREF_GUI_HELP_KIT_BOUNTYHUNTER = 0xF00188,
	STRREF_GUI_HELP_KIT_CAVALIER = 0xF00189,
	STRREF_GUI_HELP_KIT_FERALAN = 0xF0018A,
	STRREF_GUI_HELP_KIT_GODHELM = 0xF0018B,
	STRREF_GUI_HELP_KIT_GODLATHANDER = 0xF0018C,
	STRREF_GUI_HELP_KIT_GODTALOS = 0xF0018D,
	STRREF_GUI_HELP_KIT_INQUISITOR = 0xF0018E,
	STRREF_GUI_HELP_KIT_JESTER = 0xF0018F,
	STRREF_GUI_HELP_KIT_KENSAI = 0xF00190,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_ABJURER = 0xF00191,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_CONJURER = 0xF00192,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_DIVINER = 0xF00193,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_ENCHANTER = 0xF00194,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_ILLUSIONIST = 0xF00195,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_INVOKER = 0xF00196,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_NECROMANCER = 0xF00197,
	STRREF_GUI_HELP_KIT_MAGESCHOOL_TRANSMUTER = 0xF00198,
	STRREF_GUI_HELP_KIT_SHAPESHIFTER = 0xF00199,
	STRREF_GUI_HELP_KIT_SKALD = 0xF0019A,
	STRREF_GUI_HELP_KIT_STALKER = 0xF0019B,
	STRREF_GUI_HELP_KIT_SWASHBUCKLER = 0xF0019C,
	STRREF_GUI_HELP_KIT_TOTEMIC = 0xF0019D,
	STRREF_GUI_HELP_KIT_UNDEADHUNTER = 0xF0019E,
	STRREF_GUI_HELP_KIT_WIZARDSLAYER = 0xF0019F,
	STRREF_GUI_HELP_KOBOLD = 0xF001A0,
	STRREF_GUI_HELP_LAWFUL_EVIL = 0xF001A1,
	STRREF_GUI_HELP_LAWFUL_GOOD = 0xF001A2,
	STRREF_GUI_HELP_LAWFUL_NEUTRAL = 0xF001A3,
	STRREF_GUI_HELP_LOBBY = 0xF001A4,
	STRREF_GUI_HELP_MAGE = 0xF001A5,
	STRREF_GUI_HELP_MAGE_CLERIC = 0xF001A6,
	STRREF_GUI_HELP_MAGE_THIEF = 0xF001A7,
	STRREF_GUI_HELP_MALE = 0xF001A8,
	STRREF_GUI_HELP_MAXABILITY = 0xF001A9,
	STRREF_GUI_HELP_MAXSKILL = 0xF001AA,
	STRREF_GUI_HELP_MAX_HP = 0xF001AB,
	STRREF_GUI_HELP_MEMORIZEMAGE = 0xF001AC,
	STRREF_GUI_HELP_MEMORIZEPRIEST = 0xF001AD,
	STRREF_GUI_HELP_MERCHANT = 0xF001AE,
	STRREF_GUI_HELP_MINABILITY = 0xF001AF,
	STRREF_GUI_HELP_MINSKILL = 0xF001B0,
	STRREF_GUI_HELP_MONK = 0xF001B1,
	STRREF_GUI_HELP_MOUSESPEED = 0xF001B2,
	STRREF_GUI_HELP_MOVE_SILENTLY = 0xF001B3,
	STRREF_GUI_HELP_MULTICLASS = 0xF001B4,
	STRREF_GUI_HELP_NEUTRAL_EVIL = 0xF001B5,
	STRREF_GUI_HELP_NEUTRAL_GOOD = 0xF001B6,
	STRREF_GUI_HELP_NOBLE = 0xF001B7,
	STRREF_GUI_HELP_OGRE = 0xF001B8,
	STRREF_GUI_HELP_OPEN_LOCKS = 0xF001B9,
	STRREF_GUI_HELP_PALADIN = 0xF001BA,
	STRREF_GUI_HELP_PAUSED = 0xF001BB,
	STRREF_GUI_HELP_PAUSEDIALOG = 0xF001BC,
	STRREF_GUI_HELP_PEASANT = 0xF001BD,
	STRREF_GUI_HELP_PICK_POCKETS = 0xF001BE,
	STRREF_GUI_HELP_PROFICIENCIES = 0xF001BF,
	STRREF_GUI_HELP_PROFICIENCIES_INACTIVE = 0xF001C0,
	STRREF_GUI_HELP_PROTOCOL = 0xF001C1,
	STRREF_GUI_HELP_RACE = 0xF001C2,
	STRREF_GUI_HELP_RANGER = 0xF001C3,
	STRREF_GUI_HELP_RESTHEAL = 0xF001C4,
	STRREF_GUI_HELP_RESTRICTSTORES = 0xF001C5,
	STRREF_GUI_HELP_ROYAL = 0xF001C6,
	STRREF_GUI_HELP_SCALE_UI = 0xF001C7,
	STRREF_GUI_HELP_SELECTSOUNDS = 0xF001C8,
	STRREF_GUI_HELP_SELECT_ALL = 0xF001C9,
	STRREF_GUI_HELP_SET_TRAPS = 0xF001CA,
	STRREF_GUI_HELP_SHOW_HP = 0xF001CB,
	STRREF_GUI_HELP_SKELETON = 0xF001CC,
	STRREF_GUI_HELP_SKILLS = 0xF001CD,
	STRREF_GUI_HELP_SKILLS_INACTIVE = 0xF001CE,
	STRREF_GUI_HELP_SOFTWAREBLT = 0xF001CF,
	STRREF_GUI_HELP_SOFTWAREBOTH = 0xF001D0,
	STRREF_GUI_HELP_SOFTWAREFULL = 0xF001D1,
	STRREF_GUI_HELP_SORCERER = 0xF001D2,
	STRREF_GUI_HELP_SOUND = 0xF001D3,
	STRREF_GUI_HELP_SOUNDS_ATTACK = 0xF001D4,
	STRREF_GUI_HELP_SOUNDS_COMMAND = 0xF001D5,
	STRREF_GUI_HELP_SOUNDS_DISPLAYVERBAL = 0xF001D6,
	STRREF_GUI_HELP_SOUNDS_MOVEMENT = 0xF001D7,
	STRREF_GUI_HELP_SOUNDS_SELECTION = 0xF001D8,
	STRREF_GUI_HELP_SPECIALISTMAGE = 0xF001D9,
	STRREF_GUI_HELP_SPECIALISTSPELLS = 0xF001DA,
	STRREF_GUI_HELP_SPIDER = 0xF001DB,
	STRREF_GUI_HELP_SPRITEMIRROR = 0xF001DC,
	STRREF_GUI_HELP_STEALTH_RANGER = 0xF001DD,
	STRREF_GUI_HELP_STRENGTH = 0xF001DE,
	STRREF_GUI_HELP_THIEF = 0xF001DF,
	STRREF_GUI_HELP_TOOLTIPDELAY = 0xF001E0,
	STRREF_GUI_HELP_TRANSSHADOWS = 0xF001E1,
	STRREF_GUI_HELP_TRUE_NEUTRAL = 0xF001E2,
	STRREF_GUI_HELP_UNPAUSED = 0xF001E3,
	STRREF_GUI_HELP_VOLUME_AMBIENTS = 0xF001E4,
	STRREF_GUI_HELP_VOLUME_MOVIES = 0xF001E5,
	STRREF_GUI_HELP_VOLUME_MUSIC = 0xF001E6,
	STRREF_GUI_HELP_VOLUME_SOUNDFX = 0xF001E7,
	STRREF_GUI_HELP_VOLUME_VOICES = 0xF001E8,
	STRREF_GUI_HELP_WEATHER = 0xF001E9,
	STRREF_GUI_HELP_WILDMAGE = 0xF001EA,
	STRREF_GUI_HELP_WISDOM = 0xF001EB,
	STRREF_GUI_HELP_ZOOM_LOCK = 0xF001EC,
	STRREF_GUI_LABEL_ESCAPENOTE = 0xF001ED,
	STRREF_GUI_LABEL_INDRIVE = 0xF001EE,
	STRREF_GUI_LABEL_NODISCINDRIVE = 0xF001EF,
	STRREF_GUI_LABEL_PLACECD = 0xF001F0,
	STRREF_GUI_LABEL_PLACEDVD = 0xF001F1,
	STRREF_GUI_LABEL_PRESSESCTOABORT = 0xF001F2,
	STRREF_GUI_LABEL_PROGRAMNAME = 0xF001F3,
	STRREF_GUI_LABEL_RECEIVINGINFOFROMCLIENTS = 0xF001F4,
	STRREF_GUI_LABEL_SENDINGINFOTOCLIENTS = 0xF001F5,
	STRREF_GUI_LABEL_SENDINGSAVEGAME = 0xF001F6,
	STRREF_GUI_LABEL_WAITINGFORSAVEGAME = 0xF001F7,
	STRREF_GUI_LABEL_WAITINGFORSERVERUPDATE = 0xF001F8,
	STRREF_GUI_LABEL_WRONGDISCINDRIVE = 0xF001F9,
	STRREF_GUI_LOADBAR_HELPFULLHINT1 = 0xF001FA,
	STRREF_GUI_LOADBAR_HELPFULLHINT10 = 0xF001FB,
	STRREF_GUI_LOADBAR_HELPFULLHINT2 = 0xF001FC,
	STRREF_GUI_LOADBAR_HELPFULLHINT3 = 0xF001FD,
	STRREF_GUI_LOADBAR_HELPFULLHINT4 = 0xF001FE,
	STRREF_GUI_LOADBAR_HELPFULLHINT5 = 0xF001FF,
	STRREF_GUI_LOADBAR_HELPFULLHINT6 = 0xF00200,
	STRREF_GUI_LOADBAR_HELPFULLHINT7 = 0xF00201,
	STRREF_GUI_LOADBAR_HELPFULLHINT8 = 0xF00202,
	STRREF_GUI_LOADBAR_HELPFULLHINT9 = 0xF00203,
	STRREF_GUI_LOWER_ABILITIES = 0xF00204,
	STRREF_GUI_LOWER_ACCEPT = 0xF00205,
	STRREF_GUI_LOWER_ADD = 0xF00206,
	STRREF_GUI_LOWER_AFTERNOON = 0xF00207,
	STRREF_GUI_LOWER_ALIGNMENT = 0xF00208,
	STRREF_GUI_LOWER_APPEARANCE = 0xF00209,
	STRREF_GUI_LOWER_APPLY = 0xF0020A,
	STRREF_GUI_LOWER_AREAMAP = 0xF0020B,
	STRREF_GUI_LOWER_AUTOPAUSE = 0xF0020C,
	STRREF_GUI_LOWER_BACK = 0xF0020D,
	STRREF_GUI_LOWER_BARBARIAN = 0xF0020E,
	STRREF_GUI_LOWER_BARD = 0xF0020F,
	STRREF_GUI_LOWER_BG1 = 0xF00210,
	STRREF_GUI_LOWER_BG1TEXT = 0xF00211,
	STRREF_GUI_LOWER_BIOGRAPHY = 0xF00212,
	STRREF_GUI_LOWER_BOTH = 0xF00213,
	STRREF_GUI_LOWER_BOY = 0xF00214,
	STRREF_GUI_LOWER_BROTHER = 0xF00215,
	STRREF_GUI_LOWER_BUY = 0xF00216,
	STRREF_GUI_LOWER_CANCEL = 0xF00217,
	STRREF_GUI_LOWER_CARRION_CRAWLER = 0xF00218,
	STRREF_GUI_LOWER_CHAINCONTINGENCY = 0xF00219,
	STRREF_GUI_LOWER_CHAOTIC_EVIL = 0xF0021A,
	STRREF_GUI_LOWER_CHAOTIC_GOOD = 0xF0021B,
	STRREF_GUI_LOWER_CHAOTIC_NEUTRAL = 0xF0021C,
	STRREF_GUI_LOWER_CHARACTERFILE = 0xF0021D,
	STRREF_GUI_LOWER_CLASS = 0xF0021E,
	STRREF_GUI_LOWER_CLEAR = 0xF0021F,
	STRREF_GUI_LOWER_CLERIC = 0xF00220,
	STRREF_GUI_LOWER_CLERIC_RANGER = 0xF00221,
	STRREF_GUI_LOWER_CLERIC_THIEF = 0xF00222,
	STRREF_GUI_LOWER_CLOSEBAG = 0xF00223,
	STRREF_GUI_LOWER_CONNECT = 0xF00224,
	STRREF_GUI_LOWER_CONTINGENCY = 0xF00225,
	STRREF_GUI_LOWER_CONTINUE = 0xF00226,
	STRREF_GUI_LOWER_COPYNOTE = 0xF00227,
	STRREF_GUI_LOWER_COPYSPELL = 0xF00228,
	STRREF_GUI_LOWER_CREATE = 0xF00229,
	STRREF_GUI_LOWER_CREATE_GAME = 0xF0022A,
	STRREF_GUI_LOWER_CREDITS = 0xF0022B,
	STRREF_GUI_LOWER_CUSTOM = 0xF0022C,
	STRREF_GUI_LOWER_CUSTOMIZE = 0xF0022D,
	STRREF_GUI_LOWER_CUSTOM_SOUNDS = 0xF0022E,
	STRREF_GUI_LOWER_DAUGHTER = 0xF0022F,
	STRREF_GUI_LOWER_DAY = 0xF00230,
	STRREF_GUI_LOWER_DEATHMATCH = 0xF00231,
	STRREF_GUI_LOWER_DEFAULT_SOUNDS = 0xF00232,
	STRREF_GUI_LOWER_DELETE = 0xF00233,
	STRREF_GUI_LOWER_DICE = 0xF00234,
	STRREF_GUI_LOWER_DISPELL = 0xF00235,
	STRREF_GUI_LOWER_DITHER_ALWAYS = 0xF00236,
	STRREF_GUI_LOWER_DLC_STORE = 0xF00237,
	STRREF_GUI_LOWER_DONATE = 0xF00238,
	STRREF_GUI_LOWER_DONE = 0xF00239,
	STRREF_GUI_LOWER_DONE_QUESTS = 0xF0023A,
	STRREF_GUI_LOWER_DRINKPOTION = 0xF0023B,
	STRREF_GUI_LOWER_DRUID = 0xF0023C,
	STRREF_GUI_LOWER_DUALCLASS = 0xF0023D,
	STRREF_GUI_LOWER_DUAL_CLASS = 0xF0023E,
	STRREF_GUI_LOWER_DURATIONFORMAT = 0xF0023F,
	STRREF_GUI_LOWER_DWARF = 0xF00240,
	STRREF_GUI_LOWER_EATBERRIES = 0xF00241,
	STRREF_GUI_LOWER_ELF = 0xF00242,
	STRREF_GUI_LOWER_ERASESPELL = 0xF00243,
	STRREF_GUI_LOWER_ETTERCAP = 0xF00244,
	STRREF_GUI_LOWER_EVENING = 0xF00245,
	STRREF_GUI_LOWER_EXPERIENCE = 0xF00246,
	STRREF_GUI_LOWER_EXPORT = 0xF00247,
	STRREF_GUI_LOWER_FALLEN_BEASTMASTER = 0xF00248,
	STRREF_GUI_LOWER_FALLEN_CAVALIER = 0xF00249,
	STRREF_GUI_LOWER_FALLEN_FERALAN = 0xF0024A,
	STRREF_GUI_LOWER_FALLEN_INQUISITOR = 0xF0024B,
	STRREF_GUI_LOWER_FALLEN_PALADIN = 0xF0024C,
	STRREF_GUI_LOWER_FALLEN_RANGER = 0xF0024D,
	STRREF_GUI_LOWER_FALLEN_STALKER = 0xF0024E,
	STRREF_GUI_LOWER_FALLEN_UNDEADHUNTER = 0xF0024F,
	STRREF_GUI_LOWER_FEEDBACK = 0xF00250,
	STRREF_GUI_LOWER_FEMALE = 0xF00251,
	STRREF_GUI_LOWER_FEMALE_TLK = 0xF00252,
	STRREF_GUI_LOWER_FIGHTER = 0xF00253,
	STRREF_GUI_LOWER_FIGHTER_CLERIC = 0xF00254,
	STRREF_GUI_LOWER_FIGHTER_DRUID = 0xF00255,
	STRREF_GUI_LOWER_FIGHTER_MAGE = 0xF00256,
	STRREF_GUI_LOWER_FIGHTER_MAGE_CLERIC = 0xF00257,
	STRREF_GUI_LOWER_FIGHTER_MAGE_THIEF = 0xF00258,
	STRREF_GUI_LOWER_FIGHTER_THIEF = 0xF00259,
	STRREF_GUI_LOWER_FOOTSTEPS = 0xF0025A,
	STRREF_GUI_LOWER_GAMEKIT = 0xF0025B,
	STRREF_GUI_LOWER_GAMEPLAY = 0xF0025C,
	STRREF_GUI_LOWER_GENDER = 0xF0025D,
	STRREF_GUI_LOWER_GETINFO = 0xF0025E,
	STRREF_GUI_LOWER_GHOUL = 0xF0025F,
	STRREF_GUI_LOWER_GIBBERLING = 0xF00260,
	STRREF_GUI_LOWER_GIRL = 0xF00261,
	STRREF_GUI_LOWER_GNOLL = 0xF00262,
	STRREF_GUI_LOWER_GNOME = 0xF00263,
	STRREF_GUI_LOWER_GO = 0xF00264,
	STRREF_GUI_LOWER_GRAPHICS = 0xF00265,
	STRREF_GUI_LOWER_HAIRSKIN = 0xF00266,
	STRREF_GUI_LOWER_HALFLING = 0xF00267,
	STRREF_GUI_LOWER_HALFORC = 0xF00268,
	STRREF_GUI_LOWER_HALF_ELF = 0xF00269,
	STRREF_GUI_LOWER_HE = 0xF0026A,
	STRREF_GUI_LOWER_HER = 0xF0026B,
	STRREF_GUI_LOWER_HIM = 0xF0026C,
	STRREF_GUI_LOWER_HIS = 0xF0026D,
	STRREF_GUI_LOWER_HOBGOBLIN = 0xF0026E,
	STRREF_GUI_LOWER_HUMAN = 0xF0026F,
	STRREF_GUI_LOWER_IDENTIFY = 0xF00270,
	STRREF_GUI_LOWER_IDENTIFYBYSCROLL = 0xF00271,
	STRREF_GUI_LOWER_IDENTIFYBYSPELL = 0xF00272,
	STRREF_GUI_LOWER_IMPORT = 0xF00273,
	STRREF_GUI_LOWER_IMPORT_GAME = 0xF00274,
	STRREF_GUI_LOWER_INFORMATION = 0xF00275,
	STRREF_GUI_LOWER_JINGLE = 0xF00276,
	STRREF_GUI_LOWER_JOIN = 0xF00277,
	STRREF_GUI_LOWER_JOIN_GAME = 0xF00278,
	STRREF_GUI_LOWER_JOURNAL = 0xF00279,
	STRREF_GUI_LOWER_KEYMAP = 0xF0027A,
	STRREF_GUI_LOWER_KICK = 0xF0027B,
	STRREF_GUI_LOWER_KITDESC = 0xF0027C,
	STRREF_GUI_LOWER_KIT_ASSASIN = 0xF0027D,
	STRREF_GUI_LOWER_KIT_BEASTFRIEND = 0xF0027E,
	STRREF_GUI_LOWER_KIT_BEASTMASTER = 0xF0027F,
	STRREF_GUI_LOWER_KIT_BERSERKER = 0xF00280,
	STRREF_GUI_LOWER_KIT_BLADE = 0xF00281,
	STRREF_GUI_LOWER_KIT_BOUNTYHUNTER = 0xF00282,
	STRREF_GUI_LOWER_KIT_CAVALIER = 0xF00283,
	STRREF_GUI_LOWER_KIT_FERALAN = 0xF00284,
	STRREF_GUI_LOWER_KIT_GODHELM = 0xF00285,
	STRREF_GUI_LOWER_KIT_GODLATHANDER = 0xF00286,
	STRREF_GUI_LOWER_KIT_GODTALOS = 0xF00287,
	STRREF_GUI_LOWER_KIT_INQUISITOR = 0xF00288,
	STRREF_GUI_LOWER_KIT_JESTER = 0xF00289,
	STRREF_GUI_LOWER_KIT_KENSAI = 0xF0028A,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_ABJURER = 0xF0028B,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_CONJURER = 0xF0028C,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_DIVINER = 0xF0028D,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_ENCHANTER = 0xF0028E,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_GENERALIST = 0xF0028F,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_ILLUSIONIST = 0xF00290,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_INVOKER = 0xF00291,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_NECROMANCER = 0xF00292,
	STRREF_GUI_LOWER_KIT_MAGESCHOOL_TRANSMUTER = 0xF00293,
	STRREF_GUI_LOWER_KIT_SHAPESHIFTER = 0xF00294,
	STRREF_GUI_LOWER_KIT_SKALD = 0xF00295,
	STRREF_GUI_LOWER_KIT_STALKER = 0xF00296,
	STRREF_GUI_LOWER_KIT_SWASHBUCKLER = 0xF00297,
	STRREF_GUI_LOWER_KIT_TOTEMIC = 0xF00298,
	STRREF_GUI_LOWER_KIT_UNDEADHUNTER = 0xF00299,
	STRREF_GUI_LOWER_KIT_WILDMAGE = 0xF0029A,
	STRREF_GUI_LOWER_KIT_WIZARDSLAYER = 0xF0029B,
	STRREF_GUI_LOWER_KOBOLD = 0xF0029C,
	STRREF_GUI_LOWER_LADY = 0xF0029D,
	STRREF_GUI_LOWER_LAWFUL_EVIL = 0xF0029E,
	STRREF_GUI_LOWER_LAWFUL_GOOD = 0xF0029F,
	STRREF_GUI_LOWER_LAWFUL_NEUTRAL = 0xF002A0,
	STRREF_GUI_LOWER_LEVEL = 0xF002A1,
	STRREF_GUI_LOWER_LEVELUP = 0xF002A2,
	STRREF_GUI_LOWER_LEVEL_UP = 0xF002A3,
	STRREF_GUI_LOWER_LISTEN = 0xF002A4,
	STRREF_GUI_LOWER_LOAD = 0xF002A5,
	STRREF_GUI_LOWER_LOAD_GAME = 0xF002A6,
	STRREF_GUI_LOWER_LOAD_SCENARIO = 0xF002A7,
	STRREF_GUI_LOWER_LOGOUT = 0xF002A8,
	STRREF_GUI_LOWER_LORD = 0xF002A9,
	STRREF_GUI_LOWER_MAAM = 0xF002AA,
	STRREF_GUI_LOWER_MAGE = 0xF002AB,
	STRREF_GUI_LOWER_MAGE_CLERIC = 0xF002AC,
	STRREF_GUI_LOWER_MAGE_THIEF = 0xF002AD,
	STRREF_GUI_LOWER_MALE = 0xF002AE,
	STRREF_GUI_LOWER_MALE_TLK = 0xF002AF,
	STRREF_GUI_LOWER_MAN = 0xF002B0,
	STRREF_GUI_LOWER_MASTER = 0xF002B1,
	STRREF_GUI_LOWER_MERCHANT = 0xF002B2,
	STRREF_GUI_LOWER_MINORSPELLSEQUENCER = 0xF002B3,
	STRREF_GUI_LOWER_MISSION_INFO = 0xF002B4,
	STRREF_GUI_LOWER_MISSION_PACK = 0xF002B5,
	STRREF_GUI_LOWER_MISSION_PACK25 = 0xF002B6,
	STRREF_GUI_LOWER_MISTRESS = 0xF002B7,
	STRREF_GUI_LOWER_MODIFY = 0xF002B8,
	STRREF_GUI_LOWER_MODIFY_CHARACTERS = 0xF002B9,
	STRREF_GUI_LOWER_MONK = 0xF002BA,
	STRREF_GUI_LOWER_MORNING = 0xF002BB,
	STRREF_GUI_LOWER_MOVETOBACKPACK = 0xF002BC,
	STRREF_GUI_LOWER_MOVETOCONTAINER = 0xF002BD,
	STRREF_GUI_LOWER_MOVIES = 0xF002BE,
	STRREF_GUI_LOWER_MULTICLASSED = 0xF002BF,
	STRREF_GUI_LOWER_MULTIPLAYER = 0xF002C0,
	STRREF_GUI_LOWER_NAME = 0xF002C1,
	STRREF_GUI_LOWER_NEITHER = 0xF002C2,
	STRREF_GUI_LOWER_NEUTRAL_EVIL = 0xF002C3,
	STRREF_GUI_LOWER_NEUTRAL_GOOD = 0xF002C4,
	STRREF_GUI_LOWER_NEW_GAME = 0xF002C5,
	STRREF_GUI_LOWER_NEXT = 0xF002C6,
	STRREF_GUI_LOWER_NEXT_LEVEL = 0xF002C7,
	STRREF_GUI_LOWER_NIGHT = 0xF002C8,
	STRREF_GUI_LOWER_NO = 0xF002C9,
	STRREF_GUI_LOWER_NOBLE = 0xF002CA,
	STRREF_GUI_LOWER_NORMAL_FIGHTER = 0xF002CB,
	STRREF_GUI_LOWER_NUISANCE_INFO = 0xF002CC,
	STRREF_GUI_LOWER_NUISANCE_INFOSOA = 0xF002CD,
	STRREF_GUI_LOWER_OGRE = 0xF002CE,
	STRREF_GUI_LOWER_OPENBAG = 0xF002CF,
	STRREF_GUI_LOWER_OPTIONS = 0xF002D0,
	STRREF_GUI_LOWER_OTHER = 0xF002D1,
	STRREF_GUI_LOWER_OTHER_MISSION_INFO = 0xF002D2,
	STRREF_GUI_LOWER_OVERWRITE = 0xF002D3,
	STRREF_GUI_LOWER_PALADIN = 0xF002D4,
	STRREF_GUI_LOWER_PEASANT = 0xF002D5,
	STRREF_GUI_LOWER_PERMISSIONS = 0xF002D6,
	STRREF_GUI_LOWER_PICKFORME = 0xF002D7,
	STRREF_GUI_LOWER_PLAY = 0xF002D8,
	STRREF_GUI_LOWER_PLAYER = 0xF002D9,
	STRREF_GUI_LOWER_PLAY_MOVIE = 0xF002DA,
	STRREF_GUI_LOWER_PLAY_SOUND = 0xF002DB,
	STRREF_GUI_LOWER_POPUPINFO = 0xF002DC,
	STRREF_GUI_LOWER_PREGENERATE = 0xF002DD,
	STRREF_GUI_LOWER_PROPERTIES = 0xF002DE,
	STRREF_GUI_LOWER_PROTOCOL = 0xF002DF,
	STRREF_GUI_LOWER_QUESTS = 0xF002E0,
	STRREF_GUI_LOWER_QUIT = 0xF002E1,
	STRREF_GUI_LOWER_QUIT_GAME = 0xF002E2,
	STRREF_GUI_LOWER_RACE = 0xF002E3,
	STRREF_GUI_LOWER_RANGER = 0xF002E4,
	STRREF_GUI_LOWER_READY = 0xF002E5,
	STRREF_GUI_LOWER_RECALL = 0xF002E6,
	STRREF_GUI_LOWER_REFORM_PARTY = 0xF002E7,
	STRREF_GUI_LOWER_RELEASEFAMILIAR = 0xF002E8,
	STRREF_GUI_LOWER_REMOVE = 0xF002E9,
	STRREF_GUI_LOWER_REMOVECHARACTERS = 0xF002EA,
	STRREF_GUI_LOWER_RENT = 0xF002EB,
	STRREF_GUI_LOWER_REPLAY = 0xF002EC,
	STRREF_GUI_LOWER_REROLL = 0xF002ED,
	STRREF_GUI_LOWER_REST = 0xF002EE,
	STRREF_GUI_LOWER_RETURN = 0xF002EF,
	STRREF_GUI_LOWER_RETURN_TO_GAME = 0xF002F0,
	STRREF_GUI_LOWER_REVERT = 0xF002F1,
	STRREF_GUI_LOWER_ROYAL = 0xF002F2,
	STRREF_GUI_LOWER_SAVE = 0xF002F3,
	STRREF_GUI_LOWER_SAVEDGAME = 0xF002F4,
	STRREF_GUI_LOWER_SAVE_GAME = 0xF002F5,
	STRREF_GUI_LOWER_SCRIPT = 0xF002F6,
	STRREF_GUI_LOWER_SELECT_SOUNDS = 0xF002F7,
	STRREF_GUI_LOWER_SELL = 0xF002F8,
	STRREF_GUI_LOWER_SERVERREMOVECHARACTERS = 0xF002F9,
	STRREF_GUI_LOWER_SHADOWSOFAMN = 0xF002FA,
	STRREF_GUI_LOWER_SHE = 0xF002FB,
	STRREF_GUI_LOWER_SINGLE_PLAYER = 0xF002FC,
	STRREF_GUI_LOWER_SIR = 0xF002FD,
	STRREF_GUI_LOWER_SISTER = 0xF002FE,
	STRREF_GUI_LOWER_SKELETON = 0xF002FF,
	STRREF_GUI_LOWER_SKILLS = 0xF00300,
	STRREF_GUI_LOWER_SOATEXT = 0xF00301,
	STRREF_GUI_LOWER_SON = 0xF00302,
	STRREF_GUI_LOWER_SORCERER = 0xF00303,
	STRREF_GUI_LOWER_SORTBYDATE = 0xF00304,
	STRREF_GUI_LOWER_SORTBYNAME = 0xF00305,
	STRREF_GUI_LOWER_SOUND = 0xF00306,
	STRREF_GUI_LOWER_SOUNDS = 0xF00307,
	STRREF_GUI_LOWER_SPECIALIST_MAGE = 0xF00308,
	STRREF_GUI_LOWER_SPELLSEQUENCER = 0xF00309,
	STRREF_GUI_LOWER_SPELLTRIGGER = 0xF0030A,
	STRREF_GUI_LOWER_SPIDER = 0xF0030B,
	STRREF_GUI_LOWER_START_OVER = 0xF0030C,
	STRREF_GUI_LOWER_STATS = 0xF0030D,
	STRREF_GUI_LOWER_STATS_XP = 0xF0030E,
	STRREF_GUI_LOWER_STATS_XP_ITEMS = 0xF0030F,
	STRREF_GUI_LOWER_STEAL = 0xF00310,
	STRREF_GUI_LOWER_STORE = 0xF00311,
	STRREF_GUI_LOWER_SWAP_MOUSE_BUTTONS = 0xF00312,
	STRREF_GUI_LOWER_TBPTEXT = 0xF00313,
	STRREF_GUI_LOWER_TCPIP = 0xF00314,
	STRREF_GUI_LOWER_TEST_VIDEO_CARD = 0xF00315,
	STRREF_GUI_LOWER_THEBLACKPITS = 0xF00316,
	STRREF_GUI_LOWER_THIEF = 0xF00317,
	STRREF_GUI_LOWER_THRONEOFBHAAL = 0xF00318,
	STRREF_GUI_LOWER_TIEFLING = 0xF00319,
	STRREF_GUI_LOWER_TIMEOUT = 0xF0031A,
	STRREF_GUI_LOWER_TOBTEXT = 0xF0031B,
	STRREF_GUI_LOWER_TRUE_NEUTRAL = 0xF0031C,
	STRREF_GUI_LOWER_TUTORIAL = 0xF0031D,
	STRREF_GUI_LOWER_TUTORIALTEXT = 0xF0031E,
	STRREF_GUI_LOWER_USER = 0xF0031F,
	STRREF_GUI_LOWER_VIDEO_CARD = 0xF00320,
	STRREF_GUI_LOWER_WOMAN = 0xF00321,
	STRREF_GUI_LOWER_WORLD = 0xF00322,
	STRREF_GUI_LOWER_YES = 0xF00323,
	STRREF_GUI_MAX_EXPERIENCE = 0xF00324,
	STRREF_GUI_MIXED_3E_SNEAK_ATTACK = 0xF00325,
	STRREF_GUI_MIXED_ABILITY_BONUSES = 0xF00326,
	STRREF_GUI_MIXED_ACCRUSHING = 0xF00327,
	STRREF_GUI_MIXED_ACMISSILE = 0xF00328,
	STRREF_GUI_MIXED_ACPIERCING = 0xF00329,
	STRREF_GUI_MIXED_ACSLASHING = 0xF0032A,
	STRREF_GUI_MIXED_ADDITIONALCASTINGABILITY = 0xF0032B,
	STRREF_GUI_MIXED_ADDITIONALHPGAINED = 0xF0032C,
	STRREF_GUI_MIXED_ADDITIONALMGSPELLS = 0xF0032D,
	STRREF_GUI_MIXED_ADDITIONALPRSPELLS = 0xF0032E,
	STRREF_GUI_MIXED_ADDITIONALSKILLPOINTS = 0xF0032F,
	STRREF_GUI_MIXED_ADDITIONALWEAPPROFS = 0xF00330,
	STRREF_GUI_MIXED_AISCRIPT = 0xF00331,
	STRREF_GUI_MIXED_ALIGNMENT = 0xF00332,
	STRREF_GUI_MIXED_AMULET = 0xF00333,
	STRREF_GUI_MIXED_ANDFORMAT = 0xF00334,
	STRREF_GUI_MIXED_AREA_TRANSITION_REFUSED = 0xF00335,
	STRREF_GUI_MIXED_ARMORCLASSBONUS = 0xF00336,
	STRREF_GUI_MIXED_ARMORCLASSMODIFIERS = 0xF00337,
	STRREF_GUI_MIXED_ARMOUR = 0xF00338,
	STRREF_GUI_MIXED_AXE = 0xF00339,
	STRREF_GUI_MIXED_BACK = 0xF0033A,
	STRREF_GUI_MIXED_BACKSTABINCREASEDBY = 0xF0033B,
	STRREF_GUI_MIXED_BACKSTAB_DAMAGE = 0xF0033C,
	STRREF_GUI_MIXED_BADSLOTCHARS = 0xF0033D,
	STRREF_GUI_MIXED_BADSLOTNAME = 0xF0033E,
	STRREF_GUI_MIXED_BAGISFULL = 0xF0033F,
	STRREF_GUI_MIXED_BAGWRONGTYPE = 0xF00340,
	STRREF_GUI_MIXED_BALDURSGATEMEDIA = 0xF00341,
	STRREF_GUI_MIXED_BARBARIAN = 0xF00342,
	STRREF_GUI_MIXED_BARD = 0xF00343,
	STRREF_GUI_MIXED_BASE_THAC0 = 0xF00344,
	STRREF_GUI_MIXED_BELT = 0xF00345,
	STRREF_GUI_MIXED_BIOGRAPHY_BARBARIAN = 0xF00346,
	STRREF_GUI_MIXED_BIOGRAPHY_BARD = 0xF00347,
	STRREF_GUI_MIXED_BIOGRAPHY_BLACKGUARD = 0xF00348,
	STRREF_GUI_MIXED_BIOGRAPHY_CLERIC = 0xF00349,
	STRREF_GUI_MIXED_BIOGRAPHY_DRUID = 0xF0034A,
	STRREF_GUI_MIXED_BIOGRAPHY_DWARF = 0xF0034B,
	STRREF_GUI_MIXED_BIOGRAPHY_ELF = 0xF0034C,
	STRREF_GUI_MIXED_BIOGRAPHY_FIGHTER = 0xF0034D,
	STRREF_GUI_MIXED_BIOGRAPHY_GNOME = 0xF0034E,
	STRREF_GUI_MIXED_BIOGRAPHY_HALFLING = 0xF0034F,
	STRREF_GUI_MIXED_BIOGRAPHY_HALFORC = 0xF00350,
	STRREF_GUI_MIXED_BIOGRAPHY_HALF_ELF = 0xF00351,
	STRREF_GUI_MIXED_BIOGRAPHY_HUMAN = 0xF00352,
	STRREF_GUI_MIXED_BIOGRAPHY_MAGE = 0xF00353,
	STRREF_GUI_MIXED_BIOGRAPHY_MONK = 0xF00354,
	STRREF_GUI_MIXED_BIOGRAPHY_MULTICLASS = 0xF00355,
	STRREF_GUI_MIXED_BIOGRAPHY_PALADIN = 0xF00356,
	STRREF_GUI_MIXED_BIOGRAPHY_RANGER = 0xF00357,
	STRREF_GUI_MIXED_BIOGRAPHY_SORCERER = 0xF00358,
	STRREF_GUI_MIXED_BIOGRAPHY_THIEF = 0xF00359,
	STRREF_GUI_MIXED_BLUNT = 0xF0035A,
	STRREF_GUI_MIXED_BONUS = 0xF0035B,
	STRREF_GUI_MIXED_BOOTS = 0xF0035C,
	STRREF_GUI_MIXED_BOW = 0xF0035D,
	STRREF_GUI_MIXED_BREAKINACTIONARRIVED = 0xF0035E,
	STRREF_GUI_MIXED_BREATHSAVTHREDUCEDBY = 0xF0035F,
	STRREF_GUI_MIXED_BUY_AND_SELL = 0xF00360,
	STRREF_GUI_MIXED_CANNOTAFFORDDRINK = 0xF00361,
	STRREF_GUI_MIXED_CANNOTAFFORDIDENTIFY = 0xF00362,
	STRREF_GUI_MIXED_CANNOTAFFORDITEMS = 0xF00363,
	STRREF_GUI_MIXED_CANNOTAFFORDROOM = 0xF00364,
	STRREF_GUI_MIXED_CANNOTAFFORDSPELL = 0xF00365,
	STRREF_GUI_MIXED_CANNOTCONNECT = 0xF00366,
	STRREF_GUI_MIXED_CANNOTCREATEPLAYER = 0xF00367,
	STRREF_GUI_MIXED_CANNOTDROP = 0xF00368,
	STRREF_GUI_MIXED_CANNOTENTERSTORE = 0xF00369,
	STRREF_GUI_MIXED_CANNOTENTERSTOREMONSTERS = 0xF0036A,
	STRREF_GUI_MIXED_CANNOTENTERSTORESCATTERED = 0xF0036B,
	STRREF_GUI_MIXED_CANNOTMODIFYCHARACTERS = 0xF0036C,
	STRREF_GUI_MIXED_CANNOTREMOVEITEMALORA = 0xF0036D,
	STRREF_GUI_MIXED_CANNOTREMOVEITEMEDWIN = 0xF0036E,
	STRREF_GUI_MIXED_CANNOTREMOVEITEMELDOTH = 0xF0036F,
	STRREF_GUI_MIXED_CANNOTREMOVEITEMMINSC = 0xF00370,
	STRREF_GUI_MIXED_CANNOTREMOVEITEMXAN = 0xF00371,
	STRREF_GUI_MIXED_CANNOTREST = 0xF00372,
	STRREF_GUI_MIXED_CANNOTRESTHERE = 0xF00373,
	STRREF_GUI_MIXED_CANNOTRESTINSIDE = 0xF00374,
	STRREF_GUI_MIXED_CANNOTRESTMONSTERS = 0xF00375,
	STRREF_GUI_MIXED_CANNOTRESTOUTOFCONTROL = 0xF00376,
	STRREF_GUI_MIXED_CANNOTRESTSCATTERED = 0xF00377,
	STRREF_GUI_MIXED_CANNOTSAVE = 0xF00378,
	STRREF_GUI_MIXED_CANNOTSAVEDURINGCOMBAT = 0xF00379,
	STRREF_GUI_MIXED_CANNOTSAVEDURINGRESTINGORCHAPTERORMOVIE = 0xF0037A,
	STRREF_GUI_MIXED_CANNOTSAVEDURINGSTORE = 0xF0037B,
	STRREF_GUI_MIXED_CANNOTSAVEIFDIALOGPERMITTED = 0xF0037C,
	STRREF_GUI_MIXED_CANNOTSAVEMONSTERS = 0xF0037D,
	STRREF_GUI_MIXED_CANNOTSAVEOUTOFCONTROL = 0xF0037E,
	STRREF_GUI_MIXED_CANNOTSAVEQUIT = 0xF0037F,
	STRREF_GUI_MIXED_CANNOTSAVEWHILEINDIALOGMODE = 0xF00380,
	STRREF_GUI_MIXED_CANNOTSELLSTOLEN = 0xF00381,
	STRREF_GUI_MIXED_CANNOTSWAPDEAD = 0xF00382,
	STRREF_GUI_MIXED_CANNOTSWAPTOOFAR = 0xF00383,
	STRREF_GUI_MIXED_CANNOTUSE = 0xF00384,
	STRREF_GUI_MIXED_CARRION_CRAWLER = 0xF00385,
	STRREF_GUI_MIXED_CHAOTIC_EVIL = 0xF00386,
	STRREF_GUI_MIXED_CHAOTIC_GOOD = 0xF00387,
	STRREF_GUI_MIXED_CHAOTIC_NEUTRAL = 0xF00388,
	STRREF_GUI_MIXED_CHAPTER = 0xF00389,
	STRREF_GUI_MIXED_CHARACTER = 0xF0038A,
	STRREF_GUI_MIXED_CHARISMA = 0xF0038B,
	STRREF_GUI_MIXED_CLASS = 0xF0038C,
	STRREF_GUI_MIXED_CLERIC = 0xF0038D,
	STRREF_GUI_MIXED_CLERIC_RANGER = 0xF0038E,
	STRREF_GUI_MIXED_CLERIC_THIEF = 0xF0038F,
	STRREF_GUI_MIXED_CLIENTSCANNOTSAVE = 0xF00390,
	STRREF_GUI_MIXED_CLOAK = 0xF00391,
	STRREF_GUI_MIXED_CONFIRMCANCELCONTINGENCY = 0xF00392,
	STRREF_GUI_MIXED_CONFIRMDELETE = 0xF00393,
	STRREF_GUI_MIXED_CONFIRMDISPELLCONTINGENCY = 0xF00394,
	STRREF_GUI_MIXED_CONFIRMERASE = 0xF00395,
	STRREF_GUI_MIXED_CONFIRMJOURNALDELETION = 0xF00396,
	STRREF_GUI_MIXED_CONFIRMKICKPLAYER = 0xF00397,
	STRREF_GUI_MIXED_CONFIRMLOAD = 0xF00398,
	STRREF_GUI_MIXED_CONFIRMLOGOUT = 0xF00399,
	STRREF_GUI_MIXED_CONFIRMMODIFYCHARACTERS = 0xF0039A,
	STRREF_GUI_MIXED_CONFIRMOVERWRITEEXPORT = 0xF0039B,
	STRREF_GUI_MIXED_CONFIRMPREGENERATE = 0xF0039C,
	STRREF_GUI_MIXED_CONFIRMQUIT = 0xF0039D,
	STRREF_GUI_MIXED_CONFIRMREMOVEPARTYMEMBER = 0xF0039E,
	STRREF_GUI_MIXED_CONFIRMRENT = 0xF0039F,
	STRREF_GUI_MIXED_CONFIRMUNMEMORIZE = 0xF003A0,
	STRREF_GUI_MIXED_CONSTITUTION = 0xF003A1,
	STRREF_GUI_MIXED_CONTINUEPICKINGSPELLS = 0xF003A2,
	STRREF_GUI_MIXED_CONTROL = 0xF003A3,
	STRREF_GUI_MIXED_CREATECHARACTER = 0xF003A4,
	STRREF_GUI_MIXED_CREATINGCHARACTER = 0xF003A5,
	STRREF_GUI_MIXED_CRIPPLING_STRIKE = 0xF003A6,
	STRREF_GUI_MIXED_CRITICALHITBONUS = 0xF003A7,
	STRREF_GUI_MIXED_DAMAGEBONUS = 0xF003A8,
	STRREF_GUI_MIXED_DAYPLURALFORMAT = 0xF003A9,
	STRREF_GUI_MIXED_DAYSINGULARFORMAT = 0xF003AA,
	STRREF_GUI_MIXED_DEAD = 0xF003AB,
	STRREF_GUI_MIXED_DEATHSAVTHREDUCEDBY = 0xF003AC,
	STRREF_GUI_MIXED_DEATH_MULTIPLAYER_CLIENT = 0xF003AD,
	STRREF_GUI_MIXED_DEATH_MULTIPLAYER_SERVER = 0xF003AE,
	STRREF_GUI_MIXED_DEATH_SINGLEPLAYER = 0xF003AF,
	STRREF_GUI_MIXED_DEFAULTCHARACTERBIOGRAPHY = 0xF003B0,
	STRREF_GUI_MIXED_DEMANDINGCHARACTERS = 0xF003B1,
	STRREF_GUI_MIXED_DETECT_ILLUSION = 0xF003B2,
	STRREF_GUI_MIXED_DEXTERITY = 0xF003B3,
	STRREF_GUI_MIXED_DIALING = 0xF003B4,
	STRREF_GUI_MIXED_DIFFICULTY_DIFFICULTY = 0xF003B5,
	STRREF_GUI_MIXED_DIFFICULTY_EASY = 0xF003B6,
	STRREF_GUI_MIXED_DIFFICULTY_HARD = 0xF003B7,
	STRREF_GUI_MIXED_DIFFICULTY_NORMAL = 0xF003B8,
	STRREF_GUI_MIXED_DIFFICULTY_VERY_EASY = 0xF003B9,
	STRREF_GUI_MIXED_DIFFICULTY_VERY_HARD = 0xF003BA,
	STRREF_GUI_MIXED_DISPELL = 0xF003BB,
	STRREF_GUI_MIXED_DONATE = 0xF003BC,
	STRREF_GUI_MIXED_DONATEREPUTATIONGAIN = 0xF003BD,
	STRREF_GUI_MIXED_DONATEREPUTATIONNOGAIN = 0xF003BE,
	STRREF_GUI_MIXED_DOTS1 = 0xF003BF,
	STRREF_GUI_MIXED_DOTS2 = 0xF003C0,
	STRREF_GUI_MIXED_DOTS3 = 0xF003C1,
	STRREF_GUI_MIXED_DOTS4 = 0xF003C2,
	STRREF_GUI_MIXED_DOTS5 = 0xF003C3,
	STRREF_GUI_MIXED_DRINKS = 0xF003C4,
	STRREF_GUI_MIXED_DROPPEDFROMGAME = 0xF003C5,
	STRREF_GUI_MIXED_DROPPEDITEMINHAND = 0xF003C6,
	STRREF_GUI_MIXED_DRUID = 0xF003C7,
	STRREF_GUI_MIXED_DUALCLASS = 0xF003C8,
	STRREF_GUI_MIXED_DWARF = 0xF003C9,
	STRREF_GUI_MIXED_ELF = 0xF003CA,
	STRREF_GUI_MIXED_EMPTY = 0xF003CB,
	STRREF_GUI_MIXED_ENUMERATINGSP = 0xF003CC,
	STRREF_GUI_MIXED_ERROR = 0xF003CD,
	STRREF_GUI_MIXED_ETTERCAP = 0xF003CE,
	STRREF_GUI_MIXED_EXCLUSIVEITEMS = 0xF003CF,
	STRREF_GUI_MIXED_EXPERIENCEENTRY = 0xF003D0,
	STRREF_GUI_MIXED_EXPERIENCEENTRYBRIEF = 0xF003D1,
	STRREF_GUI_MIXED_FALLEN_BEASTMASTER = 0xF003D2,
	STRREF_GUI_MIXED_FALLEN_CAVALIER = 0xF003D3,
	STRREF_GUI_MIXED_FALLEN_CLERIC = 0xF003D4,
	STRREF_GUI_MIXED_FALLEN_CLERIC_LATHANDER = 0xF003D5,
	STRREF_GUI_MIXED_FALLEN_FERALAN = 0xF003D6,
	STRREF_GUI_MIXED_FALLEN_INQUISITOR = 0xF003D7,
	STRREF_GUI_MIXED_FALLEN_PALADIN = 0xF003D8,
	STRREF_GUI_MIXED_FALLEN_RANGER = 0xF003D9,
	STRREF_GUI_MIXED_FALLEN_STALKER = 0xF003DA,
	STRREF_GUI_MIXED_FALLEN_UNDEADHUNTER = 0xF003DB,
	STRREF_GUI_MIXED_FALSE = 0xF003DC,
	STRREF_GUI_MIXED_FAMILIARALREADYSUMMONED = 0xF003DD,
	STRREF_GUI_MIXED_FAMILIARDIED = 0xF003DE,
	STRREF_GUI_MIXED_FAMILIARNOTPERMITTEDENTERAREA = 0xF003DF,
	STRREF_GUI_MIXED_FAMILIARNOTPERMITTEDENTERSTORE = 0xF003E0,
	STRREF_GUI_MIXED_FAMILIARNOTPERMITTEDPICKUPITEM = 0xF003E1,
	STRREF_GUI_MIXED_FAMILIARONLYCASTBYPROTAGONIST = 0xF003E2,
	STRREF_GUI_MIXED_FEMALE = 0xF003E3,
	STRREF_GUI_MIXED_FIGHTER = 0xF003E4,
	STRREF_GUI_MIXED_FIGHTER_CLERIC = 0xF003E5,
	STRREF_GUI_MIXED_FIGHTER_DRUID = 0xF003E6,
	STRREF_GUI_MIXED_FIGHTER_MAGE = 0xF003E7,
	STRREF_GUI_MIXED_FIGHTER_MAGE_CLERIC = 0xF003E8,
	STRREF_GUI_MIXED_FIGHTER_MAGE_THIEF = 0xF003E9,
	STRREF_GUI_MIXED_FIGHTER_THIEF = 0xF003EA,
	STRREF_GUI_MIXED_FIND_REMOVE_TRAPS = 0xF003EB,
	STRREF_GUI_MIXED_GATHERPARTY = 0xF003EC,
	STRREF_GUI_MIXED_GAUNTLETS = 0xF003ED,
	STRREF_GUI_MIXED_GENDER = 0xF003EE,
	STRREF_GUI_MIXED_GHOUL = 0xF003EF,
	STRREF_GUI_MIXED_GIBBERLING = 0xF003F0,
	STRREF_GUI_MIXED_GNOLL = 0xF003F1,
	STRREF_GUI_MIXED_GNOME = 0xF003F2,
	STRREF_GUI_MIXED_GOLD = 0xF003F3,
	STRREF_GUI_MIXED_GROUND_ITEM = 0xF003F4,
	STRREF_GUI_MIXED_GROUP_ITEM = 0xF003F5,
	STRREF_GUI_MIXED_HALFLING = 0xF003F6,
	STRREF_GUI_MIXED_HALFORC = 0xF003F7,
	STRREF_GUI_MIXED_HALF_ELF = 0xF003F8,
	STRREF_GUI_MIXED_HATED_RACE = 0xF003F9,
	STRREF_GUI_MIXED_HELMET = 0xF003FA,
	STRREF_GUI_MIXED_HIDE_IN_SHADOWS = 0xF003FB,
	STRREF_GUI_MIXED_HITPOINTSBONUS = 0xF003FC,
	STRREF_GUI_MIXED_HOBGOBLIN = 0xF003FD,
	STRREF_GUI_MIXED_HOURPLURALFORMAT = 0xF003FE,
	STRREF_GUI_MIXED_HOURSINGULARFORMAT = 0xF003FF,
	STRREF_GUI_MIXED_HUMAN = 0xF00400,
	STRREF_GUI_MIXED_IDENTIFY = 0xF00401,
	STRREF_GUI_MIXED_IDENTIFYMETHOD = 0xF00402,
	STRREF_GUI_MIXED_INACTIVEEXPERIENCEENTRY = 0xF00403,
	STRREF_GUI_MIXED_INACTIVE_CLASS = 0xF00404,
	STRREF_GUI_MIXED_INCDROMDRIVE = 0xF00405,
	STRREF_GUI_MIXED_INCORRECTPASSWORD = 0xF00406,
	STRREF_GUI_MIXED_INTELLIGENCE = 0xF00407,
	STRREF_GUI_MIXED_INTOXICATIONLIMIT = 0xF00408,
	STRREF_GUI_MIXED_INVALIDIPADDRESS = 0xF00409,
	STRREF_GUI_MIXED_INVALIDSLOT = 0xF0040A,
	STRREF_GUI_MIXED_INVENTORY = 0xF0040B,
	STRREF_GUI_MIXED_INVENTORYCANNOTPAUSE = 0xF0040C,
	STRREF_GUI_MIXED_INVENTORYCONTAINERLOCKED = 0xF0040D,
	STRREF_GUI_MIXED_INVENTORYCONTAINERTRAPPED = 0xF0040E,
	STRREF_GUI_MIXED_INVENTORYCONTAINERTRAPPEDHINT = 0xF0040F,
	STRREF_GUI_MIXED_INVENTORYPAUSEWARNING = 0xF00410,
	STRREF_GUI_MIXED_ITEMDESCRIPTION = 0xF00411,
	STRREF_GUI_MIXED_ITEMDESCRIPTIONNOPRICE = 0xF00412,
	STRREF_GUI_MIXED_ITEMREMOVEDFROMSLOT = 0xF00413,
	STRREF_GUI_MIXED_JOINEDGAME = 0xF00414,
	STRREF_GUI_MIXED_JOINING = 0xF00415,
	STRREF_GUI_MIXED_KIT_ASSASIN = 0xF00416,
	STRREF_GUI_MIXED_KIT_BEASTFRIEND = 0xF00417,
	STRREF_GUI_MIXED_KIT_BEASTMASTER = 0xF00418,
	STRREF_GUI_MIXED_KIT_BERSERKER = 0xF00419,
	STRREF_GUI_MIXED_KIT_BLADE = 0xF0041A,
	STRREF_GUI_MIXED_KIT_BOUNTYHUNTER = 0xF0041B,
	STRREF_GUI_MIXED_KIT_CAVALIER = 0xF0041C,
	STRREF_GUI_MIXED_KIT_FERALAN = 0xF0041D,
	STRREF_GUI_MIXED_KIT_GODHELM = 0xF0041E,
	STRREF_GUI_MIXED_KIT_GODLATHANDER = 0xF0041F,
	STRREF_GUI_MIXED_KIT_GODTALOS = 0xF00420,
	STRREF_GUI_MIXED_KIT_INQUISITOR = 0xF00421,
	STRREF_GUI_MIXED_KIT_JESTER = 0xF00422,
	STRREF_GUI_MIXED_KIT_KENSAI = 0xF00423,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_ABJURER = 0xF00424,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_CONJURER = 0xF00425,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_DIVINER = 0xF00426,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_ENCHANTER = 0xF00427,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_GENERALIST = 0xF00428,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_ILLUSIONIST = 0xF00429,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_INVOKER = 0xF0042A,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_NECROMANCER = 0xF0042B,
	STRREF_GUI_MIXED_KIT_MAGESCHOOL_TRANSMUTER = 0xF0042C,
	STRREF_GUI_MIXED_KIT_SHAPESHIFTER = 0xF0042D,
	STRREF_GUI_MIXED_KIT_SKALD = 0xF0042E,
	STRREF_GUI_MIXED_KIT_STALKER = 0xF0042F,
	STRREF_GUI_MIXED_KIT_SWASHBUCKLER = 0xF00430,
	STRREF_GUI_MIXED_KIT_TOTEMIC = 0xF00431,
	STRREF_GUI_MIXED_KIT_UNDEADHUNTER = 0xF00432,
	STRREF_GUI_MIXED_KIT_WILDMAGE = 0xF00433,
	STRREF_GUI_MIXED_KIT_WIZARDSLAYER = 0xF00434,
	STRREF_GUI_MIXED_KNOWN_MAGE_SPELLS = 0xF00435,
	STRREF_GUI_MIXED_KNOWN_PRIEST_SPELLS = 0xF00436,
	STRREF_GUI_MIXED_KOBOLD = 0xF00437,
	STRREF_GUI_MIXED_LARGE_SWORD = 0xF00438,
	STRREF_GUI_MIXED_LAWFUL_EVIL = 0xF00439,
	STRREF_GUI_MIXED_LAWFUL_GOOD = 0xF0043A,
	STRREF_GUI_MIXED_LAWFUL_NEUTRAL = 0xF0043B,
	STRREF_GUI_MIXED_LAYONHANDSINCREASEDBY = 0xF0043C,
	STRREF_GUI_MIXED_LAY_ON_HANDS_AMOUNT = 0xF0043D,
	STRREF_GUI_MIXED_LEARNSPELLBONUS = 0xF0043E,
	STRREF_GUI_MIXED_LEARNSPELLFAILED = 0xF0043F,
	STRREF_GUI_MIXED_LEARNSPELLFAILED_ALREADYKNOWN = 0xF00440,
	STRREF_GUI_MIXED_LEARNSPELLFAILED_INVALIDSCHOOL = 0xF00441,
	STRREF_GUI_MIXED_LEARNSPELLFAILED_LOWINT = 0xF00442,
	STRREF_GUI_MIXED_LEARNSPELLSUCCEEDED = 0xF00443,
	STRREF_GUI_MIXED_LEFTGAME = 0xF00444,
	STRREF_GUI_MIXED_LEFT_RING = 0xF00445,
	STRREF_GUI_MIXED_LEVEL = 0xF00446,
	STRREF_GUI_MIXED_LEVELDRAINED = 0xF00447,
	STRREF_GUI_MIXED_LEVELSPELLS = 0xF00448,
	STRREF_GUI_MIXED_LEVELUPRESULTS = 0xF00449,
	STRREF_GUI_MIXED_LOADARRIVED = 0xF0044A,
	STRREF_GUI_MIXED_LOADINGCHARACTER = 0xF0044B,
	STRREF_GUI_MIXED_LONGDATEFORMAT = 0xF0044C,
	STRREF_GUI_MIXED_LORE = 0xF0044D,
	STRREF_GUI_MIXED_LOREINCREASEDBY = 0xF0044E,
	STRREF_GUI_MIXED_MAGE = 0xF0044F,
	STRREF_GUI_MIXED_MAGESPELLS_REALLY_IT_IS = 0xF00450,
	STRREF_GUI_MIXED_MAGE_CLERIC = 0xF00451,
	STRREF_GUI_MIXED_MAGE_SPELLS = 0xF00452,
	STRREF_GUI_MIXED_MAGE_THIEF = 0xF00453,
	STRREF_GUI_MIXED_MAJOR_CLOTHING_COLOUR = 0xF00454,
	STRREF_GUI_MIXED_MALE = 0xF00455,
	STRREF_GUI_MIXED_MINOR_CLOTHING_COLOUR = 0xF00456,
	STRREF_GUI_MIXED_MISSILE = 0xF00457,
	STRREF_GUI_MIXED_MISSILEADJUST = 0xF00458,
	STRREF_GUI_MIXED_MONK = 0xF00459,
	STRREF_GUI_MIXED_MOVE_SILENTLY = 0xF0045A,
	STRREF_GUI_MIXED_MULTICLASS = 0xF0045B,
	STRREF_GUI_MIXED_NAME = 0xF0045C,
	STRREF_GUI_MIXED_NEEDSAVE = 0xF0045D,
	STRREF_GUI_MIXED_NEUTRAL_EVIL = 0xF0045E,
	STRREF_GUI_MIXED_NEUTRAL_GOOD = 0xF0045F,
	STRREF_GUI_MIXED_NOCHARACTER = 0xF00460,
	STRREF_GUI_MIXED_NORMAL_FIGHTER = 0xF00461,
	STRREF_GUI_MIXED_NOTCPIPPROVIDER = 0xF00462,
	STRREF_GUI_MIXED_NOTECOPIED = 0xF00463,
	STRREF_GUI_MIXED_NOTENOUGHCACHE = 0xF00464,
	STRREF_GUI_MIXED_NOTENOUGHGOLD = 0xF00465,
	STRREF_GUI_MIXED_NOTPERMITTEDTOBUYSELL = 0xF00466,
	STRREF_GUI_MIXED_NOTPERMITTEDTOPAUSEGAME = 0xF00467,
	STRREF_GUI_MIXED_NOTPERMITTEDTOSTARTDIALOG = 0xF00468,
	STRREF_GUI_MIXED_NUMBER_OF_ATTACKS = 0xF00469,
	STRREF_GUI_MIXED_OGRE = 0xF0046A,
	STRREF_GUI_MIXED_OPENDOORSBONUS = 0xF0046B,
	STRREF_GUI_MIXED_OPEN_LOCKS = 0xF0046C,
	STRREF_GUI_MIXED_PALADIN = 0xF0046D,
	STRREF_GUI_MIXED_PICK_POCKETS = 0xF0046E,
	STRREF_GUI_MIXED_PLAYER = 0xF0046F,
	STRREF_GUI_MIXED_PLAYERNAMEUSED = 0xF00470,
	STRREF_GUI_MIXED_PLEASEINSERTCD = 0xF00471,
	STRREF_GUI_MIXED_PLEASEINSERTTOBCD = 0xF00472,
	STRREF_GUI_MIXED_POLYSAVTHREDUCEDBY = 0xF00473,
	STRREF_GUI_MIXED_PORTRAITTOOLARGE = 0xF00474,
	STRREF_GUI_MIXED_PRIESTSPELLBONUS = 0xF00475,
	STRREF_GUI_MIXED_PRIESTSPELLLEVELBONUS = 0xF00476,
	STRREF_GUI_MIXED_PRIEST_SPELLS = 0xF00477,
	STRREF_GUI_MIXED_PROFICIENCIES = 0xF00478,
	STRREF_GUI_MIXED_QUICKSAVESUCESS = 0xF00479,
	STRREF_GUI_MIXED_QUICK_ITEM = 0xF0047A,
	STRREF_GUI_MIXED_QUICK_WEAPON = 0xF0047B,
	STRREF_GUI_MIXED_QUIVER = 0xF0047C,
	STRREF_GUI_MIXED_RACE = 0xF0047D,
	STRREF_GUI_MIXED_RANGER = 0xF0047E,
	STRREF_GUI_MIXED_REACTIONADJUST = 0xF0047F,
	STRREF_GUI_MIXED_REACTIONBONUS = 0xF00480,
	STRREF_GUI_MIXED_REGAINNEDABILITIES = 0xF00481,
	STRREF_GUI_MIXED_RENTOUTCOME = 0xF00482,
	STRREF_GUI_MIXED_REPUTATION = 0xF00483,
	STRREF_GUI_MIXED_RESISTACID = 0xF00484,
	STRREF_GUI_MIXED_RESISTANCES = 0xF00485,
	STRREF_GUI_MIXED_RESISTANCESNONE = 0xF00486,
	STRREF_GUI_MIXED_RESISTCOLD = 0xF00487,
	STRREF_GUI_MIXED_RESISTELECTRICITY = 0xF00488,
	STRREF_GUI_MIXED_RESISTFIRE = 0xF00489,
	STRREF_GUI_MIXED_RESISTMAGIC = 0xF0048A,
	STRREF_GUI_MIXED_RESISTMAGICCOLD = 0xF0048B,
	STRREF_GUI_MIXED_RESISTMAGICDAMAGE = 0xF0048C,
	STRREF_GUI_MIXED_RESISTMAGICFIRE = 0xF0048D,
	STRREF_GUI_MIXED_RESISTPOISON = 0xF0048E,
	STRREF_GUI_MIXED_REST = 0xF0048F,
	STRREF_GUI_MIXED_RESTCASTSPELLS = 0xF00490,
	STRREF_GUI_MIXED_RESTINTERRUPTED = 0xF00491,
	STRREF_GUI_MIXED_RESTNOTPERMITTED = 0xF00492,
	STRREF_GUI_MIXED_RESTUNTILHEALED = 0xF00493,
	STRREF_GUI_MIXED_RETURNTOPICKINGSPELLS = 0xF00494,
	STRREF_GUI_MIXED_RIGHT_RING = 0xF00495,
	STRREF_GUI_MIXED_ROOMFULL = 0xF00496,
	STRREF_GUI_MIXED_ROOMS = 0xF00497,
	STRREF_GUI_MIXED_RUMOR = 0xF00498,
	STRREF_GUI_MIXED_SAVEDATEFORMAT = 0xF00499,
	STRREF_GUI_MIXED_SAVESUCESS = 0xF0049A,
	STRREF_GUI_MIXED_SAVEVSBREATH = 0xF0049B,
	STRREF_GUI_MIXED_SAVEVSDEATH = 0xF0049C,
	STRREF_GUI_MIXED_SAVEVSPOLY = 0xF0049D,
	STRREF_GUI_MIXED_SAVEVSSPELLS = 0xF0049E,
	STRREF_GUI_MIXED_SAVEVSWANDS = 0xF0049F,
	STRREF_GUI_MIXED_SAVING_THROWS = 0xF004A0,
	STRREF_GUI_MIXED_SELECTPLAYER = 0xF004A1,
	STRREF_GUI_MIXED_SESSIONTERMINATED = 0xF004A2,
	STRREF_GUI_MIXED_SET_TRAPS = 0xF004A3,
	STRREF_GUI_MIXED_SHIELD = 0xF004A4,
	STRREF_GUI_MIXED_SHORTDATEFORMAT = 0xF004A5,
	STRREF_GUI_MIXED_SKELETON = 0xF004A6,
	STRREF_GUI_MIXED_SMALL_SWORD = 0xF004A7,
	STRREF_GUI_MIXED_SORCERER = 0xF004A8,
	STRREF_GUI_MIXED_SORTEDBYDATE = 0xF004A9,
	STRREF_GUI_MIXED_SORTEDBYNAME = 0xF004AA,
	STRREF_GUI_MIXED_SPEAR = 0xF004AB,
	STRREF_GUI_MIXED_SPELLALREADYKNOWN = 0xF004AC,
	STRREF_GUI_MIXED_SPELLS = 0xF004AD,
	STRREF_GUI_MIXED_SPELLSAVTHREDUCEDBY = 0xF004AE,
	STRREF_GUI_MIXED_SPELLSTOCAST = 0xF004AF,
	STRREF_GUI_MIXED_SPIDER = 0xF004B0,
	STRREF_GUI_MIXED_SPIKED = 0xF004B1,
	STRREF_GUI_MIXED_STEAL = 0xF004B2,
	STRREF_GUI_MIXED_STEALTH_RANGER = 0xF004B3,
	STRREF_GUI_MIXED_STOREBUYANDSELL = 0xF004B4,
	STRREF_GUI_MIXED_STOREBUYSELLTOTALGROUP = 0xF004B5,
	STRREF_GUI_MIXED_STOREBUYSELLTOTALSTORE = 0xF004B6,
	STRREF_GUI_MIXED_STORECONTAINER = 0xF004B7,
	STRREF_GUI_MIXED_STORELABEL = 0xF004B8,
	STRREF_GUI_MIXED_STOREOVERSTOCKED = 0xF004B9,
	STRREF_GUI_MIXED_STRENGTH = 0xF004BA,
	STRREF_GUI_MIXED_THAC0 = 0xF004BB,
	STRREF_GUI_MIXED_THAC0_LEFT = 0xF004BC,
	STRREF_GUI_MIXED_THAC0_RIGHT = 0xF004BD,
	STRREF_GUI_MIXED_THACOREDUCEDBY = 0xF004BE,
	STRREF_GUI_MIXED_THIEF = 0xF004BF,
	STRREF_GUI_MIXED_TIEFLING = 0xF004C0,
	STRREF_GUI_MIXED_TIER = 0xF004C1,
	STRREF_GUI_MIXED_TOHITBONUS = 0xF004C2,
	STRREF_GUI_MIXED_TOOLTIPFORMAT = 0xF004C3,
	STRREF_GUI_MIXED_TRACKING = 0xF004C4,
	STRREF_GUI_MIXED_TRAVELINTERRUPTED = 0xF004C5,
	STRREF_GUI_MIXED_TRUE = 0xF004C6,
	STRREF_GUI_MIXED_TRUE_NEUTRAL = 0xF004C7,
	STRREF_GUI_MIXED_TURN_UNDEAD_LEVEL = 0xF004C8,
	STRREF_GUI_MIXED_TUTORIAL_INFO = 0xF004C9,
	STRREF_GUI_MIXED_UNUSABLE = 0xF004CA,
	STRREF_GUI_MIXED_UNUSABLEEXPERIENCEENTRY = 0xF004CB,
	STRREF_GUI_MIXED_USABLE = 0xF004CC,
	STRREF_GUI_MIXED_VERSIONMISMATCHDEATHMATCH = 0xF004CD,
	STRREF_GUI_MIXED_VERSIONMISMATCHFRAMERATE = 0xF004CE,
	STRREF_GUI_MIXED_VERSIONMISMATCHMISSIONPACK = 0xF004CF,
	STRREF_GUI_MIXED_VERSIONMISMATCHPROGRAM = 0xF004D0,
	STRREF_GUI_MIXED_WAITINGFORBREAKINACTION = 0xF004D1,
	STRREF_GUI_MIXED_WAITINGFORLOAD = 0xF004D2,
	STRREF_GUI_MIXED_WANDSAVTHREDUCEDBY = 0xF004D3,
	STRREF_GUI_MIXED_WEAPONSPEEDBONUS = 0xF004D4,
	STRREF_GUI_MIXED_WEAPONSTYLEBONUS = 0xF004D5,
	STRREF_GUI_MIXED_WEAPON_DESCRIPTION_BOW = 0xF004D6,
	STRREF_GUI_MIXED_WEAPON_DESCRIPTION_DEFAULT = 0xF004D7,
	STRREF_GUI_MIXED_WEAPON_DESCRIPTION_SLING = 0xF004D8,
	STRREF_GUI_MIXED_WEAPON_DESCRIPTION_XBOW = 0xF004D9,
	STRREF_GUI_MIXED_WEAPON_PROFICIENCIES = 0xF004DA,
	STRREF_GUI_MIXED_WEIGHTALLOWANCEBONUS = 0xF004DB,
	STRREF_GUI_MIXED_WISDOM = 0xF004DC,
	STRREF_GUI_OPTIONS_COLORS_16BIT = 0xF004DD,
	STRREF_GUI_OPTIONS_COLORS_24BIT = 0xF004DE,
	STRREF_GUI_OPTIONS_COLORS_32BIT = 0xF004DF,
	STRREF_GUI_QUICK_LOOT = 0xF004E0,
	STRREF_GUI_TOOLTIP_AREANOTES_DISPLAY = 0xF004E1,
	STRREF_GUI_TOOLTIP_ARMOR_CLASS = 0xF004E2,
	STRREF_GUI_TOOLTIP_CURRENT_HP = 0xF004E3,
	STRREF_GUI_TOOLTIP_DAMAGE = 0xF004E4,
	STRREF_GUI_TOOLTIP_HELP = 0xF004E5,
	STRREF_GUI_TOOLTIP_HIGHLIGHT = 0xF004E6,
	STRREF_GUI_TOOLTIP_MAXIMUM_HP = 0xF004E7,
	STRREF_GUI_TOOLTIP_PERMISSION_AREATRANS = 0xF004E8,
	STRREF_GUI_TOOLTIP_PERMISSION_BUYSELL = 0xF004E9,
	STRREF_GUI_TOOLTIP_PERMISSION_DIALOG = 0xF004EA,
	STRREF_GUI_TOOLTIP_PERMISSION_KICK = 0xF004EB,
	STRREF_GUI_TOOLTIP_PERMISSION_LEADER = 0xF004EC,
	STRREF_GUI_TOOLTIP_PERMISSION_PAUSE = 0xF004ED,
	STRREF_GUI_TOOLTIP_PERMISSION_READSTATS = 0xF004EE,
	STRREF_GUI_TOOLTIP_PERMISSION_WRITESTATS = 0xF004EF,
	STRREF_GUI_TOOLTIP_QUICK_SAVE = 0xF004F0,
	STRREF_GUI_TOOLTIP_SCREEN_CHARACTER = 0xF004F1,
	STRREF_GUI_TOOLTIP_SCREEN_CLERIC = 0xF004F2,
	STRREF_GUI_TOOLTIP_SCREEN_INVENTORY = 0xF004F3,
	STRREF_GUI_TOOLTIP_SCREEN_JOURNAL = 0xF004F4,
	STRREF_GUI_TOOLTIP_SCREEN_MAGE = 0xF004F5,
	STRREF_GUI_TOOLTIP_SCREEN_MAP = 0xF004F6,
	STRREF_GUI_TOOLTIP_SCREEN_MULTIPLAYER = 0xF004F7,
	STRREF_GUI_TOOLTIP_SCREEN_OPTIONS = 0xF004F8,
	STRREF_GUI_TOOLTIP_SCREEN_WORLD = 0xF004F9,
	STRREF_GUI_TOOLTIP_SCREEN_WORLDMAP = 0xF004FA,
	STRREF_GUI_TOOLTIP_SELECTION = 0xF004FB,
	STRREF_GUI_TOOLTIP_THAC0 = 0xF004FC,
	STRREF_GUI_TOOLTIP_TRAVELLING_TIME = 0xF004FD,
	STRREF_GUI_TOOLTIP_TRAVELLING_UNREACHABLE = 0xF004FE,
	STRREF_GUI_UPPER_ABILITIES = 0xF004FF,
	STRREF_GUI_UPPER_CLASSKIT = 0xF00500,
	STRREF_GUI_UPPER_INACTIVECLASSKIT = 0xF00501,
	STRREF_GUI_UPPER_INACTIVE_PROFICIENCY_SLOTS = 0xF00502,
	STRREF_GUI_UPPER_INACTIVE_SKILLS = 0xF00503,
	STRREF_GUI_UPPER_MAGESPELLS = 0xF00504,
	STRREF_GUI_UPPER_MEMORIZEMAGESPELLS = 0xF00505,
	STRREF_GUI_UPPER_MEMORIZEPRIESTSPELLS = 0xF00506,
	STRREF_GUI_UPPER_NOT_IDENTIFIED = 0xF00507,
	STRREF_GUI_UPPER_PROFICIENCY_SLOTS = 0xF00508,
	STRREF_GUI_UPPER_SKILLS = 0xF00509,
	STRREF_GUI_USABILITY_ANYONE = 0xF0050A,
	STRREF_GUI_USABILITY_MAGE = 0xF0050B,
	STRREF_HARDPAUSE_CHAPTER_SCREEN = 0xF0050C,
	STRREF_HARDPAUSE_MOVIE = 0xF0050D,
	STRREF_HARDPAUSE_REST_SCREEN = 0xF0050E,
	STRREF_HARDPAUSE_SAVING_GAME = 0xF0050F,
	STRREF_HARDPAUSE_TEXT_SCREEN_SCREEN = 0xF00510,
	STRREF_LOCKED = 0xF00511,
	STRREF_LOCKEDCONTAINER = 0xF00512,
	STRREF_LOWDISKSPACENOSAVE_STR = 0xF00513,
	STRREF_LOWDISKSPACESAVE_STR = 0xF00514,
	STRREF_LOWDISKSPACE_STR = 0xF00515,
	STRREF_MADESAVE_BREATH = 0xF00516,
	STRREF_MADESAVE_DEATH = 0xF00517,
	STRREF_MADESAVE_POLY = 0xF00518,
	STRREF_MADESAVE_RESISTMAGIC = 0xF00519,
	STRREF_MADESAVE_SPELL = 0xF0051A,
	STRREF_MADESAVE_WANDS = 0xF0051B,
	STRREF_MIXED_PARCHMENT_ENTERING_NEW_AREA = 0xF0051C,
	STRREF_MIXED_PARCHMENT_GORION_CUT_SCENE = 0xF0051D,
	STRREF_MIXED_PROGRESSBAR_DESTROYING_GAME = 0xF0051E,
	STRREF_MIXED_PROGRESSBAR_ENTERING_NEW_AREA = 0xF0051F,
	STRREF_MIXED_PROGRESSBAR_LOADING_AREA = 0xF00520,
	STRREF_MIXED_PROGRESSBAR_LOADING_GAME = 0xF00521,
	STRREF_MIXED_PROGRESSBAR_LOADING_NEW_GAME = 0xF00522,
	STRREF_MIXED_PROGRESSBAR_SAVING_GAME = 0xF00523,
	STRREF_MIXED_PROGRESSBAR_STARTING_MULTIPLAYER_SESSION = 0xF00524,
	STRREF_MIXED_SPELLDESCRIPTION_CONTINGENCY = 0xF00525,
	STRREF_MIXED_SPELLDESCRIPTION_SPELLSEQUENCER = 0xF00526,
	STRREF_MIXED_SPELLDESCRIPTION_SPELLTRIGGER = 0xF00527,
	STRREF_NODISCDETECTED_STR = 0xF00528,
	STRREF_PUNT_FROM_PARTY_IMOEN = 0xF00529,
	STRREF_PUNT_FROM_PARTY_YOSHIMO = 0xF0052A,
	STRREF_SAVEFAILURE_STR = 0xF0052B,
	STRREF_TRAP_SPRUNG = 0xF0052C,
	STRREF_GUI_LOWER_NEVER_SHOW_AGAIN = 0xF0052D,
	STRREF_GUI_MIXED_SHAMAN = 0xF0052E,
	STRREF_GUI_MAX_SPELL_LEVEL = 0xF0052F,
	STRREF_GUI_MAX_SPELLS_PER_LEVEL = 0xF00530,
	STRREF_GUI_MAGE_SPELL_PICK_HELP = 0xF00531,
	STRREF_GUI_SHAMAN_SPELL_PICK_HELP = 0xF00532,
	STRREF_GUI_MAGE_SPELL_PICK_INGAME_HELP = 0xF00533,
	STRREF_GUI_NEXT_LEVEL_GODHOOD = 0xF00534,
	STRREF_GUI_MIXED_BLESS = 0xF00535,
	STRREF_GUI_MIXED_MP_SLEEP_WARNING = 0xF00536,
	STRING_ENGINE_MAX = 0xF00537,
};

/* 209 */
enum $CE95BDF041289D58359A37E5F909D21B
{
	k_iSteamUserCallbacks = 0x64,
};

/* 210 */
enum $7AE7D11A4A92908A95AD49D3D0A8B27B
{
	k_iSteamFriendsCallbacks = 0x12C,
};

/* 211 */
enum $5ACCA345198C743CBC537F8392B8D869
{
	k_iSteamMatchmakingCallbacks = 0x1F4,
};

/* 212 */
enum $68FBBB15FF2671A68E39B7920FBA40AF
{
	k_iSteamUtilsCallbacks = 0x2BC,
};

/* 213 */
enum $4D2F29AE67BC93B6AFDDDD4341956CF8
{
	k_iSteamAppsCallbacks = 0x3E8,
};

/* 214 */
enum $0E058EB220585A5F6AD0DD6CE8C49935
{
	k_iSteamUserStatsCallbacks = 0x44C,
};

/* 215 */
enum $FE0347FCF3B1460A2BEF2E7C3F0F7C2C
{
	k_iSteamNetworkingCallbacks = 0x4B0,
};

/* 216 */
enum $0264E91DBF7A2BBEC6E806BF204CFA1B
{
	k_iClientRemoteStorageCallbacks = 0x514,
};

/* 217 */
enum $8DF2C37A6FDD097329D0E936CB6AF929
{
	k_iClientHTTPCallbacks = 0x834,
};

/* 218 */
enum $AAC6F232B1BF6A25AA1F35F902015810
{
	k_iSteamScreenshotsCallbacks = 0x8FC,
};

/* 219 */
enum $BADCFC95CF65DB248A8C3DDAD5C8D9D8
{
	k_iClientUnifiedMessagesCallbacks = 0x9C4,
};

/* 220 */
enum $EB3CBB85D4495A11F3657B64D6AB7480
{
	SDL_PIXELTYPE_UNKNOWN = 0x0,
	SDL_PIXELTYPE_INDEX1 = 0x1,
	SDL_PIXELTYPE_INDEX4 = 0x2,
	SDL_PIXELTYPE_INDEX8 = 0x3,
	SDL_PIXELTYPE_PACKED8 = 0x4,
	SDL_PIXELTYPE_PACKED16 = 0x5,
	SDL_PIXELTYPE_PACKED32 = 0x6,
	SDL_PIXELTYPE_ARRAYU8 = 0x7,
	SDL_PIXELTYPE_ARRAYU16 = 0x8,
	SDL_PIXELTYPE_ARRAYU32 = 0x9,
	SDL_PIXELTYPE_ARRAYF16 = 0xA,
	SDL_PIXELTYPE_ARRAYF32 = 0xB,
};

/* 221 */
enum $FD360262F56B111CF7764CDEECCB2FA3
{
	k_cchStatNameMax = 0x80,
};

/* 222 */
enum $BC0B8D7BD78010D87645C11596C447A9
{
	SDL_BITMAPORDER_NONE = 0x0,
	SDL_BITMAPORDER_4321 = 0x1,
	SDL_BITMAPORDER_1234 = 0x2,
};

/* 223 */
enum $FAE877D1DBF0AF78238F23D09C2D3CBD
{
	k_iClientUGCCallbacks = 0xD48,
};

/* 224 */
enum $3E5049BDC90756448A3EFDD87C0C72E3
{
	SDL_PACKEDORDER_NONE = 0x0,
	SDL_PACKEDORDER_XRGB = 0x1,
	SDL_PACKEDORDER_RGBX = 0x2,
	SDL_PACKEDORDER_ARGB = 0x3,
	SDL_PACKEDORDER_RGBA = 0x4,
	SDL_PACKEDORDER_XBGR = 0x5,
	SDL_PACKEDORDER_BGRX = 0x6,
	SDL_PACKEDORDER_ABGR = 0x7,
	SDL_PACKEDORDER_BGRA = 0x8,
};

/* 225 */
enum $AC313A0E92C0897AB9726A868738048C
{
	SDL_ARRAYORDER_NONE = 0x0,
	SDL_ARRAYORDER_RGB = 0x1,
	SDL_ARRAYORDER_RGBA = 0x2,
	SDL_ARRAYORDER_ARGB = 0x3,
	SDL_ARRAYORDER_BGR = 0x4,
	SDL_ARRAYORDER_BGRA = 0x5,
	SDL_ARRAYORDER_ABGR = 0x6,
};

/* 226 */
enum $4137511C99A38A7772515B11B55732A4
{
	k_iSteamAppListCallbacks = 0xF3C,
};

/* 227 */
enum $900BD2D857140032E93BD9D3DE42C35E
{
	k_iSteamMusicCallbacks = 0xFA0,
};

/* 228 */
enum $888C341501D993B17216F5019C0133F9
{
	k_iSteamMusicRemoteCallbacks = 0x1004,
};

/* 229 */
enum $B72248C903AB60699CF09C7929D20CD1
{
	SDL_PACKEDLAYOUT_NONE = 0x0,
	SDL_PACKEDLAYOUT_332 = 0x1,
	SDL_PACKEDLAYOUT_4444 = 0x2,
	SDL_PACKEDLAYOUT_1555 = 0x3,
	SDL_PACKEDLAYOUT_5551 = 0x4,
	SDL_PACKEDLAYOUT_565 = 0x5,
	SDL_PACKEDLAYOUT_8888 = 0x6,
	SDL_PACKEDLAYOUT_2101010 = 0x7,
	SDL_PACKEDLAYOUT_1010102 = 0x8,
};

/* 230 */
enum $DD2CA31226FCF551151E4A78F9F84F31
{
	k_iSteamHTMLSurfaceCallbacks = 0x1194,
};

/* 231 */
enum SDL_bool
{
	SDL_FALSE = 0x0,
	SDL_TRUE = 0x1,
};

/* 232 */
enum EUniverse
{
	k_EUniverseInvalid = 0x0,
	k_EUniversePublic = 0x1,
	k_EUniverseBeta = 0x2,
	k_EUniverseInternal = 0x3,
	k_EUniverseDev = 0x4,
	k_EUniverseMax = 0x5,
};

/* 233 */
enum $483B864C2E2FBC8159CA33326516C8CA
{
	k_cchMaxRichPresenceValueLength = 0x100,
};

/* 234 */
enum EAccountType
{
	k_EAccountTypeInvalid = 0x0,
	k_EAccountTypeIndividual = 0x1,
	k_EAccountTypeMultiseat = 0x2,
	k_EAccountTypeGameServer = 0x3,
	k_EAccountTypeAnonGameServer = 0x4,
	k_EAccountTypePending = 0x5,
	k_EAccountTypeContentServer = 0x6,
	k_EAccountTypeClan = 0x7,
	k_EAccountTypeChat = 0x8,
	k_EAccountTypeConsoleUser = 0x9,
	k_EAccountTypeAnonUser = 0xA,
	k_EAccountTypeMax = 0xB,
};

/* 235 */
enum SDL_MessageBoxColorType
{
	SDL_MESSAGEBOX_COLOR_BACKGROUND = 0x0,
	SDL_MESSAGEBOX_COLOR_TEXT = 0x1,
	SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 0x2,
	SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 0x3,
	SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 0x4,
	SDL_MESSAGEBOX_COLOR_MAX = 0x5,
};

/* 236 */
enum EChatSteamIDInstanceFlags
{
	k_EChatAccountInstanceMask = 0xFFF,
	k_EChatInstanceFlagClan = 0x80000,
	k_EChatInstanceFlagLobby = 0x40000,
	k_EChatInstanceFlagMMSLobby = 0x20000,
};

/* 237 */
enum SDL_WindowFlags
{
	SDL_WINDOW_FULLSCREEN = 0x1,
	SDL_WINDOW_OPENGL = 0x2,
	SDL_WINDOW_SHOWN = 0x4,
	SDL_WINDOW_HIDDEN = 0x8,
	SDL_WINDOW_BORDERLESS = 0x10,
	SDL_WINDOW_RESIZABLE = 0x20,
	SDL_WINDOW_MINIMIZED = 0x40,
	SDL_WINDOW_MAXIMIZED = 0x80,
	SDL_WINDOW_INPUT_GRABBED = 0x100,
	SDL_WINDOW_INPUT_FOCUS = 0x200,
	SDL_WINDOW_MOUSE_FOCUS = 0x400,
	SDL_WINDOW_FULLSCREEN_DESKTOP = 0x1001,
	SDL_WINDOW_FOREIGN = 0x800,
	SDL_WINDOW_ALLOW_HIGHDPI = 0x2000,
	SDL_WINDOW_MOUSE_CAPTURE = 0x4000,
};

/* 238 */
enum EMarketingMessageFlags
{
	k_EMarketingMessageFlagsNone = 0x0,
	k_EMarketingMessageFlagsHighPriority = 0x1,
	k_EMarketingMessageFlagsPlatformWindows = 0x2,
	k_EMarketingMessageFlagsPlatformMac = 0x4,
	k_EMarketingMessageFlagsPlatformLinux = 0x8,
	k_EMarketingMessageFlagsPlatformRestrictions = 0xE,
};

/* 239 */
enum DrawFilter
{
	DRAW_NEAREST = 0x2600,
	DRAW_LINEAR = 0x2601,
};

/* 240 */
enum DrawWrap
{
	DRAW_WRAP_CLAMP = 0x0,
	DRAW_WRAP_REPEAT = 0x1,
};

/* 241 */
enum $E9FF442E2E08C6A777836EEB793D7A11
{
	k_iCallback = 0x11A2,
};

/* 242 */
enum $D3EEE89B3F9A3A12FF54A4193C51A550
{
	none = 0x0,
	generic = 0x1,
	fileNotFound = 0x2,
	badPath = 0x3,
	tooManyOpenFiles = 0x4,
	accessDenied = 0x5,
	invalidFile = 0x6,
	removeCurrentDir = 0x7,
	directoryFull = 0x8,
	badSeek = 0x9,
	hardIO = 0xA,
	sharingViolation = 0xB,
	lockViolation = 0xC,
	diskFull = 0xD,
	endOfFile = 0xE,
};

/* 243 */
enum DP_ProviderID
{
	DP_PROVIDER_NONE = 0x0,
	DP_PROVIDER_TCPIP = 0x1,
	DP_PROVIDER_JINGLE = 0x2,
	DP_PROVIDER_GAMEKIT = 0x3,
};

/* 244 */
enum $6FC90F99FF4F7ED550567EC3ED4998F8
{
	PEER_INITIAL = 0x0,
	PEER_DISCONNECTED = 0x1,
	PEER_NEGOTIATING = 0x2,
	PEER_CONNECTING = 0x3,
	PEER_CONNECTED = 0x4,
	PEER_INVALID_PASSWORD = 0x5,
	PEER_JOIN_ROOM_FULL = 0x6,
	PEER_JOIN_ERROR = 0x7,
};

/* 245 */
enum $212780B00608B645F9F6C85F6CC3B07A
{
	ENVIRONMENT_GENERIC = 0x0,
	ENVIRONMENT_GENERIC2 = 0x1,
	ENVIRONMENT_PADDEDCELL = 0x2,
	ENVIRONMENT_ROOM = 0x3,
	ENVIRONMENT_BATHROOM = 0x4,
	ENVIRONMENT_LIVINGROOM = 0x5,
	ENVIRONMENT_STONEROOM = 0x6,
	ENVIRONMENT_AUDITORIUM = 0x7,
	ENVIRONMENT_CONCERTHALL = 0x8,
	ENVIRONMENT_CAVE = 0x9,
	ENVIRONMENT_ARENA = 0xA,
	ENVIRONMENT_HANGAR = 0xB,
	ENVIRONMENT_CARPETEDHALLWAY = 0xC,
	ENVIRONMENT_HALLWAY = 0xD,
	ENVIRONMENT_STONECORRIDOR = 0xE,
	ENVIRONMENT_ALLEY = 0xF,
	ENVIRONMENT_FOREST = 0x10,
	ENVIRONMENT_CITY = 0x11,
	ENVIRONMENT_MOUNTAINS = 0x12,
	ENVIRONMENT_QUARRY = 0x13,
	ENVIRONMENT_PLAIN = 0x14,
	ENVIRONMENT_PARKINGLOT = 0x15,
	ENVIRONMENT_SEWERPIPE = 0x16,
	ENVIRONMENT_UNDERWATER = 0x17,
	ENVIRONMENT_DRUGGED = 0x18,
	ENVIRONMENT_DIZZY = 0x19,
	ENVIRONMENT_PSYCHOTIC = 0x1A,
};

/* 246 */
typedef $E9FF442E2E08C6A777836EEB793D7A11 $A90E0F13A9258D825AD051F531D34C9D;

/* 247 */
enum $103B96F614EE475807C37BC5B4CB3F69
{
	INI_READ_BUFFER_SIZE = 0x400,
};

/* 248 */
enum CAOEEntry::AOEType
{
	AOE_CIRCLE = 0x0,
	AOE_CONE = 0x1,
	AOE_RECTANGLE = 0x2,
	AOE_LINE = 0x3,
};

/* 249 */
enum ERemoteStoragePlatform
{
	k_ERemoteStoragePlatformNone = 0x0,
	k_ERemoteStoragePlatformWindows = 0x1,
	k_ERemoteStoragePlatformOSX = 0x2,
	k_ERemoteStoragePlatformPS3 = 0x4,
	k_ERemoteStoragePlatformLinux = 0x8,
	k_ERemoteStoragePlatformReserved2 = 0x10,
	k_ERemoteStoragePlatformAll = 0xFFFFFFFF,
};

/* 250 */
enum EUGCReadAction
{
	k_EUGCRead_ContinueReadingUntilFinished = 0x0,
	k_EUGCRead_ContinueReading = 0x1,
	k_EUGCRead_Close = 0x2,
};

/* 251 */
enum ERemoteStoragePublishedFileVisibility
{
	k_ERemoteStoragePublishedFileVisibilityPublic = 0x0,
	k_ERemoteStoragePublishedFileVisibilityFriendsOnly = 0x1,
	k_ERemoteStoragePublishedFileVisibilityPrivate = 0x2,
};

/* 252 */
enum EWorkshopFileType
{
	k_EWorkshopFileTypeFirst = 0x0,
	k_EWorkshopFileTypeCommunity = 0x0,
	k_EWorkshopFileTypeMicrotransaction = 0x1,
	k_EWorkshopFileTypeCollection = 0x2,
	k_EWorkshopFileTypeArt = 0x3,
	k_EWorkshopFileTypeVideo = 0x4,
	k_EWorkshopFileTypeScreenshot = 0x5,
	k_EWorkshopFileTypeGame = 0x6,
	k_EWorkshopFileTypeSoftware = 0x7,
	k_EWorkshopFileTypeConcept = 0x8,
	k_EWorkshopFileTypeWebGuide = 0x9,
	k_EWorkshopFileTypeIntegratedGuide = 0xA,
	k_EWorkshopFileTypeMerch = 0xB,
	k_EWorkshopFileTypeControllerBinding = 0xC,
	k_EWorkshopFileTypeSteamworksAccessInvite = 0xD,
	k_EWorkshopFileTypeSteamVideo = 0xE,
	k_EWorkshopFileTypeMax = 0xF,
};

/* 253 */
enum EWorkshopVideoProvider
{
	k_EWorkshopVideoProviderNone = 0x0,
	k_EWorkshopVideoProviderYoutube = 0x1,
};

/* 254 */
enum EWorkshopFileAction
{
	k_EWorkshopFileActionPlayed = 0x0,
	k_EWorkshopFileActionCompleted = 0x1,
};

/* 255 */
enum EWorkshopEnumerationType
{
	k_EWorkshopEnumerationTypeRankedByVote = 0x0,
	k_EWorkshopEnumerationTypeRecent = 0x1,
	k_EWorkshopEnumerationTypeTrending = 0x2,
	k_EWorkshopEnumerationTypeFavoritesOfFriends = 0x3,
	k_EWorkshopEnumerationTypeVotedByFriends = 0x4,
	k_EWorkshopEnumerationTypeContentByFriends = 0x5,
	k_EWorkshopEnumerationTypeRecentFromFollowedUsers = 0x6,
};

/* 256 */
enum DP_EventType
{
	DP_EVENT_TYPE_NONE = 0x0,
	DP_EVENT_TYPE_CONNECT = 0x1,
	DP_EVENT_TYPE_DISCONNECT = 0x2,
	DP_EVENT_TYPE_RECEIVE = 0x3,
};

/* 257 */
enum $F7813D00DC2EF439805F4B10223F41B8
{
	k_ECallbackFlagsRegistered = 0x1,
	k_ECallbackFlagsGameServer = 0x2,
};

/* 258 */
enum CMemINIFile::eMode
{
	INI_MODE_READ = 0x0,
	INI_MODE_WRITE = 0x1,
};

/* 259 */
enum CChitin::EngineMode
{
	BG1 = 0x0,
	BG2 = 0x1,
	IWD = 0x2,
};

/* 260 */
typedef MACRO_SUCCESS_0 $C863428CE9D58DB2D9DF30BDEFDA0704;

/* 261 */
enum $AE6524B104A5255999AFDAF772A64E03
{
	INVALID_INDEX = 0xFFFFFFFF,
};

/* 262 */
enum EResult
{
	k_EResultOK = 0x1,
	k_EResultFail = 0x2,
	k_EResultNoConnection = 0x3,
	k_EResultInvalidPassword = 0x5,
	k_EResultLoggedInElsewhere = 0x6,
	k_EResultInvalidProtocolVer = 0x7,
	k_EResultInvalidParam = 0x8,
	k_EResultFileNotFound = 0x9,
	k_EResultBusy = 0xA,
	k_EResultInvalidState = 0xB,
	k_EResultInvalidName = 0xC,
	k_EResultInvalidEmail = 0xD,
	k_EResultDuplicateName = 0xE,
	k_EResultAccessDenied = 0xF,
	k_EResultTimeout = 0x10,
	k_EResultBanned = 0x11,
	k_EResultAccountNotFound = 0x12,
	k_EResultInvalidSteamID = 0x13,
	k_EResultServiceUnavailable = 0x14,
	k_EResultNotLoggedOn = 0x15,
	k_EResultPending = 0x16,
	k_EResultEncryptionFailure = 0x17,
	k_EResultInsufficientPrivilege = 0x18,
	k_EResultLimitExceeded = 0x19,
	k_EResultRevoked = 0x1A,
	k_EResultExpired = 0x1B,
	k_EResultAlreadyRedeemed = 0x1C,
	k_EResultDuplicateRequest = 0x1D,
	k_EResultAlreadyOwned = 0x1E,
	k_EResultIPNotFound = 0x1F,
	k_EResultPersistFailed = 0x20,
	k_EResultLockingFailed = 0x21,
	k_EResultLogonSessionReplaced = 0x22,
	k_EResultConnectFailed = 0x23,
	k_EResultHandshakeFailed = 0x24,
	k_EResultIOFailure = 0x25,
	k_EResultRemoteDisconnect = 0x26,
	k_EResultShoppingCartNotFound = 0x27,
	k_EResultBlocked = 0x28,
	k_EResultIgnored = 0x29,
	k_EResultNoMatch = 0x2A,
	k_EResultAccountDisabled = 0x2B,
	k_EResultServiceReadOnly = 0x2C,
	k_EResultAccountNotFeatured = 0x2D,
	k_EResultAdministratorOK = 0x2E,
	k_EResultContentVersion = 0x2F,
	k_EResultTryAnotherCM = 0x30,
	k_EResultPasswordRequiredToKickSession = 0x31,
	k_EResultAlreadyLoggedInElsewhere = 0x32,
	k_EResultSuspended = 0x33,
	k_EResultCancelled = 0x34,
	k_EResultDataCorruption = 0x35,
	k_EResultDiskFull = 0x36,
	k_EResultRemoteCallFailed = 0x37,
	k_EResultPasswordUnset = 0x38,
	k_EResultExternalAccountUnlinked = 0x39,
	k_EResultPSNTicketInvalid = 0x3A,
	k_EResultExternalAccountAlreadyLinked = 0x3B,
	k_EResultRemoteFileConflict = 0x3C,
	k_EResultIllegalPassword = 0x3D,
	k_EResultSameAsPreviousValue = 0x3E,
	k_EResultAccountLogonDenied = 0x3F,
	k_EResultCannotUseOldPassword = 0x40,
	k_EResultInvalidLoginAuthCode = 0x41,
	k_EResultAccountLogonDeniedNoMail = 0x42,
	k_EResultHardwareNotCapableOfIPT = 0x43,
	k_EResultIPTInitError = 0x44,
	k_EResultParentalControlRestricted = 0x45,
	k_EResultFacebookQueryError = 0x46,
	k_EResultExpiredLoginAuthCode = 0x47,
	k_EResultIPLoginRestrictionFailed = 0x48,
	k_EResultAccountLockedDown = 0x49,
	k_EResultAccountLogonDeniedVerifiedEmailRequired = 0x4A,
	k_EResultNoMatchingURL = 0x4B,
	k_EResultBadResponse = 0x4C,
	k_EResultRequirePasswordReEntry = 0x4D,
	k_EResultValueOutOfRange = 0x4E,
	k_EResultUnexpectedError = 0x4F,
	k_EResultDisabled = 0x50,
	k_EResultInvalidCEGSubmission = 0x51,
	k_EResultRestrictedDevice = 0x52,
	k_EResultRegionLocked = 0x53,
	k_EResultRateLimitExceeded = 0x54,
	k_EResultAccountLoginDeniedNeedTwoFactor = 0x55,
	k_EResultItemDeleted = 0x56,
	k_EResultAccountLoginDeniedThrottle = 0x57,
	k_EResultTwoFactorCodeMismatch = 0x58,
	k_EResultTwoFactorActivationCodeMismatch = 0x59,
};

/* 263 */
enum $5F45EBAC708B600E52CC4C0E2F2DD5D8
{
	TEXT_PRESENT = 0x1,
	SND_PRESENT = 0x2,
	TOKEN_PRESENT = 0x4,
	STRING_ID_MASK = 0xFFFFFF,
};

/* 264 */
enum $5E979CBF310CDA528B21464BBC1A1905
{
	GENDER_MALE = 0x0,
	GENDER_FEMALE = 0x1,
};

/* 265 */
typedef $103B96F614EE475807C37BC5B4CB3F69 $52F1692F558D178D1486EADFE8C5128F;

/* 266 */
enum $33781CF44F461BE3FF757E1CF5427C5C
{
	DAY_CODE = 0x1,
	NIGHT_CODE = 0x2,
	RAIN_CODE = 0x4,
};

/* 267 */
enum CFile::OpenFlags
{
	modeRead = 0x0,
	modeWrite = 0x1,
	modeReadWrite = 0x2,
	shareCompat = 0x0,
	shareExclusive = 0x10,
	shareDenyWrite = 0x20,
	shareDenyRead = 0x30,
	shareDenyNone = 0x40,
	modeNoInherit = 0x80,
	modeCreate = 0x1000,
	modeNoTruncate = 0x2000,
	typeText = 0x4000,
	typeBinary = 0x8000,
};

/* 268 */
enum CFile::Attribute
{
	normal = 0x0,
	readOnly = 0x1,
	hidden = 0x2,
	system = 0x4,
	volume = 0x8,
	directory = 0x10,
	archive = 0x20,
};

/* 269 */
enum CFile::SeekPosition
{
	begin = 0x0,
	current = 0x1,
	end = 0x2,
};

/* 270 */
enum $CFEFB5855D5A07FA5B12EB9FE0E5B12E
{
	hFileNull = 0xFFFFFFFF,
};

/* 271 */
enum CFile::BufferCommand
{
	bufferRead = 0x0,
	bufferWrite = 0x1,
	bufferCommit = 0x2,
	bufferCheck = 0x3,
};

/* 272 */
enum CGameJournalEntryFlag
{
	CGJEOpen = 0x0,
	CGJEClosed = 0x1,
	CGJEInUse = 0x2,
};

/* 273 */
enum $721D5E8FDF5B0CAB5D569F45EC007DA3
{
	SPAWN_KEY_CONTROLLED = 0x1,
	SPAWN_SEARCH_QTY_GLOBAL = 0x2,
	SPAWN_SEARCH_REGION = 0x4,
	SPAWN_SEARCH_RADIUS = 0x8,
	SPAWN_QTY_GLOBAL = 0x10,
	SPAWN_SET_SCRIPTNAME = 0x20,
	SPAWN_CREATE_SEARCH_QTY = 0x40,
	SPAWN_MODIFIES_GOOD = 0x400,
	SPAWN_MODIFIES_LAW = 0x800,
	SPAWN_MODIFIES_LADY = 0x1000,
	SPAWN_MODIFIES_MURDER = 0x2000,
	SPAWN_DEATH_SCRIPTNAME = 0x4000,
	SPAWN_DEATH_FACTION = 0x8000,
	SPAWN_DEATH_TEAM = 0x10000,
	SPAWN_SET_FACING = 0x20000,
	SPAWN_IGNORE_CAN_SEE = 0x40000,
	SPAWN_CHECK_VIEW_PORT = 0x80000,
	SPAWN_CROWD_CHECK = 0x100000,
	SPAWN_FINDSAFESTPOINT = 0x200000,
	SPAWN_INC_POINT_INDEX = 0x400000,
	SPAWN_HOLD_SELECTED_POINT = 0x800000,
	SPAWN_DO_NOTHING = 0x1000000,
	SPAWN_TIME_OF_DAY_CHECK = 0x2000000,
	SPAWN_AUTO_TEAM_BUDDY = 0x4000000,
};

/* 274 */
enum $C92069F4AA6996D42D8425BFB186FB6F
{
	SPAWN_DEFAULT_RADIUS = 0x1,
	SPAWN_POINT_REGION_ELEMENTS = 0x2,
	SPAWN_RADIUS_REGION_ELEMENT = 0x3,
	SPAWN_RECTANGULAR_REGION_ELEMENTS = 0x4,
};

/* 275 */
enum $E5A72E3A8816BD025412E801333E2AEF
{
	AI_TYPE_VALUES = 0x7,
};

/* 276 */
enum CSpawn::ePMode
{
	POINT_SELECT_RANDOM_SEQUENTIAL = 0x0,
	POINT_SELECT_SEQUENTIAL = 0x1,
	POINT_SELECT_INDEXED_SEQUENTIAL = 0x2,
	POINT_SELECT_EXPLICIT = 0x3,
};

/* 277 */
enum CScreenCreateCharStep
{
	CSCREENCREATECHAR_STEP_GENDER = 0x0,
	CSCREENCREATECHAR_STEP_PORTRAIT = 0x1,
	CSCREENCREATECHAR_STEP_CUSTOMPORTRAITS = 0x2,
	CSCREENCREATECHAR_STEP_RACE = 0x3,
	CSCREENCREATECHAR_STEP_CLASS = 0x4,
	CSCREENCREATECHAR_STEP_MULTICLASS = 0x5,
	CSCREENCREATECHAR_STEP_KIT = 0x6,
	CSCREENCREATECHAR_STEP_ALIGNMENT = 0x7,
	CSCREENCREATECHAR_STEP_ABILITIES = 0x8,
	CSCREENCREATECHAR_STEP_SKILLS = 0x9,
	CSCREENCREATECHAR_STEP_HATEDRACE = 0xA,
	CSCREENCREATECHAR_STEP_CHOOSE_MAGE = 0xB,
	CSCREENCREATECHAR_STEP_MEMORIZE_MAGE = 0xC,
	CSCREENCREATECHAR_STEP_MEMORIZE_PRIEST = 0xD,
	CSCREENCREATECHAR_STEP_PROFICIENCIES = 0xE,
	CSCREENCREATECHAR_STEP_APPEARANCE = 0xF,
	CSCREENCREATECHAR_STEP_CUSTOMSOUNDS = 0x10,
	CSCREENCREATECHAR_STEP_NAME = 0x11,
	CSCREENCREATECHAR_STEP_DONE = 0x12,
	CSCREENCREATECHAR_STEP_IMPORT = 0x13,
	CSCREENCREATECHAR_STEP_EXPORT = 0x14,
	CSCREENCREATECHAR_STEP_BIOGRAPHY = 0x15,
	CSCREENCREATECHAR_STEP_PREROLL = 0x16,
	CSCREENCREATECHAR_STEP_ERROR_MESSAGE = 0x17,
	CSCREENCREATECHAR_STEP_DUALCLASS_CLASS = 0x18,
	CSCREENCREATECHAR_STEP_DUALCLASS_PROFICIENCIES = 0x19,
	CSCREENCREATECHAR_STEP_DUALCLASS_CHOOSE_MAGE = 0x1A,
	CSCREENCREATECHAR_STEP_DUALCLASS_DONE = 0x1B,
	CSCREENCREATECHAR_STEP_LEVELUP_PROFICIENCIES = 0x1C,
	CSCREENCREATECHAR_STEP_LEVELUP_HIGH_LEVEL_ABILITIES = 0x1D,
};

/* 278 */
enum importStateType
{
	Character = 0x0,
	Game = 0x1,
	CharacterFromGame = 0x2,
	GameInvalid = 0x3,
	PartyFromGame = 0x4,
};

/* 279 */
enum $B3F87E97BB3D4D4A8CD12EDA5C72AE76
{
	MIN_LIGHT = 0x40,
	MAX_LIGHT = 0xFF,
	LIGHT_DIV = 0x6,
};

/* 280 */
enum $5775140948DE3B56E26EB1ADE2012303
{
	SCREENWIDTH_MIN = 0x400,
	SCREENHEIGHT_MIN = 0x300,
};

/* 281 */
enum $D854A4DA6F19E2902B13FC42C8D5DB52
{
	POINTER_WITH_DIGITS_WIDTH = 0x20,
	POINTER_DIGIT_WIDTH = 0x5,
};

/* 282 */
enum CGameID::EGameIDType
{
	k_EGameIDTypeApp = 0x0,
	k_EGameIDTypeGameMod = 0x1,
	k_EGameIDTypeShortcut = 0x2,
	k_EGameIDTypeP2P = 0x3,
};

/* 283 */
enum ISteamHTMLSurface::EHTMLMouseButton
{
	eHTMLMouseButton_Left = 0x0,
	eHTMLMouseButton_Right = 0x1,
	eHTMLMouseButton_Middle = 0x2,
};

/* 284 */
enum ISteamHTMLSurface::EMouseCursor
{
	dc_user = 0x0,
	dc_none = 0x1,
	dc_arrow = 0x2,
	dc_ibeam = 0x3,
	dc_hourglass = 0x4,
	dc_waitarrow = 0x5,
	dc_crosshair = 0x6,
	dc_up = 0x7,
	dc_sizenw = 0x8,
	dc_sizese = 0x9,
	dc_sizene = 0xA,
	dc_sizesw = 0xB,
	dc_sizew = 0xC,
	dc_sizee = 0xD,
	dc_sizen = 0xE,
	dc_sizes = 0xF,
	dc_sizewe = 0x10,
	dc_sizens = 0x11,
	dc_sizeall = 0x12,
	dc_no = 0x13,
	dc_hand = 0x14,
	dc_blank = 0x15,
	dc_middle_pan = 0x16,
	dc_north_pan = 0x17,
	dc_north_east_pan = 0x18,
	dc_east_pan = 0x19,
	dc_south_east_pan = 0x1A,
	dc_south_pan = 0x1B,
	dc_south_west_pan = 0x1C,
	dc_west_pan = 0x1D,
	dc_north_west_pan = 0x1E,
	dc_alias = 0x1F,
	dc_cell = 0x20,
	dc_colresize = 0x21,
	dc_copycur = 0x22,
	dc_verticaltext = 0x23,
	dc_rowresize = 0x24,
	dc_zoomin = 0x25,
	dc_zoomout = 0x26,
	dc_help = 0x27,
	dc_custom = 0x28,
	dc_last = 0x29,
};

/* 285 */
enum ISteamHTMLSurface::EHTMLKeyModifiers
{
	eHTMLKeyModifier_None = 0x0,
	eHTMLKeyModifier_AltDown = 0x1,
	eHTMLKeyModifier_CrtlDown = 0x2,
	eHTMLKeyModifier_ShiftDown = 0x4,
};

/* 286 */
enum EUserUGCList
{
	k_EUserUGCList_Published = 0x0,
	k_EUserUGCList_VotedOn = 0x1,
	k_EUserUGCList_VotedUp = 0x2,
	k_EUserUGCList_VotedDown = 0x3,
	k_EUserUGCList_WillVoteLater = 0x4,
	k_EUserUGCList_Favorited = 0x5,
	k_EUserUGCList_Subscribed = 0x6,
	k_EUserUGCList_UsedOrPlayed = 0x7,
	k_EUserUGCList_Followed = 0x8,
};

/* 287 */
enum EUGCMatchingUGCType
{
	k_EUGCMatchingUGCType_Items = 0x0,
	k_EUGCMatchingUGCType_Items_Mtx = 0x1,
	k_EUGCMatchingUGCType_Items_ReadyToUse = 0x2,
	k_EUGCMatchingUGCType_Collections = 0x3,
	k_EUGCMatchingUGCType_Artwork = 0x4,
	k_EUGCMatchingUGCType_Videos = 0x5,
	k_EUGCMatchingUGCType_Screenshots = 0x6,
	k_EUGCMatchingUGCType_AllGuides = 0x7,
	k_EUGCMatchingUGCType_WebGuides = 0x8,
	k_EUGCMatchingUGCType_IntegratedGuides = 0x9,
	k_EUGCMatchingUGCType_UsableInGame = 0xA,
	k_EUGCMatchingUGCType_ControllerBindings = 0xB,
};

/* 288 */
enum EUserUGCListSortOrder
{
	k_EUserUGCListSortOrder_CreationOrderDesc = 0x0,
	k_EUserUGCListSortOrder_CreationOrderAsc = 0x1,
	k_EUserUGCListSortOrder_TitleAsc = 0x2,
	k_EUserUGCListSortOrder_LastUpdatedDesc = 0x3,
	k_EUserUGCListSortOrder_SubscriptionDateDesc = 0x4,
	k_EUserUGCListSortOrder_VoteScoreDesc = 0x5,
	k_EUserUGCListSortOrder_ForModeration = 0x6,
};

/* 289 */
enum EUGCQuery
{
	k_EUGCQuery_RankedByVote = 0x0,
	k_EUGCQuery_RankedByPublicationDate = 0x1,
	k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate = 0x2,
	k_EUGCQuery_RankedByTrend = 0x3,
	k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate = 0x4,
	k_EUGCQuery_CreatedByFriendsRankedByPublicationDate = 0x5,
	k_EUGCQuery_RankedByNumTimesReported = 0x6,
	k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate = 0x7,
	k_EUGCQuery_NotYetRated = 0x8,
	k_EUGCQuery_RankedByTotalVotesAsc = 0x9,
	k_EUGCQuery_RankedByVotesUp = 0xA,
	k_EUGCQuery_RankedByTextSearch = 0xB,
};

/* 290 */
enum EItemUpdateStatus
{
	k_EItemUpdateStatusInvalid = 0x0,
	k_EItemUpdateStatusPreparingConfig = 0x1,
	k_EItemUpdateStatusPreparingContent = 0x2,
	k_EItemUpdateStatusUploadingContent = 0x3,
	k_EItemUpdateStatusUploadingPreviewFile = 0x4,
	k_EItemUpdateStatusCommittingChanges = 0x5,
};

/* 291 */
enum ELeaderboardSortMethod
{
	k_ELeaderboardSortMethodNone = 0x0,
	k_ELeaderboardSortMethodAscending = 0x1,
	k_ELeaderboardSortMethodDescending = 0x2,
};

/* 292 */
enum ELeaderboardDisplayType
{
	k_ELeaderboardDisplayTypeNone = 0x0,
	k_ELeaderboardDisplayTypeNumeric = 0x1,
	k_ELeaderboardDisplayTypeTimeSeconds = 0x2,
	k_ELeaderboardDisplayTypeTimeMilliSeconds = 0x3,
};

/* 293 */
enum ELeaderboardDataRequest
{
	k_ELeaderboardDataRequestGlobal = 0x0,
	k_ELeaderboardDataRequestGlobalAroundUser = 0x1,
	k_ELeaderboardDataRequestFriends = 0x2,
	k_ELeaderboardDataRequestUsers = 0x3,
};

/* 294 */
enum ELeaderboardUploadScoreMethod
{
	k_ELeaderboardUploadScoreMethodNone = 0x0,
	k_ELeaderboardUploadScoreMethodKeepBest = 0x1,
	k_ELeaderboardUploadScoreMethodForceUpdate = 0x2,
};

/* 295 */
enum uiItemType
{
	ITEM_NONE = 0x0,
	ITEM_TEXT = 0x1,
	ITEM_BUTTON = 0x2,
	ITEM_LIST = 0x3,
	ITEM_EDIT = 0x4,
	ITEM_MOVIE = 0x5,
	ITEM_SLIDER = 0x6,
	ITEM_HANDLE = 0x7,
	ITEM_DRAGGABLE = 0x8,
	ITEM_SLOT = 0x9,
	ITEM_MAP = 0xA,
	ITEM_TEMPLATE = 0xB,
};

/* 296 */
enum uiVariantType
{
	UIVAR_INT = 0x0,
	UIVAR_FUNCTION = 0x1,
	UIVAR_STRING = 0x2,
	UIVAR_FLOAT = 0x3,
};

/* 297 */
enum $DD69F2C3C6C359ED3B9D976142CE5F43
{
	SDLK_UNKNOWN = 0x0,
	SDLK_RETURN = 0xD,
	SDLK_ESCAPE = 0x1B,
	SDLK_BACKSPACE = 0x8,
	SDLK_TAB = 0x9,
	SDLK_SPACE = 0x20,
	SDLK_EXCLAIM = 0x21,
	SDLK_QUOTEDBL = 0x22,
	SDLK_HASH = 0x23,
	SDLK_PERCENT = 0x25,
	SDLK_DOLLAR = 0x24,
	SDLK_AMPERSAND = 0x26,
	SDLK_QUOTE = 0x27,
	SDLK_LEFTPAREN = 0x28,
	SDLK_RIGHTPAREN = 0x29,
	SDLK_ASTERISK = 0x2A,
	SDLK_PLUS = 0x2B,
	SDLK_COMMA = 0x2C,
	SDLK_MINUS = 0x2D,
	SDLK_PERIOD = 0x2E,
	SDLK_SLASH = 0x2F,
	SDLK_0 = 0x30,
	SDLK_1 = 0x31,
	SDLK_2 = 0x32,
	SDLK_3 = 0x33,
	SDLK_4 = 0x34,
	SDLK_5 = 0x35,
	SDLK_6 = 0x36,
	SDLK_7 = 0x37,
	SDLK_8 = 0x38,
	SDLK_9 = 0x39,
	SDLK_COLON = 0x3A,
	SDLK_SEMICOLON = 0x3B,
	SDLK_LESS = 0x3C,
	SDLK_EQUALS = 0x3D,
	SDLK_GREATER = 0x3E,
	SDLK_QUESTION = 0x3F,
	SDLK_AT = 0x40,
	SDLK_LEFTBRACKET = 0x5B,
	SDLK_BACKSLASH = 0x5C,
	SDLK_RIGHTBRACKET = 0x5D,
	SDLK_CARET = 0x5E,
	SDLK_UNDERSCORE = 0x5F,
	SDLK_BACKQUOTE = 0x60,
	SDLK_a = 0x61,
	SDLK_b = 0x62,
	SDLK_c = 0x63,
	SDLK_d = 0x64,
	SDLK_e = 0x65,
	SDLK_f = 0x66,
	SDLK_g = 0x67,
	SDLK_h = 0x68,
	SDLK_i = 0x69,
	SDLK_j = 0x6A,
	SDLK_k = 0x6B,
	SDLK_l = 0x6C,
	SDLK_m = 0x6D,
	SDLK_n = 0x6E,
	SDLK_o = 0x6F,
	SDLK_p = 0x70,
	SDLK_q = 0x71,
	SDLK_r = 0x72,
	SDLK_s = 0x73,
	SDLK_t = 0x74,
	SDLK_u = 0x75,
	SDLK_v = 0x76,
	SDLK_w = 0x77,
	SDLK_x = 0x78,
	SDLK_y = 0x79,
	SDLK_z = 0x7A,
	SDLK_CAPSLOCK = 0x40000039,
	SDLK_F1 = 0x4000003A,
	SDLK_F2 = 0x4000003B,
	SDLK_F3 = 0x4000003C,
	SDLK_F4 = 0x4000003D,
	SDLK_F5 = 0x4000003E,
	SDLK_F6 = 0x4000003F,
	SDLK_F7 = 0x40000040,
	SDLK_F8 = 0x40000041,
	SDLK_F9 = 0x40000042,
	SDLK_F10 = 0x40000043,
	SDLK_F11 = 0x40000044,
	SDLK_F12 = 0x40000045,
	SDLK_PRINTSCREEN = 0x40000046,
	SDLK_SCROLLLOCK = 0x40000047,
	SDLK_PAUSE = 0x40000048,
	SDLK_INSERT = 0x40000049,
	SDLK_HOME = 0x4000004A,
	SDLK_PAGEUP = 0x4000004B,
	SDLK_DELETE = 0x7F,
	SDLK_END = 0x4000004D,
	SDLK_PAGEDOWN = 0x4000004E,
	SDLK_RIGHT = 0x4000004F,
	SDLK_LEFT = 0x40000050,
	SDLK_DOWN = 0x40000051,
	SDLK_UP = 0x40000052,
	SDLK_NUMLOCKCLEAR = 0x40000053,
	SDLK_KP_DIVIDE = 0x40000054,
	SDLK_KP_MULTIPLY = 0x40000055,
	SDLK_KP_MINUS = 0x40000056,
	SDLK_KP_PLUS = 0x40000057,
	SDLK_KP_ENTER = 0x40000058,
	SDLK_KP_1 = 0x40000059,
	SDLK_KP_2 = 0x4000005A,
	SDLK_KP_3 = 0x4000005B,
	SDLK_KP_4 = 0x4000005C,
	SDLK_KP_5 = 0x4000005D,
	SDLK_KP_6 = 0x4000005E,
	SDLK_KP_7 = 0x4000005F,
	SDLK_KP_8 = 0x40000060,
	SDLK_KP_9 = 0x40000061,
	SDLK_KP_0 = 0x40000062,
	SDLK_KP_PERIOD = 0x40000063,
	SDLK_APPLICATION = 0x40000065,
	SDLK_POWER = 0x40000066,
	SDLK_KP_EQUALS = 0x40000067,
	SDLK_F13 = 0x40000068,
	SDLK_F14 = 0x40000069,
	SDLK_F15 = 0x4000006A,
	SDLK_F16 = 0x4000006B,
	SDLK_F17 = 0x4000006C,
	SDLK_F18 = 0x4000006D,
	SDLK_F19 = 0x4000006E,
	SDLK_F20 = 0x4000006F,
	SDLK_F21 = 0x40000070,
	SDLK_F22 = 0x40000071,
	SDLK_F23 = 0x40000072,
	SDLK_F24 = 0x40000073,
	SDLK_EXECUTE = 0x40000074,
	SDLK_HELP = 0x40000075,
	SDLK_MENU = 0x40000076,
	SDLK_SELECT = 0x40000077,
	SDLK_STOP = 0x40000078,
	SDLK_AGAIN = 0x40000079,
	SDLK_UNDO = 0x4000007A,
	SDLK_CUT = 0x4000007B,
	SDLK_COPY = 0x4000007C,
	SDLK_PASTE = 0x4000007D,
	SDLK_FIND = 0x4000007E,
	SDLK_MUTE = 0x4000007F,
	SDLK_VOLUMEUP = 0x40000080,
	SDLK_VOLUMEDOWN = 0x40000081,
	SDLK_KP_COMMA = 0x40000085,
	SDLK_KP_EQUALSAS400 = 0x40000086,
	SDLK_ALTERASE = 0x40000099,
	SDLK_SYSREQ = 0x4000009A,
	SDLK_CANCEL = 0x4000009B,
	SDLK_CLEAR = 0x4000009C,
	SDLK_PRIOR = 0x4000009D,
	SDLK_RETURN2 = 0x4000009E,
	SDLK_SEPARATOR = 0x4000009F,
	SDLK_OUT = 0x400000A0,
	SDLK_OPER = 0x400000A1,
	SDLK_CLEARAGAIN = 0x400000A2,
	SDLK_CRSEL = 0x400000A3,
	SDLK_EXSEL = 0x400000A4,
	SDLK_KP_00 = 0x400000B0,
	SDLK_KP_000 = 0x400000B1,
	SDLK_THOUSANDSSEPARATOR = 0x400000B2,
	SDLK_DECIMALSEPARATOR = 0x400000B3,
	SDLK_CURRENCYUNIT = 0x400000B4,
	SDLK_CURRENCYSUBUNIT = 0x400000B5,
	SDLK_KP_LEFTPAREN = 0x400000B6,
	SDLK_KP_RIGHTPAREN = 0x400000B7,
	SDLK_KP_LEFTBRACE = 0x400000B8,
	SDLK_KP_RIGHTBRACE = 0x400000B9,
	SDLK_KP_TAB = 0x400000BA,
	SDLK_KP_BACKSPACE = 0x400000BB,
	SDLK_KP_A = 0x400000BC,
	SDLK_KP_B = 0x400000BD,
	SDLK_KP_C = 0x400000BE,
	SDLK_KP_D = 0x400000BF,
	SDLK_KP_E = 0x400000C0,
	SDLK_KP_F = 0x400000C1,
	SDLK_KP_XOR = 0x400000C2,
	SDLK_KP_POWER = 0x400000C3,
	SDLK_KP_PERCENT = 0x400000C4,
	SDLK_KP_LESS = 0x400000C5,
	SDLK_KP_GREATER = 0x400000C6,
	SDLK_KP_AMPERSAND = 0x400000C7,
	SDLK_KP_DBLAMPERSAND = 0x400000C8,
	SDLK_KP_VERTICALBAR = 0x400000C9,
	SDLK_KP_DBLVERTICALBAR = 0x400000CA,
	SDLK_KP_COLON = 0x400000CB,
	SDLK_KP_HASH = 0x400000CC,
	SDLK_KP_SPACE = 0x400000CD,
	SDLK_KP_AT = 0x400000CE,
	SDLK_KP_EXCLAM = 0x400000CF,
	SDLK_KP_MEMSTORE = 0x400000D0,
	SDLK_KP_MEMRECALL = 0x400000D1,
	SDLK_KP_MEMCLEAR = 0x400000D2,
	SDLK_KP_MEMADD = 0x400000D3,
	SDLK_KP_MEMSUBTRACT = 0x400000D4,
	SDLK_KP_MEMMULTIPLY = 0x400000D5,
	SDLK_KP_MEMDIVIDE = 0x400000D6,
	SDLK_KP_PLUSMINUS = 0x400000D7,
	SDLK_KP_CLEAR = 0x400000D8,
	SDLK_KP_CLEARENTRY = 0x400000D9,
	SDLK_KP_BINARY = 0x400000DA,
	SDLK_KP_OCTAL = 0x400000DB,
	SDLK_KP_DECIMAL = 0x400000DC,
	SDLK_KP_HEXADECIMAL = 0x400000DD,
	SDLK_LCTRL = 0x400000E0,
	SDLK_LSHIFT = 0x400000E1,
	SDLK_LALT = 0x400000E2,
	SDLK_LGUI = 0x400000E3,
	SDLK_RCTRL = 0x400000E4,
	SDLK_RSHIFT = 0x400000E5,
	SDLK_RALT = 0x400000E6,
	SDLK_RGUI = 0x400000E7,
	SDLK_MODE = 0x40000101,
	SDLK_AUDIONEXT = 0x40000102,
	SDLK_AUDIOPREV = 0x40000103,
	SDLK_AUDIOSTOP = 0x40000104,
	SDLK_AUDIOPLAY = 0x40000105,
	SDLK_AUDIOMUTE = 0x40000106,
	SDLK_MEDIASELECT = 0x40000107,
	SDLK_WWW = 0x40000108,
	SDLK_MAIL = 0x40000109,
	SDLK_CALCULATOR = 0x4000010A,
	SDLK_COMPUTER = 0x4000010B,
	SDLK_AC_SEARCH = 0x4000010C,
	SDLK_AC_HOME = 0x4000010D,
	SDLK_AC_BACK = 0x4000010E,
	SDLK_AC_FORWARD = 0x4000010F,
	SDLK_AC_STOP = 0x40000110,
	SDLK_AC_REFRESH = 0x40000111,
	SDLK_AC_BOOKMARKS = 0x40000112,
	SDLK_BRIGHTNESSDOWN = 0x40000113,
	SDLK_BRIGHTNESSUP = 0x40000114,
	SDLK_DISPLAYSWITCH = 0x40000115,
	SDLK_KBDILLUMTOGGLE = 0x40000116,
	SDLK_KBDILLUMDOWN = 0x40000117,
	SDLK_KBDILLUMUP = 0x40000118,
	SDLK_EJECT = 0x40000119,
	SDLK_SLEEP = 0x4000011A,
};

/* 298 */
enum DrawMode
{
	DRAW_POINTS = 0x0,
	DRAW_LINES = 0x1,
	DRAW_TRIANGLES = 0x2,
	DRAW_TRIANGLE_STRIP = 0x3,
};

/* 299 */
enum DrawFeature
{
	DRAW_TEXTURE_2D = 0xDE1,
	DRAW_BLEND = 0xBE2,
	DRAW_SCISSOR_TEST = 0xC11,
	DRAW_RENDER_YUV = 0xC12,
};

/* 300 */
enum DrawBlend
{
	DRAW_ZERO = 0x0,
	DRAW_ONE = 0x1,
	DRAW_DST_COLOR = 0x2,
	DRAW_SRC_COLOR = 0x3,
	DRAW_ONE_MINUS_DST_COLOR = 0x4,
	DRAW_ONE_MINUS_SRC_COLOR = 0x5,
	DRAW_SRC_ALPHA = 0x6,
	DRAW_ONE_MINUS_SRC_ALPHA = 0x7,
	DRAW_DST_ALPHA = 0x8,
	DRAW_ONE_MINUS_DST_ALPHA = 0x9,
};

/* 301 */
enum SDL_Keymod
{
	KMOD_NONE = 0x0,
	KMOD_LSHIFT = 0x1,
	KMOD_RSHIFT = 0x2,
	KMOD_LCTRL = 0x40,
	KMOD_RCTRL = 0x80,
	KMOD_LALT = 0x100,
	KMOD_RALT = 0x200,
	KMOD_LGUI = 0x400,
	KMOD_RGUI = 0x800,
	KMOD_NUM = 0x1000,
	KMOD_CAPS = 0x2000,
	KMOD_MODE = 0x4000,
	KMOD_RESERVED = 0x8000,
};

/* 302 */
enum SDL_MessageBoxFlags
{
	SDL_MESSAGEBOX_ERROR = 0x10,
	SDL_MESSAGEBOX_WARNING = 0x20,
	SDL_MESSAGEBOX_INFORMATION = 0x40,
};

/* 303 */
enum SDL_EventType
{
	SDL_FIRSTEVENT = 0x0,
	SDL_QUIT = 0x100,
	SDL_APP_TERMINATING = 0x101,
	SDL_APP_LOWMEMORY = 0x102,
	SDL_APP_WILLENTERBACKGROUND = 0x103,
	SDL_APP_DIDENTERBACKGROUND = 0x104,
	SDL_APP_WILLENTERFOREGROUND = 0x105,
	SDL_APP_DIDENTERFOREGROUND = 0x106,
	SDL_APP_UI_COVERED = 0x107,
	SDL_APP_SHOW_GAME_MESSAGE = 0x108,
	SDL_WINDOWEVENT = 0x200,
	SDL_SYSWMEVENT = 0x201,
	SDL_KEYDOWN = 0x300,
	SDL_KEYUP = 0x301,
	SDL_TEXTEDITING = 0x302,
	SDL_TEXTINPUT = 0x303,
	SDL_KEYMAPCHANGED = 0x304,
	SDL_MOUSEMOTION = 0x400,
	SDL_MOUSEBUTTONDOWN = 0x401,
	SDL_MOUSEBUTTONUP = 0x402,
	SDL_MOUSEWHEEL = 0x403,
	SDL_JOYAXISMOTION = 0x600,
	SDL_JOYBALLMOTION = 0x601,
	SDL_JOYHATMOTION = 0x602,
	SDL_JOYBUTTONDOWN = 0x603,
	SDL_JOYBUTTONUP = 0x604,
	SDL_JOYDEVICEADDED = 0x605,
	SDL_JOYDEVICEREMOVED = 0x606,
	SDL_CONTROLLERAXISMOTION = 0x650,
	SDL_CONTROLLERBUTTONDOWN = 0x651,
	SDL_CONTROLLERBUTTONUP = 0x652,
	SDL_CONTROLLERDEVICEADDED = 0x653,
	SDL_CONTROLLERDEVICEREMOVED = 0x654,
	SDL_CONTROLLERDEVICEREMAPPED = 0x655,
	SDL_FINGERDOWN = 0x700,
	SDL_FINGERUP = 0x701,
	SDL_FINGERMOTION = 0x702,
	SDL_DOLLARGESTURE = 0x800,
	SDL_DOLLARRECORD = 0x801,
	SDL_MULTIGESTURE = 0x802,
	SDL_MAGNIFY = 0x803,
	SDL_PAN = 0x804,
	SDL_TAP = 0x805,
	SDL_DOUBLETAP = 0x806,
	SDL_LONGTAP = 0x807,
	SDL_FLICK = 0x808,
	SDL_CLIPBOARDUPDATE = 0x900,
	SDL_DROPFILE = 0x1000,
	SDL_AUDIODEVICEADDED = 0x1100,
	SDL_AUDIODEVICEREMOVED = 0x1101,
	SDL_RENDER_TARGETS_RESET = 0x2000,
	SDL_RENDER_DEVICE_RESET = 0x2001,
	SDL_USEREVENT = 0x8000,
	SDL_LASTEVENT = 0xFFFF,
};

/* 304 */
enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY
{
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = 0xFFFFFFFF,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0x0,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 0x1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 0x2,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 0x3,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 0x4,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 0x5,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 0x6,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 0x8,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 0x9,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 0xA,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 0xB,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 0xC,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 0xD,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 0xE,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 305 */
enum SDL_ThreadPriority
{
	SDL_THREAD_PRIORITY_LOW = 0x0,
	SDL_THREAD_PRIORITY_NORMAL = 0x1,
	SDL_THREAD_PRIORITY_HIGH = 0x2,
};

/* 306 */
enum SDL_HitTestResult
{
	SDL_HITTEST_NORMAL = 0x0,
	SDL_HITTEST_DRAGGABLE = 0x1,
	SDL_HITTEST_RESIZE_TOPLEFT = 0x2,
	SDL_HITTEST_RESIZE_TOP = 0x3,
	SDL_HITTEST_RESIZE_TOPRIGHT = 0x4,
	SDL_HITTEST_RESIZE_RIGHT = 0x5,
	SDL_HITTEST_RESIZE_BOTTOMRIGHT = 0x6,
	SDL_HITTEST_RESIZE_BOTTOM = 0x7,
	SDL_HITTEST_RESIZE_BOTTOMLEFT = 0x8,
	SDL_HITTEST_RESIZE_LEFT = 0x9,
};

/* 307 */
enum DISPLAYCONFIG_SCALING
{
	DISPLAYCONFIG_SCALING_IDENTITY = 0x1,
	DISPLAYCONFIG_SCALING_CENTERED = 0x2,
	DISPLAYCONFIG_SCALING_STRETCHED = 0x3,
	DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 0x4,
	DISPLAYCONFIG_SCALING_CUSTOM = 0x5,
	DISPLAYCONFIG_SCALING_PREFERRED = 0x80,
	DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 308 */
enum DISPLAYCONFIG_ROTATION
{
	DISPLAYCONFIG_ROTATION_IDENTITY = 0x1,
	DISPLAYCONFIG_ROTATION_ROTATE90 = 0x2,
	DISPLAYCONFIG_ROTATION_ROTATE180 = 0x3,
	DISPLAYCONFIG_ROTATION_ROTATE270 = 0x4,
	DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 309 */
enum DISPLAYCONFIG_MODE_INFO_TYPE
{
	DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 0x1,
	DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 0x2,
	DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 310 */
enum DISPLAYCONFIG_PIXELFORMAT
{
	DISPLAYCONFIG_PIXELFORMAT_8BPP = 0x1,
	DISPLAYCONFIG_PIXELFORMAT_16BPP = 0x2,
	DISPLAYCONFIG_PIXELFORMAT_24BPP = 0x3,
	DISPLAYCONFIG_PIXELFORMAT_32BPP = 0x4,
	DISPLAYCONFIG_PIXELFORMAT_NONGDI = 0x5,
	DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 311 */
typedef $C76430121188DB029AABDFCFE322BAEC WELL_KNOWN_SID_TYPE;

/* 312 */
enum _NORM_FORM
{
	NormalizationOther = 0x0,
	NormalizationC = 0x1,
	NormalizationD = 0x2,
	NormalizationKC = 0x5,
	NormalizationKD = 0x6,
};

/* 313 */
enum EFriendRelationship
{
	k_EFriendRelationshipNone = 0x0,
	k_EFriendRelationshipBlocked = 0x1,
	k_EFriendRelationshipRequestRecipient = 0x2,
	k_EFriendRelationshipFriend = 0x3,
	k_EFriendRelationshipRequestInitiator = 0x4,
	k_EFriendRelationshipIgnored = 0x5,
	k_EFriendRelationshipIgnoredFriend = 0x6,
	k_EFriendRelationshipSuggested = 0x7,
	k_EFriendRelationshipMax = 0x8,
};

/* 314 */
enum DISPLAYCONFIG_TOPOLOGY_ID
{
	DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x1,
	DISPLAYCONFIG_TOPOLOGY_CLONE = 0x2,
	DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x4,
	DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x8,
	DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 315 */
enum DISPLAYCONFIG_DEVICE_INFO_TYPE
{
	DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 0x1,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 0x2,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 0x3,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 0x4,
	DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 0x5,
	DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 316 */
enum EPersonaState
{
	k_EPersonaStateOffline = 0x0,
	k_EPersonaStateOnline = 0x1,
	k_EPersonaStateBusy = 0x2,
	k_EPersonaStateAway = 0x3,
	k_EPersonaStateSnooze = 0x4,
	k_EPersonaStateLookingToTrade = 0x5,
	k_EPersonaStateLookingToPlay = 0x6,
	k_EPersonaStateMax = 0x7,
};

/* 317 */
enum EFriendFlags
{
	k_EFriendFlagNone = 0x0,
	k_EFriendFlagBlocked = 0x1,
	k_EFriendFlagFriendshipRequested = 0x2,
	k_EFriendFlagImmediate = 0x4,
	k_EFriendFlagClanMember = 0x8,
	k_EFriendFlagOnGameServer = 0x10,
	k_EFriendFlagRequestingFriendship = 0x80,
	k_EFriendFlagRequestingInfo = 0x100,
	k_EFriendFlagIgnored = 0x200,
	k_EFriendFlagIgnoredFriend = 0x400,
	k_EFriendFlagSuggested = 0x800,
	k_EFriendFlagAll = 0xFFFF,
};

/* 318 */
enum EChatMemberStateChange
{
	k_EChatMemberStateChangeEntered = 0x1,
	k_EChatMemberStateChangeLeft = 0x2,
	k_EChatMemberStateChangeDisconnected = 0x4,
	k_EChatMemberStateChangeKicked = 0x8,
	k_EChatMemberStateChangeBanned = 0x10,
};

/* 319 */
enum EHTTPMethod
{
	k_EHTTPMethodInvalid = 0x0,
	k_EHTTPMethodGET = 0x1,
	k_EHTTPMethodHEAD = 0x2,
	k_EHTTPMethodPOST = 0x3,
	k_EHTTPMethodPUT = 0x4,
	k_EHTTPMethodDELETE = 0x5,
	k_EHTTPMethodOPTIONS = 0x6,
};

/* 320 */
enum $DEC60CB2430F492DA4FDAB29C999AF69
{
	k_cchPersonaNameMax = 0x80,
	k_cwchPersonaNameMax = 0x20,
};

/* 321 */
enum EUserRestriction
{
	k_nUserRestrictionNone = 0x0,
	k_nUserRestrictionUnknown = 0x1,
	k_nUserRestrictionAnyChat = 0x2,
	k_nUserRestrictionVoiceChat = 0x4,
	k_nUserRestrictionGroupChat = 0x8,
	k_nUserRestrictionRating = 0x10,
	k_nUserRestrictionGameInvites = 0x20,
	k_nUserRestrictionTrading = 0x40,
};

/* 322 */
enum EHTTPStatusCode
{
	k_EHTTPStatusCodeInvalid = 0x0,
	k_EHTTPStatusCode100Continue = 0x64,
	k_EHTTPStatusCode101SwitchingProtocols = 0x65,
	k_EHTTPStatusCode200OK = 0xC8,
	k_EHTTPStatusCode201Created = 0xC9,
	k_EHTTPStatusCode202Accepted = 0xCA,
	k_EHTTPStatusCode203NonAuthoritative = 0xCB,
	k_EHTTPStatusCode204NoContent = 0xCC,
	k_EHTTPStatusCode205ResetContent = 0xCD,
	k_EHTTPStatusCode206PartialContent = 0xCE,
	k_EHTTPStatusCode300MultipleChoices = 0x12C,
	k_EHTTPStatusCode301MovedPermanently = 0x12D,
	k_EHTTPStatusCode302Found = 0x12E,
	k_EHTTPStatusCode303SeeOther = 0x12F,
	k_EHTTPStatusCode304NotModified = 0x130,
	k_EHTTPStatusCode305UseProxy = 0x131,
	k_EHTTPStatusCode307TemporaryRedirect = 0x133,
	k_EHTTPStatusCode400BadRequest = 0x190,
	k_EHTTPStatusCode401Unauthorized = 0x191,
	k_EHTTPStatusCode402PaymentRequired = 0x192,
	k_EHTTPStatusCode403Forbidden = 0x193,
	k_EHTTPStatusCode404NotFound = 0x194,
	k_EHTTPStatusCode405MethodNotAllowed = 0x195,
	k_EHTTPStatusCode406NotAcceptable = 0x196,
	k_EHTTPStatusCode407ProxyAuthRequired = 0x197,
	k_EHTTPStatusCode408RequestTimeout = 0x198,
	k_EHTTPStatusCode409Conflict = 0x199,
	k_EHTTPStatusCode410Gone = 0x19A,
	k_EHTTPStatusCode411LengthRequired = 0x19B,
	k_EHTTPStatusCode412PreconditionFailed = 0x19C,
	k_EHTTPStatusCode413RequestEntityTooLarge = 0x19D,
	k_EHTTPStatusCode414RequestURITooLong = 0x19E,
	k_EHTTPStatusCode415UnsupportedMediaType = 0x19F,
	k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 0x1A0,
	k_EHTTPStatusCode417ExpectationFailed = 0x1A1,
	k_EHTTPStatusCode429TooManyRequests = 0x1AD,
	k_EHTTPStatusCode500InternalServerError = 0x1F4,
	k_EHTTPStatusCode501NotImplemented = 0x1F5,
	k_EHTTPStatusCode502BadGateway = 0x1F6,
	k_EHTTPStatusCode503ServiceUnavailable = 0x1F7,
	k_EHTTPStatusCode504GatewayTimeout = 0x1F8,
	k_EHTTPStatusCode505HTTPVersionNotSupported = 0x1F9,
};

/* 323 */
enum EVoiceResult
{
	k_EVoiceResultOK = 0x0,
	k_EVoiceResultNotInitialized = 0x1,
	k_EVoiceResultNotRecording = 0x2,
	k_EVoiceResultNoData = 0x3,
	k_EVoiceResultBufferTooSmall = 0x4,
	k_EVoiceResultDataCorrupted = 0x5,
	k_EVoiceResultRestricted = 0x6,
	k_EVoiceResultUnsupportedCodec = 0x7,
};

/* 324 */
enum EDenyReason
{
	k_EDenyInvalid = 0x0,
	k_EDenyInvalidVersion = 0x1,
	k_EDenyGeneric = 0x2,
	k_EDenyNotLoggedOn = 0x3,
	k_EDenyNoLicense = 0x4,
	k_EDenyCheater = 0x5,
	k_EDenyLoggedInElseWhere = 0x6,
	k_EDenyUnknownText = 0x7,
	k_EDenyIncompatibleAnticheat = 0x8,
	k_EDenyMemoryCorruption = 0x9,
	k_EDenyIncompatibleSoftware = 0xA,
	k_EDenySteamConnectionLost = 0xB,
	k_EDenySteamConnectionError = 0xC,
	k_EDenySteamResponseTimedOut = 0xD,
	k_EDenySteamValidationStalled = 0xE,
	k_EDenySteamOwnerLeftGuestUser = 0xF,
};

/* 325 */
enum $444212616DF393053D57B89113472851
{
	k_cchMaxRichPresenceKeys = 0x14,
};

/* 326 */
enum $992CA9558467F67BE3B0A7298190BE2C
{
	k_cchMaxRichPresenceKeyLength = 0x40,
};

/* 327 */
enum EOverlayToStoreFlag
{
	k_EOverlayToStoreFlag_None = 0x0,
	k_EOverlayToStoreFlag_AddToCart = 0x1,
	k_EOverlayToStoreFlag_AddToCartAndShow = 0x2,
};

/* 328 */
enum EBeginAuthSessionResult
{
	k_EBeginAuthSessionResultOK = 0x0,
	k_EBeginAuthSessionResultInvalidTicket = 0x1,
	k_EBeginAuthSessionResultDuplicateRequest = 0x2,
	k_EBeginAuthSessionResultInvalidVersion = 0x3,
	k_EBeginAuthSessionResultGameMismatch = 0x4,
	k_EBeginAuthSessionResultExpiredTicket = 0x5,
};

/* 329 */
enum EAuthSessionResponse
{
	k_EAuthSessionResponseOK = 0x0,
	k_EAuthSessionResponseUserNotConnectedToSteam = 0x1,
	k_EAuthSessionResponseNoLicenseOrExpired = 0x2,
	k_EAuthSessionResponseVACBanned = 0x3,
	k_EAuthSessionResponseLoggedInElseWhere = 0x4,
	k_EAuthSessionResponseVACCheckTimedOut = 0x5,
	k_EAuthSessionResponseAuthTicketCanceled = 0x6,
	k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed = 0x7,
	k_EAuthSessionResponseAuthTicketInvalid = 0x8,
	k_EAuthSessionResponsePublisherIssuedBan = 0x9,
};

/* 330 */
enum EUserHasLicenseForAppResult
{
	k_EUserHasLicenseResultHasLicense = 0x0,
	k_EUserHasLicenseResultDoesNotHaveLicense = 0x1,
	k_EUserHasLicenseResultNoAuth = 0x2,
};

/* 331 */
enum SDL_AudioStatus
{
	SDL_AUDIO_STOPPED = 0x0,
	SDL_AUDIO_PLAYING = 0x1,
	SDL_AUDIO_PAUSED = 0x2,
};

/* 332 */
enum EAppReleaseState
{
	k_EAppReleaseState_Unknown = 0x0,
	k_EAppReleaseState_Unavailable = 0x1,
	k_EAppReleaseState_Prerelease = 0x2,
	k_EAppReleaseState_PreloadOnly = 0x3,
	k_EAppReleaseState_Released = 0x4,
};

/* 333 */
enum EAppOwnershipFlags
{
	k_EAppOwnershipFlags_None = 0x0,
	k_EAppOwnershipFlags_OwnsLicense = 0x1,
	k_EAppOwnershipFlags_FreeLicense = 0x2,
	k_EAppOwnershipFlags_RegionRestricted = 0x4,
	k_EAppOwnershipFlags_LowViolence = 0x8,
	k_EAppOwnershipFlags_InvalidPlatform = 0x10,
	k_EAppOwnershipFlags_SharedLicense = 0x20,
	k_EAppOwnershipFlags_FreeWeekend = 0x40,
	k_EAppOwnershipFlags_RetailLicense = 0x80,
	k_EAppOwnershipFlags_LicenseLocked = 0x100,
	k_EAppOwnershipFlags_LicensePending = 0x200,
	k_EAppOwnershipFlags_LicenseExpired = 0x400,
	k_EAppOwnershipFlags_LicensePermanent = 0x800,
	k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
	k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
};

/* 334 */
enum EAppType
{
	k_EAppType_Invalid = 0x0,
	k_EAppType_Game = 0x1,
	k_EAppType_Application = 0x2,
	k_EAppType_Tool = 0x4,
	k_EAppType_Demo = 0x8,
	k_EAppType_Media_DEPRECATED = 0x10,
	k_EAppType_DLC = 0x20,
	k_EAppType_Guide = 0x40,
	k_EAppType_Driver = 0x80,
	k_EAppType_Config = 0x100,
	k_EAppType_Film = 0x200,
	k_EAppType_TVSeries = 0x400,
	k_EAppType_Video = 0x800,
	k_EAppType_Plugin = 0x1000,
	k_EAppType_Music = 0x2000,
	k_EAppType_Shortcut = 0x40000000,
	k_EAppType_DepotOnly = 0x80000000,
};

/* 335 */
enum ERegisterActivationCodeResult
{
	k_ERegisterActivationCodeResultOK = 0x0,
	k_ERegisterActivationCodeResultFail = 0x1,
	k_ERegisterActivationCodeResultAlreadyRegistered = 0x2,
	k_ERegisterActivationCodeResultTimeout = 0x3,
	k_ERegisterActivationCodeAlreadyOwned = 0x4,
};

/* 336 */
enum ESteamUserStatType
{
	k_ESteamUserStatTypeINVALID = 0x0,
	k_ESteamUserStatTypeINT = 0x1,
	k_ESteamUserStatTypeFLOAT = 0x2,
	k_ESteamUserStatTypeAVGRATE = 0x3,
	k_ESteamUserStatTypeACHIEVEMENTS = 0x4,
	k_ESteamUserStatTypeGROUPACHIEVEMENTS = 0x5,
	k_ESteamUserStatTypeMAX = 0x6,
};

/* 337 */
enum EChatEntryType
{
	k_EChatEntryTypeInvalid = 0x0,
	k_EChatEntryTypeChatMsg = 0x1,
	k_EChatEntryTypeTyping = 0x2,
	k_EChatEntryTypeInviteGame = 0x3,
	k_EChatEntryTypeEmote = 0x4,
	k_EChatEntryTypeLeftConversation = 0x6,
	k_EChatEntryTypeEntered = 0x7,
	k_EChatEntryTypeWasKicked = 0x8,
	k_EChatEntryTypeWasBanned = 0x9,
	k_EChatEntryTypeDisconnected = 0xA,
	k_EChatEntryTypeHistoricalChat = 0xB,
	k_EChatEntryTypeReserved1 = 0xC,
	k_EChatEntryTypeReserved2 = 0xD,
};

/* 338 */
enum EChatRoomEnterResponse
{
	k_EChatRoomEnterResponseSuccess = 0x1,
	k_EChatRoomEnterResponseDoesntExist = 0x2,
	k_EChatRoomEnterResponseNotAllowed = 0x3,
	k_EChatRoomEnterResponseFull = 0x4,
	k_EChatRoomEnterResponseError = 0x5,
	k_EChatRoomEnterResponseBanned = 0x6,
	k_EChatRoomEnterResponseLimited = 0x7,
	k_EChatRoomEnterResponseClanDisabled = 0x8,
	k_EChatRoomEnterResponseCommunityBan = 0x9,
	k_EChatRoomEnterResponseMemberBlockedYou = 0xA,
	k_EChatRoomEnterResponseYouBlockedMember = 0xB,
};

/* 339 */
enum EP2PSessionError
{
	k_EP2PSessionErrorNone = 0x0,
	k_EP2PSessionErrorNotRunningApp = 0x1,
	k_EP2PSessionErrorNoRightsToApp = 0x2,
	k_EP2PSessionErrorDestinationNotLoggedIn = 0x3,
	k_EP2PSessionErrorTimeout = 0x4,
	k_EP2PSessionErrorMax = 0x5,
};

/* 340 */
enum SDL_eventaction
{
	SDL_ADDEVENT = 0x0,
	SDL_PEEKEVENT = 0x1,
	SDL_GETEVENT = 0x2,
};

/* 341 */
enum EP2PSend
{
	k_EP2PSendUnreliable = 0x0,
	k_EP2PSendUnreliableNoDelay = 0x1,
	k_EP2PSendReliable = 0x2,
	k_EP2PSendReliableWithBuffering = 0x3,
};

/* 342 */
enum EResolveConflict
{
	k_EResolveConflictKeepClient = 0x1,
	k_EResolveConflictKeepServer = 0x2,
};

/* 343 */
enum ENotificationPosition
{
	k_EPositionTopLeft = 0x0,
	k_EPositionTopRight = 0x1,
	k_EPositionBottomLeft = 0x2,
	k_EPositionBottomRight = 0x3,
};

/* 344 */
enum ESNetSocketState
{
	k_ESNetSocketStateInvalid = 0x0,
	k_ESNetSocketStateConnected = 0x1,
	k_ESNetSocketStateInitiated = 0xA,
	k_ESNetSocketStateLocalCandidatesFound = 0xB,
	k_ESNetSocketStateReceivedRemoteCandidates = 0xC,
	k_ESNetSocketStateChallengeHandshake = 0xF,
	k_ESNetSocketStateDisconnecting = 0x15,
	k_ESNetSocketStateLocalDisconnect = 0x16,
	k_ESNetSocketStateTimeoutDuringConnect = 0x17,
	k_ESNetSocketStateRemoteEndDisconnected = 0x18,
	k_ESNetSocketStateConnectionBroken = 0x19,
};

/* 345 */
enum ESNetSocketConnectionType
{
	k_ESNetSocketConnectionTypeNotConnected = 0x0,
	k_ESNetSocketConnectionTypeUDP = 0x1,
	k_ESNetSocketConnectionTypeUDPRelay = 0x2,
};

/* 346 */
enum EWorkshopVote
{
	k_EWorkshopVoteUnvoted = 0x0,
	k_EWorkshopVoteFor = 0x1,
	k_EWorkshopVoteAgainst = 0x2,
};

/* 347 */
enum $8533A258B21F6372805B5FB43F939DE5
{
	SDL_PIXELFORMAT_UNKNOWN = 0x0,
	SDL_PIXELFORMAT_INDEX1LSB = 0x11100100,
	SDL_PIXELFORMAT_INDEX1MSB = 0x11200100,
	SDL_PIXELFORMAT_INDEX4LSB = 0x12100400,
	SDL_PIXELFORMAT_INDEX4MSB = 0x12200400,
	SDL_PIXELFORMAT_INDEX8 = 0x13000801,
	SDL_PIXELFORMAT_RGB332 = 0x14110801,
	SDL_PIXELFORMAT_RGB444 = 0x15120C02,
	SDL_PIXELFORMAT_RGB555 = 0x15130F02,
	SDL_PIXELFORMAT_BGR555 = 0x15530F02,
	SDL_PIXELFORMAT_ARGB4444 = 0x15321002,
	SDL_PIXELFORMAT_RGBA4444 = 0x15421002,
	SDL_PIXELFORMAT_ABGR4444 = 0x15721002,
	SDL_PIXELFORMAT_BGRA4444 = 0x15821002,
	SDL_PIXELFORMAT_ARGB1555 = 0x15331002,
	SDL_PIXELFORMAT_RGBA5551 = 0x15441002,
	SDL_PIXELFORMAT_ABGR1555 = 0x15731002,
	SDL_PIXELFORMAT_BGRA5551 = 0x15841002,
	SDL_PIXELFORMAT_RGB565 = 0x15151002,
	SDL_PIXELFORMAT_BGR565 = 0x15551002,
	SDL_PIXELFORMAT_RGB24 = 0x17101803,
	SDL_PIXELFORMAT_BGR24 = 0x17401803,
	SDL_PIXELFORMAT_RGB888 = 0x16161804,
	SDL_PIXELFORMAT_RGBX8888 = 0x16261804,
	SDL_PIXELFORMAT_BGR888 = 0x16561804,
	SDL_PIXELFORMAT_BGRX8888 = 0x16661804,
	SDL_PIXELFORMAT_ARGB8888 = 0x16362004,
	SDL_PIXELFORMAT_RGBA8888 = 0x16462004,
	SDL_PIXELFORMAT_ABGR8888 = 0x16762004,
	SDL_PIXELFORMAT_BGRA8888 = 0x16862004,
	SDL_PIXELFORMAT_ARGB2101010 = 0x16372004,
	SDL_PIXELFORMAT_YV12 = 0x32315659,
	SDL_PIXELFORMAT_IYUV = 0x56555949,
	SDL_PIXELFORMAT_YUY2 = 0x32595559,
	SDL_PIXELFORMAT_UYVY = 0x59565955,
	SDL_PIXELFORMAT_YVYU = 0x55595659,
	SDL_PIXELFORMAT_NV12 = 0x3231564E,
	SDL_PIXELFORMAT_NV21 = 0x3132564E,
};

/* 348 */
enum EPersonaChange
{
	k_EPersonaChangeName = 0x1,
	k_EPersonaChangeStatus = 0x2,
	k_EPersonaChangeComeOnline = 0x4,
	k_EPersonaChangeGoneOffline = 0x8,
	k_EPersonaChangeGamePlayed = 0x10,
	k_EPersonaChangeGameServer = 0x20,
	k_EPersonaChangeAvatar = 0x40,
	k_EPersonaChangeJoinedSource = 0x80,
	k_EPersonaChangeLeftSource = 0x100,
	k_EPersonaChangeRelationshipChanged = 0x200,
	k_EPersonaChangeNameFirstSet = 0x400,
	k_EPersonaChangeFacebookInfo = 0x800,
	k_EPersonaChangeNickname = 0x1000,
	k_EPersonaChangeSteamLevel = 0x2000,
};

/* 349 */
enum ESteamControllerPad
{
	k_ESteamControllerPad_Left = 0x0,
	k_ESteamControllerPad_Right = 0x1,
};

/* 350 */
enum _FILE_INFO_BY_HANDLE_CLASS
{
	FileBasicInfo = 0x0,
	FileStandardInfo = 0x1,
	FileNameInfo = 0x2,
	FileRenameInfo = 0x3,
	FileDispositionInfo = 0x4,
	FileAllocationInfo = 0x5,
	FileEndOfFileInfo = 0x6,
	FileStreamInfo = 0x7,
	FileCompressionInfo = 0x8,
	FileAttributeTagInfo = 0x9,
	FileIdBothDirectoryInfo = 0xA,
	FileIdBothDirectoryRestartInfo = 0xB,
	FileIoPriorityHintInfo = 0xC,
	FileRemoteProtocolInfo = 0xD,
	MaximumFileInfoByHandleClass = 0xE,
};

/* 351 */
enum DepthLock
{
	DEPTH_LOCK_HARD = 0x0,
	DEPTH_LOCK_SOFT = 0x1,
	DEPTH_UNLOCK_HARD = 0x2,
	DEPTH_UNLOCK_SOFT = 0x3,
};

/* 352 */
enum RendererType
{
	RENDERER_OPENGL = 0x0,
	RENDERER_DX9 = 0x1,
	RENDERER_METAL = 0x2,
};

/* 353 */
enum DrawTone
{
	DRAW_TONE_NORMAL = 0x0,
	DRAW_TONE_GREY = 0x1,
	DRAW_TONE_SEPIA = 0x2,
	DRAW_TONE_YUV = 0x3,
	DRAW_TONE_YUV_GREY = 0x4,
	DRAW_TONE_SPRITE = 0x5,
	DRAW_TONE_FONT = 0x6,
	DRAW_TONE_SELECT = 0x7,
	DRAW_TONE_SEAM = 0x8,
};

/* 354 */
enum AudioPlayback_Status
{
	AudioPlayback_Undefined = 0x0,
	AudioPlayback_Playing = 0x1,
	AudioPlayback_Paused = 0x2,
	AudioPlayback_Idle = 0x3,
};

/* 355 */
enum _PRIORITY_HINT
{
	IoPriorityHintVeryLow = 0x0,
	IoPriorityHintLow = 0x1,
	IoPriorityHintNormal = 0x2,
	MaximumIoPriorityHintType = 0x3,
};

/* 356 */
enum SDL_DUMMY_ENUM
{
	DUMMY_ENUM_VALUE = 0x0,
};

/* 357 */
typedef $0FC989869F227A36D749990E523E5F04 POWER_ACTION;

/* 358 */
typedef $CC15F4327A358B822A1EAA149A8E4762 PIPE_ATTRIBUTE_TYPE;

/* 359 */
enum SDL_HintPriority
{
	SDL_HINT_DEFAULT = 0x0,
	SDL_HINT_NORMAL = 0x1,
	SDL_HINT_OVERRIDE = 0x2,
};

/* 360 */
enum ESteamAPICallFailure
{
	k_ESteamAPICallFailureNone = 0xFFFFFFFF,
	k_ESteamAPICallFailureSteamGone = 0x0,
	k_ESteamAPICallFailureNetworkFailure = 0x1,
	k_ESteamAPICallFailureInvalidHandle = 0x2,
	k_ESteamAPICallFailureMismatchedCallback = 0x3,
};

/* 361 */
enum EGamepadTextInputMode
{
	k_EGamepadTextInputModeNormal = 0x0,
	k_EGamepadTextInputModePassword = 0x1,
};

/* 362 */
enum EGamepadTextInputLineMode
{
	k_EGamepadTextInputLineModeSingleLine = 0x0,
	k_EGamepadTextInputLineModeMultipleLines = 0x1,
};

/* 363 */
typedef $C9C41CE7F7AB140BE1C872069B92FC11 LATENCY_TIME;

/* 364 */
enum _PROC_THREAD_ATTRIBUTE_NUM
{
	ProcThreadAttributeParentProcess = 0x0,
	ProcThreadAttributeExtendedFlags = 0x1,
	ProcThreadAttributeHandleList = 0x2,
	ProcThreadAttributeGroupAffinity = 0x3,
	ProcThreadAttributePreferredNode = 0x4,
	ProcThreadAttributeIdealProcessor = 0x5,
	ProcThreadAttributeUmsThread = 0x6,
	ProcThreadAttributeMitigationPolicy = 0x7,
	ProcThreadAttributeMax = 0x8,
};

/* 365 */
enum $F3279C1C4F0BD00B5E5C3B521B6AC7D8
{
	SDL_LOG_CATEGORY_APPLICATION = 0x0,
	SDL_LOG_CATEGORY_ERROR = 0x1,
	SDL_LOG_CATEGORY_ASSERT = 0x2,
	SDL_LOG_CATEGORY_SYSTEM = 0x3,
	SDL_LOG_CATEGORY_AUDIO = 0x4,
	SDL_LOG_CATEGORY_VIDEO = 0x5,
	SDL_LOG_CATEGORY_RENDER = 0x6,
	SDL_LOG_CATEGORY_INPUT = 0x7,
	SDL_LOG_CATEGORY_TEST = 0x8,
	SDL_LOG_CATEGORY_RESERVED1 = 0x9,
	SDL_LOG_CATEGORY_RESERVED2 = 0xA,
	SDL_LOG_CATEGORY_RESERVED3 = 0xB,
	SDL_LOG_CATEGORY_RESERVED4 = 0xC,
	SDL_LOG_CATEGORY_RESERVED5 = 0xD,
	SDL_LOG_CATEGORY_RESERVED6 = 0xE,
	SDL_LOG_CATEGORY_RESERVED7 = 0xF,
	SDL_LOG_CATEGORY_RESERVED8 = 0x10,
	SDL_LOG_CATEGORY_RESERVED9 = 0x11,
	SDL_LOG_CATEGORY_RESERVED10 = 0x12,
	SDL_LOG_CATEGORY_CUSTOM = 0x13,
};

/* 366 */
enum SDL_SystemCursor
{
	SDL_SYSTEM_CURSOR_ARROW = 0x0,
	SDL_SYSTEM_CURSOR_IBEAM = 0x1,
	SDL_SYSTEM_CURSOR_WAIT = 0x2,
	SDL_SYSTEM_CURSOR_CROSSHAIR = 0x3,
	SDL_SYSTEM_CURSOR_WAITARROW = 0x4,
	SDL_SYSTEM_CURSOR_SIZENWSE = 0x5,
	SDL_SYSTEM_CURSOR_SIZENESW = 0x6,
	SDL_SYSTEM_CURSOR_SIZEWE = 0x7,
	SDL_SYSTEM_CURSOR_SIZENS = 0x8,
	SDL_SYSTEM_CURSOR_SIZEALL = 0x9,
	SDL_SYSTEM_CURSOR_NO = 0xA,
	SDL_SYSTEM_CURSOR_HAND = 0xB,
	SDL_NUM_SYSTEM_CURSORS = 0xC,
};

/* 367 */
enum _FILE_ID_TYPE
{
	FileIdType = 0x0,
	ObjectIdType = 0x1,
	MaximumFileIdType = 0x2,
};

/* 368 */
typedef $091388B5486C38E232712F2AD090397D POWER_INFORMATION_LEVEL;

/* 369 */
enum SDL_BlendMode
{
	SDL_BLENDMODE_NONE = 0x0,
	SDL_BLENDMODE_BLEND = 0x1,
	SDL_BLENDMODE_ADD = 0x2,
	SDL_BLENDMODE_MOD = 0x4,
};

/* 370 */
enum SDL_MouseWheelDirection
{
	SDL_MOUSEWHEEL_NORMAL = 0x0,
	SDL_MOUSEWHEEL_FLIPPED = 0x1,
};

/* 371 */
enum SDL_LogPriority
{
	SDL_LOG_PRIORITY_VERBOSE = 0x1,
	SDL_LOG_PRIORITY_DEBUG = 0x2,
	SDL_LOG_PRIORITY_INFO = 0x3,
	SDL_LOG_PRIORITY_WARN = 0x4,
	SDL_LOG_PRIORITY_ERROR = 0x5,
	SDL_LOG_PRIORITY_CRITICAL = 0x6,
	SDL_NUM_LOG_PRIORITIES = 0x7,
};

/* 372 */
typedef $0125F7DD214878EB629B8863199E19EA SYSTEM_POWER_CONDITION;

/* 373 */
enum SDL_JoystickPowerLevel
{
	SDL_JOYSTICK_POWER_UNKNOWN = 0xFFFFFFFF,
	SDL_JOYSTICK_POWER_EMPTY = 0x0,
	SDL_JOYSTICK_POWER_LOW = 0x1,
	SDL_JOYSTICK_POWER_MEDIUM = 0x2,
	SDL_JOYSTICK_POWER_FULL = 0x3,
	SDL_JOYSTICK_POWER_WIRED = 0x4,
	SDL_JOYSTICK_POWER_MAX = 0x5,
};

/* 374 */
enum ECheckFileSignature
{
	k_ECheckFileSignatureInvalidSignature = 0x0,
	k_ECheckFileSignatureValidSignature = 0x1,
	k_ECheckFileSignatureFileNotFound = 0x2,
	k_ECheckFileSignatureNoSignaturesFoundForThisApp = 0x3,
	k_ECheckFileSignatureNoSignaturesFoundForThisFile = 0x4,
};

/* 375 */
enum SDL_MessageBoxButtonFlags
{
	SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x1,
	SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x2,
};

/* 376 */
typedef $FD19F3E103D4016A907C359DAF3A86E6 POWER_PLATFORM_ROLE;

/* 377 */
enum EMatchMakingServerResponse
{
	eServerResponded = 0x0,
	eServerFailedToRespond = 0x1,
	eNoServersListedOnMasterServer = 0x2,
};

/* 378 */
enum SDL_GameControllerBindType
{
	SDL_CONTROLLER_BINDTYPE_NONE = 0x0,
	SDL_CONTROLLER_BINDTYPE_BUTTON = 0x1,
	SDL_CONTROLLER_BINDTYPE_AXIS = 0x2,
	SDL_CONTROLLER_BINDTYPE_HAT = 0x3,
};

/* 379 */
enum SDL_PowerState
{
	SDL_POWERSTATE_UNKNOWN = 0x0,
	SDL_POWERSTATE_ON_BATTERY = 0x1,
	SDL_POWERSTATE_NO_BATTERY = 0x2,
	SDL_POWERSTATE_CHARGING = 0x3,
	SDL_POWERSTATE_CHARGED = 0x4,
};

/* 380 */
enum SDL_RendererFlags
{
	SDL_RENDERER_SOFTWARE = 0x1,
	SDL_RENDERER_ACCELERATED = 0x2,
	SDL_RENDERER_PRESENTVSYNC = 0x4,
	SDL_RENDERER_TARGETTEXTURE = 0x8,
};

/* 381 */
enum SDL_TextureAccess
{
	SDL_TEXTUREACCESS_STATIC = 0x0,
	SDL_TEXTUREACCESS_STREAMING = 0x1,
	SDL_TEXTUREACCESS_TARGET = 0x2,
};

/* 382 */
enum SDL_TextureModulate
{
	SDL_TEXTUREMODULATE_NONE = 0x0,
	SDL_TEXTUREMODULATE_COLOR = 0x1,
	SDL_TEXTUREMODULATE_ALPHA = 0x2,
};

/* 383 */
enum SDL_RendererFlip
{
	SDL_FLIP_NONE = 0x0,
	SDL_FLIP_HORIZONTAL = 0x1,
	SDL_FLIP_VERTICAL = 0x2,
};

/* 384 */
enum SDL_WindowEventID
{
	SDL_WINDOWEVENT_NONE = 0x0,
	SDL_WINDOWEVENT_SHOWN = 0x1,
	SDL_WINDOWEVENT_HIDDEN = 0x2,
	SDL_WINDOWEVENT_EXPOSED = 0x3,
	SDL_WINDOWEVENT_MOVED = 0x4,
	SDL_WINDOWEVENT_RESIZED = 0x5,
	SDL_WINDOWEVENT_SIZE_CHANGED = 0x6,
	SDL_WINDOWEVENT_MINIMIZED = 0x7,
	SDL_WINDOWEVENT_MAXIMIZED = 0x8,
	SDL_WINDOWEVENT_RESTORED = 0x9,
	SDL_WINDOWEVENT_ENTER = 0xA,
	SDL_WINDOWEVENT_LEAVE = 0xB,
	SDL_WINDOWEVENT_FOCUS_GAINED = 0xC,
	SDL_WINDOWEVENT_FOCUS_LOST = 0xD,
	SDL_WINDOWEVENT_CLOSE = 0xE,
};

/* 385 */
enum SDL_GameControllerAxis
{
	SDL_CONTROLLER_AXIS_INVALID = 0xFFFFFFFF,
	SDL_CONTROLLER_AXIS_LEFTX = 0x0,
	SDL_CONTROLLER_AXIS_LEFTY = 0x1,
	SDL_CONTROLLER_AXIS_RIGHTX = 0x2,
	SDL_CONTROLLER_AXIS_RIGHTY = 0x3,
	SDL_CONTROLLER_AXIS_TRIGGERLEFT = 0x4,
	SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 0x5,
	SDL_CONTROLLER_AXIS_MAX = 0x6,
};

/* 386 */
enum $102D0F49BD69FA5D258E318BB8A67503
{
	DLC_STATE_WAITING = 0x0,
	DLC_STATE_IN_PROGRESS = 0x1,
	DLC_STATE_SUCCESS = 0x2,
	DLC_STATE_FAILED = 0x3,
	DLC_STATE_CANCELLED = 0x4,
	DLC_STATE_RESTORING_PURCHASES = 0x5,
	DLC_STATE_RESTORING_PURCHASES_COMPLETE = 0x6,
	DLC_STATE_DOWNLOADING = 0x7,
};

/* 387 */
enum SDL_GLattr
{
	SDL_GL_RED_SIZE = 0x0,
	SDL_GL_GREEN_SIZE = 0x1,
	SDL_GL_BLUE_SIZE = 0x2,
	SDL_GL_ALPHA_SIZE = 0x3,
	SDL_GL_BUFFER_SIZE = 0x4,
	SDL_GL_DOUBLEBUFFER = 0x5,
	SDL_GL_DEPTH_SIZE = 0x6,
	SDL_GL_STENCIL_SIZE = 0x7,
	SDL_GL_ACCUM_RED_SIZE = 0x8,
	SDL_GL_ACCUM_GREEN_SIZE = 0x9,
	SDL_GL_ACCUM_BLUE_SIZE = 0xA,
	SDL_GL_ACCUM_ALPHA_SIZE = 0xB,
	SDL_GL_STEREO = 0xC,
	SDL_GL_MULTISAMPLEBUFFERS = 0xD,
	SDL_GL_MULTISAMPLESAMPLES = 0xE,
	SDL_GL_ACCELERATED_VISUAL = 0xF,
	SDL_GL_RETAINED_BACKING = 0x10,
	SDL_GL_CONTEXT_MAJOR_VERSION = 0x11,
	SDL_GL_CONTEXT_MINOR_VERSION = 0x12,
	SDL_GL_CONTEXT_EGL = 0x13,
	SDL_GL_CONTEXT_FLAGS = 0x14,
	SDL_GL_CONTEXT_PROFILE_MASK = 0x15,
	SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 0x16,
	SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 0x17,
	SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 0x18,
};

/* 388 */
enum SDL_AssertState
{
	SDL_ASSERTION_RETRY = 0x0,
	SDL_ASSERTION_BREAK = 0x1,
	SDL_ASSERTION_ABORT = 0x2,
	SDL_ASSERTION_IGNORE = 0x3,
	SDL_ASSERTION_ALWAYS_IGNORE = 0x4,
};

/* 389 */
enum $DF5067DC206604506EE823E9F6F3C040
{
	k_iSteamGameServerCallbacks = 0xC8,
};

/* 390 */
enum $A493D48B3466407A5EFB7D314253660E
{
	k_iSteamBillingCallbacks = 0x190,
};

/* 391 */
enum SDL_GameControllerButton
{
	SDL_CONTROLLER_BUTTON_INVALID = 0xFFFFFFFF,
	SDL_CONTROLLER_BUTTON_A = 0x0,
	SDL_CONTROLLER_BUTTON_B = 0x1,
	SDL_CONTROLLER_BUTTON_X = 0x2,
	SDL_CONTROLLER_BUTTON_Y = 0x3,
	SDL_CONTROLLER_BUTTON_BACK = 0x4,
	SDL_CONTROLLER_BUTTON_GUIDE = 0x5,
	SDL_CONTROLLER_BUTTON_START = 0x6,
	SDL_CONTROLLER_BUTTON_LEFTSTICK = 0x7,
	SDL_CONTROLLER_BUTTON_RIGHTSTICK = 0x8,
	SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 0x9,
	SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 0xA,
	SDL_CONTROLLER_BUTTON_DPAD_UP = 0xB,
	SDL_CONTROLLER_BUTTON_DPAD_DOWN = 0xC,
	SDL_CONTROLLER_BUTTON_DPAD_LEFT = 0xD,
	SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 0xE,
	SDL_CONTROLLER_BUTTON_MAX = 0xF,
};

/* 392 */
enum $F5DF27F224F36C2EFAF69DE14AF8F615
{
	k_iSteamContentServerCallbacks = 0x258,
};

/* 393 */
enum $63739A09B374A9EA3DE7AA0687A2C4B6
{
	k_iClientFriendsCallbacks = 0x320,
};

/* 394 */
enum $AC1E8704BE6D5CD88E817AF6412D8910
{
	k_iClientUserCallbacks = 0x384,
};

/* 395 */
enum SDL_GLprofile
{
	SDL_GL_CONTEXT_PROFILE_CORE = 0x1,
	SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x2,
	SDL_GL_CONTEXT_PROFILE_ES = 0x4,
};

/* 396 */
enum $0E923F4171903CCE373C71B3CB997829
{
	k_iClientDepotBuilderCallbacks = 0x578,
};

/* 397 */
enum $B8F122B2CAB583F6B9C5D85AB68D2CDE
{
	k_iSteamGameServerItemsCallbacks = 0x5DC,
};

/* 398 */
enum SDL_GLcontextFlag
{
	SDL_GL_CONTEXT_DEBUG_FLAG = 0x1,
	SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x2,
	SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x4,
	SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x8,
};

/* 399 */
enum $538A166D524935426FFDD49315046D07
{
	k_iClientUtilsCallbacks = 0x640,
};

/* 400 */
enum $EB5A6007C5A5CFA29BCD4D2D8DEBE322
{
	k_iSteamGameCoordinatorCallbacks = 0x6A4,
};

/* 401 */
enum $76C92CD1779C0D7DB4273213BF1D65FA
{
	k_iSteamGameServerStatsCallbacks = 0x708,
};

/* 402 */
enum SDL_GLcontextReleaseFlag
{
	SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0,
	SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x1,
};

/* 403 */
enum $3FB96261AE3908534BE64E8BC44FE462
{
	k_iSteam2AsyncCallbacks = 0x76C,
};

/* 404 */
enum $67A51E2C531D8A55F3EAC4761CF3B7F3
{
	k_iSteamGameStatsCallbacks = 0x7D0,
};

/* 405 */
enum $3E6C61BADEFCBCF87C40CC1B840A97B8
{
	k_iClientScreenshotsCallbacks = 0x898,
};

/* 406 */
enum ELobbyType
{
	k_ELobbyTypePrivate = 0x0,
	k_ELobbyTypeFriendsOnly = 0x1,
	k_ELobbyTypePublic = 0x2,
	k_ELobbyTypeInvisible = 0x3,
};

/* 407 */
enum $FE6F0A885590A1089D898FFB75271443
{
	k_iClientAudioCallbacks = 0x960,
};

/* 408 */
enum ELobbyComparison
{
	k_ELobbyComparisonEqualToOrLessThan = 0xFFFFFFFE,
	k_ELobbyComparisonLessThan = 0xFFFFFFFF,
	k_ELobbyComparisonEqual = 0x0,
	k_ELobbyComparisonGreaterThan = 0x1,
	k_ELobbyComparisonEqualToOrGreaterThan = 0x2,
	k_ELobbyComparisonNotEqual = 0x3,
};

/* 409 */
enum $8564C4984CE01D5E973E1F44F973F023
{
	k_iSteamStreamLauncherCallbacks = 0xA28,
};

/* 410 */
enum $FE63C47407DCD472CDBB9E4858A5F4FC
{
	k_iClientControllerCallbacks = 0xA8C,
};

/* 411 */
enum $92806A5575D25653A117F73A102348F0
{
	k_iSteamControllerCallbacks = 0xAF0,
};

/* 412 */
enum ELobbyDistanceFilter
{
	k_ELobbyDistanceFilterClose = 0x0,
	k_ELobbyDistanceFilterDefault = 0x1,
	k_ELobbyDistanceFilterFar = 0x2,
	k_ELobbyDistanceFilterWorldwide = 0x3,
};

/* 413 */
enum $D07B98537A7BF5844B6C50550E6C9D0B
{
	k_iClientParentalSettingsCallbacks = 0xB54,
};

/* 414 */
enum $D06600C9FD356B2058FFBFB59296A676
{
	k_iClientDeviceAuthCallbacks = 0xBB8,
};

/* 415 */
enum $97C4F30E03DAA0C4BADB4BC70EAAEF7D
{
	k_iClientNetworkDeviceManagerCallbacks = 0xC1C,
};

/* 416 */
enum $53FCBFA637DB962BA4FD271F66EBC523
{
	k_iClientMusicCallbacks = 0xC80,
};

/* 417 */
enum $AEBE25FDDA484D29191F2B6098DBC38B
{
	k_cchLeaderboardNameMax = 0x80,
};

/* 418 */
enum $83648DE5B69814858EAA2773975FD5B2
{
	k_iClientRemoteClientManagerCallbacks = 0xCE4,
};

/* 419 */
enum $6F04783B15F5173CDCC75C1FA10F7711
{
	k_cLeaderboardDetailsMax = 0x40,
};

/* 420 */
enum $DF2EB7DEDB05CA0136164F4B71DE88FB
{
	k_iSteamStreamClientCallbacks = 0xDAC,
};

/* 421 */
enum $BA58BFC11073CBF089FA3C6638753369
{
	k_IClientProductBuilderCallbacks = 0xE10,
};

/* 422 */
enum $02AC577639A23F6CB73DC0904B69C4E2
{
	k_iClientShortcutsCallbacks = 0xE74,
};

/* 423 */
enum $21DEC9F1D64CC7643D1D9CEADED4E430
{
	k_iClientRemoteControlManagerCallbacks = 0xED8,
};

/* 424 */
enum $D7D8E644166065AB676C4FFE38A47A0B
{
	k_iClientVRCallbacks = 0x1068,
};

/* 425 */
enum $527650425988E232D6C82406FD27DE6F
{
	k_iClientReservedCallbacks = 0x10CC,
};

/* 426 */
enum $A06AA5F7F0ED152341F56F8B7814A8D3
{
	k_iSteamReservedCallbacks = 0x1130,
};

/* 427 */
enum SDL_errorcode
{
	SDL_ENOMEM = 0x0,
	SDL_EFREAD = 0x1,
	SDL_EFWRITE = 0x2,
	SDL_EFSEEK = 0x3,
	SDL_UNSUPPORTED = 0x4,
	SDL_LASTERROR = 0x5,
};

/* 428 */
enum $E1889E914007E8F35806A0A8343B2D85
{
	k_iClientVideoCallbacks = 0x11F8,
};

/* 429 */
typedef $8166B8857E7CD08BCB1E0D6C8F56BCBA ACTCTX_REQUESTED_RUN_LEVEL;

/* 430 */
typedef $53091E8B7324FD0E85FFE62254BC5002 ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

/* 431 */
enum __vc_attributes::pointer_defaultAttribute::type_e
{
	ptr = 0x0,
	ref = 0x1,
	unique = 0x2,
};

/* 432 */
enum IPCFailure_t::EFailureType
{
	k_EFailureFlushedCallbackQueue = 0x0,
	k_EFailurePipeFail = 0x1,
};

/* 433 */
enum FFFP_MODE
{
	FFFP_EXACTMATCH = 0x0,
	FFFP_NEARESTPARENTMATCH = 0x1,
};

/* 434 */
typedef $D02A68EF54712B1F200C52B69E1D9509 SHGFP_TYPE;

/* 435 */
enum FILE_USAGE_TYPE
{
	FUT_PLAYING = 0x0,
	FUT_EDITING = 0x1,
	FUT_GENERIC = 0x2,
};

/* 436 */
enum KNOWNDESTCATEGORY
{
	KDC_FREQUENT = 0x1,
	KDC_RECENT = 0x2,
};

/* 437 */
enum APPDOCLISTTYPE
{
	ADLT_RECENT = 0x0,
	ADLT_FREQUENT = 0x1,
};

/* 438 */
enum ASSOCIATIONLEVEL
{
	AL_MACHINE = 0x0,
	AL_EFFECTIVE = 0x1,
	AL_USER = 0x2,
};

/* 439 */
enum ASSOCIATIONTYPE
{
	AT_FILEEXTENSION = 0x0,
	AT_URLPROTOCOL = 0x1,
	AT_STARTMENUCLIENT = 0x2,
	AT_MIMETYPE = 0x3,
};

/* 440 */
enum KF_CATEGORY
{
	KF_CATEGORY_VIRTUAL = 0x1,
	KF_CATEGORY_FIXED = 0x2,
	KF_CATEGORY_COMMON = 0x3,
	KF_CATEGORY_PERUSER = 0x4,
};

/* 441 */
typedef $7A3BD45A5F95625F9F6BD169AC310B53 SHELL_LINK_DATA_FLAGS;

/* 442 */
enum KNOWN_FOLDER_FLAG
{
	KF_FLAG_DEFAULT = 0x0,
	KF_FLAG_CREATE = 0x8000,
	KF_FLAG_DONT_VERIFY = 0x4000,
	KF_FLAG_DONT_UNEXPAND = 0x2000,
	KF_FLAG_NO_ALIAS = 0x1000,
	KF_FLAG_INIT = 0x800,
	KF_FLAG_DEFAULT_PATH = 0x400,
	KF_FLAG_NOT_PARENT_RELATIVE = 0x200,
	KF_FLAG_SIMPLE_IDLIST = 0x100,
	KF_FLAG_ALIAS_ONLY = 0x80000000,
};

/* 443 */
enum FWPS_BUILTIN_LAYERS_
{
	FWPS_LAYER_INBOUND_IPPACKET_V4 = 0x0,
	FWPS_LAYER_INBOUND_IPPACKET_V4_DISCARD = 0x1,
	FWPS_LAYER_INBOUND_IPPACKET_V6 = 0x2,
	FWPS_LAYER_INBOUND_IPPACKET_V6_DISCARD = 0x3,
	FWPS_LAYER_OUTBOUND_IPPACKET_V4 = 0x4,
	FWPS_LAYER_OUTBOUND_IPPACKET_V4_DISCARD = 0x5,
	FWPS_LAYER_OUTBOUND_IPPACKET_V6 = 0x6,
	FWPS_LAYER_OUTBOUND_IPPACKET_V6_DISCARD = 0x7,
	FWPS_LAYER_IPFORWARD_V4 = 0x8,
	FWPS_LAYER_IPFORWARD_V4_DISCARD = 0x9,
	FWPS_LAYER_IPFORWARD_V6 = 0xA,
	FWPS_LAYER_IPFORWARD_V6_DISCARD = 0xB,
	FWPS_LAYER_INBOUND_TRANSPORT_V4 = 0xC,
	FWPS_LAYER_INBOUND_TRANSPORT_V4_DISCARD = 0xD,
	FWPS_LAYER_INBOUND_TRANSPORT_V6 = 0xE,
	FWPS_LAYER_INBOUND_TRANSPORT_V6_DISCARD = 0xF,
	FWPS_LAYER_OUTBOUND_TRANSPORT_V4 = 0x10,
	FWPS_LAYER_OUTBOUND_TRANSPORT_V4_DISCARD = 0x11,
	FWPS_LAYER_OUTBOUND_TRANSPORT_V6 = 0x12,
	FWPS_LAYER_OUTBOUND_TRANSPORT_V6_DISCARD = 0x13,
	FWPS_LAYER_STREAM_V4 = 0x14,
	FWPS_LAYER_STREAM_V4_DISCARD = 0x15,
	FWPS_LAYER_STREAM_V6 = 0x16,
	FWPS_LAYER_STREAM_V6_DISCARD = 0x17,
	FWPS_LAYER_DATAGRAM_DATA_V4 = 0x18,
	FWPS_LAYER_DATAGRAM_DATA_V4_DISCARD = 0x19,
	FWPS_LAYER_DATAGRAM_DATA_V6 = 0x1A,
	FWPS_LAYER_DATAGRAM_DATA_V6_DISCARD = 0x1B,
	FWPS_LAYER_INBOUND_ICMP_ERROR_V4 = 0x1C,
	FWPS_LAYER_INBOUND_ICMP_ERROR_V4_DISCARD = 0x1D,
	FWPS_LAYER_INBOUND_ICMP_ERROR_V6 = 0x1E,
	FWPS_LAYER_INBOUND_ICMP_ERROR_V6_DISCARD = 0x1F,
	FWPS_LAYER_OUTBOUND_ICMP_ERROR_V4 = 0x20,
	FWPS_LAYER_OUTBOUND_ICMP_ERROR_V4_DISCARD = 0x21,
	FWPS_LAYER_OUTBOUND_ICMP_ERROR_V6 = 0x22,
	FWPS_LAYER_OUTBOUND_ICMP_ERROR_V6_DISCARD = 0x23,
	FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V4 = 0x24,
	FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V4_DISCARD = 0x25,
	FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V6 = 0x26,
	FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V6_DISCARD = 0x27,
	FWPS_LAYER_ALE_AUTH_LISTEN_V4 = 0x28,
	FWPS_LAYER_ALE_AUTH_LISTEN_V4_DISCARD = 0x29,
	FWPS_LAYER_ALE_AUTH_LISTEN_V6 = 0x2A,
	FWPS_LAYER_ALE_AUTH_LISTEN_V6_DISCARD = 0x2B,
	FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V4 = 0x2C,
	FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V4_DISCARD = 0x2D,
	FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V6 = 0x2E,
	FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V6_DISCARD = 0x2F,
	FWPS_LAYER_ALE_AUTH_CONNECT_V4 = 0x30,
	FWPS_LAYER_ALE_AUTH_CONNECT_V4_DISCARD = 0x31,
	FWPS_LAYER_ALE_AUTH_CONNECT_V6 = 0x32,
	FWPS_LAYER_ALE_AUTH_CONNECT_V6_DISCARD = 0x33,
	FWPS_LAYER_ALE_FLOW_ESTABLISHED_V4 = 0x34,
	FWPS_LAYER_ALE_FLOW_ESTABLISHED_V4_DISCARD = 0x35,
	FWPS_LAYER_ALE_FLOW_ESTABLISHED_V6 = 0x36,
	FWPS_LAYER_ALE_FLOW_ESTABLISHED_V6_DISCARD = 0x37,
	FWPS_LAYER_INBOUND_MAC_FRAME_802_3 = 0x38,
	FWPS_LAYER_OUTBOUND_MAC_FRAME_802_3 = 0x39,
	FWPS_LAYER_ALE_AUTH_ROUTE_V4 = 0x3A,
	FWPS_LAYER_ALE_AUTH_ROUTE_V6 = 0x3B,
	FWPS_LAYER_NAME_RESOLUTION_CACHE_V4 = 0x3C,
	FWPS_LAYER_NAME_RESOLUTION_CACHE_V6 = 0x3D,
	FWPS_LAYER_ALE_RESOURCE_RELEASE_V4 = 0x3E,
	FWPS_LAYER_ALE_RESOURCE_RELEASE_V6 = 0x3F,
	FWPS_LAYER_ALE_ENDPOINT_CLOSURE_V4 = 0x40,
	FWPS_LAYER_ALE_ENDPOINT_CLOSURE_V6 = 0x41,
	FWPS_LAYER_ALE_CONNECT_REDIRECT_V4 = 0x42,
	FWPS_LAYER_ALE_CONNECT_REDIRECT_V6 = 0x43,
	FWPS_LAYER_ALE_BIND_REDIRECT_V4 = 0x44,
	FWPS_LAYER_ALE_BIND_REDIRECT_V6 = 0x45,
	FWPS_LAYER_STREAM_PACKET_V4 = 0x46,
	FWPS_LAYER_STREAM_PACKET_V6 = 0x47,
	FWPS_LAYER_IPSEC_KM_DEMUX_V4 = 0x48,
	FWPS_LAYER_IPSEC_KM_DEMUX_V6 = 0x49,
	FWPS_LAYER_IPSEC_V4 = 0x4A,
	FWPS_LAYER_IPSEC_V6 = 0x4B,
	FWPS_LAYER_IKEEXT_V4 = 0x4C,
	FWPS_LAYER_IKEEXT_V6 = 0x4D,
	FWPS_LAYER_RPC_UM = 0x4E,
	FWPS_LAYER_RPC_EPMAP = 0x4F,
	FWPS_LAYER_RPC_EP_ADD = 0x50,
	FWPS_LAYER_RPC_PROXY_CONN = 0x51,
	FWPS_LAYER_RPC_PROXY_IF = 0x52,
	FWPS_LAYER_KM_AUTHORIZATION = 0x53,
	FWPS_BUILTIN_LAYER_MAX = 0x54,
};

/* 444 */
enum _INTERFACE_TYPE
{
	InterfaceTypeUndefined = 0xFFFFFFFF,
	Internal = 0x0,
	Isa = 0x1,
	Eisa = 0x2,
	MicroChannel = 0x3,
	TurboChannel = 0x4,
	PCIBus = 0x5,
	VMEBus = 0x6,
	NuBus = 0x7,
	PCMCIABus = 0x8,
	CBus = 0x9,
	MPIBus = 0xA,
	MPSABus = 0xB,
	ProcessorInternal = 0xC,
	InternalPowerBus = 0xD,
	PNPISABus = 0xE,
	PNPBus = 0xF,
	Vmcs = 0x10,
	MaximumInterfaceType = 0x11,
};

/* 445 */
typedef __MIDL___MIDL_itf_fwpmtypes_0000_0000_0001 DL_ADDRESS_TYPE;

/* 446 */
enum _NDIS_NET_BUFFER_LIST_INFO
{
	TcpIpChecksumNetBufferListInfo = 0x0,
	TcpOffloadBytesTransferred = 0x0,
	IPsecOffloadV1NetBufferListInfo = 0x1,
	IPsecOffloadV2NetBufferListInfo = 0x1,
	TcpLargeSendNetBufferListInfo = 0x2,
	TcpReceiveNoPush = 0x2,
	ClassificationHandleNetBufferListInfo = 0x3,
	Ieee8021QNetBufferListInfo = 0x4,
	NetBufferListCancelId = 0x5,
	MediaSpecificInformation = 0x6,
	NetBufferListFrameType = 0x7,
	NetBufferListProtocolId = 0x7,
	NetBufferListHashValue = 0x8,
	NetBufferListHashInfo = 0x9,
	WfpNetBufferListInfo = 0xA,
	IPsecOffloadV2TunnelNetBufferListInfo = 0xB,
	IPsecOffloadV2HeaderNetBufferListInfo = 0xC,
	NetBufferListCorrelationId = 0xD,
	NetBufferListFilteringInfo = 0xE,
	MediaSpecificInformationEx = 0xF,
	NblOriginalInterfaceIfIndex = 0x10,
	NblReAuthWfpFlowContext = 0x10,
	MaxNetBufferListInfo = 0x11,
};

/* 447 */
enum FWPM_SYSTEM_PORT_TYPE_
{
	FWPM_SYSTEM_PORT_RPC_EPMAP = 0x0,
	FWPM_SYSTEM_PORT_TEREDO = 0x1,
	FWPM_SYSTEM_PORT_IPTLS_IN = 0x2,
	FWPM_SYSTEM_PORT_IPTLS_OUT = 0x3,
	FWPM_SYSTEM_PORT_TYPE_MAX = 0x4,
};

/* 448 */
enum TOKENRING_BROADCAST_INDICATOR
{
	TokenRingSpecificallyRoutedFrame = 0x0,
	TokenRingAllRoutesExplorer = 0x4,
	TokenRingSpanningTreeExplorer = 0x6,
};

/* 449 */
enum FWPM_NET_FAILURE_CAUSE_
{
	FWPM_NET_FAILURE_UNKNOWN = 0x0,
	FWPM_NET_FAILURE_WRONG_COMPARTMENT = 0x1,
	FWPM_NET_FAILURE_AUTHIP = 0x2,
	FWPM_NET_FAILURE_CAUSE_MAX = 0x3,
};

/* 450 */
enum FWPM_EVENT_PROVIDER_TYPE_
{
	FWPM_EVENT_PROVIDER_IKEEXT = 0x0,
	FWPM_EVENT_PROVIDER_FILTER_ENGINE = 0x1,
	FWPM_EVENT_PROVIDER_IPSEC_KERNEL = 0x2,
	FWPM_EVENT_PROVIDER_IPSEC_DOSP = 0x3,
	FWPM_EVENT_PROVIDER_TYPE_MAX = 0x4,
};

/* 451 */
enum _EVENT_TYPE
{
	NotificationEvent = 0x0,
	SynchronizationEvent = 0x1,
};

/* 452 */
enum _REG_NOTIFY_CLASS
{
	RegNtDeleteKey = 0x0,
	RegNtPreDeleteKey = 0x0,
	RegNtSetValueKey = 0x1,
	RegNtPreSetValueKey = 0x1,
	RegNtDeleteValueKey = 0x2,
	RegNtPreDeleteValueKey = 0x2,
	RegNtSetInformationKey = 0x3,
	RegNtPreSetInformationKey = 0x3,
	RegNtRenameKey = 0x4,
	RegNtPreRenameKey = 0x4,
	RegNtEnumerateKey = 0x5,
	RegNtPreEnumerateKey = 0x5,
	RegNtEnumerateValueKey = 0x6,
	RegNtPreEnumerateValueKey = 0x6,
	RegNtQueryKey = 0x7,
	RegNtPreQueryKey = 0x7,
	RegNtQueryValueKey = 0x8,
	RegNtPreQueryValueKey = 0x8,
	RegNtQueryMultipleValueKey = 0x9,
	RegNtPreQueryMultipleValueKey = 0x9,
	RegNtPreCreateKey = 0xA,
	RegNtPostCreateKey = 0xB,
	RegNtPreOpenKey = 0xC,
	RegNtPostOpenKey = 0xD,
	RegNtKeyHandleClose = 0xE,
	RegNtPreKeyHandleClose = 0xE,
	RegNtPostDeleteKey = 0xF,
	RegNtPostSetValueKey = 0x10,
	RegNtPostDeleteValueKey = 0x11,
	RegNtPostSetInformationKey = 0x12,
	RegNtPostRenameKey = 0x13,
	RegNtPostEnumerateKey = 0x14,
	RegNtPostEnumerateValueKey = 0x15,
	RegNtPostQueryKey = 0x16,
	RegNtPostQueryValueKey = 0x17,
	RegNtPostQueryMultipleValueKey = 0x18,
	RegNtPostKeyHandleClose = 0x19,
	RegNtPreCreateKeyEx = 0x1A,
	RegNtPostCreateKeyEx = 0x1B,
	RegNtPreOpenKeyEx = 0x1C,
	RegNtPostOpenKeyEx = 0x1D,
	RegNtPreFlushKey = 0x1E,
	RegNtPostFlushKey = 0x1F,
	RegNtPreLoadKey = 0x20,
	RegNtPostLoadKey = 0x21,
	RegNtPreUnLoadKey = 0x22,
	RegNtPostUnLoadKey = 0x23,
	RegNtPreQueryKeySecurity = 0x24,
	RegNtPostQueryKeySecurity = 0x25,
	RegNtPreSetKeySecurity = 0x26,
	RegNtPostSetKeySecurity = 0x27,
	RegNtCallbackObjectContextCleanup = 0x28,
	RegNtPreRestoreKey = 0x29,
	RegNtPostRestoreKey = 0x2A,
	RegNtPreSaveKey = 0x2B,
	RegNtPostSaveKey = 0x2C,
	RegNtPreReplaceKey = 0x2D,
	RegNtPostReplaceKey = 0x2E,
	MaxRegNtNotifyClass = 0x2F,
};

/* 453 */
enum _MODE
{
	KernelMode = 0x0,
	UserMode = 0x1,
	MaximumMode = 0x2,
};

/* 454 */
enum _NPI_MODULEID_TYPE
{
	MIT_GUID = 0x1,
	MIT_IF_LUID = 0x2,
};

/* 455 */
enum _MEMORY_CACHING_TYPE
{
	MmNonCached = 0x0,
	MmCached = 0x1,
	MmWriteCombined = 0x2,
	MmHardwareCoherentCached = 0x3,
	MmNonCachedUnordered = 0x4,
	MmUSWCCached = 0x5,
	MmMaximumCacheType = 0x6,
};

/* 456 */
enum _MM_PAGE_PRIORITY
{
	LowPagePriority = 0x0,
	NormalPagePriority = 0x10,
	HighPagePriority = 0x20,
};

/* 457 */
enum _POOL_TYPE
{
	NonPagedPool = 0x0,
	PagedPool = 0x1,
	NonPagedPoolMustSucceed = 0x2,
	DontUseThisType = 0x3,
	NonPagedPoolCacheAligned = 0x4,
	PagedPoolCacheAligned = 0x5,
	NonPagedPoolCacheAlignedMustS = 0x6,
	MaxPoolType = 0x7,
	NonPagedPoolSession = 0x20,
	PagedPoolSession = 0x21,
	NonPagedPoolMustSucceedSession = 0x22,
	DontUseThisTypeSession = 0x23,
	NonPagedPoolCacheAlignedSession = 0x24,
	PagedPoolCacheAlignedSession = 0x25,
	NonPagedPoolCacheAlignedMustSSession = 0x26,
};

/* 458 */
typedef $A5F41F4A4CEB7AD1CC9DEF125B1934E9 NL_ADDRESS_TYPE;

/* 459 */
enum _IRQ_PRIORITY
{
	IrqPriorityUndefined = 0x0,
	IrqPriorityLow = 0x1,
	IrqPriorityNormal = 0x2,
	IrqPriorityHigh = 0x3,
};

/* 460 */
enum _IRQ_DEVICE_POLICY
{
	IrqPolicyMachineDefault = 0x0,
	IrqPolicyAllCloseProcessors = 0x1,
	IrqPolicyOneCloseProcessor = 0x2,
	IrqPolicyAllProcessorsInMachine = 0x3,
	IrqPolicySpecifiedProcessors = 0x4,
	IrqPolicySpreadMessagesAcrossAllProcessors = 0x5,
};

/* 461 */
enum _WHEA_ERROR_SEVERITY
{
	WheaErrSevRecoverable = 0x0,
	WheaErrSevFatal = 0x1,
	WheaErrSevCorrected = 0x2,
	WheaErrSevInformational = 0x3,
};

/* 462 */
enum _IO_ALLOCATION_ACTION
{
	KeepObject = 0x1,
	DeallocateObject = 0x2,
	DeallocateObjectKeepRegisters = 0x3,
};

/* 463 */
enum _FILE_INFORMATION_CLASS
{
	FileDirectoryInformation = 0x1,
	FileFullDirectoryInformation = 0x2,
	FileBothDirectoryInformation = 0x3,
	FileBasicInformation = 0x4,
	FileStandardInformation = 0x5,
	FileInternalInformation = 0x6,
	FileEaInformation = 0x7,
	FileAccessInformation = 0x8,
	FileNameInformation = 0x9,
	FileRenameInformation = 0xA,
	FileLinkInformation = 0xB,
	FileNamesInformation = 0xC,
	FileDispositionInformation = 0xD,
	FilePositionInformation = 0xE,
	FileFullEaInformation = 0xF,
	FileModeInformation = 0x10,
	FileAlignmentInformation = 0x11,
	FileAllInformation = 0x12,
	FileAllocationInformation = 0x13,
	FileEndOfFileInformation = 0x14,
	FileAlternateNameInformation = 0x15,
	FileStreamInformation = 0x16,
	FilePipeInformation = 0x17,
	FilePipeLocalInformation = 0x18,
	FilePipeRemoteInformation = 0x19,
	FileMailslotQueryInformation = 0x1A,
	FileMailslotSetInformation = 0x1B,
	FileCompressionInformation = 0x1C,
	FileObjectIdInformation = 0x1D,
	FileCompletionInformation = 0x1E,
	FileMoveClusterInformation = 0x1F,
	FileQuotaInformation = 0x20,
	FileReparsePointInformation = 0x21,
	FileNetworkOpenInformation = 0x22,
	FileAttributeTagInformation = 0x23,
	FileTrackingInformation = 0x24,
	FileIdBothDirectoryInformation = 0x25,
	FileIdFullDirectoryInformation = 0x26,
	FileValidDataLengthInformation = 0x27,
	FileShortNameInformation = 0x28,
	FileIoCompletionNotificationInformation = 0x29,
	FileIoStatusBlockRangeInformation = 0x2A,
	FileIoPriorityHintInformation = 0x2B,
	FileSfioReserveInformation = 0x2C,
	FileSfioVolumeInformation = 0x2D,
	FileHardLinkInformation = 0x2E,
	FileProcessIdsUsingFileInformation = 0x2F,
	FileNormalizedNameInformation = 0x30,
	FileNetworkPhysicalNameInformation = 0x31,
	FileIdGlobalTxDirectoryInformation = 0x32,
	FileIsRemoteDeviceInformation = 0x33,
	FileAttributeCacheInformation = 0x34,
	FileNumaNodeInformation = 0x35,
	FileStandardLinkInformation = 0x36,
	FileMaximumInformation = 0x37,
};

/* 464 */
enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
	DeviceUsageTypeUndefined = 0x0,
	DeviceUsageTypePaging = 0x1,
	DeviceUsageTypeHibernation = 0x2,
	DeviceUsageTypeDumpFile = 0x3,
};

/* 465 */
enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
	WheaDataFormatIPFSalRecord = 0x0,
	WheaDataFormatXPFMCA = 0x1,
	WheaDataFormatMemory = 0x2,
	WheaDataFormatPCIExpress = 0x3,
	WheaDataFormatNMIPort = 0x4,
	WheaDataFormatPCIXBus = 0x5,
	WheaDataFormatPCIXDevice = 0x6,
	WheaDataFormatGeneric = 0x7,
	WheaDataFormatMax = 0x8,
};

/* 466 */
enum DEVICE_TEXT_TYPE
{
	DeviceTextDescription = 0x0,
	DeviceTextLocationInformation = 0x1,
};

/* 467 */
enum FWPS_NET_BUFFER_LIST_TYPE_
{
	FWPS_NBL_TYPE_ALLOCATED_BY_WFP = 0x0,
	FWPS_NBL_TYPE_CLONED_BY_WFP = 0x1,
	FWPS_NBL_TYPE_REFERENCED_BY_WFP = 0x2,
	FWPS_NBL_TYPE_MAX = 0x3,
};

/* 468 */
enum BUS_QUERY_ID_TYPE
{
	BusQueryDeviceID = 0x0,
	BusQueryHardwareIDs = 0x1,
	BusQueryCompatibleIDs = 0x2,
	BusQueryInstanceID = 0x3,
	BusQueryDeviceSerialNumber = 0x4,
	BusQueryContainerID = 0x5,
};

/* 469 */
enum _WHEA_ERROR_TYPE
{
	WheaErrTypeProcessor = 0x0,
	WheaErrTypeMemory = 0x1,
	WheaErrTypePCIExpress = 0x2,
	WheaErrTypeNMI = 0x3,
	WheaErrTypePCIXBus = 0x4,
	WheaErrTypePCIXDevice = 0x5,
	WheaErrTypeGeneric = 0x6,
};

/* 470 */
enum _WHEA_ERROR_SOURCE_TYPE
{
	WheaErrSrcTypeMCE = 0x0,
	WheaErrSrcTypeCMC = 0x1,
	WheaErrSrcTypeCPE = 0x2,
	WheaErrSrcTypeNMI = 0x3,
	WheaErrSrcTypePCIe = 0x4,
	WheaErrSrcTypeGeneric = 0x5,
	WheaErrSrcTypeINIT = 0x6,
	WheaErrSrcTypeBOOT = 0x7,
	WheaErrSrcTypeSCIGeneric = 0x8,
	WheaErrSrcTypeIPFMCA = 0x9,
	WheaErrSrcTypeIPFCMC = 0xA,
	WheaErrSrcTypeIPFCPE = 0xB,
	WheaErrSrcTypeMax = 0xC,
};

/* 471 */
enum _KSPIN_LOCK_QUEUE_NUMBER
{
	LockQueueUnusedSpare0 = 0x0,
	LockQueueExpansionLock = 0x1,
	LockQueuePfnLock = 0x2,
	LockQueueSystemSpaceLock = 0x3,
	LockQueueVacbLock = 0x4,
	LockQueueMasterLock = 0x5,
	LockQueueNonPagedPoolLock = 0x6,
	LockQueueIoCancelLock = 0x7,
	LockQueueWorkQueueLock = 0x8,
	LockQueueIoVpbLock = 0x9,
	LockQueueIoDatabaseLock = 0xA,
	LockQueueIoCompletionLock = 0xB,
	LockQueueNtfsStructLock = 0xC,
	LockQueueAfdWorkQueueLock = 0xD,
	LockQueueBcbLock = 0xE,
	LockQueueMmNonPagedPoolLock = 0xF,
	LockQueueUnusedSpare16 = 0x10,
	LockQueueTimerTableLock = 0x11,
	LockQueueMaximumLock = 0x31,
};

/* 472 */
enum _DEVICE_RELATION_TYPE
{
	BusRelations = 0x0,
	EjectionRelations = 0x1,
	PowerRelations = 0x2,
	RemovalRelations = 0x3,
	TargetDeviceRelation = 0x4,
	SingleBusRelations = 0x5,
	TransportRelations = 0x6,
};

/* 473 */
enum _MEMORY_CACHING_TYPE_ORIG
{
	MmFrameBufferCached = 0x2,
};

/* 474 */
enum _FSINFOCLASS
{
	FileFsVolumeInformation = 0x1,
	FileFsLabelInformation = 0x2,
	FileFsSizeInformation = 0x3,
	FileFsDeviceInformation = 0x4,
	FileFsAttributeInformation = 0x5,
	FileFsControlInformation = 0x6,
	FileFsFullSizeInformation = 0x7,
	FileFsObjectIdInformation = 0x8,
	FileFsDriverPathInformation = 0x9,
	FileFsVolumeFlagsInformation = 0xA,
	FileFsMaximumInformation = 0xB,
};

/* 475 */
enum _POWER_STATE_TYPE
{
	SystemPowerState = 0x0,
	DevicePowerState = 0x1,
};

/* 476 */
enum COMPARTMENT_ID
{
	UNSPECIFIED_COMPARTMENT_ID = 0x0,
	DEFAULT_COMPARTMENT_ID = 0x1,
};

/* 477 */
enum $170DC50FA149529891DC9369673B2386
{
	SOUND_NO_ERROR = 0x0,
	SOUND_SOS_DRIVER_NOT_LOADED = 0x1,
	SOUND_SOS_INVALID_POINTER = 0x2,
	SOUND_SOS_DETECT_INITIALIZED = 0x3,
	SOUND_SOS_FAIL_ON_FILE_OPEN = 0x4,
	SOUND_SOS_MEMORY_FAIL = 0x5,
	SOUND_SOS_INVALID_DRIVER_ID = 0x6,
	SOUND_SOS_NO_DRIVER_FOUND = 0x7,
	SOUND_SOS_DETECTION_FAILURE = 0x8,
	SOUND_SOS_DRIVER_LOADED = 0x9,
	SOUND_SOS_INVALID_HANDLE = 0xA,
	SOUND_SOS_NO_HANDLES = 0xB,
	SOUND_SOS_PAUSED = 0xC,
	SOUND_SOS_NOT_PAUSED = 0xD,
	SOUND_SOS_INVALID_DATA = 0xE,
	SOUND_SOS_DRV_FILE_FAIL = 0xF,
	SOUND_SOS_INVALID_PORT = 0x10,
	SOUND_SOS_INVALID_IRQ = 0x11,
	SOUND_SOS_INVALID_DMA = 0x12,
	SOUND_SOS_INVALID_DMA_IRQ = 0x13,
	SOUND_NO_DEVICE = 0x14,
	SOUND_NOT_INITIALIZED = 0x15,
	SOUND_NO_SOUND = 0x16,
	SOUND_FUNC_NOT_SUPPORTED = 0x17,
	SOUND_NO_BUFFERS_AVAILABLE = 0x18,
	SOUND_FILE_NOT_FOUND = 0x19,
	SOUND_ALREADY_PLAYING = 0x1A,
	SOUND_NOT_PLAYING = 0x1B,
	SOUND_ALREADY_PAUSED = 0x1C,
	SOUND_NOT_PAUSED = 0x1D,
	SOUND_INVALID_HANDLE = 0x1E,
	SOUND_NO_MEMORY = 0x1F,
	SOUND_ERROR = 0x20,
};

/* 478 */
enum $73EC6489A09AB28D15A6CEEA9270D9C4
{
	MUSIC_NO_ERROR = 0x0,
	MUSIC_NOT_INITIALIZED = 0x1,
	MUSIC_NO_SONG_LIST = 0x2,
	MUSIC_NO_SONG = 0x3,
	MUSIC_INVALID_SONG = 0x4,
	MUSIC_ERROR = 0x5,
};

/* 479 */
enum SOS_COMPAT
{
	_LEFT_CHANNEL = 0x0,
	_RIGHT_CHANNEL = 0x1,
	_CENTER_CHANNEL = 0x2,
	_INTERLEAVED = 0x3,
};

/* 480 */
enum block_state
{
	need_more = 0x0,
	block_done = 0x1,
	finish_started = 0x2,
	finish_done = 0x3,
};

/* 481 */
typedef _ATTRIBUTEINFO inflate_mode;

/* 482 */
enum codetype
{
	CODES = 0x0,
	LENS = 0x1,
	DISTS = 0x2,
};

/* 483 */
enum libyuv::FourCC
{
	FOURCC_I420 = 0x30323449,
	FOURCC_I422 = 0x32323449,
	FOURCC_I444 = 0x34343449,
	FOURCC_I400 = 0x30303449,
	FOURCC_YV12 = 0x32315659,
	FOURCC_YV16 = 0x36315659,
	FOURCC_YV24 = 0x34325659,
	FOURCC_YUY2 = 0x32595559,
	FOURCC_UYVY = 0x59565955,
	FOURCC_M420 = 0x3032344D,
	FOURCC_Q420 = 0x30323451,
	FOURCC_24BG = 0x47423432,
	FOURCC_ABGR = 0x52474241,
	FOURCC_BGRA = 0x41524742,
	FOURCC_ARGB = 0x42475241,
	FOURCC_RGBA = 0x41424752,
	FOURCC_RGBP = 0x50424752,
	FOURCC_RGBO = 0x4F424752,
	FOURCC_R444 = 0x34343452,
	FOURCC_MJPG = 0x47504A4D,
	FOURCC_RAW = 0x20776172,
	FOURCC_NV21 = 0x3132564E,
	FOURCC_NV12 = 0x3231564E,
	FOURCC_RGGB = 0x42474752,
	FOURCC_BGGR = 0x52474742,
	FOURCC_GRBG = 0x47425247,
	FOURCC_GBRG = 0x47524247,
	FOURCC_IYUV = 0x56555949,
	FOURCC_YU12 = 0x32315559,
	FOURCC_YU16 = 0x36315559,
	FOURCC_YU24 = 0x34325559,
	FOURCC_YUYV = 0x56595559,
	FOURCC_YUVS = 0x73767579,
	FOURCC_HDYC = 0x43594448,
	FOURCC_2VUY = 0x79757632,
	FOURCC_JPEG = 0x4745504A,
	FOURCC_DMB1 = 0x31626D64,
	FOURCC_BA81 = 0x31384142,
	FOURCC_RGB3 = 0x33424752,
	FOURCC_BGR3 = 0x33524742,
	FOURCC_AER = 0x20524541,
	FOURCC_ANY = 0xFFFFFFFF,
};

/* 484 */
enum vp8_com_control_id
{
	VP8_SET_REFERENCE = 0x1,
	VP8_COPY_REFERENCE = 0x2,
	VP8_SET_POSTPROC = 0x3,
	VP8_SET_DBG_COLOR_REF_FRAME = 0x4,
	VP8_SET_DBG_COLOR_MB_MODES = 0x5,
	VP8_SET_DBG_COLOR_B_MODES = 0x6,
	VP8_SET_DBG_DISPLAY_MV = 0x7,
	VP9_GET_REFERENCE = 0x80,
	VP8_COMMON_CTRL_ID_MAX = 0x81,
	VP8_DECODER_CTRL_ID_START = 0x100,
};

/* 485 */
enum vp8_dec_control_id
{
	VP8D_GET_LAST_REF_UPDATES = 0x100,
	VP8D_GET_FRAME_CORRUPTED = 0x101,
	VP8D_GET_LAST_REF_USED = 0x102,
	VPXD_SET_DECRYPTOR = 0x103,
	VP8D_SET_DECRYPTOR = 0x103,
	VP9D_GET_FRAME_SIZE = 0x104,
	VP9D_GET_DISPLAY_SIZE = 0x105,
	VP9D_GET_BIT_DEPTH = 0x106,
	VP9_SET_BYTE_ALIGNMENT = 0x107,
	VP9_INVERT_TILE_DECODE_ORDER = 0x108,
	VP8_DECODER_CTRL_ID_MAX = 0x109,
};

/* 486 */
enum $5B42965F2B6FCA580230453C6EADDC45
{
	STBI__F_none = 0x0,
	STBI__F_sub = 0x1,
	STBI__F_up = 0x2,
	STBI__F_avg = 0x3,
	STBI__F_paeth = 0x4,
	STBI__F_avg_first = 0x5,
	STBI__F_paeth_first = 0x6,
};

/* 487 */
enum $816AE51E2E129A0FC838182587806A70
{
	STBI__SCAN_load = 0x0,
	STBI__SCAN_type = 0x1,
	STBI__SCAN_header = 0x2,
};

/* 488 */
enum vpx_img_fmt
{
	VPX_IMG_FMT_NONE = 0x0,
	VPX_IMG_FMT_RGB24 = 0x1,
	VPX_IMG_FMT_RGB32 = 0x2,
	VPX_IMG_FMT_RGB565 = 0x3,
	VPX_IMG_FMT_RGB555 = 0x4,
	VPX_IMG_FMT_UYVY = 0x5,
	VPX_IMG_FMT_YUY2 = 0x6,
	VPX_IMG_FMT_YVYU = 0x7,
	VPX_IMG_FMT_BGR24 = 0x8,
	VPX_IMG_FMT_RGB32_LE = 0x9,
	VPX_IMG_FMT_ARGB = 0xA,
	VPX_IMG_FMT_ARGB_LE = 0xB,
	VPX_IMG_FMT_RGB565_LE = 0xC,
	VPX_IMG_FMT_RGB555_LE = 0xD,
	VPX_IMG_FMT_YV12 = 0x301,
	VPX_IMG_FMT_I420 = 0x102,
	VPX_IMG_FMT_VPXYV12 = 0x303,
	VPX_IMG_FMT_VPXI420 = 0x104,
	VPX_IMG_FMT_I422 = 0x105,
	VPX_IMG_FMT_I444 = 0x106,
	VPX_IMG_FMT_I440 = 0x107,
	VPX_IMG_FMT_444A = 0x506,
	VPX_IMG_FMT_I42016 = 0x902,
	VPX_IMG_FMT_I42216 = 0x905,
	VPX_IMG_FMT_I44416 = 0x906,
	VPX_IMG_FMT_I44016 = 0x907,
};

/* 489 */
enum vpx_codec_err_t
{
	VPX_CODEC_OK = 0x0,
	VPX_CODEC_ERROR = 0x1,
	VPX_CODEC_MEM_ERROR = 0x2,
	VPX_CODEC_ABI_MISMATCH = 0x3,
	VPX_CODEC_INCAPABLE = 0x4,
	VPX_CODEC_UNSUP_BITSTREAM = 0x5,
	VPX_CODEC_UNSUP_FEATURE = 0x6,
	VPX_CODEC_CORRUPT_FRAME = 0x7,
	VPX_CODEC_INVALID_PARAM = 0x8,
	VPX_CODEC_LIST_END = 0x9,
};

/* 490 */
enum vpx_color_space
{
	VPX_CS_UNKNOWN = 0x0,
	VPX_CS_BT_601 = 0x1,
	VPX_CS_BT_709 = 0x2,
	VPX_CS_SMPTE_170 = 0x3,
	VPX_CS_SMPTE_240 = 0x4,
	VPX_CS_BT_2020 = 0x5,
	VPX_CS_RESERVED = 0x6,
	VPX_CS_SRGB = 0x7,
};

/* 491 */
enum SDL_SYSWM_TYPE
{
	SDL_SYSWM_UNKNOWN = 0x0,
	SDL_SYSWM_WINDOWS = 0x1,
	SDL_SYSWM_X11 = 0x2,
	SDL_SYSWM_DIRECTFB = 0x3,
	SDL_SYSWM_COCOA = 0x4,
	SDL_SYSWM_UIKIT = 0x5,
	SDL_SYSWM_WAYLAND = 0x6,
	SDL_SYSWM_MIR = 0x7,
	SDL_SYSWM_WINRT = 0x8,
	SDL_SYSWM_ANDROID = 0x9,
};

/* 492 */
enum DepthLockState
{
	DEPTH_LOCKED_HARD = 0x0,
	DEPTH_LOCKED_SOFT = 0x1,
	DEPTH_UNLOCKED = 0x2,
};

/* 493 */
enum _D3DXCLEANTYPE
{
	D3DXCLEAN_BACKFACING = 0x1,
	D3DXCLEAN_BOWTIES = 0x2,
	D3DXCLEAN_SKINNING = 0x1,
	D3DXCLEAN_OPTIMIZATION = 0x1,
	D3DXCLEAN_SIMPLIFICATION = 0x3,
};

/* 494 */
enum _MAX_FVF_DECL_SIZE
{
	MAX_FVF_DECL_SIZE = 0x41,
};

/* 495 */
enum EPVRTPixelFormat
{
	ePVRTPF_PVRTCI_2bpp_RGB = 0x0,
	ePVRTPF_PVRTCI_2bpp_RGBA = 0x1,
	ePVRTPF_PVRTCI_4bpp_RGB = 0x2,
	ePVRTPF_PVRTCI_4bpp_RGBA = 0x3,
	ePVRTPF_PVRTCII_2bpp = 0x4,
	ePVRTPF_PVRTCII_4bpp = 0x5,
	ePVRTPF_ETC1 = 0x6,
	ePVRTPF_DXT1 = 0x7,
	ePVRTPF_DXT2 = 0x8,
	ePVRTPF_DXT3 = 0x9,
	ePVRTPF_DXT4 = 0xA,
	ePVRTPF_DXT5 = 0xB,
	ePVRTPF_BC1 = 0x7,
	ePVRTPF_BC2 = 0x9,
	ePVRTPF_BC3 = 0xB,
	ePVRTPF_BC4 = 0xC,
	ePVRTPF_BC5 = 0xD,
	ePVRTPF_BC6 = 0xE,
	ePVRTPF_BC7 = 0xF,
	ePVRTPF_UYVY = 0x10,
	ePVRTPF_YUY2 = 0x11,
	ePVRTPF_BW1bpp = 0x12,
	ePVRTPF_SharedExponentR9G9B9E5 = 0x13,
	ePVRTPF_RGBG8888 = 0x14,
	ePVRTPF_GRGB8888 = 0x15,
	ePVRTPF_ETC2_RGB = 0x16,
	ePVRTPF_ETC2_RGBA = 0x17,
	ePVRTPF_ETC2_RGB_A1 = 0x18,
	ePVRTPF_EAC_R11 = 0x19,
	ePVRTPF_EAC_RG11 = 0x1A,
	ePVRTPF_TGA = 0x1B,
	ePVRTPF_PNG = 0x1C,
	ePVRTPF_NumCompressedPFs = 0x1D,
};

/* 496 */
enum _D3DXPARAMETER_CLASS
{
	D3DXPC_SCALAR = 0x0,
	D3DXPC_VECTOR = 0x1,
	D3DXPC_MATRIX_ROWS = 0x2,
	D3DXPC_MATRIX_COLUMNS = 0x3,
	D3DXPC_OBJECT = 0x4,
	D3DXPC_STRUCT = 0x5,
	D3DXPC_FORCE_DWORD = 0x7FFFFFFF,
};

/* 497 */
enum _D3DXPARAMETER_TYPE
{
	D3DXPT_VOID = 0x0,
	D3DXPT_BOOL = 0x1,
	D3DXPT_INT = 0x2,
	D3DXPT_FLOAT = 0x3,
	D3DXPT_STRING = 0x4,
	D3DXPT_TEXTURE = 0x5,
	D3DXPT_TEXTURE1D = 0x6,
	D3DXPT_TEXTURE2D = 0x7,
	D3DXPT_TEXTURE3D = 0x8,
	D3DXPT_TEXTURECUBE = 0x9,
	D3DXPT_SAMPLER = 0xA,
	D3DXPT_SAMPLER1D = 0xB,
	D3DXPT_SAMPLER2D = 0xC,
	D3DXPT_SAMPLER3D = 0xD,
	D3DXPT_SAMPLERCUBE = 0xE,
	D3DXPT_PIXELSHADER = 0xF,
	D3DXPT_VERTEXSHADER = 0x10,
	D3DXPT_PIXELFRAGMENT = 0x11,
	D3DXPT_VERTEXFRAGMENT = 0x12,
	D3DXPT_UNSUPPORTED = 0x13,
	D3DXPT_FORCE_DWORD = 0x7FFFFFFF,
};

/* 498 */
enum _D3DXINCLUDE_TYPE
{
	D3DXINC_LOCAL = 0x0,
	D3DXINC_SYSTEM = 0x1,
	D3DXINC_FORCE_DWORD = 0x7FFFFFFF,
};

/* 499 */
enum DrawAttributes
{
	DRAW_ATTRIB_POS = 0x0,
	DRAW_ATTRIB_TEX = 0x1,
	DRAW_ATTRIB_COL = 0x2,
	DRAW_ATTRIB_REF = 0x3,
};

/* 500 */
enum $CA73C148FC8FAE59DDB1A2EC7C07FAD5
{
	ENET_PROTOCOL_MINIMUM_MTU = 0x240,
	ENET_PROTOCOL_MAXIMUM_MTU = 0x1000,
	ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS = 0x20,
	ENET_PROTOCOL_MINIMUM_WINDOW_SIZE = 0x1000,
	ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE = 0x8000,
	ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT = 0x1,
	ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT = 0xFF,
	ENET_PROTOCOL_MAXIMUM_PEER_ID = 0xFFF,
};

/* 501 */
enum $77E57CD65CFD4F97DFE12F5F03406AFC
{
	ENET_HOST_RECEIVE_BUFFER_SIZE = 0x40000,
	ENET_HOST_SEND_BUFFER_SIZE = 0x40000,
	ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL = 0x3E8,
	ENET_HOST_DEFAULT_MTU = 0x578,
	ENET_PEER_DEFAULT_ROUND_TRIP_TIME = 0x1F4,
	ENET_PEER_DEFAULT_PACKET_THROTTLE = 0x20,
	ENET_PEER_PACKET_THROTTLE_SCALE = 0x20,
	ENET_PEER_PACKET_THROTTLE_COUNTER = 0x7,
	ENET_PEER_PACKET_THROTTLE_ACCELERATION = 0x2,
	ENET_PEER_PACKET_THROTTLE_DECELERATION = 0x2,
	ENET_PEER_PACKET_THROTTLE_INTERVAL = 0x1388,
	ENET_PEER_PACKET_LOSS_SCALE = 0x10000,
	ENET_PEER_PACKET_LOSS_INTERVAL = 0x2710,
	ENET_PEER_WINDOW_SIZE_SCALE = 0x10000,
	ENET_PEER_TIMEOUT_LIMIT = 0x20,
	ENET_PEER_TIMEOUT_MINIMUM = 0x1388,
	ENET_PEER_TIMEOUT_MAXIMUM = 0x7530,
	ENET_PEER_PING_INTERVAL = 0x1F4,
	ENET_PEER_UNSEQUENCED_WINDOWS = 0x40,
	ENET_PEER_UNSEQUENCED_WINDOW_SIZE = 0x400,
	ENET_PEER_FREE_UNSEQUENCED_WINDOWS = 0x20,
	ENET_PEER_RELIABLE_WINDOWS = 0x10,
	ENET_PEER_RELIABLE_WINDOW_SIZE = 0x1000,
	ENET_PEER_FREE_RELIABLE_WINDOWS = 0x8,
};

/* 502 */
enum _ENetProtocolFlag
{
	ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE = 0x80,
	ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED = 0x40,
	ENET_PROTOCOL_HEADER_FLAG_COMPRESSED = 0x4000,
	ENET_PROTOCOL_HEADER_FLAG_SENT_TIME = 0x8000,
	ENET_PROTOCOL_HEADER_FLAG_MASK = 0xC000,
	ENET_PROTOCOL_HEADER_SESSION_MASK = 0x3000,
	ENET_PROTOCOL_HEADER_SESSION_SHIFT = 0xC,
};

/* 503 */
enum $FC9E21A6B96808BBA853618A8E19C351
{
	ENET_SOCKET_NULL = 0xFFFFFFFF,
};

/* 504 */
enum _ENetSocketType
{
	ENET_SOCKET_TYPE_STREAM = 0x1,
	ENET_SOCKET_TYPE_DATAGRAM = 0x2,
};

/* 505 */
enum _ENetSocketOption
{
	ENET_SOCKOPT_NONBLOCK = 0x1,
	ENET_SOCKOPT_BROADCAST = 0x2,
	ENET_SOCKOPT_RCVBUF = 0x3,
	ENET_SOCKOPT_SNDBUF = 0x4,
	ENET_SOCKOPT_REUSEADDR = 0x5,
};

/* 506 */
enum $BDAAE338540074E05D1113FB13D69C9B
{
	ENET_HOST_ANY = 0x0,
	ENET_HOST_BROADCAST = 0xFFFFFFFF,
	ENET_PORT_ANY = 0x0,
};

/* 507 */
enum _ENetPeerState
{
	ENET_PEER_STATE_DISCONNECTED = 0x0,
	ENET_PEER_STATE_CONNECTING = 0x1,
	ENET_PEER_STATE_ACKNOWLEDGING_CONNECT = 0x2,
	ENET_PEER_STATE_CONNECTION_PENDING = 0x3,
	ENET_PEER_STATE_CONNECTION_SUCCEEDED = 0x4,
	ENET_PEER_STATE_CONNECTED = 0x5,
	ENET_PEER_STATE_DISCONNECT_LATER = 0x6,
	ENET_PEER_STATE_DISCONNECTING = 0x7,
	ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT = 0x8,
	ENET_PEER_STATE_ZOMBIE = 0x9,
};

/* 508 */
enum _ENetProtocolCommand
{
	ENET_PROTOCOL_COMMAND_NONE = 0x0,
	ENET_PROTOCOL_COMMAND_ACKNOWLEDGE = 0x1,
	ENET_PROTOCOL_COMMAND_CONNECT = 0x2,
	ENET_PROTOCOL_COMMAND_VERIFY_CONNECT = 0x3,
	ENET_PROTOCOL_COMMAND_DISCONNECT = 0x4,
	ENET_PROTOCOL_COMMAND_PING = 0x5,
	ENET_PROTOCOL_COMMAND_SEND_RELIABLE = 0x6,
	ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE = 0x7,
	ENET_PROTOCOL_COMMAND_SEND_FRAGMENT = 0x8,
	ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED = 0x9,
	ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT = 0xA,
	ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE = 0xB,
	ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT = 0xC,
	ENET_PROTOCOL_COMMAND_COUNT = 0xD,
	ENET_PROTOCOL_COMMAND_MASK = 0xF,
};

/* 509 */
enum _ENetPacketFlag
{
	ENET_PACKET_FLAG_RELIABLE = 0x1,
	ENET_PACKET_FLAG_UNSEQUENCED = 0x2,
	ENET_PACKET_FLAG_NO_ALLOCATE = 0x4,
	ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT = 0x8,
};

/* 510 */
enum _ENetEventType
{
	ENET_EVENT_TYPE_NONE = 0x0,
	ENET_EVENT_TYPE_CONNECT = 0x1,
	ENET_EVENT_TYPE_DISCONNECT = 0x2,
	ENET_EVENT_TYPE_RECEIVE = 0x3,
};

/* 511 */
enum _ENetSocketWait
{
	ENET_SOCKET_WAIT_NONE = 0x0,
	ENET_SOCKET_WAIT_SEND = 0x1,
	ENET_SOCKET_WAIT_RECEIVE = 0x2,
};

/* 512 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > >::_Redbl;

/* 513 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > >::_Redbl;

/* 514 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > >::_Redbl;

/* 515 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > >::_Redbl;

/* 516 */
typedef std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >::_Redbl std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > >::_Redbl;

/* 517 */
enum buzz::MucRoomLookupTask::IdType
{
	ID_TYPE_CONVERSATION = 0x0,
	ID_TYPE_HANGOUT = 0x1,
};

/* 518 */
enum $E2B86E589B3C1F63FC8B6DDADDD135B5
{
	DP_METADATA = 0x1,
	DP_METADATA_SYNC = 0x2,
	DP_PLAYER = 0x3,
	DP_PLAYER_CREATE = 0x4,
	DP_PLAYER_CREATE_SUCCESS = 0x5,
	DP_COMPLETE = 0x6,
	DP_INVALID_PASSWORD = 0x7,
	DP_JOIN_ROOM_FULL = 0x8,
	DP_JOIN_ERROR = 0x9,
	DP_PLAYER_DESTROY = 0xA,
};

/* 519 */
enum $786C1845E006E5BDB602328A080C1D05
{
	DP_CHANNEL_GAME = 0x0,
	DP_CHANNEL_CONTROL = 0x1,
};

/* 520 */
enum $7BCC671DF9EFF3D73E29D86D1C9CAAC1
{
	MSG_GOT_ROOM = 0x0,
	MSG_GOT_ROOM_DETAILS = 0x1,
	MSG_DISCONNECT = 0x2,
	MSG_ROOM_SIZE_CHANGE = 0x3,
};

/* 521 */
enum $F67D871450750FFB2EAFC57EC6D61F45
{
	STBTT_vmove = 0x1,
	STBTT_vline = 0x2,
	STBTT_vcurve = 0x3,
};

/* 522 */
enum $C49F45E9C7EDA79A34575C86ED03AA02
{
	STBTT_PLATFORM_ID_UNICODE = 0x0,
	STBTT_PLATFORM_ID_MAC = 0x1,
	STBTT_PLATFORM_ID_ISO = 0x2,
	STBTT_PLATFORM_ID_MICROSOFT = 0x3,
};

/* 523 */
enum $3A81A1094AF4C86218F095209AD30477
{
	STBTT_MS_EID_SYMBOL = 0x0,
	STBTT_MS_EID_UNICODE_BMP = 0x1,
	STBTT_MS_EID_SHIFTJIS = 0x2,
	STBTT_MS_EID_UNICODE_FULL = 0xA,
};

/* 524 */
enum $6FC017D5BA82A7B4F92B4545D795B19C
{
	STBRP_HEURISTIC_Skyline_default = 0x0,
	STBRP_HEURISTIC_Skyline_BL_sortHeight = 0x0,
	STBRP_HEURISTIC_Skyline_BF_sortHeight = 0x1,
};

/* 525 */
enum $63036448A3BB443A536C78B20A7B3DDD
{
	STBRP__INIT_skyline = 0x1,
};

/* 526 */
typedef $8C57D1DDA788D6050A7C554DBD1EB1AC ADDRESS_MODE;

/* 527 */
enum WindowShapeMode
{
	ShapeModeDefault = 0x0,
	ShapeModeBinarizeAlpha = 0x1,
	ShapeModeReverseBinarizeAlpha = 0x2,
	ShapeModeColorKey = 0x3,
};

/* 528 */
enum $D041BC1C98BCFC830412F83EC892C2BD
{
	NO_ALPHA = 0x1,
	SET_ALPHA = 0x2,
	COPY_ALPHA = 0x4,
};

/* 529 */
enum Type
{
	BUTTON = 0x0,
	AXIS = 0x1,
	HAT = 0x2,
};

/* 530 */
enum $8AECBD8DE4B7586A9066C8E878032AE7
{
	ENCODING_UNKNOWN = 0x0,
	ENCODING_ASCII = 0x1,
	ENCODING_LATIN1 = 0x2,
	ENCODING_UTF8 = 0x3,
	ENCODING_UTF16 = 0x4,
	ENCODING_UTF16BE = 0x5,
	ENCODING_UTF16LE = 0x6,
	ENCODING_UTF32 = 0x7,
	ENCODING_UTF32BE = 0x8,
	ENCODING_UTF32LE = 0x9,
	ENCODING_UCS2BE = 0xA,
	ENCODING_UCS2LE = 0xB,
	ENCODING_UCS4BE = 0xC,
	ENCODING_UCS4LE = 0xD,
};

/* 531 */
enum MONITOR_DPI_TYPE
{
	MDT_EFFECTIVE_DPI = 0x0,
	MDT_ANGULAR_DPI = 0x1,
	MDT_RAW_DPI = 0x2,
	MDT_DEFAULT = 0x0,
};

/* 532 */
enum GL_Shader
{
	SHADER_NONE = 0x0,
	SHADER_SOLID = 0x1,
	SHADER_RGB = 0x2,
	SHADER_YUV = 0x3,
	SHADER_NV12 = 0x4,
	SHADER_NV21 = 0x5,
	NUM_SHADERS = 0x6,
};

/* 533 */
enum GLES2_ShaderType
{
	GLES2_SHADER_VERTEX_DEFAULT = 0x0,
	GLES2_SHADER_FRAGMENT_SOLID_SRC = 0x1,
	GLES2_SHADER_FRAGMENT_TEXTURE_ABGR_SRC = 0x2,
	GLES2_SHADER_FRAGMENT_TEXTURE_ARGB_SRC = 0x3,
	GLES2_SHADER_FRAGMENT_TEXTURE_BGR_SRC = 0x4,
	GLES2_SHADER_FRAGMENT_TEXTURE_RGB_SRC = 0x5,
	GLES2_SHADER_FRAGMENT_TEXTURE_YUV_SRC = 0x6,
	GLES2_SHADER_FRAGMENT_TEXTURE_NV12_SRC = 0x7,
	GLES2_SHADER_FRAGMENT_TEXTURE_NV21_SRC = 0x8,
};

/* 534 */
enum GLES2_Attribute
{
	GLES2_ATTRIBUTE_POSITION = 0x0,
	GLES2_ATTRIBUTE_TEXCOORD = 0x1,
	GLES2_ATTRIBUTE_ANGLE = 0x2,
	GLES2_ATTRIBUTE_CENTER = 0x3,
};

/* 535 */
enum GLES2_Uniform
{
	GLES2_UNIFORM_PROJECTION = 0x0,
	GLES2_UNIFORM_TEXTURE = 0x1,
	GLES2_UNIFORM_MODULATION = 0x2,
	GLES2_UNIFORM_COLOR = 0x3,
	GLES2_UNIFORM_TEXTURE_U = 0x4,
	GLES2_UNIFORM_TEXTURE_V = 0x5,
};

/* 536 */
enum GLES2_ImageSource
{
	GLES2_IMAGESOURCE_SOLID = 0x0,
	GLES2_IMAGESOURCE_TEXTURE_ABGR = 0x1,
	GLES2_IMAGESOURCE_TEXTURE_ARGB = 0x2,
	GLES2_IMAGESOURCE_TEXTURE_RGB = 0x3,
	GLES2_IMAGESOURCE_TEXTURE_BGR = 0x4,
	GLES2_IMAGESOURCE_TEXTURE_YUV = 0x5,
	GLES2_IMAGESOURCE_TEXTURE_NV12 = 0x6,
	GLES2_IMAGESOURCE_TEXTURE_NV21 = 0x7,
};

/* 537 */
enum SDL_ShapeKind
{
	QuadShape = 0x0,
	TransparentShape = 0x1,
	OpaqueShape = 0x2,
};

/* 538 */
enum SDL_letter_case
{
	SDL_CASE_NOCHANGE = 0x0,
	SDL_CASE_LOWER = 0x1,
	SDL_CASE_UPPER = 0x2,
};

/* 539 */
enum $CE1B0B901F567B02C81009890B972D3A
{
	DO_INT = 0x0,
	DO_LONG = 0x1,
	DO_LONGLONG = 0x2,
};

/* 540 */
enum SDL_ThreadState
{
	SDL_THREAD_STATE_ALIVE = 0x0,
	SDL_THREAD_STATE_DETACHED = 0x1,
	SDL_THREAD_STATE_ZOMBIE = 0x2,
	SDL_THREAD_STATE_CLEANED = 0x3,
};

/* 541 */
enum libyuv::RotationMode
{
	kRotate0 = 0x0,
	kRotate90 = 0x5A,
	kRotate180 = 0xB4,
	kRotate270 = 0x10E,
	kRotateNone = 0x0,
	kRotateClockwise = 0x5A,
	kRotateCounterClockwise = 0x10E,
};

/* 542 */
enum libyuv::FilterMode
{
	kFilterNone = 0x0,
	kFilterBilinear = 0x1,
	kFilterBox = 0x2,
};

/* 543 */
enum ebml_type_enum
{
	TYPE_UNKNOWN = 0x0,
	TYPE_MASTER = 0x1,
	TYPE_UINT = 0x2,
	TYPE_FLOAT = 0x3,
	TYPE_INT = 0x4,
	TYPE_STRING = 0x5,
	TYPE_BINARY = 0x6,
};

/* 544 */
enum vint_mask
{
	MASK_NONE = 0x0,
	MASK_FIRST_BIT = 0x1,
};

/* 545 */
enum _USER_ACTIVITY_PRESENCE
{
	PowerUserPresent = 0x0,
	PowerUserNotPresent = 0x1,
	PowerUserInactive = 0x2,
	PowerUserMaximum = 0x3,
	PowerUserInvalid = 0x3,
};

/* 546 */
enum ISA_AVAILABILITY
{
	__ISA_AVAILABLE_X86 = 0x0,
	__ISA_AVAILABLE_SSE2 = 0x1,
	__ISA_AVAILABLE_SSE42 = 0x2,
	__ISA_AVAILABLE_AVX = 0x3,
	__ISA_AVAILABLE_ENFSTRG = 0x4,
	__ISA_AVAILABLE_AVX2 = 0x5,
	__ISA_AVAILABLE_ARMNT = 0x0,
	__ISA_AVAILABLE_NEON = 0x1,
};

/* 547 */
enum wrapEncodedKERNEL32Functions
{
	eFlsAlloc = 0x0,
	eFlsFree = 0x1,
	eFlsGetValue = 0x2,
	eFlsSetValue = 0x3,
	eInitializeCriticalSectionEx = 0x4,
	eCreateEventExW = 0x5,
	eCreateSemaphoreExW = 0x6,
	eSetThreadStackGuarantee = 0x7,
	eCreateThreadpoolTimer = 0x8,
	eSetThreadpoolTimer = 0x9,
	eWaitForThreadpoolTimerCallbacks = 0xA,
	eCloseThreadpoolTimer = 0xB,
	eCreateThreadpoolWait = 0xC,
	eSetThreadpoolWait = 0xD,
	eCloseThreadpoolWait = 0xE,
	eFlushProcessWriteBuffers = 0xF,
	eFreeLibraryWhenCallbackReturns = 0x10,
	eGetCurrentProcessorNumber = 0x11,
	eGetLogicalProcessorInformation = 0x12,
	eCreateSymbolicLinkW = 0x13,
	eSetDefaultDllDirectories = 0x14,
	eCompareStringEx = 0x15,
	eEnumSystemLocalesEx = 0x16,
	eGetDateFormatEx = 0x17,
	eGetLocaleInfoEx = 0x18,
	eGetTimeFormatEx = 0x19,
	eGetUserDefaultLocaleName = 0x1A,
	eIsValidLocaleName = 0x1B,
	eLCMapStringEx = 0x1C,
	eGetCurrentPackageId = 0x1D,
	eGetTickCount64 = 0x1E,
	eGetFileInformationByHandleExW = 0x1F,
	eSetFileInformationByHandleW = 0x20,
	eMaxKernel32Function = 0x21,
};

/* 548 */
enum INTRNCVT_STATUS
{
	INTRNCVT_OK = 0x0,
	INTRNCVT_OVERFLOW = 0x1,
	INTRNCVT_UNDERFLOW = 0x2,
};

/* 549 */
enum STATE
{
	ST_NORMAL = 0x0,
	ST_PERCENT = 0x1,
	ST_FLAG = 0x2,
	ST_WIDTH = 0x3,
	ST_DOT = 0x4,
	ST_PRECIS = 0x5,
	ST_SIZE = 0x6,
	ST_TYPE = 0x7,
	ST_INVALID = 0x8,
};

/* 550 */
enum CHARTYPE
{
	CH_OTHER = 0x0,
	CH_PERCENT = 0x1,
	CH_DOT = 0x2,
	CH_STAR = 0x3,
	CH_ZERO = 0x4,
	CH_DIGIT = 0x5,
	CH_FLAG = 0x6,
	CH_SIZE = 0x7,
	CH_TYPE = 0x8,
};

/* 551 */
enum ARG_TYPE
{
	eblank = 0x0,
	e_int_arg = 0x1,
	e_short_arg = 0x2,
	e_ptr_arg = 0x3,
	e_int64_arg = 0x4,
	e_long_long_arg = 0x5,
	e_long_arg = 0x6,
	e_longdouble_arg = 0x7,
	e_double_arg = 0x8,
};

/* 552 */
enum RO_INIT_TYPE
{
	RO_INIT_SINGLETHREADED = 0x0,
	RO_INIT_MULTITHREADED = 0x1,
};

/* 553 */
enum $1DD7A03358E0D01DD359262876E6A0F0
{
	lkNormal = 0x0,
	lkPrealloc = 0x1,
	lkDeleted = 0x2,
};

/* 554 */
enum state_t
{
	S_INIT = 0x0,
	S_EAT0L = 0x1,
	S_SIGNM = 0x2,
	S_GETL = 0x3,
	S_GETR = 0x4,
	S_POINT = 0x5,
	S_E = 0x6,
	S_SIGNE = 0x7,
	S_EAT0E = 0x8,
	S_GETE = 0x9,
	S_END = 0xA,
	S_E_IMPLICIT = 0xB,
};

/* 555 */
enum error_types
{
	logl_zero = 0x0,
	logl_negative = 0x1,
	log_zero = 0x2,
	log_negative = 0x3,
	logf_zero = 0x4,
	logf_negative = 0x5,
	log10l_zero = 0x6,
	log10l_negative = 0x7,
	log10_zero = 0x8,
	log10_negative = 0x9,
	log10f_zero = 0xA,
	log10f_negative = 0xB,
	expl_overflow = 0xC,
	expl_underflow = 0xD,
	exp_overflow = 0xE,
	exp_underflow = 0xF,
	expf_overflow = 0x10,
	expf_underflow = 0x11,
	powl_overflow = 0x12,
	powl_underflow = 0x13,
	powl_zero_to_zero = 0x14,
	powl_zero_to_negative = 0x15,
	powl_neg_to_non_integer = 0x16,
	powl_nan_to_zero = 0x17,
	pow_overflow = 0x18,
	pow_underflow = 0x19,
	pow_zero_to_zero = 0x1A,
	pow_zero_to_negative = 0x1B,
	pow_neg_to_non_integer = 0x1C,
	pow_nan_to_zero = 0x1D,
	powf_overflow = 0x1E,
	powf_underflow = 0x1F,
	powf_zero_to_zero = 0x20,
	powf_zero_to_negative = 0x21,
	powf_neg_to_non_integer = 0x22,
	powf_nan_to_zero = 0x23,
	atan2l_zero = 0x24,
	atan2_zero = 0x25,
	atan2f_zero = 0x26,
	expm1l_overflow = 0x27,
	expm1l_underflow = 0x28,
	expm1_overflow = 0x29,
	expm1_underflow = 0x2A,
	expm1f_overflow = 0x2B,
	expm1f_underflow = 0x2C,
	hypotl_overflow = 0x2D,
	hypot_overflow = 0x2E,
	hypotf_overflow = 0x2F,
	sqrtl_negative = 0x30,
	sqrt_negative = 0x31,
	sqrtf_negative = 0x32,
	scalbl_overflow = 0x33,
	scalbl_underflow = 0x34,
	scalb_overflow = 0x35,
	scalb_underflow = 0x36,
	scalbf_overflow = 0x37,
	scalbf_underflow = 0x38,
	acosl_gt_one = 0x39,
	acos_gt_one = 0x3A,
	acosf_gt_one = 0x3B,
	asinl_gt_one = 0x3C,
	asin_gt_one = 0x3D,
	asinf_gt_one = 0x3E,
	coshl_overflow = 0x3F,
	cosh_overflow = 0x40,
	coshf_overflow = 0x41,
	y0l_zero = 0x42,
	y0l_negative = 0x43,
	y0l_gt_loss = 0x44,
	y0_zero = 0x45,
	y0_negative = 0x46,
	y0_gt_loss = 0x47,
	y0f_zero = 0x48,
	y0f_negative = 0x49,
	y0f_gt_loss = 0x4A,
	y1l_zero = 0x4B,
	y1l_negative = 0x4C,
	y1l_gt_loss = 0x4D,
	y1_zero = 0x4E,
	y1_negative = 0x4F,
	y1_gt_loss = 0x50,
	y1f_zero = 0x51,
	y1f_negative = 0x52,
	y1f_gt_loss = 0x53,
	ynl_zero = 0x54,
	ynl_negative = 0x55,
	ynl_gt_loss = 0x56,
	yn_zero = 0x57,
	yn_negative = 0x58,
	yn_gt_loss = 0x59,
	ynf_zero = 0x5A,
	ynf_negative = 0x5B,
	ynf_gt_loss = 0x5C,
	j0l_gt_loss = 0x5D,
	j0_gt_loss = 0x5E,
	j0f_gt_loss = 0x5F,
	j1l_gt_loss = 0x60,
	j1_gt_loss = 0x61,
	j1f_gt_loss = 0x62,
	jnl_gt_loss = 0x63,
	jn_gt_loss = 0x64,
	jnf_gt_loss = 0x65,
	lgammal_overflow = 0x66,
	lgammal_negative = 0x67,
	lgammal_reserve = 0x68,
	lgamma_overflow = 0x69,
	lgamma_negative = 0x6A,
	lgamma_reserve = 0x6B,
	lgammaf_overflow = 0x6C,
	lgammaf_negative = 0x6D,
	lgammaf_reserve = 0x6E,
	gammal_overflow = 0x6F,
	gammal_negative = 0x70,
	gammal_reserve = 0x71,
	gamma_overflow = 0x72,
	gamma_negative = 0x73,
	gamma_reserve = 0x74,
	gammaf_overflow = 0x75,
	gammaf_negative = 0x76,
	gammaf_reserve = 0x77,
	fmodl_by_zero = 0x78,
	fmod_by_zero = 0x79,
	fmodf_by_zero = 0x7A,
	remainderl_by_zero = 0x7B,
	remainder_by_zero = 0x7C,
	remainderf_by_zero = 0x7D,
	sinhl_overflow = 0x7E,
	sinh_overflow = 0x7F,
	sinhf_overflow = 0x80,
	atanhl_gt_one = 0x81,
	atanhl_eq_one = 0x82,
	atanh_gt_one = 0x83,
	atanh_eq_one = 0x84,
	atanhf_gt_one = 0x85,
	atanhf_eq_one = 0x86,
	acoshl_lt_one = 0x87,
	acosh_lt_one = 0x88,
	acoshf_lt_one = 0x89,
	log1pl_zero = 0x8A,
	log1pl_negative = 0x8B,
	log1p_zero = 0x8C,
	log1p_negative = 0x8D,
	log1pf_zero = 0x8E,
	log1pf_negative = 0x8F,
	ldexpl_overflow = 0x90,
	ldexpl_underflow = 0x91,
	ldexp_overflow = 0x92,
	ldexp_underflow = 0x93,
	ldexpf_overflow = 0x94,
	ldexpf_underflow = 0x95,
	logbl_zero = 0x96,
	logb_zero = 0x97,
	logbf_zero = 0x98,
	nextafterl_overflow = 0x99,
	nextafter_overflow = 0x9A,
	nextafterf_overflow = 0x9B,
	ilogbl_zero = 0x9C,
	ilogb_zero = 0x9D,
	ilogbf_zero = 0x9E,
	exp2l_overflow = 0x9F,
	exp2l_underflow = 0xA0,
	exp2_overflow = 0xA1,
	exp2_underflow = 0xA2,
	exp2f_overflow = 0xA3,
	exp2f_underflow = 0xA4,
	exp10l_overflow = 0xA5,
	exp10_overflow = 0xA6,
	exp10f_overflow = 0xA7,
	log2l_zero = 0xA8,
	log2l_negative = 0xA9,
	log2_zero = 0xAA,
	log2_negative = 0xAB,
	log2f_zero = 0xAC,
	log2f_negative = 0xAD,
	log_nan = 0x3E8,
	log10_nan = 0x3E9,
	exp_nan = 0x3EA,
	atan_nan = 0x3EB,
	ceil_nan = 0x3EC,
	floor_nan = 0x3ED,
	pow_nan = 0x3EE,
	modf_nan = 0x3EF,
	acos_nan = 0x3F0,
	asin_nan = 0x3F1,
	sin_naninf = 0x3F2,
	cos_naninf = 0x3F3,
	tan_naninf = 0x3F4,
	sqrt_nan = 0x3F5,
};

/* 556 */
enum _FPIEEE_FORMAT
{
	_FpFormatFp32 = 0x0,
	_FpFormatFp64 = 0x1,
	_FpFormatFp80 = 0x2,
	_FpFormatFp128 = 0x3,
	_FpFormatI16 = 0x4,
	_FpFormatI32 = 0x5,
	_FpFormatI64 = 0x6,
	_FpFormatU16 = 0x7,
	_FpFormatU32 = 0x8,
	_FpFormatU64 = 0x9,
	_FpFormatBcd80 = 0xA,
	_FpFormatCompare = 0xB,
	_FpFormatString = 0xC,
};

/* 557 */
enum _FP_OPERATION_CODE
{
	_FpCodeUnspecified = 0x0,
	_FpCodeAdd = 0x1,
	_FpCodeSubtract = 0x2,
	_FpCodeMultiply = 0x3,
	_FpCodeDivide = 0x4,
	_FpCodeSquareRoot = 0x5,
	_FpCodeRemainder = 0x6,
	_FpCodeCompare = 0x7,
	_FpCodeConvert = 0x8,
	_FpCodeRound = 0x9,
	_FpCodeTruncate = 0xA,
	_FpCodeFloor = 0xB,
	_FpCodeCeil = 0xC,
	_FpCodeAcos = 0xD,
	_FpCodeAsin = 0xE,
	_FpCodeAtan = 0xF,
	_FpCodeAtan2 = 0x10,
	_FpCodeCabs = 0x11,
	_FpCodeCos = 0x12,
	_FpCodeCosh = 0x13,
	_FpCodeExp = 0x14,
	_FpCodeFabs = 0x15,
	_FpCodeFmod = 0x16,
	_FpCodeFrexp = 0x17,
	_FpCodeHypot = 0x18,
	_FpCodeLdexp = 0x19,
	_FpCodeLog = 0x1A,
	_FpCodeLog10 = 0x1B,
	_FpCodeModf = 0x1C,
	_FpCodePow = 0x1D,
	_FpCodeSin = 0x1E,
	_FpCodeSinh = 0x1F,
	_FpCodeTan = 0x20,
	_FpCodeTanh = 0x21,
	_FpCodeY0 = 0x22,
	_FpCodeY1 = 0x23,
	_FpCodeYn = 0x24,
	_FpCodeLogb = 0x25,
	_FpCodeNextafter = 0x26,
	_FpCodeNegate = 0x27,
	_FpCodeFmin = 0x28,
	_FpCodeFmax = 0x29,
	_FpCodeConvertTrunc = 0x2A,
	_XMMIAddps = 0x2B,
	_XMMIAddss = 0x2C,
	_XMMISubps = 0x2D,
	_XMMISubss = 0x2E,
	_XMMIMulps = 0x2F,
	_XMMIMulss = 0x30,
	_XMMIDivps = 0x31,
	_XMMIDivss = 0x32,
	_XMMISqrtps = 0x33,
	_XMMISqrtss = 0x34,
	_XMMIMaxps = 0x35,
	_XMMIMaxss = 0x36,
	_XMMIMinps = 0x37,
	_XMMIMinss = 0x38,
	_XMMICmpps = 0x39,
	_XMMICmpss = 0x3A,
	_XMMIComiss = 0x3B,
	_XMMIUComiss = 0x3C,
	_XMMICvtpi2ps = 0x3D,
	_XMMICvtsi2ss = 0x3E,
	_XMMICvtps2pi = 0x3F,
	_XMMICvtss2si = 0x40,
	_XMMICvttps2pi = 0x41,
	_XMMICvttss2si = 0x42,
	_XMMIAddsubps = 0x43,
	_XMMIHaddps = 0x44,
	_XMMIHsubps = 0x45,
	_XMMIRoundps = 0x46,
	_XMMIRoundss = 0x47,
	_XMMIDpps = 0x48,
	_XMMI2Addpd = 0x49,
	_XMMI2Addsd = 0x4A,
	_XMMI2Subpd = 0x4B,
	_XMMI2Subsd = 0x4C,
	_XMMI2Mulpd = 0x4D,
	_XMMI2Mulsd = 0x4E,
	_XMMI2Divpd = 0x4F,
	_XMMI2Divsd = 0x50,
	_XMMI2Sqrtpd = 0x51,
	_XMMI2Sqrtsd = 0x52,
	_XMMI2Maxpd = 0x53,
	_XMMI2Maxsd = 0x54,
	_XMMI2Minpd = 0x55,
	_XMMI2Minsd = 0x56,
	_XMMI2Cmppd = 0x57,
	_XMMI2Cmpsd = 0x58,
	_XMMI2Comisd = 0x59,
	_XMMI2UComisd = 0x5A,
	_XMMI2Cvtpd2pi = 0x5B,
	_XMMI2Cvtsd2si = 0x5C,
	_XMMI2Cvttpd2pi = 0x5D,
	_XMMI2Cvttsd2si = 0x5E,
	_XMMI2Cvtps2pd = 0x5F,
	_XMMI2Cvtss2sd = 0x60,
	_XMMI2Cvtpd2ps = 0x61,
	_XMMI2Cvtsd2ss = 0x62,
	_XMMI2Cvtdq2ps = 0x63,
	_XMMI2Cvttps2dq = 0x64,
	_XMMI2Cvtps2dq = 0x65,
	_XMMI2Cvttpd2dq = 0x66,
	_XMMI2Cvtpd2dq = 0x67,
	_XMMI2Addsubpd = 0x68,
	_XMMI2Haddpd = 0x69,
	_XMMI2Hsubpd = 0x6A,
	_XMMI2Roundpd = 0x6B,
	_XMMI2Roundsd = 0x6C,
	_XMMI2Dppd = 0x6D,
};

/* 558 */
enum _FPIEEE_ROUNDING_MODE
{
	_FpRoundNearest = 0x0,
	_FpRoundMinusInfinity = 0x1,
	_FpRoundPlusInfinity = 0x2,
	_FpRoundChopped = 0x3,
};

/* 559 */
enum _FPIEEE_PRECISION
{
	_FpPrecisionFull = 0x0,
	_FpPrecision53 = 0x1,
	_FpPrecision24 = 0x2,
};

/* 560 */
enum Tokens
{
	TOK_basedLp = 0x0,
	TOK_cdecl = 0x1,
	TOK_pascal = 0x2,
	TOK_stdcall = 0x3,
	TOK_thiscall = 0x4,
	TOK_fastcall = 0x5,
	TOK_vectorcall = 0x6,
	TOK_cocall = 0x7,
	TOK_eabi = 0x8,
	TOK_ptr64 = 0x9,
	TOK_restrict = 0xA,
	TOK_unaligned = 0xB,
	TOK_restrictSpecLp = 0xC,
	TOK__last = 0xD,
};

/* 561 */
enum DNameStatus
{
	DN_valid = 0x0,
	DN_truncated = 0x1,
	DN_invalid = 0x2,
	DN_error = 0x3,
};

/* 562 */
enum tagCOINITBASE
{
	COINITBASE_MULTITHREADED = 0x0,
};

/* 563 */
enum __MIDL_IGetBindHandle_0001
{
	BINDHANDLETYPES_APPCACHE = 0x0,
	BINDHANDLETYPES_DEPENDENCY = 0x1,
	BINDHANDLETYPES_COUNT = 0x2,
};

/* 564 */
enum _RTC_ErrorNumber
{
	_RTC_CHKSTK = 0x0,
	_RTC_CVRT_LOSS_INFO = 0x1,
	_RTC_CORRUPT_STACK = 0x2,
	_RTC_UNINIT_LOCAL_USE = 0x3,
	_RTC_CORRUPTED_ALLOCA = 0x4,
	_RTC_ILLEGAL = 0x5,
};

/* 565 */
enum std::_Lang_flags
{
	_L_ext_rep = 0x1,
	_L_alt_pipe = 0x2,
	_L_alt_nl = 0x4,
	_L_nex_grp = 0x8,
	_L_nex_rep = 0x10,
	_L_nc_grp = 0x20,
	_L_asrt_gen = 0x40,
	_L_asrt_wrd = 0x80,
	_L_bckr = 0x100,
	_L_lim_bckr = 0x200,
	_L_ngr_rep = 0x400,
	_L_esc_uni = 0x800,
	_L_esc_hex = 0x1000,
	_L_esc_oct = 0x2000,
	_L_esc_bsl = 0x4000,
	_L_esc_ffnx = 0x8000,
	_L_esc_ffn = 0x10000,
	_L_esc_wsd = 0x20000,
	_L_esc_ctrl = 0x40000,
	_L_no_nl = 0x80000,
	_L_bzr_chr = 0x100000,
	_L_grp_esc = 0x200000,
	_L_ident_ECMA = 0x400000,
	_L_ident_ERE = 0x800000,
	_L_ident_awk = 0x1000000,
	_L_anch_rstr = 0x2000000,
	_L_star_beg = 0x4000000,
	_L_empty_grp = 0x8000000,
	_L_paren_bal = 0x10000000,
	_L_brk_rstr = 0x20000000,
	_L_mtch_long = 0x40000000,
	_L_no_subs = 0x80000000,
};

/* 566 */
enum std::_Meta_type
{
	_Meta_lpar = 0x28,
	_Meta_rpar = 0x29,
	_Meta_dlr = 0x24,
	_Meta_caret = 0x5E,
	_Meta_dot = 0x2E,
	_Meta_star = 0x2A,
	_Meta_plus = 0x2B,
	_Meta_query = 0x3F,
	_Meta_lsq = 0x5B,
	_Meta_rsq = 0x5D,
	_Meta_bar = 0x7C,
	_Meta_esc = 0x5C,
	_Meta_dash = 0x2D,
	_Meta_lbr = 0x7B,
	_Meta_rbr = 0x7D,
	_Meta_comma = 0x2C,
	_Meta_colon = 0x3A,
	_Meta_equal = 0x3D,
	_Meta_exc = 0x21,
	_Meta_eos = 0xFFFFFFFF,
	_Meta_nl = 0xA,
	_Meta_cr = 0xD,
	_Meta_bsp = 0x8,
	_Meta_chr = 0x0,
	_Esc_bsl = 0x5C,
	_Esc_word = 0x62,
	_Esc_not_word = 0x42,
	_Esc_ctrl_a = 0x61,
	_Esc_ctrl_b = 0x62,
	_Esc_ctrl_f = 0x66,
	_Esc_ctrl_n = 0x6E,
	_Esc_ctrl_r = 0x72,
	_Esc_ctrl_t = 0x74,
	_Esc_ctrl_v = 0x76,
	_Esc_ctrl = 0x63,
	_Esc_hex = 0x78,
	_Esc_uni = 0x75,
};

/* 567 */
enum std::_Node_flags
{
	_Fl_none = 0x0,
	_Fl_negate = 0x1,
	_Fl_greedy = 0x2,
	_Fl_final = 0x4,
	_Fl_longest = 0x8,
};

/* 568 */
enum std::_Node_type
{
	_N_none = 0x0,
	_N_nop = 0x1,
	_N_bol = 0x2,
	_N_eol = 0x3,
	_N_wbound = 0x4,
	_N_dot = 0x5,
	_N_str = 0x6,
	_N_class = 0x7,
	_N_group = 0x8,
	_N_end_group = 0x9,
	_N_assert = 0xA,
	_N_neg_assert = 0xB,
	_N_end_assert = 0xC,
	_N_capture = 0xD,
	_N_end_capture = 0xE,
	_N_back = 0xF,
	_N_if = 0x10,
	_N_endif = 0x11,
	_N_rep = 0x12,
	_N_end_rep = 0x13,
	_N_begin = 0x14,
	_N_end = 0x15,
};

/* 569 */
enum std::regex_constants::error_type
{
	error_collate = 0x0,
	error_ctype = 0x1,
	error_escape = 0x2,
	error_backref = 0x3,
	error_brack = 0x4,
	error_paren = 0x5,
	error_brace = 0x6,
	error_badbrace = 0x7,
	error_range = 0x8,
	error_space = 0x9,
	error_badrepeat = 0xA,
	error_complexity = 0xB,
	error_stack = 0xC,
	error_parse = 0xD,
	error_syntax = 0xE,
};

/* 570 */
enum std::_Regex_traits_base::_Char_class_type
{
	_Ch_none = 0x0,
	_Ch_alnum = 0x107,
	_Ch_alpha = 0x103,
	_Ch_cntrl = 0x20,
	_Ch_digit = 0x4,
	_Ch_graph = 0x117,
	_Ch_lower = 0x2,
	_Ch_print = 0x1D7,
	_Ch_punct = 0x10,
	_Ch_space = 0x48,
	_Ch_upper = 0x1,
	_Ch_xdigit = 0x80,
	_Ch_blank = 0x48,
};

/* 571 */
enum std::regex_constants::syntax_option_type
{
	ECMAScript = 0x1,
	basic = 0x2,
	extended = 0x4,
	awk = 0x8,
	grep = 0x10,
	egrep = 0x20,
	_Gmask = 0x3F,
	icase = 0x100,
	nosubs = 0x200,
	optimize = 0x400,
	collate = 0x800,
};

/* 572 */
enum D2D1_ALPHA_MODE
{
	D2D1_ALPHA_MODE_UNKNOWN = 0x0,
	D2D1_ALPHA_MODE_PREMULTIPLIED = 0x1,
	D2D1_ALPHA_MODE_STRAIGHT = 0x2,
	D2D1_ALPHA_MODE_IGNORE = 0x3,
	D2D1_ALPHA_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 573 */
enum D3D11_MESSAGE_CATEGORY
{
	D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
	D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
	D3D11_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
	D3D11_MESSAGE_CATEGORY_CLEANUP = 0x3,
	D3D11_MESSAGE_CATEGORY_COMPILATION = 0x4,
	D3D11_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
	D3D11_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
	D3D11_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
	D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
	D3D11_MESSAGE_CATEGORY_EXECUTION = 0x9,
};

/* 574 */
enum D2D1_GAMMA
{
	D2D1_GAMMA_2_2 = 0x0,
	D2D1_GAMMA_1_0 = 0x1,
	D2D1_GAMMA_FORCE_DWORD = 0xFFFFFFFF,
};

/* 575 */
typedef D3D10_SRV_DIMENSION D3D_SRV_DIMENSION;

/* 576 */
enum D3D11_MESSAGE_SEVERITY
{
	D3D11_MESSAGE_SEVERITY_CORRUPTION = 0x0,
	D3D11_MESSAGE_SEVERITY_ERROR = 0x1,
	D3D11_MESSAGE_SEVERITY_WARNING = 0x2,
	D3D11_MESSAGE_SEVERITY_INFO = 0x3,
};

/* 577 */
enum D2D1_EXTEND_MODE
{
	D2D1_EXTEND_MODE_CLAMP = 0x0,
	D2D1_EXTEND_MODE_WRAP = 0x1,
	D2D1_EXTEND_MODE_MIRROR = 0x2,
	D2D1_EXTEND_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 578 */
enum D2D1_ANTIALIAS_MODE
{
	D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0x0,
	D2D1_ANTIALIAS_MODE_ALIASED = 0x1,
	D2D1_ANTIALIAS_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 579 */
enum D2D1_TEXT_ANTIALIAS_MODE
{
	D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0x0,
	D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0x1,
	D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 0x2,
	D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 0x3,
	D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 580 */
enum XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER
{
	Processor1 = 0x1,
	Processor2 = 0x2,
	Processor3 = 0x4,
	Processor4 = 0x8,
	Processor5 = 0x10,
	Processor6 = 0x20,
	Processor7 = 0x40,
	Processor8 = 0x80,
	Processor9 = 0x100,
	Processor10 = 0x200,
	Processor11 = 0x400,
	Processor12 = 0x800,
	Processor13 = 0x1000,
	Processor14 = 0x2000,
	Processor15 = 0x4000,
	Processor16 = 0x8000,
	Processor17 = 0x10000,
	Processor18 = 0x20000,
	Processor19 = 0x40000,
	Processor20 = 0x80000,
	Processor21 = 0x100000,
	Processor22 = 0x200000,
	Processor23 = 0x400000,
	Processor24 = 0x800000,
	Processor25 = 0x1000000,
	Processor26 = 0x2000000,
	Processor27 = 0x4000000,
	Processor28 = 0x8000000,
	Processor29 = 0x10000000,
	Processor30 = 0x20000000,
	Processor31 = 0x40000000,
	Processor32 = 0x80000000,
	XAUDIO2_ANY_PROCESSOR = 0xFFFFFFFF,
	XAUDIO2_DEFAULT_PROCESSOR = 0xFFFFFFFF,
};

/* 581 */
enum D3D11_MESSAGE_ID
{
	D3D11_MESSAGE_ID_UNKNOWN = 0x0,
	D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
	D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
	D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
	D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
	D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
	D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
	D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
	D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
	D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
	D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
	D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
	D3D11_MESSAGE_ID_CORRUPTED_THIS = 0xC,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
	D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
	D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
	D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
	D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
	D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
	D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
	D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
	D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
	D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
	D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
	D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
	D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
	D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
	D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
	D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
	D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
	D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
	D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
	D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
	D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
	D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
	D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
	D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
	D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
	D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
	D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
	D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
	D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
	D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
	D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
	D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
	D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
	D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
	D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
	D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
	D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
	D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
	D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
	D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
	D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
	D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
	D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
	D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
	D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
	D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
	D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
	D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
	D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
	D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
	D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
	D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
	D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
	D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
	D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
	D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
	D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
	D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
	D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
	D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
	D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
	D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
	D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
	D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
	D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
	D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
	D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
	D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
	D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
	D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
	D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
	D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
	D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
	D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
	D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
	D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
	D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
	D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
	D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
	D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
	D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
	D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
	D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
	D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
	D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
	D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
	D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
	D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
	D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
	D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
	D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
	D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
	D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
	D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
	D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
	D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
	D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
	D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
	D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
	D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
	D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
	D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
	D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
	D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
	D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
	D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
	D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
	D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
	D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
	D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
	D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
	D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
	D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
	D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
	D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
	D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
	D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
	D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
	D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
	D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
	D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
	D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
	D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
	D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
	D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
	D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
	D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
	D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
	D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
	D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
	D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
	D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
	D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
	D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
	D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
	D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
	D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
	D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
	D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
	D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
	D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
	D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
	D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
	D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
	D3D11_MESSAGE_ID_REF_THREADING_MODE = 0x147,
	D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
	D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
	D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
	D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
	D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
	D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
	D3D11_MESSAGE_ID_REF_INFO = 0x14E,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
	D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
	D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
	D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
	D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
	D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
	D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
	D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
	D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
	D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
	D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
	D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
	D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
	D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
	D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
	D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
	D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
	D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
	D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
	D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
	D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
	D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
	D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
	D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
	D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
	D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
	D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
	D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
	D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
	D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
	D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
	D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
	D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
	D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
	D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
	D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
	D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
	D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
	D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
	D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
	D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
	D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
	D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
	D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
	D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
	D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
	D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
	D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
	D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
	D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
	D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
	D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
	D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
	D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
	D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
	D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
	D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
	D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
	D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
	D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
	D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
	D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
	D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
	D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 0x1A6,
	D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
	D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
	D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
	D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
	D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
	D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
	D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
	D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
	D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
	D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
	D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
	D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
	D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
	D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
	D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
	D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
	D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
	D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
	D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
	D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
	D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
	D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
	D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
	D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
	D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
	D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
	D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
	D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
	D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
	D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
	D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
	D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
	D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
	D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
	D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
	D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
	D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
	D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
	D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
	D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
	D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
	D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
	D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
	D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
	D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
	D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003D,
	D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
	D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 0x200001,
	D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 0x200002,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 0x200003,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 0x200004,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 0x200005,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 0x200006,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 0x200007,
	D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 0x200008,
	D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 0x200009,
	D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 0x20000A,
	D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 0x20000B,
	D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 0x20000C,
	D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 0x20000D,
	D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 0x20000E,
	D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 0x20000F,
	D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 0x200010,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 0x200011,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 0x200012,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 0x200013,
	D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 0x200014,
	D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 0x200015,
	D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 0x200016,
	D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200017,
	D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200018,
	D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 0x200019,
	D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 0x20001A,
	D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 0x20001B,
	D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 0x20001C,
	D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 0x20001D,
	D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20001E,
	D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20001F,
	D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200020,
	D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 0x200021,
	D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200022,
	D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200023,
	D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 0x200024,
	D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 0x200025,
	D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 0x200026,
	D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200027,
	D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200028,
	D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 0x200029,
	D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 0x20002A,
	D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 0x20002B,
	D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 0x20002C,
	D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 0x20002D,
	D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20002E,
	D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20002F,
	D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200030,
	D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 0x200031,
	D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200032,
	D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200033,
	D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 0x200034,
	D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 0x200035,
	D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 0x200036,
	D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 0x200037,
	D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 0x200038,
	D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 0x200039,
	D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 0x20003A,
	D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 0x20003B,
	D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 0x20003C,
	D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 0x20003D,
	D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 0x20003E,
	D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 0x20003F,
	D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 0x200040,
	D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 0x200041,
	D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 0x200042,
	D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 0x200043,
	D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 0x200044,
	D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 0x200045,
	D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 0x200046,
	D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 0x200047,
	D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 0x200048,
	D3D11_MESSAGE_ID_CREATE_CONTEXT = 0x200049,
	D3D11_MESSAGE_ID_LIVE_CONTEXT = 0x20004A,
	D3D11_MESSAGE_ID_DESTROY_CONTEXT = 0x20004B,
	D3D11_MESSAGE_ID_CREATE_BUFFER = 0x20004C,
	D3D11_MESSAGE_ID_LIVE_BUFFER = 0x20004D,
	D3D11_MESSAGE_ID_DESTROY_BUFFER = 0x20004E,
	D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 0x20004F,
	D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 0x200050,
	D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 0x200051,
	D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 0x200052,
	D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 0x200053,
	D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 0x200054,
	D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 0x200055,
	D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 0x200056,
	D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 0x200057,
	D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 0x200058,
	D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 0x200059,
	D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 0x20005A,
	D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 0x20005B,
	D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 0x20005C,
	D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 0x20005D,
	D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 0x20005E,
	D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 0x20005F,
	D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 0x200060,
	D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 0x200061,
	D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 0x200062,
	D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 0x200063,
	D3D11_MESSAGE_ID_CREATE_HULLSHADER = 0x200064,
	D3D11_MESSAGE_ID_LIVE_HULLSHADER = 0x200065,
	D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 0x200066,
	D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 0x200067,
	D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 0x200068,
	D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 0x200069,
	D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 0x20006A,
	D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 0x20006B,
	D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 0x20006C,
	D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 0x20006D,
	D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 0x20006E,
	D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 0x20006F,
	D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 0x200070,
	D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 0x200071,
	D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 0x200072,
	D3D11_MESSAGE_ID_CREATE_SAMPLER = 0x200073,
	D3D11_MESSAGE_ID_LIVE_SAMPLER = 0x200074,
	D3D11_MESSAGE_ID_DESTROY_SAMPLER = 0x200075,
	D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 0x200076,
	D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 0x200077,
	D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 0x200078,
	D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 0x200079,
	D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 0x20007A,
	D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 0x20007B,
	D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 0x20007C,
	D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 0x20007D,
	D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 0x20007E,
	D3D11_MESSAGE_ID_CREATE_QUERY = 0x20007F,
	D3D11_MESSAGE_ID_LIVE_QUERY = 0x200080,
	D3D11_MESSAGE_ID_DESTROY_QUERY = 0x200081,
	D3D11_MESSAGE_ID_CREATE_PREDICATE = 0x200082,
	D3D11_MESSAGE_ID_LIVE_PREDICATE = 0x200083,
	D3D11_MESSAGE_ID_DESTROY_PREDICATE = 0x200084,
	D3D11_MESSAGE_ID_CREATE_COUNTER = 0x200085,
	D3D11_MESSAGE_ID_LIVE_COUNTER = 0x200086,
	D3D11_MESSAGE_ID_DESTROY_COUNTER = 0x200087,
	D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 0x200088,
	D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 0x200089,
	D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 0x20008A,
	D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 0x20008B,
	D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 0x20008C,
	D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 0x20008D,
	D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 0x20008E,
	D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 0x20008F,
	D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 0x200090,
	D3D11_MESSAGE_ID_LIVE_DEVICE = 0x200091,
	D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 0x200092,
	D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 0x200093,
	D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 0x200094,
	D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 0x200095,
	D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 0x200096,
	D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 0x200097,
	D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 0x200098,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 0x200099,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 0x20009A,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 0x20009B,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 0x20009C,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 0x20009D,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 0x20009E,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 0x20009F,
	D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 0x2000A0,
	D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 0x2000A1,
	D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 0x2000A2,
	D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 0x2000A3,
	D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 0x2000A4,
	D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 0x2000A5,
	D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 0x2000A6,
	D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2000A7,
	D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2000A8,
	D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 0x2000A9,
	D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 0x2000AA,
	D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 0x2000AB,
	D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 0x2000AC,
	D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 0x2000AD,
	D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 0x2000AE,
	D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x2000AF,
	D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B0,
	D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 0x2000B1,
	D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 0x2000B2,
	D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B3,
	D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 0x2000B4,
	D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B5,
	D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B6,
	D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B7,
	D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B8,
	D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B9,
	D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BA,
	D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BB,
	D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 0x2000BC,
	D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 0x2000BD,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 0x2000BE,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 0x2000BF,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 0x2000C0,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 0x2000C1,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 0x2000C2,
	D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 0x2000C3,
	D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 0x2000C4,
	D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 0x2000C5,
	D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C6,
	D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C7,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 0x2000C8,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 0x2000C9,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 0x2000CA,
	D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 0x2000CB,
	D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 0x2000CC,
	D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CD,
	D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CE,
	D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 0x2000CF,
	D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 0x2000D0,
	D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 0x2000D1,
	D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 0x2000D2,
	D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 0x2000D3,
	D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D4,
	D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D5,
	D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 0x2000D6,
	D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D7,
	D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D8,
	D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 0x2000D9,
	D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 0x2000DA,
	D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 0x2000DB,
	D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 0x2000DC,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 0x2000DD,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 0x2000DE,
	D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 0x2000DF,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 0x2000E0,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 0x2000E1,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 0x2000E2,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000E3,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 0x2000E4,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 0x2000E5,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 0x2000E6,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 0x2000E7,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 0x2000E8,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 0x2000E9,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 0x2000EA,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 0x2000EB,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 0x2000EC,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 0x2000ED,
	D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 0x2000EE,
	D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 0x2000EF,
	D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 0x2000F0,
	D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000F1,
	D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 0x2000F2,
	D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 0x2000F3,
	D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 0x2000F4,
	D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 0x2000F5,
	D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 0x2000F6,
	D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 0x2000F7,
	D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 0x2000F8,
	D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 0x2000F9,
	D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 0x2000FA,
	D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 0x2000FB,
	D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x2000FC,
	D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x2000FD,
	D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 0x2000FE,
	D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 0x2000FF,
	D3D11_MESSAGE_ID_REF_WARNING = 0x200100,
	D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 0x200101,
};

/* 582 */
enum D2D1_BITMAP_INTERPOLATION_MODE
{
	D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0x0,
	D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 0x1,
	D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 583 */
enum D2D1_DRAW_TEXT_OPTIONS
{
	D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 0x1,
	D2D1_DRAW_TEXT_OPTIONS_CLIP = 0x2,
	D2D1_DRAW_TEXT_OPTIONS_NONE = 0x0,
	D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 584 */
enum D3D10_MESSAGE_CATEGORY
{
	D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
	D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
	D3D10_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
	D3D10_MESSAGE_CATEGORY_CLEANUP = 0x3,
	D3D10_MESSAGE_CATEGORY_COMPILATION = 0x4,
	D3D10_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
	D3D10_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
	D3D10_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
	D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
	D3D10_MESSAGE_CATEGORY_EXECUTION = 0x9,
};

/* 585 */
enum D3D11_QUERY
{
	D3D11_QUERY_EVENT = 0x0,
	D3D11_QUERY_OCCLUSION = 0x1,
	D3D11_QUERY_TIMESTAMP = 0x2,
	D3D11_QUERY_TIMESTAMP_DISJOINT = 0x3,
	D3D11_QUERY_PIPELINE_STATISTICS = 0x4,
	D3D11_QUERY_OCCLUSION_PREDICATE = 0x5,
	D3D11_QUERY_SO_STATISTICS = 0x6,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
	D3D11_QUERY_SO_STATISTICS_STREAM0 = 0x8,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 0x9,
	D3D11_QUERY_SO_STATISTICS_STREAM1 = 0xA,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 0xB,
	D3D11_QUERY_SO_STATISTICS_STREAM2 = 0xC,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 0xD,
	D3D11_QUERY_SO_STATISTICS_STREAM3 = 0xE,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 0xF,
};

/* 586 */
enum D3D11_FILL_MODE
{
	D3D11_FILL_WIREFRAME = 0x2,
	D3D11_FILL_SOLID = 0x3,
};

/* 587 */
enum D3D11_CULL_MODE
{
	D3D11_CULL_NONE = 0x1,
	D3D11_CULL_FRONT = 0x2,
	D3D11_CULL_BACK = 0x3,
};

/* 588 */
enum D3D10_MESSAGE_ID
{
	D3D10_MESSAGE_ID_UNKNOWN = 0x0,
	D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
	D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
	D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
	D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
	D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
	D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
	D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
	D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
	D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
	D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
	D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
	D3D10_MESSAGE_ID_CORRUPTED_THIS = 0xC,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
	D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
	D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
	D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
	D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
	D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
	D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
	D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
	D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
	D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
	D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
	D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
	D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
	D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
	D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
	D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
	D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
	D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
	D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
	D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
	D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
	D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
	D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
	D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
	D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
	D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
	D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
	D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
	D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
	D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
	D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
	D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
	D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
	D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
	D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
	D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
	D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
	D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
	D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
	D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
	D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
	D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
	D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
	D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
	D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
	D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
	D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
	D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
	D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
	D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
	D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
	D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
	D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
	D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
	D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
	D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
	D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
	D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
	D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
	D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
	D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
	D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
	D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
	D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
	D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
	D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
	D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
	D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
	D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
	D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
	D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
	D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
	D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
	D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
	D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
	D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
	D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
	D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
	D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
	D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
	D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
	D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
	D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
	D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
	D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
	D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
	D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
	D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
	D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
	D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
	D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
	D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
	D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
	D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
	D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
	D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
	D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
	D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
	D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
	D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
	D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
	D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
	D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
	D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
	D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
	D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
	D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
	D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
	D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
	D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
	D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
	D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
	D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
	D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
	D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
	D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
	D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
	D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
	D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
	D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
	D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
	D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
	D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
	D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
	D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
	D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
	D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
	D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
	D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
	D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
	D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
	D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
	D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
	D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
	D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
	D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
	D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
	D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
	D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
	D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
	D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
	D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
	D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
	D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
	D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
	D3D10_MESSAGE_ID_REF_THREADING_MODE = 0x147,
	D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
	D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
	D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
	D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
	D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
	D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
	D3D10_MESSAGE_ID_REF_INFO = 0x14E,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
	D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
	D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
	D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
	D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
	D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
	D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
	D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
	D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
	D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
	D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
	D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
	D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
	D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
	D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
	D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
	D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
	D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
	D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
	D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
	D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
	D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
	D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
	D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
	D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
	D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
	D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
	D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
	D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
	D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
	D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
	D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
	D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
	D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
	D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
	D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
	D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
	D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
	D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
	D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
	D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
	D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
	D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
	D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
	D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
	D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
	D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
	D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
	D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
	D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
	D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
	D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
	D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
	D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
	D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
	D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
	D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
	D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
	D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
	D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
	D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
	D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
	D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
	D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
	D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
	D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 0x1A6,
	D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
	D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
	D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
	D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
	D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
	D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
	D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
	D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
	D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
	D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
	D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
	D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
	D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
	D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
	D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
	D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
	D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
	D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
	D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
	D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
	D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
	D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
	D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
	D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
	D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
	D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
	D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
	D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
	D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
	D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
	D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
	D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
	D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
	D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
	D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
	D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
	D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
	D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
	D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
	D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
	D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
	D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
	D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
	D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
	D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
	D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
	D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
	D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003D,
};

/* 589 */
typedef _D3D10_INCLUDE_TYPE _D3D_INCLUDE_TYPE;

/* 590 */
typedef _D3D10_SHADER_VARIABLE_CLASS _D3D_SHADER_VARIABLE_CLASS;

/* 591 */
enum D3D11_DSV_DIMENSION
{
	D3D11_DSV_DIMENSION_UNKNOWN = 0x0,
	D3D11_DSV_DIMENSION_TEXTURE1D = 0x1,
	D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 0x2,
	D3D11_DSV_DIMENSION_TEXTURE2D = 0x3,
	D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 0x4,
	D3D11_DSV_DIMENSION_TEXTURE2DMS = 0x5,
	D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 0x6,
};

/* 592 */
enum D3D11_RTV_DIMENSION
{
	D3D11_RTV_DIMENSION_UNKNOWN = 0x0,
	D3D11_RTV_DIMENSION_BUFFER = 0x1,
	D3D11_RTV_DIMENSION_TEXTURE1D = 0x2,
	D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 0x3,
	D3D11_RTV_DIMENSION_TEXTURE2D = 0x4,
	D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 0x5,
	D3D11_RTV_DIMENSION_TEXTURE2DMS = 0x6,
	D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
	D3D11_RTV_DIMENSION_TEXTURE3D = 0x8,
};

/* 593 */
typedef _D3D10_SHADER_VARIABLE_FLAGS _D3D_SHADER_VARIABLE_FLAGS;

/* 594 */
enum D3D11_UAV_DIMENSION
{
	D3D11_UAV_DIMENSION_UNKNOWN = 0x0,
	D3D11_UAV_DIMENSION_BUFFER = 0x1,
	D3D11_UAV_DIMENSION_TEXTURE1D = 0x2,
	D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 0x3,
	D3D11_UAV_DIMENSION_TEXTURE2D = 0x4,
	D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 0x5,
	D3D11_UAV_DIMENSION_TEXTURE3D = 0x8,
};

/* 595 */
typedef _D3D10_SHADER_VARIABLE_TYPE _D3D_SHADER_VARIABLE_TYPE;

/* 596 */
enum D3D11_USAGE
{
	D3D11_USAGE_DEFAULT = 0x0,
	D3D11_USAGE_IMMUTABLE = 0x1,
	D3D11_USAGE_DYNAMIC = 0x2,
	D3D11_USAGE_STAGING = 0x3,
};

/* 597 */
enum D2D1_CAP_STYLE
{
	D2D1_CAP_STYLE_FLAT = 0x0,
	D2D1_CAP_STYLE_SQUARE = 0x1,
	D2D1_CAP_STYLE_ROUND = 0x2,
	D2D1_CAP_STYLE_TRIANGLE = 0x3,
	D2D1_CAP_STYLE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 598 */
enum D3D11_COUNTER_TYPE
{
	D3D11_COUNTER_TYPE_FLOAT32 = 0x0,
	D3D11_COUNTER_TYPE_UINT16 = 0x1,
	D3D11_COUNTER_TYPE_UINT32 = 0x2,
	D3D11_COUNTER_TYPE_UINT64 = 0x3,
};

/* 599 */
enum D2D1_DASH_STYLE
{
	D2D1_DASH_STYLE_SOLID = 0x0,
	D2D1_DASH_STYLE_DASH = 0x1,
	D2D1_DASH_STYLE_DOT = 0x2,
	D2D1_DASH_STYLE_DASH_DOT = 0x3,
	D2D1_DASH_STYLE_DASH_DOT_DOT = 0x4,
	D2D1_DASH_STYLE_CUSTOM = 0x5,
	D2D1_DASH_STYLE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 600 */
enum D2D1_LINE_JOIN
{
	D2D1_LINE_JOIN_MITER = 0x0,
	D2D1_LINE_JOIN_BEVEL = 0x1,
	D2D1_LINE_JOIN_ROUND = 0x2,
	D2D1_LINE_JOIN_MITER_OR_BEVEL = 0x3,
	D2D1_LINE_JOIN_FORCE_DWORD = 0xFFFFFFFF,
};

/* 601 */
typedef _D3D10_SHADER_INPUT_FLAGS _D3D_SHADER_INPUT_FLAGS;

/* 602 */
typedef _D3D10_SHADER_INPUT_TYPE _D3D_SHADER_INPUT_TYPE;

/* 603 */
typedef _D3D10_SHADER_CBUFFER_FLAGS _D3D_SHADER_CBUFFER_FLAGS;

/* 604 */
typedef _D3D10_CBUFFER_TYPE _D3D_CBUFFER_TYPE;

/* 605 */
enum D3D11_COMPARISON_FUNC
{
	D3D11_COMPARISON_NEVER = 0x1,
	D3D11_COMPARISON_LESS = 0x2,
	D3D11_COMPARISON_EQUAL = 0x3,
	D3D11_COMPARISON_LESS_EQUAL = 0x4,
	D3D11_COMPARISON_GREATER = 0x5,
	D3D11_COMPARISON_NOT_EQUAL = 0x6,
	D3D11_COMPARISON_GREATER_EQUAL = 0x7,
	D3D11_COMPARISON_ALWAYS = 0x8,
};

/* 606 */
typedef D3D10_NAME D3D_NAME;

/* 607 */
enum D3D11_FEATURE
{
	D3D11_FEATURE_THREADING = 0x0,
	D3D11_FEATURE_DOUBLES = 0x1,
	D3D11_FEATURE_FORMAT_SUPPORT = 0x2,
	D3D11_FEATURE_FORMAT_SUPPORT2 = 0x3,
	D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 0x4,
};

/* 608 */
enum D3D11_DEPTH_WRITE_MASK
{
	D3D11_DEPTH_WRITE_MASK_ZERO = 0x0,
	D3D11_DEPTH_WRITE_MASK_ALL = 0x1,
};

/* 609 */
enum D3D11_STENCIL_OP
{
	D3D11_STENCIL_OP_KEEP = 0x1,
	D3D11_STENCIL_OP_ZERO = 0x2,
	D3D11_STENCIL_OP_REPLACE = 0x3,
	D3D11_STENCIL_OP_INCR_SAT = 0x4,
	D3D11_STENCIL_OP_DECR_SAT = 0x5,
	D3D11_STENCIL_OP_INVERT = 0x6,
	D3D11_STENCIL_OP_INCR = 0x7,
	D3D11_STENCIL_OP_DECR = 0x8,
};

/* 610 */
typedef D3D10_RESOURCE_RETURN_TYPE D3D_RESOURCE_RETURN_TYPE;

/* 611 */
enum D2D1_LAYER_OPTIONS
{
	D2D1_LAYER_OPTIONS_NONE = 0x0,
	D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 0x1,
	D2D1_LAYER_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 612 */
typedef D3D10_REGISTER_COMPONENT_TYPE D3D_REGISTER_COMPONENT_TYPE;

/* 613 */
enum D3D_TESSELLATOR_DOMAIN
{
	D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
	D3D_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
	D3D_TESSELLATOR_DOMAIN_TRI = 0x2,
	D3D_TESSELLATOR_DOMAIN_QUAD = 0x3,
	D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
	D3D11_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
	D3D11_TESSELLATOR_DOMAIN_TRI = 0x2,
	D3D11_TESSELLATOR_DOMAIN_QUAD = 0x3,
};

/* 614 */
enum D3D_TESSELLATOR_PARTITIONING
{
	D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
	D3D_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
	D3D_TESSELLATOR_PARTITIONING_POW2 = 0x2,
	D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
	D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
	D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
	D3D11_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
	D3D11_TESSELLATOR_PARTITIONING_POW2 = 0x2,
	D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
	D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
};

/* 615 */
enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
{
	D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
	D3D_TESSELLATOR_OUTPUT_POINT = 0x1,
	D3D_TESSELLATOR_OUTPUT_LINE = 0x2,
	D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
	D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
	D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
	D3D11_TESSELLATOR_OUTPUT_POINT = 0x1,
	D3D11_TESSELLATOR_OUTPUT_LINE = 0x2,
	D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
	D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
};

/* 616 */
enum D3D11_BLEND
{
	D3D11_BLEND_ZERO = 0x1,
	D3D11_BLEND_ONE = 0x2,
	D3D11_BLEND_SRC_COLOR = 0x3,
	D3D11_BLEND_INV_SRC_COLOR = 0x4,
	D3D11_BLEND_SRC_ALPHA = 0x5,
	D3D11_BLEND_INV_SRC_ALPHA = 0x6,
	D3D11_BLEND_DEST_ALPHA = 0x7,
	D3D11_BLEND_INV_DEST_ALPHA = 0x8,
	D3D11_BLEND_DEST_COLOR = 0x9,
	D3D11_BLEND_INV_DEST_COLOR = 0xA,
	D3D11_BLEND_SRC_ALPHA_SAT = 0xB,
	D3D11_BLEND_BLEND_FACTOR = 0xE,
	D3D11_BLEND_INV_BLEND_FACTOR = 0xF,
	D3D11_BLEND_SRC1_COLOR = 0x10,
	D3D11_BLEND_INV_SRC1_COLOR = 0x11,
	D3D11_BLEND_SRC1_ALPHA = 0x12,
	D3D11_BLEND_INV_SRC1_ALPHA = 0x13,
};

/* 617 */
enum D3D10_FEATURE_LEVEL1
{
	D3D10_FEATURE_LEVEL_10_0 = 0xA000,
	D3D10_FEATURE_LEVEL_10_1 = 0xA100,
	D3D10_FEATURE_LEVEL_9_1 = 0x9100,
	D3D10_FEATURE_LEVEL_9_2 = 0x9200,
	D3D10_FEATURE_LEVEL_9_3 = 0x9300,
};

/* 618 */
enum D3D11_BLEND_OP
{
	D3D11_BLEND_OP_ADD = 0x1,
	D3D11_BLEND_OP_SUBTRACT = 0x2,
	D3D11_BLEND_OP_REV_SUBTRACT = 0x3,
	D3D11_BLEND_OP_MIN = 0x4,
	D3D11_BLEND_OP_MAX = 0x5,
};

/* 619 */
enum D3D11_COLOR_WRITE_ENABLE
{
	D3D11_COLOR_WRITE_ENABLE_RED = 0x1,
	D3D11_COLOR_WRITE_ENABLE_GREEN = 0x2,
	D3D11_COLOR_WRITE_ENABLE_BLUE = 0x4,
	D3D11_COLOR_WRITE_ENABLE_ALPHA = 0x8,
	D3D11_COLOR_WRITE_ENABLE_ALL = 0xF,
};

/* 620 */
enum DWRITE_MEASURING_MODE
{
	DWRITE_MEASURING_MODE_NATURAL = 0x0,
	DWRITE_MEASURING_MODE_GDI_CLASSIC = 0x1,
	DWRITE_MEASURING_MODE_GDI_NATURAL = 0x2,
};

/* 621 */
enum vc_attributes::YesNoMaybe
{
	No = 0xFFF0001,
	Maybe = 0xFFF0010,
	Yes = 0xFFF0100,
};

/* 622 */
enum vc_attributes::AccessType
{
	NoAccess = 0x0,
	Read = 0x1,
	Write = 0x2,
	ReadWrite = 0x3,
};

/* 623 */
enum D2D1_RENDER_TARGET_TYPE
{
	D2D1_RENDER_TARGET_TYPE_DEFAULT = 0x0,
	D2D1_RENDER_TARGET_TYPE_SOFTWARE = 0x1,
	D2D1_RENDER_TARGET_TYPE_HARDWARE = 0x2,
	D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 624 */
enum D2D1_FEATURE_LEVEL
{
	D2D1_FEATURE_LEVEL_DEFAULT = 0x0,
	D2D1_FEATURE_LEVEL_9 = 0x9100,
	D2D1_FEATURE_LEVEL_10 = 0xA000,
	D2D1_FEATURE_LEVEL_FORCE_DWORD = 0xFFFFFFFF,
};

/* 625 */
enum D2D1_RENDER_TARGET_USAGE
{
	D2D1_RENDER_TARGET_USAGE_NONE = 0x0,
	D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 0x1,
	D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 0x2,
	D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 626 */
enum D2D1_PRESENT_OPTIONS
{
	D2D1_PRESENT_OPTIONS_NONE = 0x0,
	D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 0x1,
	D2D1_PRESENT_OPTIONS_IMMEDIATELY = 0x2,
	D2D1_PRESENT_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 627 */
enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS
{
	D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0x0,
	D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 0x1,
	D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 628 */
enum _D3DXERR
{
	D3DXERR_CANNOTMODIFYINDEXBUFFER = 0x88760B54,
	D3DXERR_INVALIDMESH = 0x88760B55,
	D3DXERR_CANNOTATTRSORT = 0x88760B56,
	D3DXERR_SKINNINGNOTSUPPORTED = 0x88760B57,
	D3DXERR_TOOMANYINFLUENCES = 0x88760B58,
	D3DXERR_INVALIDDATA = 0x88760B59,
	D3DXERR_LOADEDMESHASNODATA = 0x88760B5A,
	D3DXERR_DUPLICATENAMEDFRAGMENT = 0x88760B5B,
	D3DXERR_CANNOTREMOVELASTITEM = 0x88760B5C,
};

/* 629 */
enum D3D_DRIVER_TYPE
{
	D3D_DRIVER_TYPE_UNKNOWN = 0x0,
	D3D_DRIVER_TYPE_HARDWARE = 0x1,
	D3D_DRIVER_TYPE_REFERENCE = 0x2,
	D3D_DRIVER_TYPE_NULL = 0x3,
	D3D_DRIVER_TYPE_SOFTWARE = 0x4,
	D3D_DRIVER_TYPE_WARP = 0x5,
};

/* 630 */
typedef D3D10_PRIMITIVE_TOPOLOGY D3D_PRIMITIVE_TOPOLOGY;

/* 631 */
enum D3D11_FILTER
{
	D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
	D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	D3D11_FILTER_ANISOTROPIC = 0x55,
	D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xD5,
};

/* 632 */
typedef D3D10_PRIMITIVE D3D_PRIMITIVE;

/* 633 */
enum D3D11_TEXTURE_ADDRESS_MODE
{
	D3D11_TEXTURE_ADDRESS_WRAP = 0x1,
	D3D11_TEXTURE_ADDRESS_MIRROR = 0x2,
	D3D11_TEXTURE_ADDRESS_CLAMP = 0x3,
	D3D11_TEXTURE_ADDRESS_BORDER = 0x4,
	D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 0x5,
};

/* 634 */
enum DWRITE_FONT_FEATURE_TAG
{
	DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = 0x63726661,
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = 0x63703263,
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = 0x63733263,
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = 0x746C6163,
	DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = 0x65736163,
	DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = 0x706D6363,
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = 0x67696C63,
	DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = 0x70737063,
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = 0x68777363,
	DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = 0x73727563,
	DWRITE_FONT_FEATURE_TAG_DEFAULT = 0x746C6664,
	DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = 0x67696C64,
	DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = 0x74707865,
	DWRITE_FONT_FEATURE_TAG_FRACTIONS = 0x63617266,
	DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = 0x64697766,
	DWRITE_FONT_FEATURE_TAG_HALF_FORMS = 0x666C6168,
	DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = 0x6E6C6168,
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = 0x746C6168,
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = 0x74736968,
	DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = 0x616E6B68,
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = 0x67696C68,
	DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = 0x64697768,
	DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = 0x6F6A6F68,
	DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = 0x3430706A,
	DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = 0x3837706A,
	DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = 0x3338706A,
	DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = 0x3039706A,
	DWRITE_FONT_FEATURE_TAG_KERNING = 0x6E72656B,
	DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = 0x6167696C,
	DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = 0x6D756E6C,
	DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = 0x6C636F6C,
	DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = 0x6B72616D,
	DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = 0x6B72676D,
	DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = 0x6B6D6B6D,
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = 0x746C616E,
	DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = 0x6B636C6E,
	DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = 0x6D756E6F,
	DWRITE_FONT_FEATURE_TAG_ORDINALS = 0x6E64726F,
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = 0x746C6170,
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = 0x70616370,
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = 0x6D756E70,
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = 0x64697770,
	DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = 0x64697771,
	DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = 0x67696C72,
	DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = 0x79627572,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = 0x746C6173,
	DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = 0x666E6973,
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = 0x70636D73,
	DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = 0x6C706D73,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = 0x31307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = 0x32307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = 0x33307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = 0x34307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = 0x35307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = 0x36307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = 0x37307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = 0x38307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = 0x39307373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = 0x30317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = 0x31317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = 0x32317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = 0x33317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = 0x34317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = 0x35317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = 0x36317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = 0x37317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = 0x38317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = 0x39317373,
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = 0x30327373,
	DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = 0x73627573,
	DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = 0x73707573,
	DWRITE_FONT_FEATURE_TAG_SWASH = 0x68737773,
	DWRITE_FONT_FEATURE_TAG_TITLING = 0x6C746974,
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = 0x6D616E74,
	DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = 0x6D756E74,
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = 0x64617274,
	DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = 0x64697774,
	DWRITE_FONT_FEATURE_TAG_UNICASE = 0x63696E75,
	DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = 0x6F72657A,
};

/* 635 */
enum DWRITE_READING_DIRECTION
{
	DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0x0,
	DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 0x1,
};

/* 636 */
enum DWRITE_FLOW_DIRECTION
{
	DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0x0,
};

/* 637 */
enum D2D1_FILL_MODE
{
	D2D1_FILL_MODE_ALTERNATE = 0x0,
	D2D1_FILL_MODE_WINDING = 0x1,
	D2D1_FILL_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 638 */
enum D2D1_PATH_SEGMENT
{
	D2D1_PATH_SEGMENT_NONE = 0x0,
	D2D1_PATH_SEGMENT_FORCE_UNSTROKED = 0x1,
	D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN = 0x2,
	D2D1_PATH_SEGMENT_FORCE_DWORD = 0xFFFFFFFF,
};

/* 639 */
enum D2D1_FIGURE_BEGIN
{
	D2D1_FIGURE_BEGIN_FILLED = 0x0,
	D2D1_FIGURE_BEGIN_HOLLOW = 0x1,
	D2D1_FIGURE_BEGIN_FORCE_DWORD = 0xFFFFFFFF,
};

/* 640 */
enum D2D1_FIGURE_END
{
	D2D1_FIGURE_END_OPEN = 0x0,
	D2D1_FIGURE_END_CLOSED = 0x1,
	D2D1_FIGURE_END_FORCE_DWORD = 0xFFFFFFFF,
};

/* 641 */
enum DWRITE_FONT_WEIGHT
{
	DWRITE_FONT_WEIGHT_THIN = 0x64,
	DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 0xC8,
	DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 0xC8,
	DWRITE_FONT_WEIGHT_LIGHT = 0x12C,
	DWRITE_FONT_WEIGHT_NORMAL = 0x190,
	DWRITE_FONT_WEIGHT_REGULAR = 0x190,
	DWRITE_FONT_WEIGHT_MEDIUM = 0x1F4,
	DWRITE_FONT_WEIGHT_DEMI_BOLD = 0x258,
	DWRITE_FONT_WEIGHT_SEMI_BOLD = 0x258,
	DWRITE_FONT_WEIGHT_BOLD = 0x2BC,
	DWRITE_FONT_WEIGHT_EXTRA_BOLD = 0x320,
	DWRITE_FONT_WEIGHT_ULTRA_BOLD = 0x320,
	DWRITE_FONT_WEIGHT_BLACK = 0x384,
	DWRITE_FONT_WEIGHT_HEAVY = 0x384,
	DWRITE_FONT_WEIGHT_EXTRA_BLACK = 0x3B6,
	DWRITE_FONT_WEIGHT_ULTRA_BLACK = 0x3B6,
};

/* 642 */
enum DWRITE_FONT_STRETCH
{
	DWRITE_FONT_STRETCH_UNDEFINED = 0x0,
	DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 0x1,
	DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 0x2,
	DWRITE_FONT_STRETCH_CONDENSED = 0x3,
	DWRITE_FONT_STRETCH_SEMI_CONDENSED = 0x4,
	DWRITE_FONT_STRETCH_NORMAL = 0x5,
	DWRITE_FONT_STRETCH_MEDIUM = 0x5,
	DWRITE_FONT_STRETCH_SEMI_EXPANDED = 0x6,
	DWRITE_FONT_STRETCH_EXPANDED = 0x7,
	DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 0x8,
	DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 0x9,
};

/* 643 */
enum DWRITE_FONT_STYLE
{
	DWRITE_FONT_STYLE_NORMAL = 0x0,
	DWRITE_FONT_STYLE_OBLIQUE = 0x1,
	DWRITE_FONT_STYLE_ITALIC = 0x2,
};

/* 644 */
enum DWRITE_INFORMATIONAL_STRING_ID
{
	DWRITE_INFORMATIONAL_STRING_NONE = 0x0,
	DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 0x1,
	DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 0x2,
	DWRITE_INFORMATIONAL_STRING_TRADEMARK = 0x3,
	DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 0x4,
	DWRITE_INFORMATIONAL_STRING_DESIGNER = 0x5,
	DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 0x6,
	DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 0x7,
	DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 0x8,
	DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 0x9,
	DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 0xA,
	DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 0xB,
	DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 0xC,
	DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 0xD,
	DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 0xE,
	DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 0xF,
};

/* 645 */
enum DWRITE_FONT_SIMULATIONS
{
	DWRITE_FONT_SIMULATIONS_NONE = 0x0,
	DWRITE_FONT_SIMULATIONS_BOLD = 0x1,
	DWRITE_FONT_SIMULATIONS_OBLIQUE = 0x2,
};

/* 646 */
enum D3D11_COUNTER
{
	D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};

/* 647 */
enum DWRITE_FONT_FILE_TYPE
{
	DWRITE_FONT_FILE_TYPE_UNKNOWN = 0x0,
	DWRITE_FONT_FILE_TYPE_CFF = 0x1,
	DWRITE_FONT_FILE_TYPE_TRUETYPE = 0x2,
	DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 0x3,
	DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 0x4,
	DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 0x5,
	DWRITE_FONT_FILE_TYPE_VECTOR = 0x6,
	DWRITE_FONT_FILE_TYPE_BITMAP = 0x7,
};

/* 648 */
enum DWRITE_FONT_FACE_TYPE
{
	DWRITE_FONT_FACE_TYPE_CFF = 0x0,
	DWRITE_FONT_FACE_TYPE_TRUETYPE = 0x1,
	DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 0x2,
	DWRITE_FONT_FACE_TYPE_TYPE1 = 0x3,
	DWRITE_FONT_FACE_TYPE_VECTOR = 0x4,
	DWRITE_FONT_FACE_TYPE_BITMAP = 0x5,
	DWRITE_FONT_FACE_TYPE_UNKNOWN = 0x6,
};

/* 649 */
enum D3D11_MAP
{
	D3D11_MAP_READ = 0x1,
	D3D11_MAP_WRITE = 0x2,
	D3D11_MAP_READ_WRITE = 0x3,
	D3D11_MAP_WRITE_DISCARD = 0x4,
	D3D11_MAP_WRITE_NO_OVERWRITE = 0x5,
};

/* 650 */
enum D3D11_DEVICE_CONTEXT_TYPE
{
	D3D11_DEVICE_CONTEXT_IMMEDIATE = 0x0,
	D3D11_DEVICE_CONTEXT_DEFERRED = 0x1,
};

/* 651 */
enum XAUDIO2_DEVICE_ROLE
{
	NotDefaultDevice = 0x0,
	DefaultConsoleDevice = 0x1,
	DefaultMultimediaDevice = 0x2,
	DefaultCommunicationsDevice = 0x4,
	DefaultGameDevice = 0x8,
	GlobalDefaultDevice = 0xF,
	InvalidDeviceRole = 0xFFFFFFF0,
};

/* 652 */
enum XAUDIO2_FILTER_TYPE
{
	LowPassFilter = 0x0,
	BandPassFilter = 0x1,
	HighPassFilter = 0x2,
	NotchFilter = 0x3,
};

/* 653 */
enum D2D1::ColorF::Enum
{
	AliceBlue = 0xF0F8FF,
	AntiqueWhite = 0xFAEBD7,
	Aqua = 0xFFFF,
	Aquamarine = 0x7FFFD4,
	Azure = 0xF0FFFF,
	Beige = 0xF5F5DC,
	Bisque = 0xFFE4C4,
	Black = 0x0,
	BlanchedAlmond = 0xFFEBCD,
	Blue = 0xFF,
	BlueViolet = 0x8A2BE2,
	Brown = 0xA52A2A,
	BurlyWood = 0xDEB887,
	CadetBlue = 0x5F9EA0,
	Chartreuse = 0x7FFF00,
	Chocolate = 0xD2691E,
	Coral = 0xFF7F50,
	CornflowerBlue = 0x6495ED,
	Cornsilk = 0xFFF8DC,
	Crimson = 0xDC143C,
	Cyan = 0xFFFF,
	DarkBlue = 0x8B,
	DarkCyan = 0x8B8B,
	DarkGoldenrod = 0xB8860B,
	DarkGray = 0xA9A9A9,
	DarkGreen = 0x6400,
	DarkKhaki = 0xBDB76B,
	DarkMagenta = 0x8B008B,
	DarkOliveGreen = 0x556B2F,
	DarkOrange = 0xFF8C00,
	DarkOrchid = 0x9932CC,
	DarkRed = 0x8B0000,
	DarkSalmon = 0xE9967A,
	DarkSeaGreen = 0x8FBC8F,
	DarkSlateBlue = 0x483D8B,
	DarkSlateGray = 0x2F4F4F,
	DarkTurquoise = 0xCED1,
	DarkViolet = 0x9400D3,
	DeepPink = 0xFF1493,
	DeepSkyBlue = 0xBFFF,
	DimGray = 0x696969,
	DodgerBlue = 0x1E90FF,
	Firebrick = 0xB22222,
	FloralWhite = 0xFFFAF0,
	ForestGreen = 0x228B22,
	Fuchsia = 0xFF00FF,
	Gainsboro = 0xDCDCDC,
	GhostWhite = 0xF8F8FF,
	Gold = 0xFFD700,
	Goldenrod = 0xDAA520,
	Gray = 0x808080,
	Green = 0x8000,
	GreenYellow = 0xADFF2F,
	Honeydew = 0xF0FFF0,
	HotPink = 0xFF69B4,
	IndianRed = 0xCD5C5C,
	Indigo = 0x4B0082,
	Ivory = 0xFFFFF0,
	Khaki = 0xF0E68C,
	Lavender = 0xE6E6FA,
	LavenderBlush = 0xFFF0F5,
	LawnGreen = 0x7CFC00,
	LemonChiffon = 0xFFFACD,
	LightBlue = 0xADD8E6,
	LightCoral = 0xF08080,
	LightCyan = 0xE0FFFF,
	LightGoldenrodYellow = 0xFAFAD2,
	LightGreen = 0x90EE90,
	LightGray = 0xD3D3D3,
	LightPink = 0xFFB6C1,
	LightSalmon = 0xFFA07A,
	LightSeaGreen = 0x20B2AA,
	LightSkyBlue = 0x87CEFA,
	LightSlateGray = 0x778899,
	LightSteelBlue = 0xB0C4DE,
	LightYellow = 0xFFFFE0,
	Lime = 0xFF00,
	LimeGreen = 0x32CD32,
	Linen = 0xFAF0E6,
	Magenta = 0xFF00FF,
	Maroon = 0x800000,
	MediumAquamarine = 0x66CDAA,
	MediumBlue = 0xCD,
	MediumOrchid = 0xBA55D3,
	MediumPurple = 0x9370DB,
	MediumSeaGreen = 0x3CB371,
	MediumSlateBlue = 0x7B68EE,
	MediumSpringGreen = 0xFA9A,
	MediumTurquoise = 0x48D1CC,
	MediumVioletRed = 0xC71585,
	MidnightBlue = 0x191970,
	MintCream = 0xF5FFFA,
	MistyRose = 0xFFE4E1,
	Moccasin = 0xFFE4B5,
	NavajoWhite = 0xFFDEAD,
	Navy = 0x80,
	OldLace = 0xFDF5E6,
	Olive = 0x808000,
	OliveDrab = 0x6B8E23,
	Orange = 0xFFA500,
	OrangeRed = 0xFF4500,
	Orchid = 0xDA70D6,
	PaleGoldenrod = 0xEEE8AA,
	PaleGreen = 0x98FB98,
	PaleTurquoise = 0xAFEEEE,
	PaleVioletRed = 0xDB7093,
	PapayaWhip = 0xFFEFD5,
	PeachPuff = 0xFFDAB9,
	Peru = 0xCD853F,
	Pink = 0xFFC0CB,
	Plum = 0xDDA0DD,
	PowderBlue = 0xB0E0E6,
	Purple = 0x800080,
	Red = 0xFF0000,
	RosyBrown = 0xBC8F8F,
	RoyalBlue = 0x4169E1,
	SaddleBrown = 0x8B4513,
	Salmon = 0xFA8072,
	SandyBrown = 0xF4A460,
	SeaGreen = 0x2E8B57,
	SeaShell = 0xFFF5EE,
	Sienna = 0xA0522D,
	Silver = 0xC0C0C0,
	SkyBlue = 0x87CEEB,
	SlateBlue = 0x6A5ACD,
	SlateGray = 0x708090,
	Snow = 0xFFFAFA,
	SpringGreen = 0xFF7F,
	SteelBlue = 0x4682B4,
	Tan = 0xD2B48C,
	Teal = 0x8080,
	Thistle = 0xD8BFD8,
	Tomato = 0xFF6347,
	Turquoise = 0x40E0D0,
	Violet = 0xEE82EE,
	Wheat = 0xF5DEB3,
	White = 0xFFFFFF,
	WhiteSmoke = 0xF5F5F5,
	Yellow = 0xFFFF00,
	YellowGreen = 0x9ACD32,
};

/* 654 */
enum D3D11_INPUT_CLASSIFICATION
{
	D3D11_INPUT_PER_VERTEX_DATA = 0x0,
	D3D11_INPUT_PER_INSTANCE_DATA = 0x1,
};

/* 655 */
enum DWRITE_RENDERING_MODE
{
	DWRITE_RENDERING_MODE_DEFAULT = 0x0,
	DWRITE_RENDERING_MODE_ALIASED = 0x1,
	DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = 0x2,
	DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = 0x3,
	DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = 0x4,
	DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 0x5,
	DWRITE_RENDERING_MODE_OUTLINE = 0x6,
};

/* 656 */
enum DWRITE_TEXT_ALIGNMENT
{
	DWRITE_TEXT_ALIGNMENT_LEADING = 0x0,
	DWRITE_TEXT_ALIGNMENT_TRAILING = 0x1,
	DWRITE_TEXT_ALIGNMENT_CENTER = 0x2,
};

/* 657 */
enum DWRITE_PARAGRAPH_ALIGNMENT
{
	DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0x0,
	DWRITE_PARAGRAPH_ALIGNMENT_FAR = 0x1,
	DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 0x2,
};

/* 658 */
enum DWRITE_WORD_WRAPPING
{
	DWRITE_WORD_WRAPPING_WRAP = 0x0,
	DWRITE_WORD_WRAPPING_NO_WRAP = 0x1,
};

/* 659 */
enum DWRITE_LINE_SPACING_METHOD
{
	DWRITE_LINE_SPACING_METHOD_DEFAULT = 0x0,
	DWRITE_LINE_SPACING_METHOD_UNIFORM = 0x1,
};

/* 660 */
enum D3D10_MESSAGE_SEVERITY
{
	D3D10_MESSAGE_SEVERITY_CORRUPTION = 0x0,
	D3D10_MESSAGE_SEVERITY_ERROR = 0x1,
	D3D10_MESSAGE_SEVERITY_WARNING = 0x2,
	D3D10_MESSAGE_SEVERITY_INFO = 0x3,
};

/* 661 */
enum D3D11_RESOURCE_DIMENSION
{
	D3D11_RESOURCE_DIMENSION_UNKNOWN = 0x0,
	D3D11_RESOURCE_DIMENSION_BUFFER = 0x1,
	D3D11_RESOURCE_DIMENSION_TEXTURE1D = 0x2,
	D3D11_RESOURCE_DIMENSION_TEXTURE2D = 0x3,
	D3D11_RESOURCE_DIMENSION_TEXTURE3D = 0x4,
};

/* 662 */
enum D3DX11_IMAGE_FILE_FORMAT
{
	D3DX11_IFF_BMP = 0x0,
	D3DX11_IFF_JPG = 0x1,
	D3DX11_IFF_PNG = 0x3,
	D3DX11_IFF_DDS = 0x4,
	D3DX11_IFF_TIFF = 0xA,
	D3DX11_IFF_GIF = 0xB,
	D3DX11_IFF_WMP = 0xC,
	D3DX11_IFF_FORCE_DWORD = 0x7FFFFFFF,
};

/* 663 */
enum D2D1_WINDOW_STATE
{
	D2D1_WINDOW_STATE_NONE = 0x0,
	D2D1_WINDOW_STATE_OCCLUDED = 0x1,
	D2D1_WINDOW_STATE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 664 */
enum D3D_FEATURE_LEVEL
{
	D3D_FEATURE_LEVEL_9_1 = 0x9100,
	D3D_FEATURE_LEVEL_9_2 = 0x9200,
	D3D_FEATURE_LEVEL_9_3 = 0x9300,
	D3D_FEATURE_LEVEL_10_0 = 0xA000,
	D3D_FEATURE_LEVEL_10_1 = 0xA100,
	D3D_FEATURE_LEVEL_11_0 = 0xB000,
};

/* 665 */
enum DWRITE_TRIMMING_GRANULARITY
{
	DWRITE_TRIMMING_GRANULARITY_NONE = 0x0,
	DWRITE_TRIMMING_GRANULARITY_CHARACTER = 0x1,
	DWRITE_TRIMMING_GRANULARITY_WORD = 0x2,
};

/* 666 */
enum D2D1_GEOMETRY_RELATION
{
	D2D1_GEOMETRY_RELATION_UNKNOWN = 0x0,
	D2D1_GEOMETRY_RELATION_DISJOINT = 0x1,
	D2D1_GEOMETRY_RELATION_IS_CONTAINED = 0x2,
	D2D1_GEOMETRY_RELATION_CONTAINS = 0x3,
	D2D1_GEOMETRY_RELATION_OVERLAP = 0x4,
	D2D1_GEOMETRY_RELATION_FORCE_DWORD = 0xFFFFFFFF,
};

/* 667 */
enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION
{
	D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0x0,
	D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = 0x1,
	D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = 0xFFFFFFFF,
};

/* 668 */
enum D2D1_COMBINE_MODE
{
	D2D1_COMBINE_MODE_UNION = 0x0,
	D2D1_COMBINE_MODE_INTERSECT = 0x1,
	D2D1_COMBINE_MODE_XOR = 0x2,
	D2D1_COMBINE_MODE_EXCLUDE = 0x3,
	D2D1_COMBINE_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 669 */
enum D3DX10_IMAGE_FILE_FORMAT
{
	D3DX10_IFF_BMP = 0x0,
	D3DX10_IFF_JPG = 0x1,
	D3DX10_IFF_PNG = 0x3,
	D3DX10_IFF_DDS = 0x4,
	D3DX10_IFF_TIFF = 0xA,
	D3DX10_IFF_GIF = 0xB,
	D3DX10_IFF_WMP = 0xC,
	D3DX10_IFF_FORCE_DWORD = 0x7FFFFFFF,
};

/* 670 */
enum D2D1_OPACITY_MASK_CONTENT
{
	D2D1_OPACITY_MASK_CONTENT_GRAPHICS = 0x0,
	D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = 0x1,
	D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 0x2,
	D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = 0xFFFFFFFF,
};

/* 671 */
enum D3D11_BIND_FLAG
{
	D3D11_BIND_VERTEX_BUFFER = 0x1,
	D3D11_BIND_INDEX_BUFFER = 0x2,
	D3D11_BIND_CONSTANT_BUFFER = 0x4,
	D3D11_BIND_SHADER_RESOURCE = 0x8,
	D3D11_BIND_STREAM_OUTPUT = 0x10,
	D3D11_BIND_RENDER_TARGET = 0x20,
	D3D11_BIND_DEPTH_STENCIL = 0x40,
	D3D11_BIND_UNORDERED_ACCESS = 0x80,
};

/* 672 */
enum D2D1_DEBUG_LEVEL
{
	D2D1_DEBUG_LEVEL_NONE = 0x0,
	D2D1_DEBUG_LEVEL_ERROR = 0x1,
	D2D1_DEBUG_LEVEL_WARNING = 0x2,
	D2D1_DEBUG_LEVEL_INFORMATION = 0x3,
	D2D1_DEBUG_LEVEL_FORCE_DWORD = 0xFFFFFFFF,
};

/* 673 */
enum DWRITE_PIXEL_GEOMETRY
{
	DWRITE_PIXEL_GEOMETRY_FLAT = 0x0,
	DWRITE_PIXEL_GEOMETRY_RGB = 0x1,
	DWRITE_PIXEL_GEOMETRY_BGR = 0x2,
};

/* 674 */
enum D2D1_SWEEP_DIRECTION
{
	D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0x0,
	D2D1_SWEEP_DIRECTION_CLOCKWISE = 0x1,
	D2D1_SWEEP_DIRECTION_FORCE_DWORD = 0xFFFFFFFF,
};

/* 675 */
enum D2D1_ARC_SIZE
{
	D2D1_ARC_SIZE_SMALL = 0x0,
	D2D1_ARC_SIZE_LARGE = 0x1,
	D2D1_ARC_SIZE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 676 */
enum DWRITE_BREAK_CONDITION
{
	DWRITE_BREAK_CONDITION_NEUTRAL = 0x0,
	DWRITE_BREAK_CONDITION_CAN_BREAK = 0x1,
	DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 0x2,
	DWRITE_BREAK_CONDITION_MUST_BREAK = 0x3,
};

/* 677 */
struct __cppobj std::piecewise_construct_t
{
};

/* 678 */
struct __cppobj std::allocator_arg_t
{
};

/* 679 */
union $DE86D403B28CFDB22944C7C883F19EFF
{
	char Byte[16];
	unsigned __int16 Word[8];
};

/* 680 */
struct in6_addr
{
	$DE86D403B28CFDB22944C7C883F19EFF u;
};

/* 681 */
struct __cppobj std::locale::id
{
	unsigned int _Id;
};

/* 682 */
struct $983F061E0B702DD8AE0B4B955735A6A3
{
	unsigned int Lo;
	int Hi;
};

/* 683 */
union tagCY
{
	$983F061E0B702DD8AE0B4B955735A6A3 __s0;
	__int64 int64;
};

/* 684 */
const struct _GUID
{
	unsigned int Data1;
	unsigned __int16 Data2;
	unsigned __int16 Data3;
	char Data4[8];
};

/* 685 */
struct __cppobj IUnknown
{
	IUnknownVtbl *vfptr;
};

/* 8947 */
typedef int HRESULT;

/* 686 */
struct IUnknownVtbl
{
	HRESULT (__stdcall *QueryInterface)(IUnknown *this, _GUID *, void **);
	unsigned int (__stdcall *AddRef)(IUnknown *this);
	unsigned int (__stdcall *Release)(IUnknown *this);
};

/* 687 */
struct __cppobj IDispatch : IUnknown
{
};

/* 688 */
struct tagSAFEARRAYBOUND
{
	unsigned int cElements;
	int lLbound;
};

/* 689 */
struct tagSAFEARRAY
{
	unsigned __int16 cDims;
	unsigned __int16 fFeatures;
	unsigned int cbElements;
	unsigned int cLocks;
	void *pvData;
	tagSAFEARRAYBOUND rgsabound[1];
};

/* 697 */
struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
{
	unsigned __int16 vt;
	unsigned __int16 wReserved1;
	unsigned __int16 wReserved2;
	unsigned __int16 wReserved3;
	__int64 llVal;
};

/* 691 */
struct $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA
{
	char scale;
	char sign;
};

/* 692 */
union $2AA55C66293ECC98D55B4F7EA92F82DF
{
	$5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __s0;
	unsigned __int16 signscale;
};

/* 693 */
struct $A04CD8C0331024E133CCEC4B0AB36956
{
	unsigned int Lo32;
	unsigned int Mid32;
};

/* 694 */
union $6F6662C8A3D0B6B0EFDFA996026781CD
{
	$A04CD8C0331024E133CCEC4B0AB36956 __s0;
	unsigned __int64 Lo64;
};

/* 695 */
struct tagDEC
{
	unsigned __int16 wReserved;
	$2AA55C66293ECC98D55B4F7EA92F82DF ___u1;
	unsigned int Hi32;
	$6F6662C8A3D0B6B0EFDFA996026781CD ___u3;
};

/* 698 */
struct $5AB8CE0B59B09EC128A927EB80EFCBDC
{
	_BYTE gap0[8];
	int lVal;
	IRecordInfo *pRecInfo;
};

/* 699 */
struct $F28A51B4B40B0D33C72915D739D42B4B
{
	_BYTE gap0[8];
	char bVal;
};

/* 700 */
struct $31126B8528A05AF3606C6D495FD178E8
{
	_BYTE gap0[8];
	__int16 iVal;
};

/* 701 */
struct $50230A970D9734D4E9774CFC619DF0F6
{
	_BYTE gap0[8];
	float fltVal;
};

/* 702 */
struct $4C0EC2258454B893CE739DAE89D8DB7B
{
	_BYTE gap0[8];
	long double dblVal;
};

/* 703 */
struct $6DB36323059316E675433BB10D285009
{
	_BYTE gap0[8];
	__int16 boolVal;
};

/* 704 */
struct $8E3C8731874D1B3BC66617C4DD3163A6
{
	_BYTE gap0[8];
	int scode;
};

/* 705 */
struct $55C861914D3B618EF4D1826B85635B40
{
	_BYTE gap0[8];
	tagCY cyVal;
};

/* 706 */
struct $E94952165EEA9EEA990FEB33603E1B19
{
	_BYTE gap0[8];
	long double date;
};

/* 8675 */
typedef unsigned __int16 wchar_t;

/* 707 */
struct $7B1C2AA558A72DB3909F7F0B6C8C78B2
{
	_BYTE gap0[8];
	wchar_t *bstrVal;
};

/* 708 */
struct $B5FC3BE2CD693F4224822296CDE54E94
{
	_BYTE gap0[8];
	IUnknown *punkVal;
};

/* 709 */
struct $A6D453B82705B1818A1C8182EB1DDF88
{
	_BYTE gap0[8];
	IDispatch *pdispVal;
};

/* 710 */
struct $9EE3DF5DB614B3EEBDEA9CB174F7C679
{
	_BYTE gap0[8];
	tagSAFEARRAY *parray;
};

/* 711 */
struct $166B1F81F6EA96F97683A65F38FB1A59
{
	_BYTE gap0[8];
	char *pbVal;
};

/* 712 */
struct $76732A64405C0E287FCB302687644550
{
	_BYTE gap0[8];
	__int16 *piVal;
};

/* 713 */
struct $E5FC128E66C26C95254032BA69D36E74
{
	_BYTE gap0[8];
	int *plVal;
};

/* 714 */
struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
{
	_BYTE gap0[8];
	__int64 *pllVal;
};

/* 715 */
struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
{
	_BYTE gap0[8];
	float *pfltVal;
};

/* 716 */
struct $2CABE618CF1C2625A4479554E4967E0A
{
	_BYTE gap0[8];
	long double *pdblVal;
};

/* 717 */
struct $AAA92DA1D6E1B0E8462F69216B62027C
{
	_BYTE gap0[8];
	__int16 *pboolVal;
};

/* 718 */
struct $F7167AE7A8ABA03C094C204FB1564A28
{
	_BYTE gap0[8];
	int *pscode;
};

/* 719 */
struct $C875091070903F77AB16B70E97A907D8
{
	_BYTE gap0[8];
	tagCY *pcyVal;
};

/* 720 */
struct $6857AE69DB7C952EEFD665431A7B503A
{
	_BYTE gap0[8];
	long double *pdate;
};

/* 721 */
struct $BE56ADCB97A5F80C4E840DC3FCEE04D4
{
	_BYTE gap0[8];
	wchar_t **pbstrVal;
};

/* 722 */
struct $8BB4AAF6B07F95EEC25EC1228543B9C9
{
	_BYTE gap0[8];
	IUnknown **ppunkVal;
};

/* 723 */
struct $83DAF18245D7B36FFD7CB4E14CD4A8F8
{
	_BYTE gap0[8];
	IDispatch **ppdispVal;
};

/* 724 */
struct $EC0E2A783D0F22CFA46980EFB72EF2A0
{
	_BYTE gap0[8];
	tagSAFEARRAY **pparray;
};

/* 725 */
struct $9C1C57ED887411844466B2387745ADBD
{
	_BYTE gap0[8];
	tagVARIANT *pvarVal;
};

/* 726 */
struct $6C39A09D97B880131B2C5BB4943CBB45
{
	_BYTE gap0[8];
	void *byref;
};

/* 727 */
struct $E898A5260D8380431CCAA47FCC291563
{
	_BYTE gap0[8];
	char cVal;
};

/* 728 */
struct $48802A31D3D0701BC13CEF9CEA041E7B
{
	_BYTE gap0[8];
	unsigned __int16 uiVal;
};

/* 729 */
struct $B644145F46FF1F932B106BFA6CC3F6D9
{
	_BYTE gap0[8];
	unsigned int ulVal;
};

/* 730 */
struct $EA00B0D50EAA1933F67C45009B664198
{
	_BYTE gap0[8];
	unsigned __int64 ullVal;
};

/* 731 */
struct $5CA90CF57237397281FB12BFD52C1905
{
	_BYTE gap0[8];
	int intVal;
};

/* 732 */
struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
{
	_BYTE gap0[8];
	unsigned int uintVal;
};

/* 733 */
struct $19BCCFDBEBF83AAB77363BCD282A4AA0
{
	_BYTE gap0[8];
	tagDEC *pdecVal;
};

/* 734 */
struct $E1D71D20C3D01115E20D79FAE9629CE8
{
	_BYTE gap0[8];
	char *pcVal;
};

/* 735 */
struct $5669F5A4AD19EF2CB42A5602080CB0A6
{
	_BYTE gap0[8];
	unsigned __int16 *puiVal;
};

/* 736 */
struct $886F8AE9D7C8B1B861B6CA58D67B682A
{
	_BYTE gap0[8];
	unsigned int *pulVal;
};

/* 737 */
struct $ADBB94A21537A8461C6168A5B871A740
{
	_BYTE gap0[8];
	unsigned __int64 *pullVal;
};

/* 738 */
struct $CDA73A427DD2A30CDA26CA3394C33CF0
{
	_BYTE gap0[8];
	int *pintVal;
};

/* 739 */
struct $2516E53E690D8CC5659AAB7EDC49E664
{
	_BYTE gap0[8];
	unsigned int *puintVal;
};

/* 740 */
struct $17B4421FDC73B39569D8A12F584CB67F
{
	_BYTE gap0[8];
	void *pvRecord;
};

/* 741 */
union $6CDFCA9B152F90EAB1141F26AEA26670
{
	$E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
	tagDEC decVal;
	$5AB8CE0B59B09EC128A927EB80EFCBDC __s2;
	$F28A51B4B40B0D33C72915D739D42B4B __s3;
	$31126B8528A05AF3606C6D495FD178E8 __s4;
	$50230A970D9734D4E9774CFC619DF0F6 __s5;
	$4C0EC2258454B893CE739DAE89D8DB7B __s6;
	$6DB36323059316E675433BB10D285009 __s7;
	$8E3C8731874D1B3BC66617C4DD3163A6 __s8;
	$55C861914D3B618EF4D1826B85635B40 __s9;
	$E94952165EEA9EEA990FEB33603E1B19 __s10;
	$7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
	$B5FC3BE2CD693F4224822296CDE54E94 __s12;
	$A6D453B82705B1818A1C8182EB1DDF88 __s13;
	$9EE3DF5DB614B3EEBDEA9CB174F7C679 __s14;
	$166B1F81F6EA96F97683A65F38FB1A59 __s15;
	$76732A64405C0E287FCB302687644550 __s16;
	$E5FC128E66C26C95254032BA69D36E74 __s17;
	$E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
	$BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
	$2CABE618CF1C2625A4479554E4967E0A __s20;
	$AAA92DA1D6E1B0E8462F69216B62027C __s21;
	$F7167AE7A8ABA03C094C204FB1564A28 __s22;
	$C875091070903F77AB16B70E97A907D8 __s23;
	$6857AE69DB7C952EEFD665431A7B503A __s24;
	$BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
	$8BB4AAF6B07F95EEC25EC1228543B9C9 __s26;
	$83DAF18245D7B36FFD7CB4E14CD4A8F8 __s27;
	$EC0E2A783D0F22CFA46980EFB72EF2A0 __s28;
	$9C1C57ED887411844466B2387745ADBD __s29;
	$6C39A09D97B880131B2C5BB4943CBB45 __s30;
	$E898A5260D8380431CCAA47FCC291563 __s31;
	$48802A31D3D0701BC13CEF9CEA041E7B __s32;
	$B644145F46FF1F932B106BFA6CC3F6D9 __s33;
	$EA00B0D50EAA1933F67C45009B664198 __s34;
	$5CA90CF57237397281FB12BFD52C1905 __s35;
	$E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
	$19BCCFDBEBF83AAB77363BCD282A4AA0 __s37;
	$E1D71D20C3D01115E20D79FAE9629CE8 __s38;
	$5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
	$886F8AE9D7C8B1B861B6CA58D67B682A __s40;
	$ADBB94A21537A8461C6168A5B871A740 __s41;
	$CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
	$2516E53E690D8CC5659AAB7EDC49E664 __s43;
	$17B4421FDC73B39569D8A12F584CB67F __s44;
};

/* 690 */
struct tagVARIANT
{
	$6CDFCA9B152F90EAB1141F26AEA26670 ___u0;
};

/* 696 */
struct __cppobj IRecordInfo : IUnknown
{
};

/* 742 */
struct tagPARAMDESCEX
{
	unsigned int cBytes;
	tagVARIANT varDefaultValue;
};

/* 743 */
struct __declspec(align(4)) tagPARAMDESC
{
	tagPARAMDESCEX *pparamdescex;
	unsigned __int16 wParamFlags;
};

/* 746 */
union $A5DF1FDCF1B2DC4191A1A0645A7EC3F9
{
	tagTYPEDESC *lptdesc;
	tagARRAYDESC *lpadesc;
	unsigned int hreftype;
};

/* 744 */
struct __declspec(align(4)) tagTYPEDESC
{
	$A5DF1FDCF1B2DC4191A1A0645A7EC3F9 ___u0;
	unsigned __int16 vt;
};

/* 745 */
struct __unaligned __declspec(align(4)) tagARRAYDESC
{
	tagTYPEDESC tdescElem;
	unsigned __int16 cDims;
	__declspec(align(4)) tagSAFEARRAYBOUND rgbounds[1];
};

/* 747 */
struct __declspec(align(4)) tagIDLDESC
{
	unsigned int dwReserved;
	unsigned __int16 wIDLFlags;
};

/* 748 */
union $AC9ECE9953459503494D2EE748DE2414
{
	tagIDLDESC idldesc;
	tagPARAMDESC paramdesc;
};

/* 749 */
struct tagELEMDESC
{
	tagTYPEDESC tdesc;
	$AC9ECE9953459503494D2EE748DE2414 ___u1;
};

/* 11240 */
enum tagFUNCKIND
{
	FUNC_VIRTUAL = 0x0,
	FUNC_PUREVIRTUAL = 0x1,
	FUNC_NONVIRTUAL = 0x2,
	FUNC_STATIC = 0x3,
	FUNC_DISPATCH = 0x4,
};

/* 11241 */
enum tagINVOKEKIND
{
	INVOKE_FUNC = 0x1,
	INVOKE_PROPERTYGET = 0x2,
	INVOKE_PROPERTYPUT = 0x4,
	INVOKE_PROPERTYPUTREF = 0x8,
};

/* 11242 */
enum tagCALLCONV
{
	CC_FASTCALL = 0x0,
	CC_CDECL = 0x1,
	CC_MSCPASCAL = 0x2,
	CC_PASCAL = 0x2,
	CC_MACPASCAL = 0x3,
	CC_STDCALL = 0x4,
	CC_FPFASTCALL = 0x5,
	CC_SYSCALL = 0x6,
	CC_MPWCDECL = 0x7,
	CC_MPWPASCAL = 0x8,
	CC_MAX = 0x9,
};

/* 750 */
struct __declspec(align(4)) tagFUNCDESC
{
	int memid;
	int *lprgscode;
	tagELEMDESC *lprgelemdescParam;
	tagFUNCKIND funckind;
	tagINVOKEKIND invkind;
	tagCALLCONV callconv;
	__int16 cParams;
	__int16 cParamsOpt;
	__int16 oVft;
	__int16 cScodes;
	tagELEMDESC elemdescFunc;
	unsigned __int16 wFuncFlags;
};

/* 751 */
union $BF6827C8D2DBF95207A89121AF58D233
{
	unsigned int oInst;
	tagVARIANT *lpvarValue;
};

/* 11243 */
enum tagVARKIND
{
	VAR_PERINSTANCE = 0x0,
	VAR_STATIC = 0x1,
	VAR_CONST = 0x2,
	VAR_DISPATCH = 0x3,
};

/* 752 */
struct tagVARDESC
{
	int memid;
	wchar_t *lpstrSchema;
	$BF6827C8D2DBF95207A89121AF58D233 ___u2;
	tagELEMDESC elemdescVar;
	unsigned __int16 wVarFlags;
	tagVARKIND varkind;
};

/* 753 */
struct __cppobj ITypeComp : IUnknown
{
};

/* 754 */
union tagBINDPTR
{
	tagFUNCDESC *lpfuncdesc;
	tagVARDESC *lpvardesc;
	ITypeComp *lptcomp;
};

/* 755 */
struct sockaddr_storage
{
	unsigned __int16 ss_family;
	char __ss_pad1[6];
	__int64 __ss_align;
	char __ss_pad2[112];
};

/* 756 */
struct _RTL_CRITICAL_SECTION
{
	_RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
	int LockCount;
	int RecursionCount;
	void *OwningThread;
	void *LockSemaphore;
	unsigned int SpinCount;
};

/* 757 */
struct _LIST_ENTRY
{
	_LIST_ENTRY *Flink;
	_LIST_ENTRY *Blink;
};

/* 758 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
	unsigned __int16 Type;
	unsigned __int16 CreatorBackTraceIndex;
	_RTL_CRITICAL_SECTION *CriticalSection;
	_LIST_ENTRY ProcessLocksList;
	unsigned int EntryCount;
	unsigned int ContentionCount;
	unsigned int Flags;
	unsigned __int16 CreatorBackTraceIndexHigh;
	unsigned __int16 SpareWORD;
};

/* 11244 */
enum tagSYSKIND
{
	SYS_WIN16 = 0x0,
	SYS_WIN32 = 0x1,
	SYS_MAC = 0x2,
};

/* 759 */
struct __declspec(align(4)) tagTLIBATTR
{
	_GUID guid;
	unsigned int lcid;
	tagSYSKIND syskind;
	unsigned __int16 wMajorVerNum;
	unsigned __int16 wMinorVerNum;
	unsigned __int16 wLibFlags;
};

/* 760 */
struct tagEXCEPINFO
{
	unsigned __int16 wCode;
	unsigned __int16 wReserved;
	wchar_t *bstrSource;
	wchar_t *bstrDescription;
	wchar_t *bstrHelpFile;
	unsigned int dwHelpContext;
	void *pvReserved;
	HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
	int scode;
};

/* 761 */
struct $B950AFB169DC87688B328897744C612F
{
	unsigned int LowPart;
	unsigned int HighPart;
};

/* 762 */
union _ULARGE_INTEGER
{
	$B950AFB169DC87688B328897744C612F __s0;
	$B950AFB169DC87688B328897744C612F u;
	unsigned __int64 QuadPart;
};

/* 763 */
struct _FILETIME
{
	unsigned int dwLowDateTime;
	unsigned int dwHighDateTime;
};

/* 764 */
struct tagSTATSTG
{
	wchar_t *pwcsName;
	unsigned int type;
	_ULARGE_INTEGER cbSize;
	_FILETIME mtime;
	_FILETIME ctime;
	_FILETIME atime;
	unsigned int grfMode;
	unsigned int grfLocksSupported;
	_GUID clsid;
	unsigned int grfStateBits;
	unsigned int reserved;
};

/* 765 */
struct _TypeDescriptor
{
	const void *pVFTable;
	void *spare;
	char name[];
};

/* 766 */
struct _PMD
{
	int mdisp;
	int pdisp;
	int vdisp;
};

/* 767 */
struct _s__CatchableType
{
	unsigned int properties;
	_TypeDescriptor *pType;
	_PMD thisDisplacement;
	int sizeOrOffset;
	void (__cdecl *copyFunction)(void *);
};

/* 768 */
struct _s__CatchableTypeArray
{
	int nCatchableTypes;
	_s__CatchableType *arrayOfCatchableTypes[];
};

/* 769 */
struct tagCABSTR
{
	unsigned int cElems;
	wchar_t **pElems;
};

/* 770 */
struct tagCACLSID
{
	unsigned int cElems;
	_GUID *pElems;
};

/* 771 */
struct tagCADBL
{
	unsigned int cElems;
	long double *pElems;
};

/* 772 */
struct sockaddr
{
	unsigned __int16 sa_family;
	char sa_data[14];
};

/* 773 */
struct tagLC_ID
{
	unsigned __int16 wLanguage;
	unsigned __int16 wCountry;
	unsigned __int16 wCodePage;
};

/* 774 */
struct $F0551D0CB09E7A078CAEF7CAC43D74C7
{
	char *locale;
	wchar_t *wlocale;
	int *refcount;
	int *wrefcount;
};

/* 775 */
struct lconv
{
	char *decimal_point;
	char *thousands_sep;
	char *grouping;
	char *int_curr_symbol;
	char *currency_symbol;
	char *mon_decimal_point;
	char *mon_thousands_sep;
	char *mon_grouping;
	char *positive_sign;
	char *negative_sign;
	char int_frac_digits;
	char frac_digits;
	char p_cs_precedes;
	char p_sep_by_space;
	char n_cs_precedes;
	char n_sep_by_space;
	char p_sign_posn;
	char n_sign_posn;
	wchar_t *_W_decimal_point;
	wchar_t *_W_thousands_sep;
	wchar_t *_W_int_curr_symbol;
	wchar_t *_W_currency_symbol;
	wchar_t *_W_mon_decimal_point;
	wchar_t *_W_mon_thousands_sep;
	wchar_t *_W_positive_sign;
	wchar_t *_W_negative_sign;
};

/* 776 */
struct __lc_time_data
{
	char *wday_abbr[7];
	char *wday[7];
	char *month_abbr[12];
	char *month[12];
	char *ampm[2];
	char *ww_sdatefmt;
	char *ww_ldatefmt;
	char *ww_timefmt;
	int ww_caltype;
	int refcount;
	wchar_t *_W_wday_abbr[7];
	wchar_t *_W_wday[7];
	wchar_t *_W_month_abbr[12];
	wchar_t *_W_month[12];
	wchar_t *_W_ampm[2];
	wchar_t *_W_ww_sdatefmt;
	wchar_t *_W_ww_ldatefmt;
	wchar_t *_W_ww_timefmt;
	wchar_t *_W_ww_locale_name;
};

/* 777 */
struct threadlocaleinfostruct
{
	int refcount;
	unsigned int lc_codepage;
	unsigned int lc_collate_cp;
	unsigned int lc_handle[6];
	tagLC_ID lc_id[6];
	$F0551D0CB09E7A078CAEF7CAC43D74C7 lc_category[6];
	int lc_clike;
	int mb_cur_max;
	int *lconv_intl_refcount;
	int *lconv_num_refcount;
	int *lconv_mon_refcount;
	lconv *lconv;
	int *ctype1_refcount;
	unsigned __int16 *ctype1;
	const unsigned __int16 *pctype;
	const char *pclmap;
	const char *pcumap;
	__lc_time_data *lc_time_curr;
};

/* 778 */
struct threadmbcinfostruct
{
	int refcount;
	int mbcodepage;
	int ismbcodepage;
	unsigned __int16 mbulinfo[6];
	char mbctype[257];
	char mbcasemap[256];
	const wchar_t *mblocalename;
};

/* 779 */
struct localeinfo_struct
{
	threadlocaleinfostruct *locinfo;
	threadmbcinfostruct *mbcinfo;
};

/* 780 */
struct tagCAUB
{
	unsigned int cElems;
	char *pElems;
};

/* 781 */
struct __cppobj std::_List_node<talk_base::_SendMessage,void *>
{
	std::_List_node<talk_base::_SendMessage,void *> *_Next;
	std::_List_node<talk_base::_SendMessage,void *> *_Prev;
	talk_base::_SendMessage _Myval;
};

/* 783 */
struct __cppobj talk_base::Message
{
	talk_base::MessageHandler *phandler;
	unsigned int message_id;
	talk_base::MessageData *pdata;
	unsigned int ts_sensitive;
};

/* 863 */
struct __cppobj talk_base::_SendMessage
{
	talk_base::Thread *thread;
	talk_base::Message msg;
	bool *ready;
};

/* 796 */
struct __cppobj sigslot::_signal_base_interface
{
	sigslot::_signal_base_interfaceVtbl *vfptr;
};

/* 801 */
struct __cppobj sigslot::single_threaded
{
	sigslot::single_threadedVtbl *vfptr;
};

/* 803 */
struct __cppobj sigslot::_signal_base<sigslot::single_threaded> : sigslot::_signal_base_interface, sigslot::single_threaded
{
};

/* 789 */
struct __cppobj std::_Container_base0
{
};

/* 807 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 808 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base0<sigslot::single_threaded> *,std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> >
{
};

/* 809 */
struct __cppobj std::_List_buy<sigslot::_connection_base0<sigslot::single_threaded> *,std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base0<sigslot::single_threaded> *,std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> > >
{
};

/* 810 */
struct __cppobj std::list<sigslot::_connection_base0<sigslot::single_threaded> *,std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base0<sigslot::single_threaded> *,std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> >
{
};

/* 811 */
struct __cppobj sigslot::_signal_base0<sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base0<sigslot::single_threaded> *,std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> > m_connected_slots;
};

/* 812 */
struct __cppobj sigslot::signal0<sigslot::single_threaded> : sigslot::_signal_base0<sigslot::single_threaded>
{
};

/* 848 */
struct __cppobj talk_base::scoped_ptr<talk_base::SocketServer>
{
	talk_base::SocketServer *ptr;
};

/* 791 */
struct __cppobj std::_List_val<std::_List_simple_types<talk_base::Message> > : std::_Container_base0
{
	std::_List_node<talk_base::Message,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 792 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<talk_base::Message,std::allocator<talk_base::Message> > > : std::_List_val<std::_List_simple_types<talk_base::Message> >
{
};

/* 793 */
struct __cppobj std::_List_buy<talk_base::Message,std::allocator<talk_base::Message> > : std::_List_alloc<0,std::_List_base_types<talk_base::Message,std::allocator<talk_base::Message> > >
{
};

/* 794 */
struct __cppobj std::list<talk_base::Message,std::allocator<talk_base::Message> > : std::_List_buy<talk_base::Message,std::allocator<talk_base::Message> >
{
};

/* 850 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::DelayedMessage> > : std::_Container_base0
{
	talk_base::DelayedMessage *_Myfirst;
	talk_base::DelayedMessage *_Mylast;
	talk_base::DelayedMessage *_Myend;
};

/* 851 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::DelayedMessage,std::allocator<talk_base::DelayedMessage> > > : std::_Vector_val<std::_Simple_types<talk_base::DelayedMessage> >
{
};

/* 852 */
struct __cppobj std::vector<talk_base::DelayedMessage,std::allocator<talk_base::DelayedMessage> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::DelayedMessage,std::allocator<talk_base::DelayedMessage> > >
{
};

/* 853 */
struct __cppobj std::binary_function<talk_base::DelayedMessage,talk_base::DelayedMessage,bool>
{
};

/* 854 */
struct __cppobj std::less<talk_base::DelayedMessage> : std::binary_function<talk_base::DelayedMessage,talk_base::DelayedMessage,bool>
{
};

/* 855 */
struct __cppobj __declspec(align(4)) std::priority_queue<talk_base::DelayedMessage,std::vector<talk_base::DelayedMessage,std::allocator<talk_base::DelayedMessage> >,std::less<talk_base::DelayedMessage> >
{
	std::vector<talk_base::DelayedMessage,std::allocator<talk_base::DelayedMessage> > c;
	std::less<talk_base::DelayedMessage> comp;
};

/* 856 */
struct __cppobj talk_base::MessageQueue::PriorityQueue : std::priority_queue<talk_base::DelayedMessage,std::vector<talk_base::DelayedMessage,std::allocator<talk_base::DelayedMessage> >,std::less<talk_base::DelayedMessage> >
{
};

/* 857 */
struct __cppobj talk_base::CriticalSection
{
	_RTL_CRITICAL_SECTION crit_;
};

/* 782 */
struct __cppobj talk_base::MessageQueue
{
	talk_base::MessageQueueVtbl *vfptr;
	sigslot::signal0<sigslot::single_threaded> SignalQueueDestroyed;
	talk_base::SocketServer *ss_;
	talk_base::scoped_ptr<talk_base::SocketServer> default_ss_;
	bool fStop_;
	bool fPeekKeep_;
	talk_base::Message msgPeek_;
	bool active_;
	std::list<talk_base::Message,std::allocator<talk_base::Message> > msgq_;
	talk_base::MessageQueue::PriorityQueue dmsgq_;
	unsigned int dmsgq_next_num_;
	talk_base::CriticalSection crit_;
};

/* 858 */
struct __cppobj std::_List_val<std::_List_simple_types<talk_base::_SendMessage> > : std::_Container_base0
{
	std::_List_node<talk_base::_SendMessage,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 859 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<talk_base::_SendMessage,std::allocator<talk_base::_SendMessage> > > : std::_List_val<std::_List_simple_types<talk_base::_SendMessage> >
{
};

/* 860 */
struct __cppobj std::_List_buy<talk_base::_SendMessage,std::allocator<talk_base::_SendMessage> > : std::_List_alloc<0,std::_List_base_types<talk_base::_SendMessage,std::allocator<talk_base::_SendMessage> > >
{
};

/* 861 */
struct __cppobj std::list<talk_base::_SendMessage,std::allocator<talk_base::_SendMessage> > : std::_List_buy<talk_base::_SendMessage,std::allocator<talk_base::_SendMessage> >
{
};

/* 815 */
union std::_String_val<std::_Simple_types<char> >::_Bxty
{
	char _Buf[16];
	char *_Ptr;
	char _Alias[16];
};

/* 816 */
struct __cppobj std::_String_val<std::_Simple_types<char> > : std::_Container_base0
{
	std::_String_val<std::_Simple_types<char> >::_Bxty _Bx;
	unsigned int _Mysize;
	unsigned int _Myres;
};

/* 817 */
struct __cppobj std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > > : std::_String_val<std::_Simple_types<char> >
{
};

/* 818 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> > : std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
{
};

/* 862 */
struct __cppobj __declspec(align(4)) talk_base::Thread : talk_base::MessageQueue
{
	std::list<talk_base::_SendMessage,std::allocator<talk_base::_SendMessage> > sendlist_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name_;
	talk_base::ThreadPriority priority_;
	bool started_;
	bool has_sends_;
	void *thread_;
	unsigned int thread_id_;
	bool owned_;
	bool delete_self_when_complete_;
};

/* 784 */
struct __cppobj talk_base::MessageHandler
{
	talk_base::MessageHandlerVtbl *vfptr;
};

/* 787 */
struct __cppobj talk_base::MessageData
{
	talk_base::MessageDataVtbl *vfptr;
};

/* 795 */
struct talk_base::MessageQueueVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::MessageQueue *this, unsigned int);
	_BYTE gap4[4];
	bool (__thiscall *IsQuitting)(talk_base::MessageQueue *this);
	void (__thiscall *Restart)(talk_base::MessageQueue *this);
	bool (__thiscall *Get)(talk_base::MessageQueue *this, talk_base::Message *, int, bool);
	bool (__thiscall *Peek)(talk_base::MessageQueue *this, talk_base::Message *, int);
	void (__thiscall *Post)(talk_base::MessageQueue *this, talk_base::MessageHandler *, unsigned int, talk_base::MessageData *, bool);
	void (__thiscall *PostDelayed)(talk_base::MessageQueue *this, int, talk_base::MessageHandler *, unsigned int, talk_base::MessageData *);
	void (__thiscall *PostAt)(talk_base::MessageQueue *this, unsigned int, talk_base::MessageHandler *, unsigned int, talk_base::MessageData *);
	void (__thiscall *Clear)(talk_base::MessageQueue *this, talk_base::MessageHandler *, unsigned int, std::list<talk_base::Message,std::allocator<talk_base::Message> > *);
	void (__thiscall *Dispatch)(talk_base::MessageQueue *this, talk_base::Message *);
	void (__thiscall *ReceiveSends)(talk_base::MessageQueue *this);
	int (__thiscall *GetDelay)(talk_base::MessageQueue *this);
};

/* 800 */
struct sigslot::_signal_base_interfaceVtbl
{
	void (__thiscall *slot_disconnect)(sigslot::_signal_base_interface *this, sigslot::has_slots_interface *);
	void (__thiscall *slot_duplicate)(sigslot::_signal_base_interface *this, sigslot::has_slots_interface *, sigslot::has_slots_interface *);
};

/* 802 */
struct sigslot::single_threadedVtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::single_threaded *this, unsigned int);
	void (__thiscall *lock)(sigslot::single_threaded *this);
	void (__thiscall *unlock)(sigslot::single_threaded *this);
};

/* 804 */
struct std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base0<sigslot::single_threaded> *_Myval;
};

/* 813 */
struct __cppobj talk_base::SocketFactory
{
	talk_base::SocketFactoryVtbl *vfptr;
};

/* 847 */
struct __cppobj talk_base::SocketServer : talk_base::SocketFactory
{
};

/* 790 */
struct __cppobj std::_List_node<talk_base::Message,void *>
{
	std::_List_node<talk_base::Message,void *> *_Next;
	std::_List_node<talk_base::Message,void *> *_Prev;
	talk_base::Message _Myval;
};

/* 849 */
struct __cppobj talk_base::DelayedMessage
{
	int cmsDelay_;
	unsigned int msTrigger_;
	unsigned int num_;
	talk_base::Message msg_;
};

/* 785 */
union $E3C9519A329C315C44DAACAB929B6E8E
{
	void (__thiscall *~MessageHandler)(talk_base::MessageHandler *this);
	void *(__thiscall *__vecDelDtor)(talk_base::MessageHandler *this, unsigned int);
};

/* 786 */
struct talk_base::MessageHandlerVtbl
{
	void (__thiscall *OnMessage)(talk_base::MessageHandler *this, talk_base::Message *);
	$E3C9519A329C315C44DAACAB929B6E8E ___u1;
};

/* 788 */
struct talk_base::MessageDataVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::MessageData *this, unsigned int);
};

/* 797 */
struct __cppobj sigslot::has_slots_interface
{
	sigslot::has_slots_interfaceVtbl *vfptr;
};

/* 805 */
struct __cppobj sigslot::_connection_base0<sigslot::single_threaded>
{
	sigslot::_connection_base0<sigslot::single_threaded>Vtbl *vfptr;
};

/* 846 */
struct talk_base::SocketFactoryVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::SocketFactory *this, unsigned int);
	talk_base::Socket *(__thiscall *CreateSocket)(talk_base::SocketFactory *this, int, int);
	talk_base::Socket *(__thiscall *CreateSocket)(talk_base::SocketFactory *this, int);
	talk_base::AsyncSocket *(__thiscall *CreateAsyncSocket)(talk_base::SocketFactory *this, int, int);
	talk_base::AsyncSocket *(__thiscall *CreateAsyncSocket)(talk_base::SocketFactory *this, int);
};

/* 798 */
union $F78C44D8292F808F11C9EDACCDCC90A4
{
	void (__thiscall *~has_slots_interface)(sigslot::has_slots_interface *this);
	void *(__thiscall *__vecDelDtor)(sigslot::has_slots_interface *this, unsigned int);
};

/* 799 */
struct sigslot::has_slots_interfaceVtbl
{
	void (__thiscall *signal_connect)(sigslot::has_slots_interface *this, sigslot::_signal_base_interface *);
	void (__thiscall *signal_disconnect)(sigslot::has_slots_interface *this, sigslot::_signal_base_interface *);
	$F78C44D8292F808F11C9EDACCDCC90A4 ___u2;
	void (__thiscall *disconnect_all)(sigslot::has_slots_interface *this);
};

/* 806 */
struct sigslot::_connection_base0<sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base0<sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base0<sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base0<sigslot::single_threaded> *this);
	sigslot::_connection_base0<sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base0<sigslot::single_threaded> *this);
	sigslot::_connection_base0<sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base0<sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 814 */
struct __cppobj talk_base::Socket
{
	talk_base::SocketVtbl *vfptr;
};

/* 831 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 832 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> >
{
};

/* 833 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > >
{
};

/* 834 */
struct __cppobj std::list<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> >
{
};

/* 835 */
struct __cppobj sigslot::_signal_base1<talk_base::AsyncSocket *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 836 */
struct __cppobj sigslot::signal1<talk_base::AsyncSocket *,sigslot::single_threaded> : sigslot::_signal_base1<talk_base::AsyncSocket *,sigslot::single_threaded>
{
};

/* 840 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 841 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> >
{
};

/* 842 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > >
{
};

/* 843 */
struct __cppobj std::list<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> >
{
};

/* 844 */
struct __cppobj sigslot::_signal_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 845 */
struct __cppobj sigslot::signal2<talk_base::AsyncSocket *,int,sigslot::single_threaded> : sigslot::_signal_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>
{
};

/* 829 */
struct __cppobj talk_base::AsyncSocket : talk_base::Socket
{
	sigslot::signal1<talk_base::AsyncSocket *,sigslot::single_threaded> SignalReadEvent;
	sigslot::signal1<talk_base::AsyncSocket *,sigslot::single_threaded> SignalWriteEvent;
	sigslot::signal1<talk_base::AsyncSocket *,sigslot::single_threaded> SignalConnectEvent;
	sigslot::signal2<talk_base::AsyncSocket *,int,sigslot::single_threaded> SignalCloseEvent;
};

/* 826 */
struct talk_base::SocketVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::Socket *this, unsigned int);
	_BYTE gap4[8];
	int (__thiscall *Bind)(talk_base::Socket *this, talk_base::SocketAddress *);
	int (__thiscall *Connect)(talk_base::Socket *this, talk_base::SocketAddress *);
	int (__thiscall *Send)(talk_base::Socket *this, const void *, unsigned int);
	int (__thiscall *SendTo)(talk_base::Socket *this, const void *, unsigned int, talk_base::SocketAddress *);
	int (__thiscall *Recv)(talk_base::Socket *this, void *, unsigned int);
	int (__thiscall *RecvFrom)(talk_base::Socket *this, void *, unsigned int, talk_base::SocketAddress *);
	int (__thiscall *Listen)(talk_base::Socket *this, int);
	talk_base::Socket *(__thiscall *Accept)(talk_base::Socket *this, talk_base::SocketAddress *);
	int (__thiscall *Close)(talk_base::Socket *this);
	int (__thiscall *GetError)(talk_base::Socket *this);
	void (__thiscall *SetError)(talk_base::Socket *this, int);
	talk_base::Socket::ConnState (__thiscall *GetState)(talk_base::Socket *this);
	int (__thiscall *EstimateMTU)(talk_base::Socket *this, unsigned __int16 *);
	int (__thiscall *GetOption)(talk_base::Socket *this, talk_base::Socket::Option, int *);
	int (__thiscall *SetOption)(talk_base::Socket *this, talk_base::Socket::Option, int);
};

/* 827 */
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *_Myval;
};

/* 837 */
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *_Myval;
};

/* 819 */
struct $BD85036DCC0442AA317E9171D0F2179B
{
	char s_b1;
	char s_b2;
	char s_b3;
	char s_b4;
};

/* 820 */
struct $CC608A129C88F312E26B04B0A6BA5EDC
{
	unsigned __int16 s_w1;
	unsigned __int16 s_w2;
};

/* 821 */
union $F28BF015F7F086C430D4E28195DA4650
{
	$BD85036DCC0442AA317E9171D0F2179B S_un_b;
	$CC608A129C88F312E26B04B0A6BA5EDC S_un_w;
	unsigned int S_addr;
};

/* 822 */
struct in_addr
{
	$F28BF015F7F086C430D4E28195DA4650 S_un;
};

/* 823 */
union $C4F04809C26421AB36731A4AE3667D25
{
	in_addr ip4;
	in6_addr ip6;
};

/* 824 */
struct __cppobj talk_base::IPAddress
{
	int family_;
	$C4F04809C26421AB36731A4AE3667D25 u_;
};

/* 825 */
struct __cppobj __declspec(align(4)) talk_base::SocketAddress
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > hostname_;
	talk_base::IPAddress ip_;
	unsigned __int16 port_;
	int scope_id_;
	bool literal_;
};

/* 828 */
struct __cppobj sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>
{
	sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 838 */
struct __cppobj sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>
{
	sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 830 */
struct sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *this, talk_base::AsyncSocket *);
	sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 839 */
struct sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *this, talk_base::AsyncSocket *, int);
	sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *this);
	sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 864 */
struct __cppobj std::_Allocator_base<std::_List_node<talk_base::_SendMessage,void *> >
{
};

/* 865 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *>
{
};

/* 866 */
struct __cppobj std::allocator<std::_List_node<talk_base::_SendMessage,void *> > : std::_Allocator_base<std::_List_node<talk_base::_SendMessage,void *> >
{
};

/* 867 */
struct __cppobj std::integral_constant<bool,0>
{
};

/* 868 */
struct __cppobj std::_Iterator_base0
{
};

/* 869 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,talk_base::_SendMessage,int,talk_base::_SendMessage const *,talk_base::_SendMessage const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 870 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,talk_base::_SendMessage,int,talk_base::_SendMessage const *,talk_base::_SendMessage const &,std::_Iterator_base0>
{
	std::_List_node<talk_base::_SendMessage,void *> *_Ptr;
};

/* 871 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> >,std::_Iterator_base0>
{
};

/* 872 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> > >
{
};

/* 873 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<talk_base::_SendMessage> >,std::_Iterator_base0>
{
};

/* 874 */
struct __cppobj std::_Allocator_base<talk_base::_SendMessage>
{
};

/* 875 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base0<sigslot::single_threaded> *>
{
};

/* 876 */
struct __cppobj std::_Allocator_base<talk_base::Message>
{
};

/* 877 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<talk_base::_SendMessage,void *> > >
{
};

/* 878 */
struct __cppobj std::_Allocator_base<talk_base::IPAddress>
{
};

/* 879 */
struct __cppobj std::allocator<talk_base::IPAddress> : std::_Allocator_base<talk_base::IPAddress>
{
};

/* 880 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::IPAddress> >
{
};

/* 881 */
struct __cppobj std::_Allocator_base<std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> >
{
};

/* 882 */
struct __cppobj std::allocator<std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> > : std::_Allocator_base<std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> >
{
};

/* 883 */
struct __cppobj std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *>
{
	std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> *_Next;
	std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> *_Prev;
	std::pair<talk_base::StreamInterface *,int> _Myval;
};

/* 894 */
struct __cppobj std::pair<talk_base::StreamInterface *,int>
{
	talk_base::StreamInterface *first;
	int second;
};

/* 888 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 889 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> >
{
};

/* 890 */
struct __cppobj std::_List_buy<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > >
{
};

/* 891 */
struct __cppobj std::list<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> >
{
};

/* 892 */
struct __cppobj sigslot::_signal_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 893 */
struct __cppobj sigslot::signal3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> : sigslot::_signal_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>
{
};

/* 886 */
struct __cppobj talk_base::StreamInterface : talk_base::MessageHandler
{
	sigslot::signal3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> SignalEvent;
};

/* 884 */
struct std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *_Myval;
};

/* 885 */
struct __cppobj sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>
{
	sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 887 */
struct sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *this, talk_base::StreamInterface *, int, int);
	sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *this);
	sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 895 */
struct __cppobj std::_Allocator_base<sigslot::_signal_base_interface *>
{
};

/* 896 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<talk_base::_SendMessage,void *> > > : std::allocator<std::_List_node<talk_base::_SendMessage,void *> >
{
};

/* 897 */
struct __cppobj std::_Allocator_base<std::pair<talk_base::StreamInterface *,int> >
{
};

/* 898 */
struct __cppobj std::allocator<talk_base::_SendMessage> : std::_Allocator_base<talk_base::_SendMessage>
{
};

/* 899 */
struct __cppobj std::_Allocator_base<std::_List_node<talk_base::Message,void *> >
{
};

/* 900 */
struct __cppobj std::_Allocator_base<talk_base::DelayedMessage>
{
};

/* 901 */
struct __cppobj std::allocator<talk_base::DelayedMessage> : std::_Allocator_base<talk_base::DelayedMessage>
{
};

/* 902 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::DelayedMessage> > : std::allocator<talk_base::DelayedMessage>
{
};

/* 903 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,talk_base::DelayedMessage,int,talk_base::DelayedMessage const *,talk_base::DelayedMessage const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 904 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::DelayedMessage> > > : std::_Iterator012<std::random_access_iterator_tag,talk_base::DelayedMessage,int,talk_base::DelayedMessage const *,talk_base::DelayedMessage const &,std::_Iterator_base0>
{
	talk_base::DelayedMessage *_Ptr;
};

/* 905 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::DelayedMessage> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::DelayedMessage> > >
{
};

/* 906 */
struct __cppobj std::integral_constant<bool,1>
{
};

/* 907 */
struct __cppobj std::input_iterator_tag
{
};

/* 908 */
struct __cppobj std::_Mutable_iterator_tag
{
};

/* 909 */
struct __cppobj std::forward_iterator_tag : std::input_iterator_tag, std::_Mutable_iterator_tag
{
	_BYTE gap0[1];
};

/* 910 */
struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
{
};

/* 911 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base0<sigslot::single_threaded> *,int,sigslot::_connection_base0<sigslot::single_threaded> * const *,sigslot::_connection_base0<sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 912 */
struct __cppobj std::unary_function<double,unsigned int>
{
};

/* 913 */
struct __cppobj std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
{
	std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl *vfptr;
	wchar_t *_Gfirst;
	wchar_t *_Pfirst;
	wchar_t **_IGfirst;
	wchar_t **_IPfirst;
	wchar_t *_Gnext;
	wchar_t *_Pnext;
	wchar_t **_IGnext;
	wchar_t **_IPnext;
	int _Gcount;
	int _Pcount;
	int *_IGcount;
	int *_IPcount;
	std::locale *_Plocale;
};

/* 914 */
struct __cppobj __declspec(align(8)) std::fpos<int>
{
	__int64 _Myoff;
	__int64 _Fpos;
	int _Mystate;
};

/* 922 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl
{
	void *(__thiscall *__vecDelDtor)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned int);
	_BYTE gap4[4];
	void (__thiscall *_Unlock)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
	unsigned __int16 (__thiscall *overflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
	unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
	__int64 (__thiscall *showmanyc)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
	unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
	unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
	__int64 (__thiscall *xsgetn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, __int64);
	__int64 (__thiscall *xsputn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, const wchar_t *, __int64);
	std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, __int64, int, int);
	std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, std::fpos<int>, int);
	std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *(__thiscall *setbuf)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, __int64);
	int (__thiscall *sync)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
	void (__thiscall *imbue)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::locale *);
};

/* 915 */
struct __cppobj std::_Locbase<int>
{
};

/* 921 */
const struct __cppobj std::locale : std::_Locbase<int>
{
	std::locale::_Locimp *_Ptr;
};

/* 916 */
struct __cppobj std::_Facet_base
{
	std::_Facet_baseVtbl *vfptr;
};

/* 918 */
struct __cppobj std::locale::facet : std::_Facet_base
{
	unsigned int _Refs;
};

/* 919 */
struct __cppobj __declspec(align(4)) std::_Yarn<char>
{
	char *_Myptr;
	char _Nul;
};

/* 920 */
struct __cppobj std::locale::_Locimp : std::locale::facet
{
	std::locale::facet **_Facetvec;
	unsigned int _Facetcount;
	int _Catmask;
	bool _Xparent;
	std::_Yarn<char> _Name;
};

/* 917 */
struct std::_Facet_baseVtbl
{
	void *(__thiscall *__vecDelDtor)(std::_Facet_base *this, unsigned int);
	void (__thiscall *_Incref)(std::_Facet_base *this);
	std::_Facet_base *(__thiscall *_Decref)(std::_Facet_base *this);
};

/* 923 */
struct __cppobj std::char_traits<wchar_t>
{
};

/* 924 */
struct __cppobj std::allocator<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *>
{
};

/* 925 */
struct __cppobj __declspec(align(4)) std::exception
{
	std::exceptionVtbl *vfptr;
	const char *_Mywhat;
	bool _Mydofree;
};

/* 926 */
struct std::exceptionVtbl
{
	void *(__thiscall *__vecDelDtor)(std::exception *this, unsigned int);
	const char *(__thiscall *what)(std::exception *this);
};

/* 927 */
struct __cppobj std::logic_error : std::exception
{
};

/* 928 */
struct __cppobj std::length_error : std::logic_error
{
};

/* 929 */
struct __cppobj std::runtime_error : std::exception
{
};

/* 930 */
struct __cppobj std::_Allocator_base<wchar_t>
{
};

/* 931 */
struct __cppobj std::allocator<wchar_t> : std::_Allocator_base<wchar_t>
{
};

/* 932 */
struct __cppobj std::_Wrap_alloc<std::allocator<wchar_t> > : std::allocator<wchar_t>
{
};

/* 933 */
struct __cppobj std::allocator_traits<std::allocator<wchar_t> >
{
};

/* 934 */
struct __cppobj std::_Wrap_alloc<std::allocator<wchar_t> >::rebind<wchar_t>
{
};

/* 935 */
struct __cppobj std::_Wrap_alloc<std::allocator<wchar_t> >::rebind<wchar_t *>
{
};

/* 936 */
struct __cppobj std::ctype_base : std::locale::facet
{
};

/* 937 */
struct _Ctypevec
{
	unsigned int _Page;
	const __int16 *_Table;
	int _Delfl;
	wchar_t *_LocaleName;
};

/* 938 */
struct __cppobj std::ctype<char> : std::ctype_base
{
	_Ctypevec _Ctype;
};

/* 939 */
struct __cppobj std::_Lockit
{
	int _Locktype;
};

/* 940 */
struct __cppobj __declspec(align(4)) std::_Yarn<wchar_t>
{
	wchar_t *_Myptr;
	wchar_t _Nul;
};

/* 941 */
struct __cppobj std::_Locinfo
{
	std::_Lockit _Lock;
	std::_Yarn<char> _Days;
	std::_Yarn<char> _Months;
	std::_Yarn<wchar_t> _W_Days;
	std::_Yarn<wchar_t> _W_Months;
	std::_Yarn<char> _Oldlocname;
	std::_Yarn<char> _Newlocname;
};

/* 942 */
struct __cppobj std::_Container_proxy
{
	std::_Container_base12 *_Mycont;
	std::_Iterator_base12 *_Myfirstiter;
};

/* 943 */
const struct __cppobj std::_Container_base12
{
	std::_Container_proxy *_Myproxy;
};

/* 944 */
struct __cppobj std::_Iterator_base12
{
	std::_Container_proxy *_Myproxy;
	std::_Iterator_base12 *_Mynextiter;
};

/* 945 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> >
{
};

/* 946 */
struct __cppobj std::_Num_base
{
};

/* 947 */
struct __cppobj std::_Num_int_base : std::_Num_base
{
};

/* 948 */
struct __cppobj std::numeric_limits<unsigned int> : std::_Num_int_base
{
};

/* 949 */
struct __cppobj std::allocator<void>
{
};

/* 950 */
struct __cppobj std::ctype_byname<char> : std::ctype<char>
{
};

/* 951 */
struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
{
};

/* 952 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> >
{
};

/* 953 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> >
{
};

/* 954 */
struct __cppobj std::allocator<sigslot::_connection_base0<sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base0<sigslot::single_threaded> *>
{
};

/* 955 */
struct __cppobj std::_Iosb<int>
{
};

/* 956 */
struct __cppobj std::ios_base : std::_Iosb<int>
{
	std::ios_baseVtbl *vfptr;
	unsigned int _Stdstr;
	int _Mystate;
	int _Except;
	int _Fmtfl;
	__int64 _Prec;
	__int64 _Wide;
	std::ios_base::_Iosarray *_Arr;
	std::ios_base::_Fnarray *_Calls;
	std::locale *_Ploc;
};

/* 957 */
struct std::ios_baseVtbl
{
	void *(__thiscall *__vecDelDtor)(std::ios_base *this, unsigned int);
};

/* 958 */
struct __cppobj std::ios_base::_Iosarray
{
	std::ios_base::_Iosarray *_Next;
	int _Index;
	int _Lo;
	void *_Vp;
};

/* 959 */
struct __cppobj std::ios_base::_Fnarray
{
	std::ios_base::_Fnarray *_Next;
	int _Index;
	void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
};

/* 960 */
struct __cppobj std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
	std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl *vfptr;
	unsigned __int16 *_Gfirst;
	unsigned __int16 *_Pfirst;
	unsigned __int16 **_IGfirst;
	unsigned __int16 **_IPfirst;
	unsigned __int16 *_Gnext;
	unsigned __int16 *_Pnext;
	unsigned __int16 **_IGnext;
	unsigned __int16 **_IPnext;
	int _Gcount;
	int _Pcount;
	int *_IGcount;
	int *_IPcount;
	std::locale *_Plocale;
};

/* 961 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl
{
	void *(__thiscall *__vecDelDtor)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned int);
	_BYTE gap4[4];
	void (__thiscall *_Unlock)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
	unsigned __int16 (__thiscall *overflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
	unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
	__int64 (__thiscall *showmanyc)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
	unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
	unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
	__int64 (__thiscall *xsgetn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, __int64);
	__int64 (__thiscall *xsputn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, const unsigned __int16 *, __int64);
	std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, __int64, int, int);
	std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, std::fpos<int>, int);
	std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *(__thiscall *setbuf)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, __int64);
	int (__thiscall *sync)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
	void (__thiscall *imbue)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::locale *);
};

/* 962 */
struct __cppobj std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
	_BYTE gap0[80];
};

/* 963 */
struct __cppobj __declspec(align(8)) std::basic_ios<unsigned short,std::char_traits<unsigned short> > : std::ios_base
{
	std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Mystrbuf;
	std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Tiestr;
	unsigned __int16 _Fillch;
};

/* 964 */
struct __cppobj __declspec(align(32)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >
{
	_BYTE gap0[8];
	__int64 _Chcount;
	_BYTE gap10[80];
};

/* 965 */
struct __cppobj std::iterator<std::input_iterator_tag,unsigned short,__int64,unsigned short const *,unsigned short>
{
};

/* 966 */
struct __cppobj std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > : std::iterator<std::input_iterator_tag,unsigned short,__int64,unsigned short const *,unsigned short>
{
	std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Strbuf;
	bool _Got;
	unsigned __int16 _Val;
};

/* 967 */
struct _Cvtvec
{
	unsigned int _Page;
	unsigned int _Mbcurmax;
	int _Isclocale;
	char _Isleadbyte[32];
};

/* 968 */
struct __cppobj std::ctype<unsigned short> : std::ctype_base
{
	_Ctypevec _Ctype;
	_Cvtvec _Cvt;
};

/* 969 */
struct __cppobj std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
};

/* 970 */
struct __cppobj std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
	std::basic_istream<unsigned short,std::char_traits<unsigned short> > *_Myistr;
};

/* 971 */
struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
	bool _Ok;
};

/* 972 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> > >
{
};

/* 973 */
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *_Myval;
};

/* 974 */
struct __cppobj sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded>
{
	sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1002 */
struct sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *this, talk_base::AsyncResolver *);
	sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 976 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > : std::_Container_base0
{
	std::_Tree_node<sigslot::_signal_base_interface *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 977 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<sigslot::_signal_base_interface *,std::allocator<sigslot::_signal_base_interface *> > > : std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >
{
};

/* 978 */
struct __cppobj std::_Tree_buy<sigslot::_signal_base_interface *,std::allocator<sigslot::_signal_base_interface *> > : std::_Tree_alloc<0,std::_Tree_base_types<sigslot::_signal_base_interface *,std::allocator<sigslot::_signal_base_interface *> > >
{
};

/* 979 */
struct __cppobj std::_Tree_comp<0,std::_Tset_traits<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *>,0> > : std::_Tree_buy<sigslot::_signal_base_interface *,std::allocator<sigslot::_signal_base_interface *> >
{
};

/* 980 */
struct __cppobj std::_Tree<std::_Tset_traits<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *>,0> > : std::_Tree_comp<0,std::_Tset_traits<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *>,0> >
{
};

/* 981 */
struct __cppobj std::set<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *> > : std::_Tree<std::_Tset_traits<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *>,0> >
{
};

/* 982 */
struct __cppobj sigslot::has_slots<sigslot::single_threaded> : sigslot::has_slots_interface, sigslot::single_threaded
{
	std::set<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *> > m_senders;
};

/* 987 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 988 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> >
{
};

/* 989 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > >
{
};

/* 990 */
struct __cppobj std::list<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> >
{
};

/* 991 */
struct __cppobj sigslot::_signal_base1<talk_base::SignalThread *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 992 */
struct __cppobj sigslot::signal1<talk_base::SignalThread *,sigslot::single_threaded> : sigslot::_signal_base1<talk_base::SignalThread *,sigslot::single_threaded>
{
};

/* 993 */
struct __cppobj talk_base::SignalThread::Worker : talk_base::Thread
{
	talk_base::SignalThread *parent_;
};

/* 985 */
struct __cppobj talk_base::SignalThread : sigslot::has_slots<sigslot::single_threaded>, talk_base::MessageHandler
{
	sigslot::signal1<talk_base::SignalThread *,sigslot::single_threaded> SignalWorkDone;
	talk_base::Thread *main_;
	talk_base::SignalThread::Worker worker_;
	talk_base::CriticalSection cs_;
	talk_base::SignalThread::State state_;
	int refcount_;
};

/* 1003 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1004 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> >
{
};

/* 994 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > >
{
};

/* 995 */
struct __cppobj std::list<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> >
{
};

/* 996 */
struct __cppobj sigslot::_signal_base1<talk_base::AsyncResolver *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 997 */
struct __cppobj sigslot::signal1<talk_base::AsyncResolver *,sigslot::single_threaded> : sigslot::_signal_base1<talk_base::AsyncResolver *,sigslot::single_threaded>
{
};

/* 998 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::IPAddress> > : std::_Container_base0
{
	talk_base::IPAddress *_Myfirst;
	talk_base::IPAddress *_Mylast;
	talk_base::IPAddress *_Myend;
};

/* 999 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > : std::_Vector_val<std::_Simple_types<talk_base::IPAddress> >
{
};

/* 1000 */
struct __cppobj std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >
{
};

/* 1001 */
struct __cppobj talk_base::AsyncResolver : talk_base::SignalThread
{
	sigslot::signal1<talk_base::AsyncResolver *,sigslot::single_threaded> SignalDone;
	talk_base::SocketAddress addr_;
	std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > addresses_;
	int error_;
};

/* 975 */
struct std::_Tree_node<sigslot::_signal_base_interface *,void *>
{
	std::_Tree_node<sigslot::_signal_base_interface *,void *> *_Left;
	std::_Tree_node<sigslot::_signal_base_interface *,void *> *_Parent;
	std::_Tree_node<sigslot::_signal_base_interface *,void *> *_Right;
	char _Color;
	char _Isnil;
	sigslot::_signal_base_interface *_Myval;
};

/* 983 */
struct std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *_Myval;
};

/* 984 */
struct __cppobj sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>
{
	sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 986 */
struct sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *this, talk_base::SignalThread *);
	sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1005 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> >
{
};

/* 1006 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> >
{
};

/* 1007 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> >
{
};

/* 1008 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *>
{
};

/* 1009 */
struct __cppobj std::allocator<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *>
{
};

/* 1010 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1011 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 1012 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1013 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > >
{
};

/* 1014 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1015 */
struct __cppobj std::binary_function<sigslot::_signal_base_interface *,sigslot::_signal_base_interface *,bool>
{
};

/* 1016 */
struct __cppobj std::less<sigslot::_signal_base_interface *> : std::binary_function<sigslot::_signal_base_interface *,sigslot::_signal_base_interface *,bool>
{
};

/* 1017 */
struct __cppobj std::unary_function<std::error_code,unsigned int>
{
};

/* 1018 */
const struct __cppobj std::error_category
{
	std::error_categoryVtbl *vfptr;
};

/* 1021 */
struct std::error_categoryVtbl
{
	void *(__thiscall *__vecDelDtor)(std::error_category *this, unsigned int);
	const char *(__thiscall *name)(std::error_category *this);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *message)(std::error_category *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, int);
	std::error_condition *(__thiscall *default_error_condition)(std::error_category *this, std::error_condition *result, int);
	bool (__thiscall *equivalent)(std::error_category *this, std::error_code *, int);
	bool (__thiscall *equivalent)(std::error_category *this, int, std::error_condition *);
};

/* 1019 */
struct __cppobj std::error_condition
{
	int _Myval;
	std::error_category *_Mycat;
};

/* 1020 */
struct __cppobj std::error_code
{
	int _Myval;
	std::error_category *_Mycat;
};

/* 1022 */
struct __cppobj std::hash<std::error_code> : std::unary_function<std::error_code,unsigned int>
{
};

/* 1023 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1024 */
struct __cppobj std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > > : std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0>
{
	const wchar_t *_Ptr;
};

/* 1025 */
struct __cppobj std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > : std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
{
};

/* 1026 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> >
{
};

/* 1027 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> >
{
};

/* 1028 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> >
{
};

/* 1029 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> > >
{
};

/* 1030 */
struct __cppobj std::_Allocator_base<char>
{
};

/* 1031 */
struct __cppobj std::allocator<char> : std::_Allocator_base<char>
{
};

/* 1032 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base0<sigslot::single_threaded> *,int,sigslot::_connection_base0<sigslot::single_threaded> * const *,sigslot::_connection_base0<sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> *_Ptr;
};

/* 1033 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1034 */
struct __cppobj std::unary_function<float,unsigned int>
{
};

/* 1035 */
union std::_String_val<std::_Simple_types<wchar_t> >::_Bxty
{
	wchar_t _Buf[8];
	wchar_t *_Ptr;
	char _Alias[8];
};

/* 1036 */
struct __cppobj std::_String_val<std::_Simple_types<wchar_t> > : std::_Container_base0
{
	std::_String_val<std::_Simple_types<wchar_t> >::_Bxty _Bx;
	unsigned int _Mysize;
	unsigned int _Myres;
};

/* 1037 */
struct __cppobj std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > > : std::_String_val<std::_Simple_types<wchar_t> >
{
};

/* 1038 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
{
};

/* 1039 */
struct __cppobj std::initializer_list<wchar_t>
{
	const wchar_t *_First;
	const wchar_t *_Last;
};

/* 1040 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> >
{
};

/* 1041 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> >
{
};

/* 1042 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> >
{
};

/* 1043 */
struct __cppobj std::basic_streambuf<char,std::char_traits<char> >
{
	std::basic_streambuf<char,std::char_traits<char> >Vtbl *vfptr;
	char *_Gfirst;
	char *_Pfirst;
	char **_IGfirst;
	char **_IPfirst;
	char *_Gnext;
	char *_Pnext;
	char **_IGnext;
	char **_IPnext;
	int _Gcount;
	int _Pcount;
	int *_IGcount;
	int *_IPcount;
	std::locale *_Plocale;
};

/* 1044 */
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl
{
	void *(__thiscall *__vecDelDtor)(std::basic_streambuf<char,std::char_traits<char> > *this, unsigned int);
	_BYTE gap4[4];
	void (__thiscall *_Unlock)(std::basic_streambuf<char,std::char_traits<char> > *this);
	int (__thiscall *overflow)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
	int (__thiscall *pbackfail)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
	__int64 (__thiscall *showmanyc)(std::basic_streambuf<char,std::char_traits<char> > *this);
	int (__thiscall *underflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
	int (__thiscall *uflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
	__int64 (__thiscall *xsgetn)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, __int64);
	__int64 (__thiscall *xsputn)(std::basic_streambuf<char,std::char_traits<char> > *this, const char *, __int64);
	std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, __int64, int, int);
	std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, std::fpos<int>, int);
	std::basic_streambuf<char,std::char_traits<char> > *(__thiscall *setbuf)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, __int64);
	int (__thiscall *sync)(std::basic_streambuf<char,std::char_traits<char> > *this);
	void (__thiscall *imbue)(std::basic_streambuf<char,std::char_traits<char> > *this, std::locale *);
};

/* 1045 */
struct __cppobj std::basic_ostream<char,std::char_traits<char> >
{
	_BYTE gap0[80];
};

/* 1046 */
struct __cppobj __declspec(align(8)) std::basic_ios<char,std::char_traits<char> > : std::ios_base
{
	std::basic_streambuf<char,std::char_traits<char> > *_Mystrbuf;
	std::basic_ostream<char,std::char_traits<char> > *_Tiestr;
	char _Fillch;
};

/* 1047 */
struct __cppobj std::iterator<std::output_iterator_tag,void,void,void,void>
{
};

/* 1048 */
struct __cppobj std::ostreambuf_iterator<char,std::char_traits<char> > : std::iterator<std::output_iterator_tag,void,void,void,void>
{
	bool _Failed;
	std::basic_streambuf<char,std::char_traits<char> > *_Strbuf;
};

/* 1049 */
struct __cppobj std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
};

/* 1050 */
struct __cppobj std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
	std::basic_ostream<char,std::char_traits<char> > *_Myostr;
};

/* 1051 */
struct __cppobj __declspec(align(4)) std::basic_ostream<char,std::char_traits<char> >::sentry : std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
	bool _Ok;
};

/* 1052 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_signal_base_interface *,int,sigslot::_signal_base_interface * const *,sigslot::_signal_base_interface * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1053 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_signal_base_interface *,int,sigslot::_signal_base_interface * const *,sigslot::_signal_base_interface * const &,std::_Iterator_base0>
{
	std::_Tree_node<sigslot::_signal_base_interface *,void *> *_Ptr;
};

/* 1054 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> >,std::_Iterator_base0>
{
};

/* 1055 */
struct __cppobj std::char_traits<char>
{
};

/* 1056 */
struct __cppobj std::bad_cast : std::exception
{
};

/* 1057 */
struct __cppobj std::unary_function<int,unsigned int>
{
};

/* 1058 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 1059 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 1060 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 1061 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *>
{
};

/* 1062 */
struct __cppobj std::allocator<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *>
{
};

/* 1063 */
struct __cppobj std::_Num_float_base : std::_Num_base
{
};

/* 1064 */
struct __cppobj std::numeric_limits<float> : std::_Num_float_base
{
};

/* 1065 */
struct __cppobj std::output_iterator_tag : std::_Mutable_iterator_tag
{
};

/* 1066 */
struct __cppobj std::_Allocator_base<std::_Tree_node<sigslot::_signal_base_interface *,void *> >
{
};

/* 1067 */
struct __cppobj std::allocator<std::_Tree_node<sigslot::_signal_base_interface *,void *> > : std::_Allocator_base<std::_Tree_node<sigslot::_signal_base_interface *,void *> >
{
};

/* 1068 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<sigslot::_signal_base_interface *,void *> > > : std::allocator<std::_Tree_node<sigslot::_signal_base_interface *,void *> >
{
};

/* 1069 */
struct __cppobj std::allocator<sigslot::_signal_base_interface *> : std::_Allocator_base<sigslot::_signal_base_interface *>
{
};

/* 1070 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > >,bool>
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > > first;
	bool second;
};

/* 1071 */
struct __cppobj std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > > >
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > > first;
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<sigslot::_signal_base_interface *> > > second;
};

/* 1072 */
struct __cppobj std::initializer_list<sigslot::_signal_base_interface *>
{
	sigslot::_signal_base_interface *const *_First;
	sigslot::_signal_base_interface *const *_Last;
};

/* 1073 */
struct __cppobj std::_Nil
{
};

/* 1074 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1075 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 1076 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1077 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > >
{
};

/* 1078 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1079 */
struct __cppobj std::numeric_limits<__int64> : std::_Num_int_base
{
};

/* 1080 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::IPAddress> > : std::allocator<talk_base::IPAddress>
{
};

/* 1081 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::IPAddress> >::rebind<talk_base::IPAddress>
{
};

/* 1082 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::IPAddress> >::rebind<talk_base::IPAddress *>
{
};

/* 1083 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1084 */
struct __cppobj std::allocator<std::_List_node<talk_base::Message,void *> > : std::_Allocator_base<std::_List_node<talk_base::Message,void *> >
{
};

/* 1085 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<talk_base::Message,void *> > > : std::allocator<std::_List_node<talk_base::Message,void *> >
{
};

/* 1086 */
struct __cppobj std::allocator<talk_base::Message> : std::_Allocator_base<talk_base::Message>
{
};

/* 1087 */
struct __cppobj std::_System_error : std::runtime_error
{
	std::error_code _Mycode;
};

/* 1088 */
struct __cppobj std::system_error : std::_System_error
{
};

/* 1089 */
struct __cppobj std::invalid_argument : std::logic_error
{
};

/* 1090 */
struct __cppobj std::_Rand_urng_from_func
{
};

/* 1091 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,talk_base::IPAddress,int,talk_base::IPAddress const *,talk_base::IPAddress const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1092 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::IPAddress> > > : std::_Iterator012<std::random_access_iterator_tag,talk_base::IPAddress,int,talk_base::IPAddress const *,talk_base::IPAddress const &,std::_Iterator_base0>
{
	talk_base::IPAddress *_Ptr;
};

/* 1093 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::IPAddress> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::IPAddress> > >
{
};

/* 1094 */
struct __cppobj std::initializer_list<talk_base::IPAddress>
{
	talk_base::IPAddress *_First;
	talk_base::IPAddress *_Last;
};

/* 1095 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 1096 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1097 */
struct __cppobj std::_Bitwise_hash<float> : std::unary_function<float,unsigned int>
{
};

/* 1098 */
struct __cppobj std::hash<float> : std::_Bitwise_hash<float>
{
};

/* 1099 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base0<sigslot::single_threaded> *,void *> > >
{
};

/* 1100 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::DelayedMessage> >
{
};

/* 1101 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> > > : std::allocator<std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> >
{
};

/* 1102 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1103 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 1104 */
struct __cppobj std::codecvt_base : std::locale::facet
{
};

/* 1105 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<talk_base::Message,void *> > >
{
};

/* 1106 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1107 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > >
{
};

/* 1108 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1109 */
struct __cppobj std::numpunct<char> : std::locale::facet
{
	const char *_Grouping;
	char _Dp;
	char _Kseparator;
	const char *_Falsename;
	const char *_Truename;
};

/* 1110 */
struct __cppobj std::underflow_error : std::runtime_error
{
};

/* 1111 */
struct __cppobj std::bad_exception : std::exception
{
};

/* 1112 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> > >
{
};

/* 1113 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base0<sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1114 */
struct __cppobj std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::locale::facet
{
};

/* 1115 */
struct __cppobj std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::iterator<std::output_iterator_tag,void,void,void,void>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *container;
};

/* 1116 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded> *,void *> > >
{
};

/* 1117 */
struct __cppobj std::numeric_limits<bool> : std::_Num_int_base
{
};

/* 1118 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > >
{
};

/* 1119 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 1120 */
struct __cppobj std::numeric_limits<unsigned short> : std::_Num_int_base
{
};

/* 1121 */
struct __cppobj __declspec(align(4)) std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > : std::basic_streambuf<char,std::char_traits<char> >
{
	char *_Seekhigh;
	int _Mystate;
	std::allocator<char> _Al;
};

/* 1122 */
struct __cppobj __declspec(align(8)) std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > : std::basic_ostream<char,std::char_traits<char> >
{
	_BYTE gap50[72];
};

/* 1123 */
struct __cppobj __declspec(align(32)) std::basic_istream<char,std::char_traits<char> >
{
	_BYTE gap0[8];
	__int64 _Chcount;
	_BYTE gap10[80];
};

/* 1124 */
struct __cppobj std::iterator<std::input_iterator_tag,char,__int64,char const *,char>
{
};

/* 1125 */
struct __cppobj __declspec(align(4)) std::istreambuf_iterator<char,std::char_traits<char> > : std::iterator<std::input_iterator_tag,char,__int64,char const *,char>
{
	std::basic_streambuf<char,std::char_traits<char> > *_Strbuf;
	bool _Got;
	char _Val;
};

/* 1126 */
struct __cppobj std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
};

/* 1127 */
struct __cppobj std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
	std::basic_istream<char,std::char_traits<char> > *_Myistr;
};

/* 1128 */
struct __cppobj __declspec(align(4)) std::basic_istream<char,std::char_traits<char> >::sentry : std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
	bool _Ok;
};

/* 1129 */
struct __cppobj std::_Tset_traits<sigslot::_signal_base_interface *,std::less<sigslot::_signal_base_interface *>,std::allocator<sigslot::_signal_base_interface *>,0>
{
};

/* 1130 */
struct __cppobj std::initializer_list<char>
{
	const char *_First;
	const char *_Last;
};

/* 1131 */
struct __cppobj std::numpunct<wchar_t> : std::locale::facet
{
	const char *_Grouping;
	wchar_t _Dp;
	wchar_t _Kseparator;
	const wchar_t *_Falsename;
	const wchar_t *_Truename;
};

/* 1132 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<sigslot::_signal_base_interface *,void *> > >
{
};

/* 1133 */
struct __cppobj std::_Wrap_alloc<std::allocator<char> > : std::allocator<char>
{
};

/* 1134 */
struct __cppobj std::numeric_limits<unsigned long> : std::_Num_int_base
{
};

/* 1135 */
struct __cppobj std::allocator<std::pair<talk_base::StreamInterface *,int> > : std::_Allocator_base<std::pair<talk_base::StreamInterface *,int> >
{
};

/* 1136 */
struct __cppobj std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > > : std::_Container_base0
{
	std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1137 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface *,int>,int,std::pair<talk_base::StreamInterface *,int> const *,std::pair<talk_base::StreamInterface *,int> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1138 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface *,int>,int,std::pair<talk_base::StreamInterface *,int> const *,std::pair<talk_base::StreamInterface *,int> const &,std::_Iterator_base0>
{
	std::_List_node<std::pair<talk_base::StreamInterface *,int>,void *> *_Ptr;
};

/* 1139 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > >,std::_Iterator_base0>
{
};

/* 1140 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > > >
{
};

/* 1141 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > >,std::_Iterator_base0>
{
};

/* 1142 */
struct __cppobj std::unary_function<long double,unsigned int>
{
};

/* 1143 */
struct __cppobj std::codecvt<unsigned short,char,int> : std::codecvt_base
{
	_Cvtvec _Cvt;
};

/* 1144 */
struct __cppobj std::_Bitwise_hash<double> : std::unary_function<double,unsigned int>
{
};

/* 1145 */
struct __cppobj std::exception_ptr
{
	void *_Data1;
	void *_Data2;
};

/* 1146 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,talk_base::Message,int,talk_base::Message const *,talk_base::Message const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1147 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,talk_base::Message,int,talk_base::Message const *,talk_base::Message const &,std::_Iterator_base0>
{
	std::_List_node<talk_base::Message,void *> *_Ptr;
};

/* 1148 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> >,std::_Iterator_base0>
{
};

/* 1149 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> > >
{
};

/* 1150 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<talk_base::Message> >,std::_Iterator_base0>
{
};

/* 1151 */
struct __cppobj std::numeric_limits<int> : std::_Num_int_base
{
};

/* 1152 */
struct __cppobj std::_Generic_error_category : std::error_category
{
};

/* 1153 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *>
{
};

/* 1154 */
struct __cppobj std::allocator<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded> *>
{
};

/* 1155 */
struct __cppobj std::_Iostream_error_category : std::_Generic_error_category
{
};

/* 1156 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded> *,void *> > >
{
};

/* 1157 */
struct __cppobj std::ctype<wchar_t> : std::ctype_base
{
	_Ctypevec _Ctype;
	_Cvtvec _Cvt;
};

/* 1158 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<std::pair<talk_base::StreamInterface *,int>,std::allocator<std::pair<talk_base::StreamInterface *,int> > > > : std::_List_val<std::_List_simple_types<std::pair<talk_base::StreamInterface *,int> > >
{
};

/* 1159 */
struct __cppobj std::_List_buy<std::pair<talk_base::StreamInterface *,int>,std::allocator<std::pair<talk_base::StreamInterface *,int> > > : std::_List_alloc<0,std::_List_base_types<std::pair<talk_base::StreamInterface *,int>,std::allocator<std::pair<talk_base::StreamInterface *,int> > > >
{
};

/* 1160 */
struct __cppobj std::_Wrap_int
{
};

/* 1161 */
struct __cppobj std::char_traits<unsigned short>
{
};

/* 1162 */
struct __cppobj std::numeric_limits<char> : std::_Num_int_base
{
};

/* 1163 */
struct __cppobj std::allocator_traits<std::allocator<char> >
{
};

/* 1164 */
struct __cppobj std::domain_error : std::logic_error
{
};

/* 1165 */
struct __cppobj std::numeric_limits<double> : std::_Num_float_base
{
};

/* 1166 */
struct __cppobj std::numeric_limits<long double> : std::_Num_float_base
{
};

/* 1167 */
struct __cppobj std::bad_alloc : std::exception
{
};

/* 1168 */
struct __cppobj std::bad_array_new_length : std::bad_alloc
{
};

/* 1169 */
struct __cppobj std::hash<double> : std::_Bitwise_hash<double>
{
};

/* 1170 */
struct __cppobj std::overflow_error : std::runtime_error
{
};

/* 1171 */
struct __cppobj std::range_error : std::runtime_error
{
};

/* 1172 */
struct __cppobj std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > : std::iterator<std::output_iterator_tag,void,void,void,void>
{
	std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *container;
};

/* 1173 */
struct __cppobj std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > : std::locale::facet
{
};

/* 1174 */
struct __cppobj std::basic_ostream<wchar_t,std::char_traits<wchar_t> >
{
	_BYTE gap0[80];
};

/* 1175 */
struct __cppobj __declspec(align(8)) std::basic_ios<wchar_t,std::char_traits<wchar_t> > : std::ios_base
{
	std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Mystrbuf;
	std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Tiestr;
	wchar_t _Fillch;
};

/* 1176 */
struct _Collvec
{
	unsigned int _Page;
	wchar_t *_LocaleName;
};

/* 1177 */
struct __cppobj std::_Timevec
{
	void *_Timeptr;
};

/* 1178 */
struct __cppobj std::_Wrap_alloc<std::allocator<char> >::rebind<char>
{
};

/* 1179 */
struct __cppobj std::_Wrap_alloc<std::allocator<char> >::rebind<char *>
{
};

/* 1180 */
struct __cppobj std::numeric_limits<long> : std::_Num_int_base
{
};

/* 1181 */
struct __cppobj std::out_of_range : std::logic_error
{
};

/* 1182 */
struct __cppobj __declspec(align(32)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >
{
	_BYTE gap0[8];
	__int64 _Chcount;
	_BYTE gap10[80];
};

/* 1183 */
struct __cppobj std::iterator<std::input_iterator_tag,wchar_t,__int64,wchar_t const *,wchar_t>
{
};

/* 1184 */
struct __cppobj std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > : std::iterator<std::input_iterator_tag,wchar_t,__int64,wchar_t const *,wchar_t>
{
	std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Strbuf;
	bool _Got;
	wchar_t _Val;
};

/* 1185 */
struct __cppobj std::num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
};

/* 1186 */
struct __cppobj std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
	std::basic_istream<wchar_t,std::char_traits<wchar_t> > *_Myistr;
};

/* 1187 */
struct __cppobj __declspec(align(4)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
	bool _Ok;
};

/* 1188 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded> *,void *> > >
{
};

/* 1189 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 1190 */
struct __cppobj std::numeric_limits<wchar_t> : std::_Num_int_base
{
};

/* 1191 */
struct __cppobj std::numeric_limits<unsigned char> : std::_Num_int_base
{
};

/* 1192 */
struct __cppobj std::numeric_limits<unsigned __int64> : std::_Num_int_base
{
};

/* 1193 */
struct __cppobj std::_Bitwise_hash<long double> : std::unary_function<long double,unsigned int>
{
};

/* 1194 */
struct __cppobj std::hash<long double> : std::_Bitwise_hash<long double>
{
};

/* 1195 */
struct __cppobj std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > : std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0>
{
	const char *_Ptr;
};

/* 1196 */
struct __cppobj std::_String_iterator<std::_String_val<std::_Simple_types<char> > > : std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
{
};

/* 1197 */
struct __cppobj std::_Bitwise_hash<int> : std::unary_function<int,unsigned int>
{
};

/* 1198 */
struct __cppobj std::codecvt<wchar_t,char,int> : std::codecvt_base
{
	_Cvtvec _Cvt;
};

/* 1199 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::DelayedMessage> >::rebind<talk_base::DelayedMessage>
{
};

/* 1200 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::DelayedMessage> >::rebind<talk_base::DelayedMessage *>
{
};

/* 1201 */
struct __cppobj std::list<std::pair<talk_base::StreamInterface *,int>,std::allocator<std::pair<talk_base::StreamInterface *,int> > > : std::_List_buy<std::pair<talk_base::StreamInterface *,int>,std::allocator<std::pair<talk_base::StreamInterface *,int> > >
{
};

/* 1202 */
struct __cppobj std::hash<int> : std::_Bitwise_hash<int>
{
};

/* 1203 */
struct __cppobj std::numeric_limits<short> : std::_Num_int_base
{
};

/* 1204 */
struct __cppobj std::_System_error_category : std::_Generic_error_category
{
};

/* 1205 */
struct __cppobj std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > : std::iterator<std::output_iterator_tag,void,void,void,void>
{
	bool _Failed;
	std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Strbuf;
};

/* 1206 */
struct __cppobj std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
};

/* 1207 */
struct __cppobj std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
	std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Myostr;
};

/* 1208 */
struct __cppobj __declspec(align(4)) std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
	bool _Ok;
};

/* 1209 */
struct __cppobj std::numeric_limits<signed char> : std::_Num_int_base
{
};

/* 1210 */
struct __cppobj std::ios_base::failure : std::system_error
{
};

/* 1211 */
struct __cppobj std::ios_base::Init
{
};

/* 1212 */
struct __cppobj std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > : std::iterator<std::output_iterator_tag,void,void,void,void>
{
	bool _Failed;
	std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Strbuf;
};

/* 1213 */
struct __cppobj std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
};

/* 1214 */
struct __cppobj std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
	std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Myostr;
};

/* 1215 */
struct __cppobj __declspec(align(4)) std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
	bool _Ok;
};

/* 1216 */
struct tagCACY
{
	unsigned int cElems;
	tagCY *pElems;
};

/* 1217 */
struct __cppobj __declspec(align(4)) type_info
{
	type_infoVtbl *vfptr;
	void *_M_data;
	char _M_d_name[1];
};

/* 1218 */
struct type_infoVtbl
{
	void *(__thiscall *__vecDelDtor)(type_info *this, unsigned int);
};

/* 1219 */
struct __type_info_node
{
	void *_MemPtr;
	__type_info_node *_Next;
};

/* 1220 */
struct group_filter
{
	unsigned int gf_interface;
	sockaddr_storage gf_group;
	MULTICAST_MODE_TYPE gf_fmode;
	unsigned int gf_numsrc;
	sockaddr_storage gf_slist[1];
};

/* 1221 */
struct tagCAUL
{
	unsigned int cElems;
	unsigned int *pElems;
};

/* 1222 */
struct tagBSTRBLOB
{
	unsigned int cbSize;
	char *pData;
};

/* 1223 */
struct $013671E5920392F7B68C675C97F9F7D8
{
	unsigned __int32 Zone : 28;
	unsigned __int32 Level : 4;
};

/* 1224 */
union $23B933F85B04354176E8FC35A2FC5542
{
	$013671E5920392F7B68C675C97F9F7D8 __s0;
	unsigned int Value;
};

/* 1225 */
struct SCOPE_ID
{
	$23B933F85B04354176E8FC35A2FC5542 ___u0;
};

/* 1226 */
union $800D65ED92E6643CC8053B4DD352E760
{
	unsigned int sin6_scope_id;
	SCOPE_ID sin6_scope_struct;
};

/* 1227 */
struct sockaddr_in6
{
	unsigned __int16 sin6_family;
	unsigned __int16 sin6_port;
	unsigned int sin6_flowinfo;
	in6_addr sin6_addr;
	$800D65ED92E6643CC8053B4DD352E760 ___u4;
};

/* 1228 */
struct $FAF74743FBE1C8632047CFB668F7028A
{
	unsigned int LowPart;
	int HighPart;
};

/* 1229 */
union _LARGE_INTEGER
{
	$FAF74743FBE1C8632047CFB668F7028A __s0;
	$FAF74743FBE1C8632047CFB668F7028A u;
	__int64 QuadPart;
};

/* 1230 */
struct tagCAH
{
	unsigned int cElems;
	_LARGE_INTEGER *pElems;
};

/* 1231 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_27
{
	const void *pVFTable;
	void *spare;
	char name[27];
};

/* 1232 */
struct __cppobj ITypeInfo : IUnknown
{
};

/* 1233 */
struct sockaddr_in
{
	unsigned __int16 sin_family;
	unsigned __int16 sin_port;
	in_addr sin_addr;
	char sin_zero[8];
};

/* 1234 */
struct tagCAUI
{
	unsigned int cElems;
	unsigned __int16 *pElems;
};

/* 1235 */
struct tagCAFILETIME
{
	unsigned int cElems;
	_FILETIME *pElems;
};

/* 1236 */
struct $_TypeDescriptor$_extraBytes_24
{
	const void *pVFTable;
	void *spare;
	char name[24];
};

/* 1237 */
struct tagDISPPARAMS
{
	tagVARIANT *rgvarg;
	int *rgdispidNamedArgs;
	unsigned int cArgs;
	unsigned int cNamedArgs;
};

/* 1238 */
struct tagCLIPDATA
{
	unsigned int cbSize;
	int ulClipFmt;
	char *pClipData;
};

/* 1239 */
struct tagBLOB
{
	unsigned int cbSize;
	char *pBlobData;
};

/* 1240 */
struct __cppobj ISequentialStream : IUnknown
{
};

/* 1241 */
struct __cppobj IStream : ISequentialStream
{
};

/* 1242 */
struct __cppobj IStorage : IUnknown
{
};

/* 1243 */
struct tagVersionedStream
{
	_GUID guidVersion;
	IStream *pStream;
};

/* 1244 */
struct tagCAC
{
	unsigned int cElems;
	char *pElems;
};

/* 1245 */
struct tagCAI
{
	unsigned int cElems;
	__int16 *pElems;
};

/* 1246 */
struct tagCAL
{
	unsigned int cElems;
	int *pElems;
};

/* 1247 */
struct tagCAUH
{
	unsigned int cElems;
	_ULARGE_INTEGER *pElems;
};

/* 1248 */
struct tagCAFLT
{
	unsigned int cElems;
	float *pElems;
};

/* 1249 */
struct tagCABOOL
{
	unsigned int cElems;
	__int16 *pElems;
};

/* 1250 */
struct tagCASCODE
{
	unsigned int cElems;
	int *pElems;
};

/* 1251 */
struct tagCADATE
{
	unsigned int cElems;
	long double *pElems;
};

/* 1252 */
struct tagCACLIPDATA
{
	unsigned int cElems;
	tagCLIPDATA *pElems;
};

/* 1253 */
struct tagCABSTRBLOB
{
	unsigned int cElems;
	tagBSTRBLOB *pElems;
};

/* 1254 */
struct tagCALPSTR
{
	unsigned int cElems;
	char **pElems;
};

/* 1255 */
struct tagCALPWSTR
{
	unsigned int cElems;
	wchar_t **pElems;
};

/* 1256 */
struct tagCAPROPVARIANT
{
	unsigned int cElems;
	tagPROPVARIANT *pElems;
};

/* 1258 */
struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E
{
	unsigned __int16 vt;
	unsigned __int16 wReserved1;
	unsigned __int16 wReserved2;
	unsigned __int16 wReserved3;
	char cVal;
};

/* 1259 */
struct $6D336DA143C556260FF80C12817B08DB
{
	_BYTE gap0[8];
	int lVal;
};

/* 1260 */
struct $85FE272EDEBAC28D8662FB976C396DA9
{
	_BYTE gap0[8];
	_LARGE_INTEGER hVal;
};

/* 1261 */
struct $5DEEB8C12D8E7706494DDF7678F51FD0
{
	_BYTE gap0[8];
	_ULARGE_INTEGER uhVal;
};

/* 1262 */
struct $211B9EFC3D2A58F78AD963804415CC1E
{
	_BYTE gap0[8];
	_FILETIME filetime;
};

/* 1263 */
struct $B85749F4DD7A62F99AD48BACFAFAF20F
{
	_BYTE gap0[8];
	_GUID *puuid;
};

/* 1264 */
struct $33C66C203C178B1877F51066E6F81DBA
{
	_BYTE gap0[8];
	tagCLIPDATA *pclipdata;
};

/* 1265 */
struct $2A67B209B166F81C80F8F87018A058D0
{
	_BYTE gap0[8];
	tagBSTRBLOB bstrblobVal;
};

/* 1266 */
struct $10A36B986B6516D2856927032D49B349
{
	_BYTE gap0[8];
	tagBLOB blob;
};

/* 1267 */
struct $17BA733FE6B8BEB3CC80B954432F0727
{
	_BYTE gap0[8];
	char *pszVal;
};

/* 1268 */
struct $A123DDE5155BABE8656CED1ACF96B10E
{
	_BYTE gap0[8];
	wchar_t *pwszVal;
};

/* 1269 */
struct $47AC944E27A2993A0815CC8373C7C03C
{
	_BYTE gap0[8];
	IStream *pStream;
};

/* 1270 */
struct $DAEB6E4AFC89B9019E77E2DE9F7B5817
{
	_BYTE gap0[8];
	IStorage *pStorage;
};

/* 1271 */
struct $67394463C83E456FB14EA0983F8408DE
{
	_BYTE gap0[8];
	tagVersionedStream *pVersionedStream;
};

/* 1272 */
struct $2DCEC35734C790F950B86BCE6AF7243A
{
	_BYTE gap0[8];
	tagCAC cac;
};

/* 1273 */
struct $F675AEF11D09BCC5355E075E8A5D6DC0
{
	_BYTE gap0[8];
	tagCAUB caub;
};

/* 1274 */
struct $CAEBE18636C2D1EE895E8E2DA4E7D0F0
{
	_BYTE gap0[8];
	tagCAI cai;
};

/* 1275 */
struct $A5EB79324AE9E5CE33FA1CBFDB25CCC8
{
	_BYTE gap0[8];
	tagCAUI caui;
};

/* 1276 */
struct $57724DFA9146F4BC6C54346B472E87D2
{
	_BYTE gap0[8];
	tagCAL cal;
};

/* 1277 */
struct $889D26F82660DE39CC7E49CCDC930E27
{
	_BYTE gap0[8];
	tagCAUL caul;
};

/* 1278 */
struct $BDB04038E7475D70F244406C68DC8E0B
{
	_BYTE gap0[8];
	tagCAH cah;
};

/* 1279 */
struct $6332465D50B82FF48B96B30B73F7AA2B
{
	_BYTE gap0[8];
	tagCAUH cauh;
};

/* 1280 */
struct $C422DDA079240CF64563C629BCCA96B7
{
	_BYTE gap0[8];
	tagCAFLT caflt;
};

/* 1281 */
struct $803A1DAC021AD9B9426B5695446E1518
{
	_BYTE gap0[8];
	tagCADBL cadbl;
};

/* 1282 */
struct $59D856B7DB088706DA412B885630E522
{
	_BYTE gap0[8];
	tagCABOOL cabool;
};

/* 1283 */
struct $756446A48509C35A09A394B59E8C9F36
{
	_BYTE gap0[8];
	tagCASCODE cascode;
};

/* 1284 */
struct $657D8C297E1077B54CE3183F23F5E1D9
{
	_BYTE gap0[8];
	tagCACY cacy;
};

/* 1285 */
struct $58853329F83D3E75D8CFD5990A8DD7E3
{
	_BYTE gap0[8];
	tagCADATE cadate;
};

/* 1286 */
struct $0A39D9E8C51016DA6EC75B43D4966514
{
	_BYTE gap0[8];
	tagCAFILETIME cafiletime;
};

/* 1287 */
struct $F9158E07B19F593AC20C5ABC6055BCDD
{
	_BYTE gap0[8];
	tagCACLSID cauuid;
};

/* 1288 */
struct $8E01387C0B19FE189F729493872D8D58
{
	_BYTE gap0[8];
	tagCACLIPDATA caclipdata;
};

/* 1289 */
struct $609C16BBF5C7E11508FB5219E911DD0F
{
	_BYTE gap0[8];
	tagCABSTR cabstr;
};

/* 1290 */
struct $F78A45A85202B5B126EF95B7479B733E
{
	_BYTE gap0[8];
	tagCABSTRBLOB cabstrblob;
};

/* 1291 */
struct $43CF64944369848C8FAAE43F8B6C4BD5
{
	_BYTE gap0[8];
	tagCALPSTR calpstr;
};

/* 1292 */
struct $A5CBF9E6C1F7EFAAFD94DF9194BF04A3
{
	_BYTE gap0[8];
	tagCALPWSTR calpwstr;
};

/* 1293 */
struct $2EABAB1DDDCE2B030D461445BBEEE17F
{
	_BYTE gap0[8];
	tagCAPROPVARIANT capropvar;
};

/* 1294 */
struct $130FCF504FEBCC591E867F19732C7513
{
	_BYTE gap0[8];
	tagPROPVARIANT *pvarVal;
};

/* 1295 */
union $60329FFB91D3336A63DD68766A718BDF
{
	$5DF3780F58367B9F2537DF425A8A812E __s0;
	tagDEC decVal;
	$F28A51B4B40B0D33C72915D739D42B4B __s2;
	$31126B8528A05AF3606C6D495FD178E8 __s3;
	$48802A31D3D0701BC13CEF9CEA041E7B __s4;
	$6D336DA143C556260FF80C12817B08DB __s5;
	$B644145F46FF1F932B106BFA6CC3F6D9 __s6;
	$5CA90CF57237397281FB12BFD52C1905 __s7;
	$E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
	$85FE272EDEBAC28D8662FB976C396DA9 __s9;
	$5DEEB8C12D8E7706494DDF7678F51FD0 __s10;
	$50230A970D9734D4E9774CFC619DF0F6 __s11;
	$4C0EC2258454B893CE739DAE89D8DB7B __s12;
	$6DB36323059316E675433BB10D285009 __s13;
	$8E3C8731874D1B3BC66617C4DD3163A6 __s14;
	$55C861914D3B618EF4D1826B85635B40 __s15;
	$E94952165EEA9EEA990FEB33603E1B19 __s16;
	$211B9EFC3D2A58F78AD963804415CC1E __s17;
	$B85749F4DD7A62F99AD48BACFAFAF20F __s18;
	$33C66C203C178B1877F51066E6F81DBA __s19;
	$7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
	$2A67B209B166F81C80F8F87018A058D0 __s21;
	$10A36B986B6516D2856927032D49B349 __s22;
	$17BA733FE6B8BEB3CC80B954432F0727 __s23;
	$A123DDE5155BABE8656CED1ACF96B10E __s24;
	$B5FC3BE2CD693F4224822296CDE54E94 __s25;
	$A6D453B82705B1818A1C8182EB1DDF88 __s26;
	$47AC944E27A2993A0815CC8373C7C03C __s27;
	$DAEB6E4AFC89B9019E77E2DE9F7B5817 __s28;
	$67394463C83E456FB14EA0983F8408DE __s29;
	$9EE3DF5DB614B3EEBDEA9CB174F7C679 __s30;
	$2DCEC35734C790F950B86BCE6AF7243A __s31;
	$F675AEF11D09BCC5355E075E8A5D6DC0 __s32;
	$CAEBE18636C2D1EE895E8E2DA4E7D0F0 __s33;
	$A5EB79324AE9E5CE33FA1CBFDB25CCC8 __s34;
	$57724DFA9146F4BC6C54346B472E87D2 __s35;
	$889D26F82660DE39CC7E49CCDC930E27 __s36;
	$BDB04038E7475D70F244406C68DC8E0B __s37;
	$6332465D50B82FF48B96B30B73F7AA2B __s38;
	$C422DDA079240CF64563C629BCCA96B7 __s39;
	$803A1DAC021AD9B9426B5695446E1518 __s40;
	$59D856B7DB088706DA412B885630E522 __s41;
	$756446A48509C35A09A394B59E8C9F36 __s42;
	$657D8C297E1077B54CE3183F23F5E1D9 __s43;
	$58853329F83D3E75D8CFD5990A8DD7E3 __s44;
	$0A39D9E8C51016DA6EC75B43D4966514 __s45;
	$F9158E07B19F593AC20C5ABC6055BCDD __s46;
	$8E01387C0B19FE189F729493872D8D58 __s47;
	$609C16BBF5C7E11508FB5219E911DD0F __s48;
	$F78A45A85202B5B126EF95B7479B733E __s49;
	$43CF64944369848C8FAAE43F8B6C4BD5 __s50;
	$A5CBF9E6C1F7EFAAFD94DF9194BF04A3 __s51;
	$2EABAB1DDDCE2B030D461445BBEEE17F __s52;
	$E1D71D20C3D01115E20D79FAE9629CE8 __s53;
	$166B1F81F6EA96F97683A65F38FB1A59 __s54;
	$76732A64405C0E287FCB302687644550 __s55;
	$5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
	$E5FC128E66C26C95254032BA69D36E74 __s57;
	$886F8AE9D7C8B1B861B6CA58D67B682A __s58;
	$CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
	$2516E53E690D8CC5659AAB7EDC49E664 __s60;
	$BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
	$2CABE618CF1C2625A4479554E4967E0A __s62;
	$AAA92DA1D6E1B0E8462F69216B62027C __s63;
	$19BCCFDBEBF83AAB77363BCD282A4AA0 __s64;
	$F7167AE7A8ABA03C094C204FB1564A28 __s65;
	$C875091070903F77AB16B70E97A907D8 __s66;
	$6857AE69DB7C952EEFD665431A7B503A __s67;
	$BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
	$8BB4AAF6B07F95EEC25EC1228543B9C9 __s69;
	$83DAF18245D7B36FFD7CB4E14CD4A8F8 __s70;
	$EC0E2A783D0F22CFA46980EFB72EF2A0 __s71;
	$130FCF504FEBCC591E867F19732C7513 __s72;
};

/* 1257 */
struct tagPROPVARIANT
{
	$60329FFB91D3336A63DD68766A718BDF ___u0;
};

/* 1296 */
union __m128
{
	float m128_f32[4];
	unsigned __int64 m128_u64[2];
	char m128_i8[16];
	__int16 m128_i16[8];
	int m128_i32[4];
	__int64 m128_i64[2];
	char m128_u8[16];
	unsigned __int16 m128_u16[8];
	unsigned int m128_u32[4];
};

/* 1297 */
struct _lldiv_t
{
	__int64 quot;
	__int64 rem;
};

/* 11245 */
enum tagTYPEKIND
{
	TKIND_ENUM = 0x0,
	TKIND_RECORD = 0x1,
	TKIND_MODULE = 0x2,
	TKIND_INTERFACE = 0x3,
	TKIND_DISPATCH = 0x4,
	TKIND_COCLASS = 0x5,
	TKIND_ALIAS = 0x6,
	TKIND_UNION = 0x7,
	TKIND_MAX = 0x8,
};

/* 1298 */
struct tagTYPEATTR
{
	_GUID guid;
	unsigned int lcid;
	unsigned int dwReserved;
	int memidConstructor;
	int memidDestructor;
	wchar_t *lpstrSchema;
	unsigned int cbSizeInstance;
	tagTYPEKIND typekind;
	unsigned __int16 cFuncs;
	unsigned __int16 cVars;
	unsigned __int16 cImplTypes;
	unsigned __int16 cbSizeVft;
	unsigned __int16 cbAlignment;
	unsigned __int16 wTypeFlags;
	unsigned __int16 wMajorVerNum;
	unsigned __int16 wMinorVerNum;
	tagTYPEDESC tdescAlias;
	tagIDLDESC idldescType;
};

/* 1299 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_19
{
	const void *pVFTable;
	void *spare;
	char name[19];
};

/* 1300 */
struct _s__ThrowInfo
{
	unsigned int attributes;
	void (__cdecl *pmfnUnwind)(void *);
	int (__cdecl *pForwardCompat)();
	_s__CatchableTypeArray *pCatchableTypeArray;
};

/* 1301 */
struct __cppobj IEnumSTATSTG : IUnknown
{
};

/* 1302 */
struct __cppobj ITypeLib : IUnknown
{
};

/* 1303 */
struct $_s__CatchableTypeArray$_extraBytes_20
{
	int nCatchableTypes;
	_s__CatchableType *arrayOfCatchableTypes[5];
};

/* 1304 */
struct localerefcount
{
	char *locale;
	wchar_t *wlocale;
	int *refcount;
	int *wrefcount;
};

/* 1305 */
struct __cppobj __vc_attributes::threadingAttribute
{
	__vc_attributes::threadingAttribute::threading_e value;
};

/* 1306 */
struct __cppobj __declspec(align(4)) __vc_attributes::event_receiverAttribute
{
	__vc_attributes::event_receiverAttribute::type_e type;
	bool layout_dependent;
};

/* 1307 */
struct __cppobj __vc_attributes::aggregatableAttribute
{
	__vc_attributes::aggregatableAttribute::type_e type;
};

/* 1308 */
struct __cppobj __declspec(align(4)) __vc_attributes::event_sourceAttribute
{
	__vc_attributes::event_sourceAttribute::type_e type;
	__vc_attributes::event_sourceAttribute::optimize_e optimize;
	bool decorate;
};

/* 1309 */
struct __cppobj __vc_attributes::moduleAttribute
{
	__vc_attributes::moduleAttribute::type_e type;
	const char *name;
	const char *version;
	const char *uuid;
	int lcid;
	bool control;
	const char *helpstring;
	int helpstringcontext;
	const char *helpstringdll;
	const char *helpfile;
	int helpcontext;
	bool hidden;
	bool restricted;
	const char *custom;
	const char *resource_name;
};

/* 1310 */
struct __cppobj __vc_attributes::helper_attributes::usageAttribute
{
	unsigned int value;
};

/* 1311 */
struct __cppobj __vc_attributes::helper_attributes::v1_alttypeAttribute
{
	__vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

/* 1312 */
struct $8C32E5D3ED1763EA38B94549972C5F20
{
	unsigned __int32 LongFunction : 1;
	unsigned __int32 Persistent : 1;
	unsigned __int32 Private : 30;
};

/* 1313 */
union $F7D6FBC11E6022EC5347B2E6AC08E232
{
	unsigned int Flags;
	$8C32E5D3ED1763EA38B94549972C5F20 s;
};

/* 11246 */
enum _TP_CALLBACK_PRIORITY
{
	TP_CALLBACK_PRIORITY_HIGH = 0x0,
	TP_CALLBACK_PRIORITY_NORMAL = 0x1,
	TP_CALLBACK_PRIORITY_LOW = 0x2,
	TP_CALLBACK_PRIORITY_INVALID = 0x3,
};

/* 1314 */
struct _TP_CALLBACK_ENVIRON_V3
{
	unsigned int Version;
	_TP_POOL *Pool;
	_TP_CLEANUP_GROUP *CleanupGroup;
	void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
	void *RaceDll;
	_ACTIVATION_CONTEXT *ActivationContext;
	void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
	$F7D6FBC11E6022EC5347B2E6AC08E232 u;
	_TP_CALLBACK_PRIORITY CallbackPriority;
	unsigned int Size;
};

/* 1315 */
struct $_s__CatchableTypeArray$_extraBytes_8
{
	int nCatchableTypes;
	_s__CatchableType *arrayOfCatchableTypes[2];
};

/* 1316 */
struct _ldiv_t
{
	int quot;
	int rem;
};

/* 1317 */
union $A5A483E05FC9B52B872A8DCFA58CFF52
{
	unsigned int Offset;
	void *Pointer;
};

/* 1318 */
struct _OVERLAPPED
{
	unsigned int Internal;
	unsigned int InternalHigh;
	$A5A483E05FC9B52B872A8DCFA58CFF52 ___u2;
	unsigned int OffsetHigh;
	void *hEvent;
};

/* 1319 */
struct _iobuf
{
	char *_ptr;
	int _cnt;
	char *_base;
	int _flag;
	int _file;
	int _charbuf;
	int _bufsiz;
	char *_tmpfname;
};

/* 1320 */
struct ip_msfilter
{
	in_addr imsf_multiaddr;
	in_addr imsf_interface;
	MULTICAST_MODE_TYPE imsf_fmode;
	unsigned int imsf_numsrc;
	in_addr imsf_slist[1];
};

/* 1321 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_23
{
	const void *pVFTable;
	void *spare;
	char name[23];
};

/* 1322 */
struct tm
{
	int tm_sec;
	int tm_min;
	int tm_hour;
	int tm_mday;
	int tm_mon;
	int tm_year;
	int tm_wday;
	int tm_yday;
	int tm_isdst;
};

/* 1323 */
struct __cppobj sigslot::multi_threaded_global
{
	sigslot::multi_threaded_globalVtbl *vfptr;
};

/* 1324 */
struct sigslot::multi_threaded_globalVtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::multi_threaded_global *this, unsigned int);
	void (__thiscall *lock)(sigslot::multi_threaded_global *this);
	void (__thiscall *unlock)(sigslot::multi_threaded_global *this);
};

/* 1325 */
struct __cppobj sigslot::multi_threaded_local
{
	sigslot::multi_threaded_localVtbl *vfptr;
	_RTL_CRITICAL_SECTION m_critsec;
};

/* 1326 */
struct sigslot::multi_threaded_localVtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::multi_threaded_local *this, unsigned int);
	void (__thiscall *lock)(sigslot::multi_threaded_local *this);
	void (__thiscall *unlock)(sigslot::multi_threaded_local *this);
};

/* 1327 */
struct __cppobj sigslot::lock_block<sigslot::single_threaded>
{
	sigslot::single_threaded *m_mutex;
};

/* 1328 */
struct $_TypeDescriptor$_extraBytes_20
{
	const void *pVFTable;
	void *spare;
	char name[20];
};

/* 1329 */
union _Dconst
{
	unsigned __int16 _Word[8];
	float _Float;
	long double _Double;
	long double _Long_double;
};

/* 1330 */
struct __cppobj talk_base::CritScope
{
	talk_base::CriticalSection *pcrit_;
};

/* 1331 */
struct __cppobj talk_base::LogMessage
{
	std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > print_stream_;
	talk_base::LoggingSeverity severity_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > extra_;
	unsigned int warn_slow_logs_delay_;
};

/* 1332 */
struct __cppobj talk_base::ThreadManager
{
	unsigned int key_;
};

/* 1333 */
struct __cppobj talk_base::SignalThread::EnterExit
{
	talk_base::SignalThread *t_;
};

/* 1334 */
struct __cppobj talk_base::LogMultilineState
{
	unsigned int unprintable_count_[2];
};

/* 1335 */
struct __cppobj talk_base::SocketServerScope
{
	talk_base::SocketServer *old_ss_;
};

/* 1336 */
struct __cppobj talk_base::AsyncSocketAdapter : talk_base::AsyncSocket, sigslot::has_slots<sigslot::single_threaded>
{
	talk_base::AsyncSocket *socket_;
};

/* 1337 */
struct __cppobj talk_base::LogMessageVoidify
{
};

/* 1338 */
struct __cppobj talk_base::ComThread : talk_base::Thread
{
};

/* 1339 */
struct __cppobj talk_base::Runnable
{
	talk_base::RunnableVtbl *vfptr;
};

/* 1340 */
struct talk_base::RunnableVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::Runnable *this, unsigned int);
	void (__thiscall *Run)(talk_base::Runnable *this, talk_base::Thread *);
};

/* 1341 */
struct __cppobj talk_base::Traits<wchar_t>
{
};

/* 1342 */
struct __cppobj __declspec(align(4)) talk_base::TryCritScope
{
	talk_base::CriticalSection *pcrit_;
	bool locked_;
};

/* 1343 */
struct __cppobj talk_base::Traits<char>
{
};

/* 1344 */
struct __cppobj talk_base::AtomicOps
{
};

/* 1345 */
union __m64
{
	unsigned __int64 m64_u64;
	float m64_f32[2];
	char m64_i8[8];
	__int16 m64_i16[4];
	int m64_i32[2];
	__int64 m64_i64;
	char m64_u8[8];
	unsigned __int16 m64_u16[4];
	unsigned int m64_u32[2];
};

/* 1346 */
struct __cppobj talk_base::CryptStringImpl
{
	talk_base::CryptStringImplVtbl *vfptr;
};

/* 1350 */
struct talk_base::CryptStringImplVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::CryptStringImpl *this, unsigned int);
	unsigned int (__thiscall *GetLength)(talk_base::CryptStringImpl *this);
	void (__thiscall *CopyTo)(talk_base::CryptStringImpl *this, char *, bool);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *UrlEncode)(talk_base::CryptStringImpl *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result);
	talk_base::CryptStringImpl *(__thiscall *Copy)(talk_base::CryptStringImpl *this);
	void (__thiscall *CopyRawTo)(talk_base::CryptStringImpl *this, std::vector<unsigned char,std::allocator<unsigned char> > *);
};

/* 1347 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned char> > : std::_Container_base0
{
	char *_Myfirst;
	char *_Mylast;
	char *_Myend;
};

/* 1348 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > > : std::_Vector_val<std::_Simple_types<unsigned char> >
{
};

/* 1349 */
struct __cppobj std::vector<unsigned char,std::allocator<unsigned char> > : std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
{
};

/* 1351 */
struct std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *_Myval;
};

/* 1352 */
struct __cppobj sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1354 */
struct sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
	sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1355 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1356 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 1357 */
struct __cppobj std::_List_buy<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 1358 */
struct __cppobj std::list<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 1359 */
struct __cppobj sigslot::_signal_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1360 */
struct __cppobj sigslot::signal4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
};

/* 1364 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1365 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >
{
};

/* 1366 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > >
{
};

/* 1367 */
struct __cppobj std::list<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >
{
};

/* 1368 */
struct __cppobj sigslot::_signal_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1369 */
struct __cppobj sigslot::signal1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_signal_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
};

/* 1373 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1374 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 1375 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 1376 */
struct __cppobj std::list<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 1377 */
struct __cppobj sigslot::_signal_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1378 */
struct __cppobj sigslot::signal2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>
{
};

/* 1382 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1383 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> >
{
};

/* 1384 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > >
{
};

/* 1385 */
struct __cppobj std::list<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> >
{
};

/* 1386 */
struct __cppobj sigslot::_signal_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1387 */
struct __cppobj sigslot::signal2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> : sigslot::_signal_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>
{
};

/* 1391 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1392 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >
{
};

/* 1393 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > >
{
};

/* 1394 */
struct __cppobj std::list<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >
{
};

/* 1395 */
struct __cppobj sigslot::_signal_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1396 */
struct __cppobj sigslot::signal2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_signal_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
};

/* 1353 */
struct __cppobj talk_base::AsyncPacketSocket : sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> SignalReadPacket;
	sigslot::signal1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> SignalReadyToSend;
	sigslot::signal2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> SignalAddressReady;
	sigslot::signal1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> SignalConnect;
	sigslot::signal2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> SignalClose;
	sigslot::signal2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> SignalNewConnection;
};

/* 1361 */
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *_Myval;
};

/* 1370 */
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *_Myval;
};

/* 1379 */
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *_Myval;
};

/* 1388 */
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *_Myval;
};

/* 1362 */
struct __cppobj sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1371 */
struct __cppobj sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1380 */
struct __cppobj sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>
{
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1389 */
struct __cppobj sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1363 */
struct sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this, talk_base::AsyncPacketSocket *);
	sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1372 */
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this, talk_base::AsyncPacketSocket *, talk_base::SocketAddress *);
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1381 */
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *this, talk_base::AsyncPacketSocket *, int);
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *this);
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1390 */
struct sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this, talk_base::AsyncPacketSocket *, talk_base::AsyncPacketSocket *);
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this);
	sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1397 */
struct __cppobj talk_base::RandomGenerator
{
	talk_base::RandomGeneratorVtbl *vfptr;
};

/* 1398 */
struct talk_base::RandomGeneratorVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::RandomGenerator *this, unsigned int);
	bool (__thiscall *Init)(talk_base::RandomGenerator *this, const void *, unsigned int);
	bool (__thiscall *Generate)(talk_base::RandomGenerator *this, void *, unsigned int);
};

/* 1399 */
struct __cppobj talk_base::MessageDigest
{
	talk_base::MessageDigestVtbl *vfptr;
};

/* 1400 */
struct talk_base::MessageDigestVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::MessageDigest *this, unsigned int);
	unsigned int (__thiscall *Size)(talk_base::MessageDigest *this);
	void (__thiscall *Update)(talk_base::MessageDigest *this, const void *, unsigned int);
	unsigned int (__thiscall *Finish)(talk_base::MessageDigest *this, void *, unsigned int);
};

/* 1415 */
struct __cppobj talk_base::scoped_ptr<std::set<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *> > >
{
	std::set<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *> > *ptr;
};

/* 1401 */
struct __cppobj talk_base::TaskParent
{
	talk_base::TaskParentVtbl *vfptr;
	talk_base::TaskParent *parent_;
	talk_base::TaskRunner *runner_;
	bool child_error_;
	talk_base::scoped_ptr<std::set<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *> > > children_;
};

/* 1402 */
struct talk_base::TaskParentVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::TaskParent *this, unsigned int);
};

/* 1404 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::Task *> > : std::_Container_base0
{
	talk_base::Task **_Myfirst;
	talk_base::Task **_Mylast;
	talk_base::Task **_Myend;
};

/* 1405 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::Task *,std::allocator<talk_base::Task *> > > : std::_Vector_val<std::_Simple_types<talk_base::Task *> >
{
};

/* 1406 */
struct __cppobj std::vector<talk_base::Task *,std::allocator<talk_base::Task *> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::Task *,std::allocator<talk_base::Task *> > >
{
};

/* 1407 */
struct __cppobj __declspec(align(4)) talk_base::TaskRunner : talk_base::TaskParent, sigslot::has_slots<sigslot::single_threaded>
{
	std::vector<talk_base::Task *,std::allocator<talk_base::Task *> > tasks_;
	talk_base::Task *next_timeout_task_;
	bool tasks_running_;
};

/* 1409 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > : std::_Container_base0
{
	std::_Tree_node<talk_base::Task *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1410 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<talk_base::Task *,std::allocator<talk_base::Task *> > > : std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> >
{
};

/* 1411 */
struct __cppobj std::_Tree_buy<talk_base::Task *,std::allocator<talk_base::Task *> > : std::_Tree_alloc<0,std::_Tree_base_types<talk_base::Task *,std::allocator<talk_base::Task *> > >
{
};

/* 1412 */
struct __cppobj std::_Tree_comp<0,std::_Tset_traits<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *>,0> > : std::_Tree_buy<talk_base::Task *,std::allocator<talk_base::Task *> >
{
};

/* 1413 */
struct __cppobj std::_Tree<std::_Tset_traits<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *>,0> > : std::_Tree_comp<0,std::_Tset_traits<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *>,0> >
{
};

/* 1414 */
struct __cppobj std::set<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *> > : std::_Tree<std::_Tset_traits<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *>,0> >
{
};

/* 1403 */
struct __cppobj __declspec(align(8)) talk_base::Task : talk_base::TaskParent
{
	sigslot::signal0<sigslot::single_threaded> SignalTimeout;
	int state_;
	bool blocked_;
	bool done_;
	bool aborted_;
	bool busy_;
	bool error_;
	__int64 start_time_;
	__int64 timeout_time_;
	int timeout_seconds_;
	bool timeout_suspended_;
	int unique_id_;
};

/* 1408 */
struct std::_Tree_node<talk_base::Task *,void *>
{
	std::_Tree_node<talk_base::Task *,void *> *_Left;
	std::_Tree_node<talk_base::Task *,void *> *_Parent;
	std::_Tree_node<talk_base::Task *,void *> *_Right;
	char _Color;
	char _Isnil;
	talk_base::Task *_Myval;
};

/* 1416 */
struct _OSVERSIONINFOW
{
	unsigned int dwOSVersionInfoSize;
	unsigned int dwMajorVersion;
	unsigned int dwMinorVersion;
	unsigned int dwBuildNumber;
	unsigned int dwPlatformId;
	wchar_t szCSDVersion[128];
};

/* 1417 */
struct __cppobj buzz::XmlChild
{
	buzz::XmlChildVtbl *vfptr;
	buzz::XmlChild *next_child_;
};

/* 1422 */
union $3C38B4711F1695ADD3EB3BC3A18D80AB
{
	void (__thiscall *~XmlChild)(buzz::XmlChild *this);
	void *(__thiscall *__vecDelDtor)(buzz::XmlChild *this, unsigned int);
};

/* 1423 */
struct buzz::XmlChildVtbl
{
	bool (__thiscall *IsTextImpl)(buzz::XmlChild *this);
	buzz::XmlElement *(__thiscall *AsElementImpl)(buzz::XmlChild *this);
	buzz::XmlText *(__thiscall *AsTextImpl)(buzz::XmlChild *this);
	$3C38B4711F1695ADD3EB3BC3A18D80AB ___u3;
};

/* 1418 */
struct __cppobj buzz::QName
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > namespace_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > local_part_;
};

/* 1420 */
struct __cppobj __unaligned __declspec(align(4)) buzz::XmlElement : buzz::XmlChild
{
	buzz::QName name_;
	buzz::XmlAttr *first_attr_;
	buzz::XmlAttr *last_attr_;
	buzz::XmlChild *first_child_;
	buzz::XmlChild *last_child_;
	bool cdata_;
};

/* 1421 */
struct __cppobj buzz::XmlText : buzz::XmlChild
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > text_;
};

/* 1419 */
struct __cppobj buzz::XmlAttr
{
	buzz::XmlAttr *next_attr_;
	buzz::QName name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > value_;
};

/* 1424 */
struct __cppobj buzz::XmppOutputHandler
{
	buzz::XmppOutputHandlerVtbl *vfptr;
};

/* 1425 */
struct buzz::XmppOutputHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppOutputHandler *this, unsigned int);
	void (__thiscall *WriteOutput)(buzz::XmppOutputHandler *this, const char *, unsigned int);
	void (__thiscall *StartTls)(buzz::XmppOutputHandler *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	void (__thiscall *CloseConnection)(buzz::XmppOutputHandler *this);
};

/* 1426 */
struct __cppobj buzz::XmppClientInterface
{
	buzz::XmppClientInterfaceVtbl *vfptr;
	sigslot::signal0<sigslot::single_threaded> SignalDisconnected;
};

/* 1437 */
struct buzz::XmppClientInterfaceVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppClientInterface *this, unsigned int);
	buzz::XmppEngine::State (__thiscall *GetState)(buzz::XmppClientInterface *this);
	buzz::Jid *(__thiscall *jid)(buzz::XmppClientInterface *this);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *NextId)(buzz::XmppClientInterface *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result);
	buzz::XmppReturnStatus (__thiscall *SendStanza)(buzz::XmppClientInterface *this, buzz::XmlElement *);
	buzz::XmppReturnStatus (__thiscall *SendStanzaError)(buzz::XmppClientInterface *this, buzz::XmlElement *, buzz::XmppStanzaError, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	void (__thiscall *AddXmppTask)(buzz::XmppClientInterface *this, buzz::XmppTask *, buzz::XmppEngine::HandlerLevel);
	void (__thiscall *RemoveXmppTask)(buzz::XmppClientInterface *this, buzz::XmppTask *);
};

/* 1427 */
const struct __cppobj buzz::Jid
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > node_name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > domain_name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > resource_name_;
};

/* 1428 */
struct __cppobj buzz::XmppTaskParentInterface : talk_base::Task
{
};

/* 1429 */
struct __cppobj __declspec(align(8)) buzz::XmppTaskBase : buzz::XmppTaskParentInterface
{
	buzz::XmppTaskParentInterface *parent_;
};

/* 1430 */
struct __cppobj buzz::XmppStanzaHandler
{
	buzz::XmppStanzaHandlerVtbl *vfptr;
};

/* 1432 */
struct __cppobj std::_Deque_val<std::_Deque_simple_types<buzz::XmlElement *> > : std::_Container_base12
{
	buzz::XmlElement ***_Map;
	unsigned int _Mapsize;
	unsigned int _Myoff;
	unsigned int _Mysize;
};

/* 1433 */
struct __cppobj std::_Deque_alloc<0,std::_Deque_base_types<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > > : std::_Deque_val<std::_Deque_simple_types<buzz::XmlElement *> >
{
};

/* 1434 */
struct __cppobj std::deque<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > : std::_Deque_alloc<0,std::_Deque_base_types<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > >
{
};

/* 1435 */
struct __cppobj talk_base::scoped_ptr<buzz::XmlElement>
{
	buzz::XmlElement *ptr;
};

/* 1436 */
struct __cppobj buzz::XmppTask : buzz::XmppTaskBase, buzz::XmppStanzaHandler, sigslot::has_slots<sigslot::single_threaded>
{
	bool stopped_;
	std::deque<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > stanza_queue_;
	talk_base::scoped_ptr<buzz::XmlElement> next_stanza_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > id_;
};

/* 1431 */
struct buzz::XmppStanzaHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppStanzaHandler *this, unsigned int);
	bool (__thiscall *HandleStanza)(buzz::XmppStanzaHandler *this, buzz::XmlElement *);
};

/* 1438 */
struct std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *_Myval;
};

/* 1439 */
struct __cppobj sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1441 */
struct sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *this, cricket::Transport *);
	sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1442 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1443 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> >
{
};

/* 1444 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > >
{
};

/* 1445 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> >
{
};

/* 1446 */
struct __cppobj sigslot::_signal_base1<cricket::Transport *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1447 */
struct __cppobj sigslot::signal1<cricket::Transport *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::Transport *,sigslot::single_threaded>
{
};

/* 1455 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1456 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >
{
};

/* 1457 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > >
{
};

/* 1458 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >
{
};

/* 1459 */
struct __cppobj sigslot::_signal_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1460 */
struct __cppobj sigslot::signal2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
};

/* 1464 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1465 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1466 */
struct __cppobj std::_List_buy<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 1467 */
struct __cppobj std::list<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1468 */
struct __cppobj sigslot::_signal_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1469 */
struct __cppobj sigslot::signal3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>
{
};

/* 1473 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1474 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1475 */
struct __cppobj std::_List_buy<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 1476 */
struct __cppobj std::list<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1477 */
struct __cppobj sigslot::_signal_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1478 */
struct __cppobj sigslot::signal6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>
{
};

/* 1677 */
struct __cppobj talk_base::scoped_ptr<cricket::TransportDescription>
{
	cricket::TransportDescription *ptr;
};

/* 1728 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1729 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<int const ,cricket::Transport::ChannelMapEntry>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > >
{
};

/* 1730 */
struct __cppobj std::_Tree_buy<std::pair<int const ,cricket::Transport::ChannelMapEntry>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<int const ,cricket::Transport::ChannelMapEntry>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > >
{
};

/* 1731 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> >,0> > : std::_Tree_buy<std::pair<int const ,cricket::Transport::ChannelMapEntry>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > >
{
};

/* 1732 */
struct __cppobj std::_Tree<std::_Tmap_traits<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> >,0> >
{
};

/* 1733 */
struct __cppobj std::map<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > : std::_Tree<std::_Tmap_traits<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> >,0> >
{
};

/* 1451 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::Candidate> > : std::_Container_base0
{
	cricket::Candidate *_Myfirst;
	cricket::Candidate *_Mylast;
	cricket::Candidate *_Myend;
};

/* 1452 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::Candidate,std::allocator<cricket::Candidate> > > : std::_Vector_val<std::_Simple_types<cricket::Candidate> >
{
};

/* 1453 */
const struct __cppobj std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::Candidate,std::allocator<cricket::Candidate> > >
{
};

/* 1440 */
struct __cppobj __declspec(align(8)) cricket::Transport : talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::Transport *,sigslot::single_threaded> SignalReadableState;
	sigslot::signal1<cricket::Transport *,sigslot::single_threaded> SignalWritableState;
	sigslot::signal1<cricket::Transport *,sigslot::single_threaded> SignalConnecting;
	sigslot::signal1<cricket::Transport *,sigslot::single_threaded> SignalRequestSignaling;
	sigslot::signal2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> SignalCandidatesReady;
	sigslot::signal1<cricket::Transport *,sigslot::single_threaded> SignalCandidatesAllocationDone;
	sigslot::signal3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> SignalRouteChange;
	sigslot::signal6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> SignalTransportError;
	sigslot::signal0<sigslot::single_threaded> SignalRoleConflict;
	talk_base::Thread *signaling_thread_;
	talk_base::Thread *worker_thread_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > type_;
	cricket::PortAllocator *allocator_;
	bool destroyed_;
	cricket::TransportState readable_;
	cricket::TransportState writable_;
	bool was_writable_;
	bool connect_requested_;
	cricket::IceRole ice_role_;
	unsigned __int64 tiebreaker_;
	cricket::TransportProtocol protocol_;
	cricket::IceMode remote_ice_mode_;
	talk_base::scoped_ptr<cricket::TransportDescription> local_description_;
	talk_base::scoped_ptr<cricket::TransportDescription> remote_description_;
	std::map<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > channels_;
	std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > ready_candidates_;
	talk_base::CriticalSection crit_;
};

/* 1448 */
struct std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *_Myval;
};

/* 1461 */
struct std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *_Myval;
};

/* 1470 */
struct std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *_Myval;
};

/* 1479 */
struct __cppobj talk_base::scoped_ptr<talk_base::CryptStringImpl const >
{
	talk_base::CryptStringImpl *ptr;
};

/* 1480 */
struct __cppobj talk_base::CryptString
{
	talk_base::scoped_ptr<talk_base::CryptStringImpl const > impl_;
};

/* 1481 */
struct __cppobj talk_base::ProxyInfo
{
	talk_base::ProxyType type;
	talk_base::SocketAddress address;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > autoconfig_url;
	bool autodetect;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > bypass_list;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > username;
	talk_base::CryptString password;
};

/* 1662 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1663 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > >
{
};

/* 1664 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > >
{
};

/* 1665 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > >
{
};

/* 1666 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >,0> >
{
};

/* 1667 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >,0> >
{
};

/* 1668 */
struct __cppobj __declspec(align(4)) cricket::PortAllocator : sigslot::has_slots<sigslot::single_threaded>
{
	unsigned int flags_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > agent_;
	talk_base::ProxyInfo proxy_;
	int min_port_;
	int max_port_;
	unsigned int step_delay_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > muxers_;
	bool allow_tcp_listen_;
};

/* 1669 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Container_base0
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Myfirst;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Mylast;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Myend;
};

/* 1670 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 1671 */
struct __cppobj std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 1675 */
struct __cppobj talk_base::scoped_ptr<talk_base::SSLFingerprint>
{
	talk_base::SSLFingerprint *ptr;
};

/* 1676 */
struct __cppobj cricket::TransportDescription
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > transport_type;
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > transport_options;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > ice_ufrag;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > ice_pwd;
	cricket::IceMode ice_mode;
	cricket::ConnectionRole connection_role;
	talk_base::scoped_ptr<talk_base::SSLFingerprint> identity_fingerprint;
	std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > candidates;
};

/* 1726 */
struct __cppobj cricket::Transport::ChannelMapEntry
{
	cricket::TransportChannelImpl *impl_;
	bool candidates_allocated_;
	int ref_;
};

/* 1727 */
struct __cppobj std::pair<int const ,cricket::Transport::ChannelMapEntry>
{
	const int first;
	cricket::Transport::ChannelMapEntry second;
};

/* 1678 */
struct __cppobj std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *>
{
	std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> *_Left;
	std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> *_Parent;
	std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<int const ,cricket::Transport::ChannelMapEntry> _Myval;
};

/* 1450 */
struct __cppobj cricket::Candidate
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > id_;
	int component_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > protocol_;
	talk_base::SocketAddress address_;
	unsigned int priority_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > username_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > type_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > network_name_;
	unsigned int generation_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > foundation_;
	talk_base::SocketAddress related_address_;
};

/* 1449 */
struct __cppobj sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1462 */
struct __cppobj sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>
{
	sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1471 */
struct __cppobj sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>
{
	sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1661 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::PortAllocatorSessionMuxer *second;
};

/* 1482 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> _Myval;
};

/* 1672 */
struct __cppobj talk_base::scoped_array<char>
{
	char *ptr;
};

/* 1673 */
struct __cppobj talk_base::Buffer
{
	talk_base::scoped_array<char> data_;
	unsigned int length_;
	unsigned int capacity_;
};

/* 1674 */
struct __cppobj talk_base::SSLFingerprint
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > algorithm;
	talk_base::Buffer digest;
};

/* 1683 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1684 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> >
{
};

/* 1685 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > >
{
};

/* 1686 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> >
{
};

/* 1687 */
struct __cppobj sigslot::_signal_base1<cricket::TransportChannel *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1688 */
struct __cppobj sigslot::signal1<cricket::TransportChannel *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::TransportChannel *,sigslot::single_threaded>
{
};

/* 1692 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1693 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> >
{
};

/* 1694 */
struct __cppobj std::_List_buy<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > >
{
};

/* 1695 */
struct __cppobj std::list<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> >
{
};

/* 1696 */
struct __cppobj sigslot::_signal_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1697 */
struct __cppobj sigslot::signal4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> : sigslot::_signal_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>
{
};

/* 1701 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1702 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1703 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 1704 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1705 */
struct __cppobj sigslot::_signal_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1706 */
struct __cppobj sigslot::signal2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>
{
};

/* 1681 */
struct __cppobj __declspec(align(4)) cricket::TransportChannel : sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::TransportChannel *,sigslot::single_threaded> SignalReadableState;
	sigslot::signal1<cricket::TransportChannel *,sigslot::single_threaded> SignalWritableState;
	sigslot::signal1<cricket::TransportChannel *,sigslot::single_threaded> SignalReadyToSend;
	sigslot::signal4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> SignalReadPacket;
	sigslot::signal2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> SignalRouteChange;
	sigslot::signal1<cricket::TransportChannel *,sigslot::single_threaded> SignalDestroyed;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name_;
	int component_;
	bool readable_;
	bool writable_;
};

/* 1711 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1712 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> >
{
};

/* 1713 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > >
{
};

/* 1714 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> >
{
};

/* 1715 */
struct __cppobj sigslot::_signal_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1716 */
struct __cppobj sigslot::signal1<cricket::TransportChannelImpl *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>
{
};

/* 1720 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1721 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1722 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 1723 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1724 */
struct __cppobj sigslot::_signal_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1725 */
struct __cppobj sigslot::signal2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>
{
};

/* 1709 */
struct __cppobj cricket::TransportChannelImpl : cricket::TransportChannel
{
	sigslot::signal1<cricket::TransportChannelImpl *,sigslot::single_threaded> SignalRequestSignaling;
	sigslot::signal2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> SignalCandidateReady;
	sigslot::signal1<cricket::TransportChannelImpl *,sigslot::single_threaded> SignalCandidatesAllocationDone;
	sigslot::signal1<cricket::TransportChannelImpl *,sigslot::single_threaded> SignalRoleConflict;
};

/* 1454 */
struct sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, cricket::Transport *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
	sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1463 */
struct sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *this, cricket::Transport *, int, cricket::Candidate *);
	sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *this);
	sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1472 */
struct sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this, cricket::Transport *, buzz::XmlElement *, buzz::QName *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, buzz::XmlElement *);
	sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this);
	sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1487 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1488 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> >
{
};

/* 1489 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > >
{
};

/* 1490 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> >
{
};

/* 1491 */
struct __cppobj sigslot::_signal_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1492 */
struct __cppobj sigslot::signal1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>
{
};

/* 1616 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > : std::_Container_base0
{
	cricket::PortInterface **_Myfirst;
	cricket::PortInterface **_Mylast;
	cricket::PortInterface **_Myend;
};

/* 1617 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortInterface *,std::allocator<cricket::PortInterface *> > > : std::_Vector_val<std::_Simple_types<cricket::PortInterface *> >
{
};

/* 1618 */
struct __cppobj std::vector<cricket::PortInterface *,std::allocator<cricket::PortInterface *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortInterface *,std::allocator<cricket::PortInterface *> > >
{
};

/* 1647 */
struct __cppobj talk_base::scoped_ptr<cricket::PortAllocatorSession>
{
	cricket::PortAllocatorSession *ptr;
};

/* 1658 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSessionProxy *> > : std::_Container_base0
{
	cricket::PortAllocatorSessionProxy **_Myfirst;
	cricket::PortAllocatorSessionProxy **_Mylast;
	cricket::PortAllocatorSessionProxy **_Myend;
};

/* 1659 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortAllocatorSessionProxy *,std::allocator<cricket::PortAllocatorSessionProxy *> > > : std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSessionProxy *> >
{
};

/* 1660 */
struct __cppobj std::vector<cricket::PortAllocatorSessionProxy *,std::allocator<cricket::PortAllocatorSessionProxy *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortAllocatorSessionProxy *,std::allocator<cricket::PortAllocatorSessionProxy *> > >
{
};

/* 1485 */
struct __cppobj __declspec(align(4)) cricket::PortAllocatorSessionMuxer : talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> SignalDestroyed;
	talk_base::Thread *worker_thread_;
	std::vector<cricket::PortInterface *,std::allocator<cricket::PortInterface *> > ports_;
	talk_base::scoped_ptr<cricket::PortAllocatorSession> session_;
	std::vector<cricket::PortAllocatorSessionProxy *,std::allocator<cricket::PortAllocatorSessionProxy *> > session_proxies_;
	bool candidate_done_signal_received_;
};

/* 1679 */
struct std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *_Myval;
};

/* 1689 */
struct std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *_Myval;
};

/* 1698 */
struct std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *_Myval;
};

/* 1707 */
struct std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *_Myval;
};

/* 1717 */
struct std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *_Myval;
};

/* 1483 */
struct std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *_Myval;
};

/* 1592 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1593 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> >
{
};

/* 1594 */
struct __cppobj std::_List_buy<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > >
{
};

/* 1595 */
struct __cppobj std::list<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> >
{
};

/* 1596 */
struct __cppobj sigslot::_signal_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1597 */
struct __cppobj sigslot::signal6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> : sigslot::_signal_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>
{
};

/* 1601 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1602 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> >
{
};

/* 1603 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > >
{
};

/* 1604 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> >
{
};

/* 1605 */
struct __cppobj sigslot::_signal_base1<cricket::PortInterface *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1606 */
struct __cppobj sigslot::signal1<cricket::PortInterface *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::PortInterface *,sigslot::single_threaded>
{
};

/* 1610 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1611 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 1612 */
struct __cppobj std::_List_buy<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 1613 */
struct __cppobj std::list<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 1614 */
struct __cppobj sigslot::_signal_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1615 */
struct __cppobj sigslot::signal4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
};

/* 1493 */
struct __cppobj cricket::PortInterface
{
	cricket::PortInterfaceVtbl *vfptr;
	sigslot::signal6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> SignalUnknownAddress;
	sigslot::signal1<cricket::PortInterface *,sigslot::single_threaded> SignalDestroyed;
	sigslot::signal1<cricket::PortInterface *,sigslot::single_threaded> SignalRoleConflict;
	sigslot::signal4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> SignalReadPacket;
};

/* 1623 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1624 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> >
{
};

/* 1625 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > >
{
};

/* 1626 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> >
{
};

/* 1627 */
struct __cppobj sigslot::_signal_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1628 */
struct __cppobj sigslot::signal2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_signal_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>
{
};

/* 1632 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1633 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >
{
};

/* 1634 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > >
{
};

/* 1635 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >
{
};

/* 1636 */
struct __cppobj sigslot::_signal_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1637 */
struct __cppobj sigslot::signal2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
};

/* 1641 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1642 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> >
{
};

/* 1643 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > >
{
};

/* 1644 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> >
{
};

/* 1645 */
struct __cppobj sigslot::_signal_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1646 */
struct __cppobj sigslot::signal1<cricket::PortAllocatorSession *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>
{
};

/* 1621 */
struct __cppobj cricket::PortAllocatorSession : sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> SignalPortReady;
	sigslot::signal2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> SignalCandidatesReady;
	sigslot::signal1<cricket::PortAllocatorSession *,sigslot::single_threaded> SignalCandidatesAllocationDone;
	sigslot::signal1<cricket::PortAllocatorSession *,sigslot::single_threaded> SignalDestroyed;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name_;
	int component_;
	unsigned int flags_;
	unsigned int generation_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > username_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password_;
};

/* 1651 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1652 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > >
{
};

/* 1653 */
struct __cppobj std::_Tree_buy<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > >
{
};

/* 1654 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >,0> > : std::_Tree_buy<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > >
{
};

/* 1655 */
struct __cppobj std::_Tree<std::_Tmap_traits<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >,0> >
{
};

/* 1656 */
struct __cppobj std::map<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > : std::_Tree<std::_Tmap_traits<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >,0> >
{
};

/* 1657 */
struct __cppobj cricket::PortAllocatorSessionProxy : cricket::PortAllocatorSession
{
	cricket::PortAllocatorSession *impl_;
	std::map<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > proxy_ports_;
};

/* 1680 */
struct __cppobj sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1690 */
struct __cppobj sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>
{
	sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1699 */
struct __cppobj sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1708 */
struct __cppobj sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1718 */
struct __cppobj sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1484 */
struct __cppobj sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1587 */
struct cricket::PortInterfaceVtbl
{
	void *(__thiscall *__vecDelDtor)(cricket::PortInterface *this, unsigned int);
	_BYTE gap4[8];
	void (__thiscall *SetIceProtocolType)(cricket::PortInterface *this, cricket::TransportProtocol);
	cricket::TransportProtocol (__thiscall *IceProtocol)(cricket::PortInterface *this);
	void (__thiscall *SetIceRole)(cricket::PortInterface *this, cricket::IceRole);
	cricket::IceRole (__thiscall *GetIceRole)(cricket::PortInterface *this);
	void (__thiscall *SetIceTiebreaker)(cricket::PortInterface *this, unsigned __int64);
	unsigned __int64 (__thiscall *IceTiebreaker)(cricket::PortInterface *this);
	bool (__thiscall *SharedSocket)(cricket::PortInterface *this);
	void (__thiscall *PrepareAddress)(cricket::PortInterface *this);
	cricket::Connection *(__thiscall *GetConnection)(cricket::PortInterface *this, talk_base::SocketAddress *);
	cricket::Connection *(__thiscall *CreateConnection)(cricket::PortInterface *this, cricket::Candidate *, cricket::PortInterface::CandidateOrigin);
	int (__thiscall *SetOption)(cricket::PortInterface *this, talk_base::Socket::Option, int);
	int (__thiscall *GetError)(cricket::PortInterface *this);
	int (__thiscall *GetOption)(cricket::PortInterface *this, talk_base::Socket::Option, int *);
	std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *(__thiscall *Candidates)(cricket::PortInterface *this);
	int (__thiscall *SendTo)(cricket::PortInterface *this, const void *, unsigned int, talk_base::SocketAddress *, bool);
	void (__thiscall *SendBindingResponse)(cricket::PortInterface *this, cricket::StunMessage *, talk_base::SocketAddress *);
	void (__thiscall *SendBindingErrorResponse)(cricket::PortInterface *this, cricket::StunMessage *, talk_base::SocketAddress *, int, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	void (__thiscall *EnablePortPackets)(cricket::PortInterface *this);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *ToString)(cricket::PortInterface *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result);
};

/* 1588 */
struct std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *_Myval;
};

/* 1598 */
struct std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *_Myval;
};

/* 1607 */
struct std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *_Myval;
};

/* 1619 */
struct std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *_Myval;
};

/* 1629 */
struct std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *_Myval;
};

/* 1638 */
struct std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *_Myval;
};

/* 1650 */
struct __cppobj std::pair<cricket::PortInterface * const,cricket::PortProxy *>
{
	cricket::PortInterface *const first;
	cricket::PortProxy *second;
};

/* 1648 */
struct __cppobj std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *>
{
	std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> *_Left;
	std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> *_Parent;
	std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<cricket::PortInterface * const,cricket::PortProxy *> _Myval;
};

/* 1682 */
struct sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *this, cricket::TransportChannel *);
	sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1691 */
struct sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *this, cricket::TransportChannel *, const char *, unsigned int, int);
	sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *this);
	sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1700 */
struct sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *this, cricket::TransportChannel *, cricket::Candidate *);
	sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1710 */
struct sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *this, cricket::TransportChannelImpl *);
	sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1719 */
struct sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *this, cricket::TransportChannelImpl *, cricket::Candidate *);
	sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1486 */
struct sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *this, cricket::PortAllocatorSessionMuxer *);
	sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1502 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1503 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> >
{
};

/* 1504 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > >
{
};

/* 1505 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> >
{
};

/* 1506 */
struct __cppobj sigslot::_signal_base1<cricket::Connection *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1507 */
struct __cppobj sigslot::signal1<cricket::Connection *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::Connection *,sigslot::single_threaded>
{
};

/* 1511 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1512 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> >
{
};

/* 1513 */
struct __cppobj std::_List_buy<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > >
{
};

/* 1514 */
struct __cppobj std::list<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> >
{
};

/* 1515 */
struct __cppobj sigslot::_signal_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1516 */
struct __cppobj sigslot::signal3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> : sigslot::_signal_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>
{
};

/* 1568 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1569 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> >
{
};

/* 1570 */
struct __cppobj std::_List_buy<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > >
{
};

/* 1571 */
struct __cppobj std::list<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> >
{
};

/* 1572 */
struct __cppobj sigslot::_signal_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1573 */
struct __cppobj sigslot::signal3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> : sigslot::_signal_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>
{
};

/* 1576 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1577 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > >
{
};

/* 1578 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > >
{
};

/* 1579 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > >
{
};

/* 1580 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >,0> >
{
};

/* 1581 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >,0> >
{
};

/* 1557 */
struct __cppobj cricket::StunRequestManager
{
	sigslot::signal3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> SignalSendPacket;
	talk_base::Thread *thread_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > requests_;
};

/* 1582 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned int> > : std::_Container_base0
{
	unsigned int *_Myfirst;
	unsigned int *_Mylast;
	unsigned int *_Myend;
};

/* 1583 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > > : std::_Vector_val<std::_Simple_types<unsigned int> >
{
};

/* 1584 */
struct __cppobj std::vector<unsigned int,std::allocator<unsigned int> > : std::_Vector_alloc<0,std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
{
};

/* 1585 */
struct __cppobj talk_base::RateTracker
{
	talk_base::RateTrackerVtbl *vfptr;
	unsigned int total_units_;
	unsigned int units_second_;
	unsigned int last_units_second_time_;
	unsigned int last_units_second_calc_;
};

/* 1500 */
struct __cppobj cricket::Connection : talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::Connection *,sigslot::single_threaded> SignalStateChange;
	sigslot::signal1<cricket::Connection *,sigslot::single_threaded> SignalDestroyed;
	sigslot::signal3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> SignalReadPacket;
	sigslot::signal1<cricket::Connection *,sigslot::single_threaded> SignalReadyToSend;
	sigslot::signal1<cricket::Connection *,sigslot::single_threaded> SignalUseCandidate;
	cricket::Port *port_;
	unsigned int local_candidate_index_;
	cricket::Candidate remote_candidate_;
	cricket::Connection::ReadState read_state_;
	cricket::Connection::WriteState write_state_;
	bool connected_;
	bool pruned_;
	bool use_candidate_attr_;
	cricket::IceMode remote_ice_mode_;
	cricket::StunRequestManager requests_;
	unsigned int rtt_;
	unsigned int last_ping_sent_;
	unsigned int last_ping_received_;
	unsigned int last_data_received_;
	unsigned int last_ping_response_received_;
	std::vector<unsigned int,std::allocator<unsigned int> > pings_since_last_response_;
	talk_base::RateTracker recv_rate_tracker_;
	talk_base::RateTracker send_rate_tracker_;
	bool reported_;
	cricket::Connection::State state_;
};

/* 1558 */
struct __cppobj cricket::StunMessage
{
	cricket::StunMessageVtbl *vfptr;
	unsigned __int16 type_;
	unsigned __int16 length_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > transaction_id_;
	std::vector<cricket::StunAttribute *,std::allocator<cricket::StunAttribute *> > *attrs_;
};

/* 1589 */
struct __cppobj sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>
{
	sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1599 */
struct __cppobj sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1608 */
struct __cppobj sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1620 */
struct __cppobj sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1630 */
struct __cppobj sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1639 */
struct __cppobj sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1649 */
struct __cppobj cricket::PortProxy : cricket::PortInterface, sigslot::has_slots<sigslot::single_threaded>
{
	cricket::PortInterface *impl_;
};

/* 1498 */
struct std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *_Myval;
};

/* 1508 */
struct std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *_Myval;
};

/* 1521 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1522 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1523 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 1524 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> >
{
};

/* 1525 */
struct __cppobj sigslot::_signal_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1526 */
struct __cppobj sigslot::signal2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>
{
};

/* 1530 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1531 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> >
{
};

/* 1532 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > >
{
};

/* 1533 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> >
{
};

/* 1534 */
struct __cppobj sigslot::_signal_base1<cricket::Port *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1535 */
struct __cppobj sigslot::signal1<cricket::Port *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::Port *,sigslot::single_threaded>
{
};

/* 1539 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1540 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> >
{
};

/* 1541 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > >
{
};

/* 1542 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> >
{
};

/* 1543 */
struct __cppobj sigslot::_signal_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1544 */
struct __cppobj sigslot::signal2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> : sigslot::_signal_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded>
{
};

/* 1549 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1550 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > >
{
};

/* 1551 */
struct __cppobj std::_Tree_buy<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > >
{
};

/* 1552 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >,0> > : std::_Tree_buy<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > >
{
};

/* 1553 */
struct __cppobj std::_Tree<std::_Tmap_traits<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >,0> >
{
};

/* 1554 */
struct __cppobj std::map<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > : std::_Tree<std::_Tmap_traits<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >,0> >
{
};

/* 1519 */
struct __cppobj cricket::Port : cricket::PortInterface, talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> SignalCandidateReady;
	sigslot::signal1<cricket::Port *,sigslot::single_threaded> SignalPortComplete;
	sigslot::signal1<cricket::Port *,sigslot::single_threaded> SignalPortError;
	sigslot::signal2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> SignalConnectionCreated;
	talk_base::Thread *thread_;
	talk_base::PacketSocketFactory *factory_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > type_;
	bool send_retransmit_count_attribute_;
	talk_base::Network *network_;
	talk_base::IPAddress ip_;
	int min_port_;
	int max_port_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name_;
	int component_;
	unsigned int generation_;
	talk_base::SocketAddress related_address_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > ice_username_fragment_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password_;
	std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > candidates_;
	std::map<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > connections_;
	cricket::Port::Lifetime lifetime_;
	bool enable_port_packets_;
	cricket::TransportProtocol ice_protocol_;
	cricket::IceRole ice_role_;
	unsigned __int64 tiebreaker_;
	bool shared_socket_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > user_agent_;
	talk_base::ProxyInfo proxy_;
};

/* 1555 */
struct std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *_Myval;
};

/* 1575 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::StunRequest *second;
};

/* 1574 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> _Myval;
};

/* 1586 */
struct talk_base::RateTrackerVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::RateTracker *this, unsigned int);
	unsigned int (__thiscall *Time)(talk_base::RateTracker *this);
};

/* 1559 */
struct cricket::StunMessageVtbl
{
	void *(__thiscall *__vecDelDtor)(cricket::StunMessage *this, unsigned int);
	cricket::StunMessage *(__thiscall *CreateNew)(cricket::StunMessage *this);
	cricket::StunAttributeValueType (__thiscall *GetAttributeValueType)(cricket::StunMessage *this, int);
};

/* 1563 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::StunAttribute *> > : std::_Container_base0
{
	cricket::StunAttribute **_Myfirst;
	cricket::StunAttribute **_Mylast;
	cricket::StunAttribute **_Myend;
};

/* 1564 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::StunAttribute *,std::allocator<cricket::StunAttribute *> > > : std::_Vector_val<std::_Simple_types<cricket::StunAttribute *> >
{
};

/* 1565 */
struct __cppobj std::vector<cricket::StunAttribute *,std::allocator<cricket::StunAttribute *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::StunAttribute *,std::allocator<cricket::StunAttribute *> > >
{
};

/* 1591 */
struct sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *this, cricket::PortInterface *, talk_base::SocketAddress *, cricket::ProtocolType, cricket::IceMessage *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, bool);
	sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *this);
	sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1600 */
struct sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *this, cricket::PortInterface *);
	sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1609 */
struct sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this, cricket::PortInterface *, const char *, unsigned int, talk_base::SocketAddress *);
	sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1622 */
struct sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *this, cricket::PortAllocatorSession *, cricket::PortInterface *);
	sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1631 */
struct sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, cricket::PortAllocatorSession *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
	sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1640 */
struct sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *this, cricket::PortAllocatorSession *);
	sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1499 */
struct __cppobj sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1509 */
struct __cppobj sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>
{
	sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1517 */
struct std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *_Myval;
};

/* 1527 */
struct std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *_Myval;
};

/* 1536 */
struct std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *_Myval;
};

/* 1545 */
struct __cppobj talk_base::PacketSocketFactory
{
	talk_base::PacketSocketFactoryVtbl *vfptr;
};

/* 1494 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::NetworkSession *> > : std::_Container_base0
{
	struct talk_base::NetworkSession **_Myfirst;
	struct talk_base::NetworkSession **_Mylast;
	struct talk_base::NetworkSession **_Myend;
};

/* 1495 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::NetworkSession *,std::allocator<talk_base::NetworkSession *> > > : std::_Vector_val<std::_Simple_types<talk_base::NetworkSession *> >
{
};

/* 1496 */
struct __cppobj std::vector<talk_base::NetworkSession *,std::allocator<talk_base::NetworkSession *> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::NetworkSession *,std::allocator<talk_base::NetworkSession *> > >
{
};

/* 1497 */
struct __cppobj talk_base::Network
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > description_;
	talk_base::IPAddress prefix_;
	int prefix_length_;
	std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > ips_;
	int scope_id_;
	bool ignored_;
	std::vector<talk_base::NetworkSession *,std::allocator<talk_base::NetworkSession *> > sessions_;
	long double uniform_numerator_;
	long double uniform_denominator_;
	long double exponential_numerator_;
	long double exponential_denominator_;
};

/* 1548 */
struct __cppobj std::pair<talk_base::SocketAddress const ,cricket::Connection *>
{
	talk_base::SocketAddress first;
	cricket::Connection *second;
};

/* 1547 */
struct __cppobj std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *>
{
	std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> *_Left;
	std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> *_Parent;
	std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<talk_base::SocketAddress const ,cricket::Connection *> _Myval;
};

/* 1556 */
struct __cppobj sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>
{
	sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1566 */
struct __cppobj cricket::StunRequest : talk_base::MessageHandler
{
	int count_;
	bool timeout_;
	cricket::StunRequestManager *manager_;
	cricket::StunMessage *msg_;
	unsigned int tstamp_;
};

/* 1560 */
struct __cppobj cricket::StunAttribute
{
	cricket::StunAttributeVtbl *vfptr;
	unsigned __int16 type_;
	unsigned __int16 length_;
};

/* 1590 */
struct __cppobj cricket::IceMessage : cricket::StunMessage
{
};

/* 1501 */
struct sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *this, cricket::Connection *);
	sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1510 */
struct sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *this, cricket::Connection *, const char *, unsigned int);
	sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *this);
	sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1518 */
struct __cppobj sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1528 */
struct __cppobj sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1537 */
struct __cppobj sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1546 */
struct talk_base::PacketSocketFactoryVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::PacketSocketFactory *this, unsigned int);
	talk_base::AsyncPacketSocket *(__thiscall *CreateUdpSocket)(talk_base::PacketSocketFactory *this, talk_base::SocketAddress *, int, int);
	talk_base::AsyncPacketSocket *(__thiscall *CreateServerTcpSocket)(talk_base::PacketSocketFactory *this, talk_base::SocketAddress *, int, int, int);
	talk_base::AsyncPacketSocket *(__thiscall *CreateClientTcpSocket)(talk_base::PacketSocketFactory *this, talk_base::SocketAddress *, talk_base::SocketAddress *, talk_base::ProxyInfo *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, int);
};

/* 1567 */
struct sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *this, const void *, unsigned int, cricket::StunRequest *);
	sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *this);
	sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1562 */
struct cricket::StunAttributeVtbl
{
	void *(__thiscall *__vecDelDtor)(cricket::StunAttribute *this, unsigned int);
	cricket::StunAttributeValueType (__thiscall *value_type)(cricket::StunAttribute *this);
	void (__thiscall *SetOwner)(cricket::StunAttribute *this, cricket::StunMessage *);
	bool (__thiscall *Read)(cricket::StunAttribute *this, talk_base::ByteBuffer *);
	bool (__thiscall *Write)(cricket::StunAttribute *this, talk_base::ByteBuffer *);
};

/* 1520 */
struct sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *this, cricket::Port *, cricket::Candidate *);
	sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1529 */
struct sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *this, cricket::Port *);
	sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1538 */
struct sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *this, cricket::Port *, cricket::Connection *);
	sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1561 */
struct __cppobj talk_base::ByteBuffer
{
	char *bytes_;
	unsigned int size_;
	unsigned int start_;
	unsigned int end_;
	int version_;
	talk_base::ByteBuffer::ByteOrder byte_order_;
};

/* 1734 */
struct __cppobj buzz::SaslHandler
{
	buzz::SaslHandlerVtbl *vfptr;
};

/* 1737 */
struct buzz::SaslHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::SaslHandler *this, unsigned int);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *ChooseBestSaslMechanism)(buzz::SaslHandler *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > *, bool);
	buzz::SaslMechanism *(__thiscall *CreateSaslMechanism)(buzz::SaslHandler *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
};

/* 1735 */
struct __cppobj buzz::SaslMechanism
{
	buzz::SaslMechanismVtbl *vfptr;
};

/* 1736 */
struct buzz::SaslMechanismVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::SaslMechanism *this, unsigned int);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *GetMechanismName)(buzz::SaslMechanism *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result);
	buzz::XmlElement *(__thiscall *StartSaslAuth)(buzz::SaslMechanism *this);
	buzz::XmlElement *(__thiscall *HandleSaslChallenge)(buzz::SaslMechanism *this, buzz::XmlElement *);
	void (__thiscall *HandleSaslSuccess)(buzz::SaslMechanism *this, buzz::XmlElement *);
	void (__thiscall *HandleSaslFailure)(buzz::SaslMechanism *this, buzz::XmlElement *);
};

/* 1738 */
struct __cppobj sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded>
{
	sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1747 */
struct sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *this, buzz::IqTask *, buzz::XmlElement *);
	sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *this);
	sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1740 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1741 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1742 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 1743 */
struct __cppobj std::list<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1744 */
struct __cppobj sigslot::_signal_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1745 */
struct __cppobj sigslot::signal2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded>
{
};

/* 1746 */
struct __cppobj __declspec(align(8)) buzz::IqTask : buzz::XmppTask
{
	sigslot::signal2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> SignalError;
	buzz::Jid to_;
	talk_base::scoped_ptr<buzz::XmlElement> stanza_;
};

/* 1739 */
struct std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *_Myval;
};

/* 1748 */
struct __cppobj XmppPumpNotify
{
	XmppPumpNotifyVtbl *vfptr;
};

/* 1749 */
struct XmppPumpNotifyVtbl
{
	void *(__thiscall *__vecDelDtor)(XmppPumpNotify *this, unsigned int);
	void (__thiscall *OnStateChange)(XmppPumpNotify *this, buzz::XmppEngine::State);
};

/* 1750 */
struct __cppobj cricket::ContentDescription
{
	cricket::ContentDescriptionVtbl *vfptr;
};

/* 1751 */
struct cricket::ContentDescriptionVtbl
{
	void *(__thiscall *__vecDelDtor)(cricket::ContentDescription *this, unsigned int);
	cricket::ContentDescription *(__thiscall *Copy)(cricket::ContentDescription *this);
};

/* 1752 */
struct __cppobj cricket::ParseError
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > text;
	buzz::XmlElement *extra;
};

/* 1753 */
struct __cppobj cricket::ContentParser
{
	cricket::ContentParserVtbl *vfptr;
};

/* 1755 */
union $51A077E57066CE5CABA4E70FB65D183C
{
	void (__thiscall *~ContentParser)(cricket::ContentParser *this);
	void *(__thiscall *__vecDelDtor)(cricket::ContentParser *this, unsigned int);
};

/* 1756 */
struct cricket::ContentParserVtbl
{
	bool (__thiscall *ParseContent)(cricket::ContentParser *this, cricket::SignalingProtocol, buzz::XmlElement *, cricket::ContentDescription **, cricket::ParseError *);
	bool (__thiscall *IsWritable)(cricket::ContentParser *this, cricket::SignalingProtocol, cricket::ContentDescription *);
	bool (__thiscall *WriteContent)(cricket::ContentParser *this, cricket::SignalingProtocol, cricket::ContentDescription *, buzz::XmlElement **, cricket::WriteError *);
	$51A077E57066CE5CABA4E70FB65D183C ___u3;
};

/* 1754 */
struct __cppobj cricket::WriteError
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > text;
};

/* 1757 */
struct __cppobj cricket::SessionClient : cricket::ContentParser
{
};

/* 1758 */
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *_Myval;
};

/* 1759 */
struct __cppobj sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1761 */
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *this, cricket::BaseSession *, cricket::BaseSession::State);
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1762 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1763 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> >
{
};

/* 1764 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > >
{
};

/* 1765 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> >
{
};

/* 1766 */
struct __cppobj sigslot::_signal_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1767 */
struct __cppobj sigslot::signal2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> : sigslot::_signal_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>
{
};

/* 1771 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1772 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> >
{
};

/* 1773 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > >
{
};

/* 1774 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> >
{
};

/* 1775 */
struct __cppobj sigslot::_signal_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1776 */
struct __cppobj sigslot::signal2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> : sigslot::_signal_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded>
{
};

/* 1784 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1785 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> >
{
};

/* 1786 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > >
{
};

/* 1787 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> >
{
};

/* 1788 */
struct __cppobj sigslot::_signal_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1789 */
struct __cppobj sigslot::signal2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded>
{
};

/* 1793 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1794 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> >
{
};

/* 1795 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > >
{
};

/* 1796 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> >
{
};

/* 1797 */
struct __cppobj sigslot::_signal_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1798 */
struct __cppobj sigslot::signal2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> : sigslot::_signal_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded>
{
};

/* 1844 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1845 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > >
{
};

/* 1846 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > >
{
};

/* 1847 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > >
{
};

/* 1848 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >,0> >
{
};

/* 1849 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >,0> >
{
};

/* 1760 */
struct __cppobj __declspec(align(8)) cricket::BaseSession : sigslot::has_slots<sigslot::single_threaded>, talk_base::MessageHandler
{
	sigslot::signal2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> SignalState;
	sigslot::signal2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> SignalError;
	sigslot::signal2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> SignalRemoteDescriptionUpdate;
	sigslot::signal2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> SignalNewLocalDescription;
	sigslot::signal2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> SignalNewRemoteDescription;
	cricket::BaseSession::State state_;
	cricket::BaseSession::Error error_;
	talk_base::Thread *signaling_thread_;
	talk_base::Thread *worker_thread_;
	cricket::PortAllocator *port_allocator_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > sid_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_type_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > transport_type_;
	bool initiator_;
	talk_base::SSLIdentity *identity_;
	cricket::SessionDescription *local_description_;
	cricket::SessionDescription *remote_description_;
	unsigned __int64 ice_tiebreaker_;
	bool role_switch_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > transports_;
};

/* 1768 */
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *_Myval;
};

/* 1777 */
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *_Myval;
};

/* 1790 */
struct std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *_Myval;
};

/* 1799 */
struct __cppobj talk_base::SSLIdentity
{
	talk_base::SSLIdentityVtbl *vfptr;
};

/* 1780 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::ContentInfo> > : std::_Container_base0
{
	cricket::ContentInfo *_Myfirst;
	cricket::ContentInfo *_Mylast;
	cricket::ContentInfo *_Myend;
};

/* 1781 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > > : std::_Vector_val<std::_Simple_types<cricket::ContentInfo> >
{
};

/* 1782 */
const struct __cppobj std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > >
{
};

/* 1804 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::TransportInfo> > : std::_Container_base0
{
	cricket::TransportInfo *_Myfirst;
	cricket::TransportInfo *_Mylast;
	cricket::TransportInfo *_Myend;
};

/* 1805 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::TransportInfo,std::allocator<cricket::TransportInfo> > > : std::_Vector_val<std::_Simple_types<cricket::TransportInfo> >
{
};

/* 1806 */
struct __cppobj std::vector<cricket::TransportInfo,std::allocator<cricket::TransportInfo> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::TransportInfo,std::allocator<cricket::TransportInfo> > >
{
};

/* 1808 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::ContentGroup> > : std::_Container_base0
{
	cricket::ContentGroup *_Myfirst;
	cricket::ContentGroup *_Mylast;
	cricket::ContentGroup *_Myend;
};

/* 1809 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::ContentGroup,std::allocator<cricket::ContentGroup> > > : std::_Vector_val<std::_Simple_types<cricket::ContentGroup> >
{
};

/* 1810 */
struct __cppobj std::vector<cricket::ContentGroup,std::allocator<cricket::ContentGroup> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::ContentGroup,std::allocator<cricket::ContentGroup> > >
{
};

/* 1811 */
const struct __cppobj cricket::SessionDescription
{
	std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > contents_;
	std::vector<cricket::TransportInfo,std::allocator<cricket::TransportInfo> > transport_infos_;
	std::vector<cricket::ContentGroup,std::allocator<cricket::ContentGroup> > content_groups_;
};

/* 1843 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::TransportProxy *second;
};

/* 1812 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> _Myval;
};

/* 1769 */
struct __cppobj sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1778 */
struct __cppobj sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1791 */
struct __cppobj sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1802 */
struct talk_base::SSLIdentityVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::SSLIdentity *this, unsigned int);
	talk_base::SSLIdentity *(__thiscall *GetReference)(talk_base::SSLIdentity *this);
	talk_base::SSLCertificate *(__thiscall *certificate)(talk_base::SSLIdentity *this);
};

/* 1779 */
struct __cppobj cricket::ContentInfo
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > type;
	bool rejected;
	cricket::ContentDescription *description;
};

/* 1803 */
struct __cppobj cricket::TransportInfo
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name;
	cricket::TransportDescription description;
};

/* 1807 */
struct __cppobj cricket::ContentGroup
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > semantics_;
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > content_names_;
};

/* 1813 */
struct __cppobj cricket::CandidateTranslator
{
	cricket::CandidateTranslatorVtbl *vfptr;
};

/* 1819 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1820 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >
{
};

/* 1821 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > >
{
};

/* 1822 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >
{
};

/* 1823 */
struct __cppobj sigslot::_signal_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1824 */
struct __cppobj sigslot::signal2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
};

/* 1829 */
struct __cppobj talk_base::scoped_refptr<talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > >
{
	talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > *ptr_;
};

/* 1837 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1838 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<int const ,cricket::TransportChannelProxy *>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > >
{
};

/* 1839 */
struct __cppobj std::_Tree_buy<std::pair<int const ,cricket::TransportChannelProxy *>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<int const ,cricket::TransportChannelProxy *>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > > >
{
};

/* 1840 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> >,0> > : std::_Tree_buy<std::pair<int const ,cricket::TransportChannelProxy *>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > >
{
};

/* 1841 */
struct __cppobj std::_Tree<std::_Tmap_traits<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> >,0> >
{
};

/* 1842 */
struct __cppobj std::map<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > > : std::_Tree<std::_Tmap_traits<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> >,0> >
{
};

/* 1817 */
struct __cppobj __declspec(align(4)) cricket::TransportProxy : sigslot::has_slots<sigslot::single_threaded>, cricket::CandidateTranslator
{
	sigslot::signal2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> SignalCandidatesReady;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > sid_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name_;
	talk_base::scoped_refptr<talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > > transport_;
	bool connecting_;
	bool negotiated_;
	std::map<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > > channels_;
	std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > sent_candidates_;
	std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > unsent_candidates_;
	bool candidates_allocated_;
};

/* 1770 */
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *this, cricket::BaseSession *, cricket::BaseSession::Error);
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1783 */
struct sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *this, cricket::BaseSession *, std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > *);
	sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1792 */
struct sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *this, cricket::BaseSession *, cricket::ContentAction);
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1800 */
const struct __cppobj talk_base::SSLCertificate
{
	talk_base::SSLCertificateVtbl *vfptr;
};

/* 1814 */
struct cricket::CandidateTranslatorVtbl
{
	bool (__thiscall *GetChannelNameFromComponent)(cricket::CandidateTranslator *this, int, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	bool (__thiscall *GetComponentFromChannelName)(cricket::CandidateTranslator *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, int *);
};

/* 1815 */
struct std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *_Myval;
};

/* 1825 */
struct __cppobj talk_base::scoped_ptr<cricket::Transport>
{
	cricket::Transport *ptr;
};

/* 1826 */
struct __cppobj talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > : talk_base::scoped_ptr<cricket::Transport>
{
	talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> >Vtbl *vfptr;
	int ref_count_;
};

/* 1836 */
struct __cppobj std::pair<int const ,cricket::TransportChannelProxy *>
{
	const int first;
	cricket::TransportChannelProxy *second;
};

/* 1830 */
struct __cppobj std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *>
{
	std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> *_Left;
	std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> *_Parent;
	std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<int const ,cricket::TransportChannelProxy *> _Myval;
};

/* 1801 */
struct talk_base::SSLCertificateVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::SSLCertificate *this, unsigned int);
	talk_base::SSLCertificate *(__thiscall *GetReference)(talk_base::SSLCertificate *this);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *ToPEMString)(talk_base::SSLCertificate *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result);
	bool (__thiscall *ComputeDigest)(talk_base::SSLCertificate *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, char *, unsigned int, unsigned int *);
};

/* 1816 */
struct __cppobj sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1827 */
union $B5C7E77F494393258D206392AB75243C
{
	void (__thiscall *~RefCountedObject<talk_base::scoped_ptr<cricket::Transport> >)(talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > *this);
	void *(__thiscall *__vecDelDtor)(talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > *this, unsigned int);
};

/* 1828 */
struct talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> >Vtbl
{
	int (__thiscall *AddRef)(talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > *this);
	int (__thiscall *Release)(talk_base::RefCountedObject<talk_base::scoped_ptr<cricket::Transport> > *this);
	$B5C7E77F494393258D206392AB75243C ___u2;
};

/* 1832 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<enum talk_base::Socket::Option,int> > > : std::_Container_base0
{
	std::pair<enum talk_base::Socket::Option,int> *_Myfirst;
	std::pair<enum talk_base::Socket::Option,int> *_Mylast;
	std::pair<enum talk_base::Socket::Option,int> *_Myend;
};

/* 1833 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<std::pair<enum talk_base::Socket::Option,int>,std::allocator<std::pair<enum talk_base::Socket::Option,int> > > > : std::_Vector_val<std::_Simple_types<std::pair<enum talk_base::Socket::Option,int> > >
{
};

/* 1834 */
struct __cppobj std::vector<std::pair<enum talk_base::Socket::Option,int>,std::allocator<std::pair<enum talk_base::Socket::Option,int> > > : std::_Vector_alloc<0,std::_Vec_base_types<std::pair<enum talk_base::Socket::Option,int>,std::allocator<std::pair<enum talk_base::Socket::Option,int> > > >
{
};

/* 1835 */
struct __cppobj cricket::TransportChannelProxy : cricket::TransportChannel, talk_base::MessageHandler
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name_;
	talk_base::Thread *worker_thread_;
	cricket::TransportChannelImpl *impl_;
	std::vector<std::pair<enum talk_base::Socket::Option,int>,std::allocator<std::pair<enum talk_base::Socket::Option,int> > > pending_options_;
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > pending_srtp_ciphers_;
};

/* 1818 */
struct sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, cricket::TransportProxy *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
	sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1831 */
struct __cppobj std::pair<enum talk_base::Socket::Option,int>
{
	talk_base::Socket::Option first;
	int second;
};

/* 1850 */
struct std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *_Myval;
};

/* 1851 */
struct __cppobj sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1853 */
struct sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *this, cricket::Session *);
	sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1854 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1855 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> >
{
};

/* 1856 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > >
{
};

/* 1857 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> >
{
};

/* 1858 */
struct __cppobj sigslot::_signal_base1<cricket::Session *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1859 */
struct __cppobj sigslot::signal1<cricket::Session *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::Session *,sigslot::single_threaded>
{
};

/* 1863 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1864 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> >
{
};

/* 1865 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > >
{
};

/* 1866 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> >
{
};

/* 1867 */
struct __cppobj sigslot::_signal_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1868 */
struct __cppobj sigslot::signal2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> : sigslot::_signal_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded>
{
};

/* 1872 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1873 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1874 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 1875 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1876 */
struct __cppobj sigslot::_signal_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1877 */
struct __cppobj sigslot::signal2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>
{
};

/* 1881 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1882 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1883 */
struct __cppobj std::_List_buy<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 1884 */
struct __cppobj std::list<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1885 */
struct __cppobj sigslot::_signal_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1886 */
struct __cppobj sigslot::signal6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>
{
};

/* 1852 */
struct __cppobj __declspec(align(8)) cricket::Session : cricket::BaseSession
{
	sigslot::signal1<cricket::Session *,sigslot::single_threaded> SignalRequestSignaling;
	sigslot::signal2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> SignalReceivedTerminateReason;
	sigslot::signal2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> SignalInfoMessage;
	sigslot::signal2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> SignalOutgoingMessage;
	sigslot::signal6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> SignalErrorMessage;
	cricket::SessionManager *session_manager_;
	bool initiate_acked_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > local_name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > initiator_name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > remote_name_;
	cricket::SessionClient *client_;
	cricket::TransportParser *transport_parser_;
	cricket::SignalingProtocol current_protocol_;
};

/* 1860 */
struct std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *_Myval;
};

/* 1869 */
struct std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *_Myval;
};

/* 1878 */
struct std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *_Myval;
};

/* 1890 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1891 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> >
{
};

/* 1892 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > >
{
};

/* 1893 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> >
{
};

/* 1894 */
struct __cppobj sigslot::_signal_base2<cricket::Session *,bool,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1895 */
struct __cppobj sigslot::signal2<cricket::Session *,bool,sigslot::single_threaded> : sigslot::_signal_base2<cricket::Session *,bool,sigslot::single_threaded>
{
};

/* 1900 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1901 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1902 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 1903 */
struct __cppobj std::list<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> >
{
};

/* 1904 */
struct __cppobj sigslot::_signal_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 1905 */
struct __cppobj sigslot::signal2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_signal_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>
{
};

/* 1906 */
struct __cppobj cricket::TransportDescriptionFactory
{
	cricket::TransportProtocol protocol_;
	cricket::SecurePolicy secure_;
	talk_base::SSLIdentity *identity_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > digest_alg_;
};

/* 1909 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1910 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > >
{
};

/* 1911 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > >
{
};

/* 1912 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > >
{
};

/* 1913 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >,0> >
{
};

/* 1914 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >,0> >
{
};

/* 1917 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 1918 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > >
{
};

/* 1919 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > >
{
};

/* 1920 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > >
{
};

/* 1921 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >,0> >
{
};

/* 1922 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >,0> >
{
};

/* 1898 */
struct __cppobj cricket::SessionManager : sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal2<cricket::Session *,bool,sigslot::single_threaded> SignalSessionCreate;
	sigslot::signal1<cricket::Session *,sigslot::single_threaded> SignalSessionDestroy;
	sigslot::signal2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> SignalOutgoingMessage;
	sigslot::signal0<sigslot::single_threaded> SignalRequestSignaling;
	sigslot::signal0<sigslot::single_threaded> SignalDestroyed;
	cricket::PortAllocator *allocator_;
	talk_base::Thread *signaling_thread_;
	talk_base::Thread *worker_thread_;
	int timeout_;
	cricket::TransportDescriptionFactory transport_desc_factory_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > session_map_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > client_map_;
};

/* 1923 */
struct __cppobj cricket::TransportParser
{
	cricket::TransportParserVtbl *vfptr;
};

/* 1861 */
struct __cppobj sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1870 */
struct __cppobj sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1879 */
struct __cppobj sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>
{
	sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1887 */
struct std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *_Myval;
};

/* 1896 */
struct std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *_Myval;
};

/* 1908 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::Session *second;
};

/* 1907 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> _Myval;
};

/* 1916 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::SessionClient *second;
};

/* 1915 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> _Myval;
};

/* 1924 */
union $66A69CE99185DE2489B788B3A1FB5445
{
	void (__thiscall *~TransportParser)(cricket::TransportParser *this);
	void *(__thiscall *__vecDelDtor)(cricket::TransportParser *this, unsigned int);
};

/* 1925 */
struct cricket::TransportParserVtbl
{
	bool (__thiscall *ParseTransportDescription)(cricket::TransportParser *this, buzz::XmlElement *, cricket::CandidateTranslator *, cricket::TransportDescription *, cricket::ParseError *);
	bool (__thiscall *WriteTransportDescription)(cricket::TransportParser *this, cricket::TransportDescription *, cricket::CandidateTranslator *, buzz::XmlElement **, cricket::WriteError *);
	bool (__thiscall *ParseGingleCandidate)(cricket::TransportParser *this, buzz::XmlElement *, cricket::CandidateTranslator *, cricket::Candidate *, cricket::ParseError *);
	bool (__thiscall *WriteGingleCandidate)(cricket::TransportParser *this, cricket::Candidate *, cricket::CandidateTranslator *, buzz::XmlElement **, cricket::WriteError *);
	$66A69CE99185DE2489B788B3A1FB5445 ___u4;
};

/* 1862 */
struct sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *this, cricket::Session *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1871 */
struct sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *this, cricket::Session *, buzz::XmlElement *);
	sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1880 */
struct sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this, cricket::BaseSession *, buzz::XmlElement *, buzz::QName *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, buzz::XmlElement *);
	sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this);
	sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1888 */
struct __cppobj sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1897 */
struct __cppobj sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>
{
	sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 1889 */
struct sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *this, cricket::Session *, bool);
	sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1899 */
struct sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *this, cricket::SessionManager *, buzz::XmlElement *);
	sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *this);
	sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 1926 */
struct __declspec(align(4)) encoding
{
	int (__cdecl *scanners[4])(encoding *, const char *, const char *, const char **);
	int (__cdecl *literalScanners[2])(encoding *, const char *, const char *, const char **);
	int (__cdecl *sameName)(encoding *, const char *, const char *);
	int (__cdecl *nameMatchesAscii)(encoding *, const char *, const char *, const char *);
	int (__cdecl *nameLength)(encoding *, const char *);
	const char *(__cdecl *skipS)(encoding *, const char *);
	int (__cdecl *getAtts)(encoding *, const char *, int, ATTRIBUTE *);
	int (__cdecl *charRefNumber)(encoding *, const char *);
	int (__cdecl *predefinedEntityName)(encoding *, const char *, const char *);
	void (__cdecl *updatePosition)(encoding *, const char *, const char *, position *);
	int (__cdecl *isPublicId)(encoding *, const char *, const char *, const char **);
	void (__cdecl *utf8Convert)(encoding *, const char **, const char *, char **, const char *);
	void (__cdecl *utf16Convert)(encoding *, const char **, const char *, unsigned __int16 **, const unsigned __int16 *);
	int minBytesPerChar;
	char isUtf8;
	char isUtf16;
};

/* 1927 */
struct __declspec(align(4)) ATTRIBUTE
{
	const char *name;
	const char *valuePtr;
	const char *valueEnd;
	char normalized;
};

/* 1928 */
struct position
{
	unsigned int lineNumber;
	unsigned int columnNumber;
};

/* 1929 */
struct __s_GUID
{
	unsigned int Data1;
	unsigned __int16 Data2;
	unsigned __int16 Data3;
	char Data4[8];
};

/* 1930 */
struct _SECURITY_ATTRIBUTES
{
	unsigned int nLength;
	void *lpSecurityDescriptor;
	int bInheritHandle;
};

/* 1931 */
struct _BLOB
{
	unsigned int cbSize;
	char *pBlobData;
};

/* 1932 */
struct __cppobj IErrorInfo : IUnknown
{
};

/* 1933 */
struct __cppobj _variant_t : tagVARIANT
{
};

/* 1934 */
struct __cppobj _bstr_t::Data_t
{
	wchar_t *m_wstr;
	char *m_str;
	unsigned int m_RefCount;
};

/* 1935 */
struct __cppobj _bstr_t
{
	_bstr_t::Data_t *m_Data;
};

/* 1936 */
struct __cppobj _com_error
{
	_com_errorVtbl *vfptr;
	const HRESULT m_hresult;
	IErrorInfo *m_perrinfo;
	wchar_t *m_pszMsg;
};

/* 1937 */
struct _com_errorVtbl
{
	void *(__thiscall *__vecDelDtor)(_com_error *this, unsigned int);
};

/* 1938 */
struct talk_base::tagTHREADNAME_INFO
{
	unsigned int dwType;
	const char *szName;
	unsigned int dwThreadID;
	unsigned int dwFlags;
};

/* 1939 */
struct __cppobj talk_base::AutoThread : talk_base::Thread
{
};

/* 1940 */
struct talk_base::ThreadInit
{
	talk_base::Thread *thread;
	talk_base::Runnable *runnable;
};

/* 1941 */
struct buzz::StaticQName
{
	const char *const ns;
	const char *const local;
};

/* 1942 */
struct __cppobj __unaligned __declspec(align(8)) std::basic_iostream<char,std::char_traits<char> > : std::basic_istream<char,std::char_traits<char> >
{
	_BYTE gap60[8];
};

/* 1943 */
struct __cppobj __declspec(align(16)) std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > : std::basic_iostream<char,std::char_traits<char> >
{
	_BYTE gap68[72];
};

/* 1944 */
const struct XML_Memory_Handling_Suite
{
	void *(__cdecl *malloc_fcn)(unsigned int);
	void *(__cdecl *realloc_fcn)(void *, unsigned int);
	void (__cdecl *free_fcn)(void *);
};

/* 1948 */
struct INIT_ENCODING
{
	encoding initEnc;
	encoding **encPtr;
};

/* 1949 */
struct prolog_state
{
	int (__cdecl *handler)(prolog_state *, int, const char *, const char *, encoding *);
	unsigned int level;
	int role_none;
	unsigned int includeLevel;
	int documentEntity;
	int inEntityValue;
};

/* 1960 */
struct STRING_POOL
{
	block *blocks;
	block *freeBlocks;
	const char *end;
	char *ptr;
	char *start;
	XML_Memory_Handling_Suite *mem;
};

/* 1945 */
struct XML_ParserStruct
{
	void *m_userData;
	void *m_handlerArg;
	char *m_buffer;
	XML_Memory_Handling_Suite m_mem;
	const char *m_bufferPtr;
	char *m_bufferEnd;
	const char *m_bufferLim;
	int m_parseEndByteIndex;
	const char *m_parseEndPtr;
	char *m_dataBuf;
	char *m_dataBufEnd;
	void (__cdecl *m_startElementHandler)(void *, const char *, const char **);
	void (__cdecl *m_endElementHandler)(void *, const char *);
	void (__cdecl *m_characterDataHandler)(void *, const char *, int);
	void (__cdecl *m_processingInstructionHandler)(void *, const char *, const char *);
	void (__cdecl *m_commentHandler)(void *, const char *);
	void (__cdecl *m_startCdataSectionHandler)(void *);
	void (__cdecl *m_endCdataSectionHandler)(void *);
	void (__cdecl *m_defaultHandler)(void *, const char *, int);
	void (__cdecl *m_startDoctypeDeclHandler)(void *, const char *, const char *, const char *, int);
	void (__cdecl *m_endDoctypeDeclHandler)(void *);
	void (__cdecl *m_unparsedEntityDeclHandler)(void *, const char *, const char *, const char *, const char *, const char *);
	void (__cdecl *m_notationDeclHandler)(void *, const char *, const char *, const char *, const char *);
	void (__cdecl *m_startNamespaceDeclHandler)(void *, const char *, const char *);
	void (__cdecl *m_endNamespaceDeclHandler)(void *, const char *);
	int (__cdecl *m_notStandaloneHandler)(void *);
	int (__cdecl *m_externalEntityRefHandler)(XML_ParserStruct *, const char *, const char *, const char *, const char *);
	XML_ParserStruct *m_externalEntityRefHandlerArg;
	void (__cdecl *m_skippedEntityHandler)(void *, const char *, int);
	int (__cdecl *m_unknownEncodingHandler)(void *, const char *, XML_Encoding *);
	void (__cdecl *m_elementDeclHandler)(void *, const char *, XML_cp *);
	void (__cdecl *m_attlistDeclHandler)(void *, const char *, const char *, const char *, const char *, int);
	void (__cdecl *m_entityDeclHandler)(void *, const char *, int, const char *, int, const char *, const char *, const char *, const char *);
	void (__cdecl *m_xmlDeclHandler)(void *, const char *, const char *, int);
	encoding *m_encoding;
	INIT_ENCODING m_initEncoding;
	encoding *m_internalEncoding;
	const char *m_protocolEncodingName;
	char m_ns;
	char m_ns_triplets;
	void *m_unknownEncodingMem;
	void *m_unknownEncodingData;
	void *m_unknownEncodingHandlerData;
	void (__cdecl *m_unknownEncodingRelease)(void *);
	prolog_state m_prologState;
	XML_Error (__cdecl *m_processor)(XML_ParserStruct *, const char *, const char *, const char **);
	XML_Error m_errorCode;
	const char *m_eventPtr;
	const char *m_eventEndPtr;
	const char *m_positionPtr;
	open_internal_entity *m_openInternalEntities;
	open_internal_entity *m_freeInternalEntities;
	char m_defaultExpandInternalEntities;
	int m_tagLevel;
	ENTITY *m_declEntity;
	const char *m_doctypeName;
	const char *m_doctypeSysid;
	const char *m_doctypePubid;
	const char *m_declAttributeType;
	const char *m_declNotationName;
	const char *m_declNotationPublicId;
	ELEMENT_TYPE *m_declElementType;
	attribute_id *m_declAttributeId;
	char m_declAttributeIsCdata;
	char m_declAttributeIsId;
	DTD *m_dtd;
	const char *m_curBase;
	tag *m_tagStack;
	tag *m_freeTagList;
	binding *m_inheritedBindings;
	binding *m_freeBindingList;
	int m_attsSize;
	int m_nSpecifiedAtts;
	int m_idAttIndex;
	ATTRIBUTE *m_atts;
	NS_ATT *m_nsAtts;
	unsigned int m_nsAttsVersion;
	char m_nsAttsPower;
	position m_position;
	STRING_POOL m_tempPool;
	STRING_POOL m_temp2Pool;
	char *m_groupConnector;
	unsigned int m_groupSize;
	char m_namespaceSeparator;
	XML_ParserStruct *m_parentParser;
	XML_ParsingStatus m_parsingStatus;
	char m_isParamEntity;
	char m_useForeignDTD;
	XML_ParamEntityParsing m_paramEntityParsing;
	unsigned int m_hash_secret_salt;
};

/* 1946 */
struct XML_Encoding
{
	int map[256];
	void *data;
	int (__cdecl *convert)(void *, const char *);
	void (__cdecl *release)(void *);
};

/* 1947 */
struct XML_cp
{
	XML_Content_Type type;
	XML_Content_Quant quant;
	char *name;
	unsigned int numchildren;
	XML_cp *children;
};

/* 1950 */
struct __declspec(align(4)) open_internal_entity
{
	const char *internalEventPtr;
	const char *internalEventEndPtr;
	open_internal_entity *next;
	ENTITY *entity;
	int startTagLevel;
	char betweenDecl;
};

/* 1951 */
struct __declspec(align(2)) ENTITY
{
	const char *name;
	const char *textPtr;
	int textLen;
	int processed;
	const char *systemId;
	const char *base;
	const char *publicId;
	const char *notation;
	char open;
	char is_param;
	char is_internal;
};

/* 1956 */
struct ELEMENT_TYPE
{
	const char *name;
	prefix *prefix;
	attribute_id *idAtt;
	int nDefaultAtts;
	int allocDefaultAtts;
	DEFAULT_ATTRIBUTE *defaultAtts;
};

/* 1954 */
const struct __declspec(align(4)) attribute_id
{
	char *name;
	prefix *prefix;
	char maybeTokenized;
	char xmlns;
};

/* 1958 */
struct HASH_TABLE
{
	NAMED **v;
	char power;
	unsigned int size;
	unsigned int used;
	XML_Memory_Handling_Suite *mem;
};

/* 1952 */
struct prefix
{
	const char *name;
	binding *binding;
};

/* 1962 */
struct DTD
{
	HASH_TABLE generalEntities;
	HASH_TABLE elementTypes;
	HASH_TABLE attributeIds;
	HASH_TABLE prefixes;
	STRING_POOL pool;
	STRING_POOL entityValuePool;
	char keepProcessing;
	char hasParamEntityRefs;
	char standalone;
	char paramEntityRead;
	HASH_TABLE paramEntities;
	prefix defaultPrefix;
	char in_eldecl;
	CONTENT_SCAFFOLD *scaffold;
	unsigned int contentStringLen;
	unsigned int scaffSize;
	unsigned int scaffCount;
	int scaffLevel;
	int *scaffIndex;
};

/* 1964 */
struct TAG_NAME
{
	const char *str;
	const char *localPart;
	const char *prefix;
	int strLen;
	int uriLen;
	int prefixLen;
};

/* 1963 */
struct tag
{
	tag *parent;
	const char *rawName;
	int rawNameLength;
	TAG_NAME name;
	char *buf;
	char *bufEnd;
	binding *bindings;
};

/* 1953 */
struct binding
{
	prefix *prefix;
	binding *nextTagBinding;
	binding *prevPrefixBinding;
	attribute_id *attId;
	char *uri;
	int uriLen;
	int uriAlloc;
};

/* 1965 */
struct NS_ATT
{
	unsigned int version;
	unsigned int hash;
	const char *uriName;
};

/* 1959 */
struct __declspec(align(4)) block
{
	block *next;
	int size;
	char s[1];
};

/* 1966 */
struct __declspec(align(4)) XML_ParsingStatus
{
	XML_Parsing parsing;
	char finalBuffer;
};

/* 1955 */
struct DEFAULT_ATTRIBUTE
{
	attribute_id *id;
	char isCdata;
	const char *value;
};

/* 1957 */
struct NAMED
{
	const char *name;
};

/* 1961 */
struct CONTENT_SCAFFOLD
{
	XML_Content_Type type;
	XML_Content_Quant quant;
	const char *name;
	int firstchild;
	int lastchild;
	int childcnt;
	int nextsib;
};

/* 1967 */
struct __cppobj buzz::XmlParseHandler
{
	buzz::XmlParseHandlerVtbl *vfptr;
};

/* 1970 */
struct buzz::XmlParseHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmlParseHandler *this, unsigned int);
	void (__thiscall *StartElement)(buzz::XmlParseHandler *this, buzz::XmlParseContext *, const char *, const char **);
	void (__thiscall *EndElement)(buzz::XmlParseHandler *this, buzz::XmlParseContext *, const char *);
	void (__thiscall *CharacterData)(buzz::XmlParseHandler *this, buzz::XmlParseContext *, const char *, int);
	void (__thiscall *Error)(buzz::XmlParseHandler *this, buzz::XmlParseContext *, XML_Error);
};

/* 1968 */
struct __cppobj buzz::XmlParseContext
{
	buzz::XmlParseContextVtbl *vfptr;
};

/* 1969 */
struct buzz::XmlParseContextVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmlParseContext *this, unsigned int);
	buzz::QName *(__thiscall *ResolveQName)(buzz::XmlParseContext *this, buzz::QName *result, const char *, bool);
	void (__thiscall *RaiseError)(buzz::XmlParseContext *this, XML_Error);
	void (__thiscall *GetPosition)(buzz::XmlParseContext *this, unsigned int *, unsigned int *, unsigned int *);
};

/* 1971 */
struct __cppobj std::_Vector_val<std::_Simple_types<buzz::XmlElement *> > : std::_Container_base0
{
	buzz::XmlElement **_Myfirst;
	buzz::XmlElement **_Mylast;
	buzz::XmlElement **_Myend;
};

/* 1972 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > > : std::_Vector_val<std::_Simple_types<buzz::XmlElement *> >
{
};

/* 1973 */
struct __cppobj std::vector<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > : std::_Vector_alloc<0,std::_Vec_base_types<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > >
{
};

/* 1974 */
struct __cppobj talk_base::scoped_ptr<std::vector<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > >
{
	std::vector<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > *ptr;
};

/* 1975 */
struct __cppobj buzz::XmlBuilder : buzz::XmlParseHandler
{
	buzz::XmlElement *pelCurrent_;
	talk_base::scoped_ptr<buzz::XmlElement> pelRoot_;
	talk_base::scoped_ptr<std::vector<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > > pvParents_;
};

/* 1976 */
struct __cppobj buzz::XmlPrinter
{
};

/* 1977 */
struct __cppobj talk_base::scoped_ptr<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > *ptr;
};

/* 1978 */
struct __cppobj talk_base::scoped_ptr<std::vector<unsigned int,std::allocator<unsigned int> > >
{
	std::vector<unsigned int,std::allocator<unsigned int> > *ptr;
};

/* 1979 */
struct __cppobj buzz::XmlnsStack
{
	talk_base::scoped_ptr<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > pxmlnsStack_;
	talk_base::scoped_ptr<std::vector<unsigned int,std::allocator<unsigned int> > > pxmlnsDepthStack_;
};

/* 1982 */
struct __cppobj buzz::XmlParser::ParseContext : buzz::XmlParseContext
{
	buzz::XmlParser *parser_;
	buzz::XmlnsStack xmlnsstack_;
	XML_Error raised_;
	unsigned int line_number_;
	unsigned int column_number_;
	int byte_index_;
};

/* 1980 */
struct __cppobj __declspec(align(4)) buzz::XmlParser
{
	buzz::XmlParserVtbl *vfptr;
	buzz::XmlParser::ParseContext context_;
	XML_ParserStruct *expat_;
	buzz::XmlParseHandler *pxph_;
	bool sentError_;
};

/* 1981 */
struct buzz::XmlParserVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmlParser *this, unsigned int);
};

/* 1983 */
struct __cppobj __declspec(align(4)) std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	bool second;
};

/* 1984 */
struct __cppobj __declspec(align(4)) talk_base::SSLAdapter : talk_base::AsyncSocketAdapter
{
	bool ignore_bad_cert_;
};

/* 1985 */
struct _SecHandle
{
	unsigned int dwLower;
	unsigned int dwUpper;
};

/* 1986 */
struct __cppobj std::_Vector_val<std::_Simple_types<char> > : std::_Container_base0
{
	char *_Myfirst;
	char *_Mylast;
	char *_Myend;
};

/* 1987 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > > : std::_Vector_val<std::_Simple_types<char> >
{
};

/* 1988 */
struct __cppobj std::vector<char,std::allocator<char> > : std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >
{
};

/* 1989 */
struct _SecPkgContext_StreamSizes
{
	unsigned int cbHeader;
	unsigned int cbTrailer;
	unsigned int cbMaximumMessage;
	unsigned int cBuffers;
	unsigned int cbBlockSize;
};

/* 1990 */
struct __cppobj talk_base::SChannelAdapter::SSLImpl
{
	_SecHandle cred;
	_SecHandle ctx;
	bool cred_init;
	bool ctx_init;
	std::vector<char,std::allocator<char> > inbuf;
	std::vector<char,std::allocator<char> > outbuf;
	std::vector<char,std::allocator<char> > readable;
	_SecPkgContext_StreamSizes sizes;
};

/* 1991 */
struct __cppobj talk_base::SChannelAdapter : talk_base::SSLAdapter, talk_base::MessageHandler
{
	talk_base::SChannelAdapter::SSLState state_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > ssl_host_name_;
	bool restartable_;
	bool signal_close_;
	bool message_pending_;
	talk_base::SChannelAdapter::SSLImpl *impl_;
};

/* 1992 */
struct _SecBuffer
{
	unsigned int cbBuffer;
	unsigned int BufferType;
	void *pvBuffer;
};

/* 1993 */
struct _SecBufferDesc
{
	unsigned int ulVersion;
	unsigned int cBuffers;
	_SecBuffer *pBuffers;
};

/* 1994 */
struct __cppobj std::_Ignore
{
};

/* 1995 */
struct __cppobj std::_Tuple_alloc_t
{
};

/* 1996 */
struct $0227A65EDE726BD8ABDBF310B0E65A75
{
	unsigned __int64 Reserved : 24;
	unsigned __int64 NetLuidIndex : 24;
	unsigned __int64 IfType : 16;
};

/* 1997 */
union _NET_LUID_LH
{
	unsigned __int64 Value;
	$0227A65EDE726BD8ABDBF310B0E65A75 Info;
};

/* 2012 */
struct $C4AD06FBC47BE754F392ACE3DA2A5F18
{
	unsigned int Length;
	unsigned int IfIndex;
};

/* 2013 */
union $F4F39A4E519986257A4C7BBE0B255A7E
{
	unsigned __int64 Alignment;
	$C4AD06FBC47BE754F392ACE3DA2A5F18 __s1;
};

/* 2014 */
struct $E43178AF9457E50D9523A864F18E103E
{
	unsigned __int32 DdnsEnabled : 1;
	unsigned __int32 RegisterAdapterSuffix : 1;
	unsigned __int32 Dhcpv4Enabled : 1;
	unsigned __int32 ReceiveOnly : 1;
	unsigned __int32 NoMulticast : 1;
	unsigned __int32 Ipv6OtherStatefulConfig : 1;
	unsigned __int32 NetbiosOverTcpipEnabled : 1;
	unsigned __int32 Ipv4Enabled : 1;
	unsigned __int32 Ipv6Enabled : 1;
	unsigned __int32 Ipv6ManagedAddressConfigurationSupported : 1;
};

/* 2015 */
union $7295453C622035ACC03FC8A13E25BAD5
{
	unsigned int Flags;
	$E43178AF9457E50D9523A864F18E103E __s1;
};

/* 2000 */
struct _SOCKET_ADDRESS
{
	sockaddr *lpSockaddr;
	int iSockaddrLength;
};

/* 11247 */
enum _NET_IF_CONNECTION_TYPE
{
	NET_IF_CONNECTION_DEDICATED = 0x1,
	NET_IF_CONNECTION_PASSIVE = 0x2,
	NET_IF_CONNECTION_DEMAND = 0x3,
	NET_IF_CONNECTION_MAXIMUM = 0x4,
};

/* 1998 */
struct __declspec(align(8)) _IP_ADAPTER_ADDRESSES_LH
{
	$F4F39A4E519986257A4C7BBE0B255A7E ___u0;
	_IP_ADAPTER_ADDRESSES_LH *Next;
	char *AdapterName;
	_IP_ADAPTER_UNICAST_ADDRESS_LH *FirstUnicastAddress;
	_IP_ADAPTER_ANYCAST_ADDRESS_XP *FirstAnycastAddress;
	_IP_ADAPTER_MULTICAST_ADDRESS_XP *FirstMulticastAddress;
	_IP_ADAPTER_DNS_SERVER_ADDRESS_XP *FirstDnsServerAddress;
	wchar_t *DnsSuffix;
	wchar_t *Description;
	wchar_t *FriendlyName;
	char PhysicalAddress[8];
	unsigned int PhysicalAddressLength;
	$7295453C622035ACC03FC8A13E25BAD5 ___u12;
	unsigned int Mtu;
	unsigned int IfType;
	IF_OPER_STATUS OperStatus;
	unsigned int Ipv6IfIndex;
	unsigned int ZoneIndices[16];
	_IP_ADAPTER_PREFIX_XP *FirstPrefix;
	unsigned __int64 TransmitLinkSpeed;
	unsigned __int64 ReceiveLinkSpeed;
	_IP_ADAPTER_WINS_SERVER_ADDRESS_LH *FirstWinsServerAddress;
	_IP_ADAPTER_GATEWAY_ADDRESS_LH *FirstGatewayAddress;
	unsigned int Ipv4Metric;
	unsigned int Ipv6Metric;
	_NET_LUID_LH Luid;
	_SOCKET_ADDRESS Dhcpv4Server;
	unsigned int CompartmentId;
	_GUID NetworkGuid;
	_NET_IF_CONNECTION_TYPE ConnectionType;
	TUNNEL_TYPE TunnelType;
	_SOCKET_ADDRESS Dhcpv6Server;
	char Dhcpv6ClientDuid[130];
	unsigned int Dhcpv6ClientDuidLength;
	unsigned int Dhcpv6Iaid;
	_IP_ADAPTER_DNS_SUFFIX *FirstDnsSuffix;
};

/* 2001 */
struct $D7A578E38B91C9BDDBC231DF9484A90D
{
	unsigned int Length;
	unsigned int Flags;
};

/* 2002 */
union $B576157571ABEF9399B2D2C2921ECC3F
{
	unsigned __int64 Alignment;
	$D7A578E38B91C9BDDBC231DF9484A90D __s1;
};

/* 1999 */
struct __declspec(align(4)) _IP_ADAPTER_UNICAST_ADDRESS_LH
{
	$B576157571ABEF9399B2D2C2921ECC3F ___u0;
	_IP_ADAPTER_UNICAST_ADDRESS_LH *Next;
	_SOCKET_ADDRESS Address;
	NL_PREFIX_ORIGIN PrefixOrigin;
	NL_SUFFIX_ORIGIN SuffixOrigin;
	NL_DAD_STATE DadState;
	unsigned int ValidLifetime;
	unsigned int PreferredLifetime;
	unsigned int LeaseLifetime;
	char OnLinkPrefixLength;
};

/* 2003 */
struct __declspec(align(8)) _IP_ADAPTER_ANYCAST_ADDRESS_XP
{
	$B576157571ABEF9399B2D2C2921ECC3F ___u0;
	_IP_ADAPTER_ANYCAST_ADDRESS_XP *Next;
	_SOCKET_ADDRESS Address;
};

/* 2004 */
struct __declspec(align(8)) _IP_ADAPTER_MULTICAST_ADDRESS_XP
{
	$B576157571ABEF9399B2D2C2921ECC3F ___u0;
	_IP_ADAPTER_MULTICAST_ADDRESS_XP *Next;
	_SOCKET_ADDRESS Address;
};

/* 2006 */
struct $FE8F32AE7C668FFFCFAD8197AED8EF6F
{
	unsigned int Length;
	unsigned int Reserved;
};

/* 2007 */
union $47E1C24184E4AE0BB961D04EC09D44EE
{
	unsigned __int64 Alignment;
	$FE8F32AE7C668FFFCFAD8197AED8EF6F __s1;
};

/* 2005 */
struct __declspec(align(8)) _IP_ADAPTER_DNS_SERVER_ADDRESS_XP
{
	$47E1C24184E4AE0BB961D04EC09D44EE ___u0;
	_IP_ADAPTER_DNS_SERVER_ADDRESS_XP *Next;
	_SOCKET_ADDRESS Address;
};

/* 2008 */
struct _IP_ADAPTER_PREFIX_XP
{
	$B576157571ABEF9399B2D2C2921ECC3F ___u0;
	_IP_ADAPTER_PREFIX_XP *Next;
	_SOCKET_ADDRESS Address;
	unsigned int PrefixLength;
};

/* 2009 */
struct __declspec(align(8)) _IP_ADAPTER_WINS_SERVER_ADDRESS_LH
{
	$47E1C24184E4AE0BB961D04EC09D44EE ___u0;
	_IP_ADAPTER_WINS_SERVER_ADDRESS_LH *Next;
	_SOCKET_ADDRESS Address;
};

/* 2010 */
struct __declspec(align(8)) _IP_ADAPTER_GATEWAY_ADDRESS_LH
{
	$47E1C24184E4AE0BB961D04EC09D44EE ___u0;
	_IP_ADAPTER_GATEWAY_ADDRESS_LH *Next;
	_SOCKET_ADDRESS Address;
};

/* 2011 */
struct _IP_ADAPTER_DNS_SUFFIX
{
	_IP_ADAPTER_DNS_SUFFIX *Next;
	wchar_t String[256];
};

/* 2016 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::Network *> > : std::_Container_base0
{
	talk_base::Network **_Myfirst;
	talk_base::Network **_Mylast;
	talk_base::Network **_Myend;
};

/* 2017 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,talk_base::Network *,int,talk_base::Network * const *,talk_base::Network * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2018 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::Network *> > > : std::_Iterator012<std::random_access_iterator_tag,talk_base::Network *,int,talk_base::Network * const *,talk_base::Network * const &,std::_Iterator_base0>
{
	talk_base::Network **_Ptr;
};

/* 2019 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::Network *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::Network *> > >
{
};

/* 2021 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	talk_base::Network *second;
};

/* 2020 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> _Myval;
};

/* 2022 */
struct __cppobj std::initializer_list<talk_base::Network *>
{
	talk_base::Network *const *_First;
	talk_base::Network *const *_Last;
};

/* 2023 */
struct __cppobj std::pair<talk_base::Network * *,talk_base::Network * *>
{
	talk_base::Network **first;
	talk_base::Network **second;
};

/* 2024 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,int,sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> * const *,sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2025 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,int,sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> * const *,sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2026 */
struct __cppobj std::_Allocator_base<talk_base::Network *>
{
};

/* 2027 */
struct __cppobj std::allocator<talk_base::Network *> : std::_Allocator_base<talk_base::Network *>
{
};

/* 2028 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2029 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> *_Ptr;
};

/* 2030 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > >,std::_Iterator_base0>
{
};

/* 2031 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > >
{
};

/* 2032 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > > first;
	bool second;
};

/* 2033 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::Network *,std::allocator<talk_base::Network *> > > : std::_Vector_val<std::_Simple_types<talk_base::Network *> >
{
};

/* 2034 */
struct __cppobj std::vector<talk_base::Network *,std::allocator<talk_base::Network *> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::Network *,std::allocator<talk_base::Network *> > >
{
};

/* 2035 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Network *> > : std::allocator<talk_base::Network *>
{
};

/* 2036 */
struct __cppobj std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>
{
};

/* 2037 */
struct __cppobj std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>
{
};

/* 2038 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >
{
};

/* 2039 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >
{
};

/* 2040 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >,0>
{
};

/* 2041 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::Network *> >
{
};

/* 2042 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2043 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2045 */
struct __cppobj std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >
{
	talk_base::Network *first;
	std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > second;
};

/* 2046 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > second;
};

/* 2044 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > _Myval;
};

/* 2047 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> *_Ptr;
};

/* 2048 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > >,std::_Iterator_base0>
{
};

/* 2049 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > >
{
};

/* 2050 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > > first;
	bool second;
};

/* 2051 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2052 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> >
{
};

/* 2053 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> >
{
};

/* 2054 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> >
{
};

/* 2055 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,void *> > >
{
};

/* 2056 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> >
{
};

/* 2057 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> >
{
};

/* 2058 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2059 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *>
{
};

/* 2060 */
struct __cppobj std::_Arg_idx<0>
{
};

/* 2061 */
struct __cppobj std::_Allocator_base<talk_base::NetworkSession *>
{
};

/* 2062 */
struct __cppobj std::allocator<talk_base::NetworkSession *> : std::_Allocator_base<talk_base::NetworkSession *>
{
};

/* 2063 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::NetworkSession *> > : std::allocator<talk_base::NetworkSession *>
{
};

/* 2064 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::NetworkSession *> >
{
};

/* 2065 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::NetworkSession *> >::rebind<talk_base::NetworkSession *>
{
};

/* 2066 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::NetworkSession *> >::rebind<talk_base::NetworkSession * *>
{
};

/* 2067 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> >
{
};

/* 2068 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> >
{
};

/* 2069 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> > >
{
};

/* 2070 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> >
{
};

/* 2071 */
struct __cppobj std::allocator<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *>
{
};

/* 2072 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2073 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *> > >
{
};

/* 2074 */
struct __cppobj std::tuple<>
{
};

/* 2075 */
struct __cppobj std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Val;
};

/* 2076 */
struct __cppobj std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> : std::tuple<>
{
	std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> _Myfirst;
};

/* 2077 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,void *> >
{
};

/* 2078 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >
{
};

/* 2079 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >
{
};

/* 2080 */
struct __cppobj std::move_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::IPAddress> > > >
{
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::IPAddress> > > current;
};

/* 2081 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >,0>
{
};

/* 2082 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > >
{
};

/* 2083 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > >
{
};

/* 2084 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > >
{
};

/* 2085 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > >
{
};

/* 2086 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >,0> >
{
};

/* 2087 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> *>
{
};

/* 2088 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Network *> >::rebind<talk_base::Network *>
{
};

/* 2089 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Network *> >::rebind<talk_base::Network * *>
{
};

/* 2090 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > *>
{
};

/* 2091 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > >
{
};

/* 2092 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > >
{
};

/* 2093 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::pair<talk_base::Network *,std::vector<talk_base::IPAddress,std::allocator<talk_base::IPAddress> > > > >,0> >
{
};

/* 2094 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded> *,void *> > >
{
};

/* 2095 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >,0> >
{
};

/* 2096 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> >,0> >
{
};

/* 2097 */
struct __cppobj std::_Nonscalar_ptr_iterator_tag
{
};

/* 2098 */
struct __cppobj std::_Arg_idx<>
{
};

/* 2099 */
struct __cppobj std::_Scalar_ptr_iterator_tag
{
};

/* 2100 */
struct __cppobj __declspec(align(4)) talk_base::StreamAdapterInterface : talk_base::StreamInterface, sigslot::has_slots<sigslot::single_threaded>
{
	talk_base::StreamInterface *stream_;
	bool owned_;
};

/* 2101 */
struct __cppobj talk_base::StreamReference::StreamRefCount
{
	talk_base::StreamInterface *stream_;
	int ref_count_;
	talk_base::CriticalSection cs_;
};

/* 2102 */
struct __cppobj talk_base::StreamReference : talk_base::StreamAdapterInterface
{
	talk_base::StreamReference::StreamRefCount *stream_ref_count_;
};

/* 2103 */
struct __cppobj talk_base::NetworkManager
{
	talk_base::NetworkManagerVtbl *vfptr;
	sigslot::signal0<sigslot::single_threaded> SignalNetworksChanged;
	sigslot::signal0<sigslot::single_threaded> SignalError;
};

/* 2104 */
struct talk_base::NetworkManagerVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::NetworkManager *this, unsigned int);
	void (__thiscall *StartUpdating)(talk_base::NetworkManager *this);
	void (__thiscall *StopUpdating)(talk_base::NetworkManager *this);
	void (__thiscall *GetNetworks)(talk_base::NetworkManager *this, std::vector<talk_base::Network *,std::allocator<talk_base::Network *> > *);
	void (__thiscall *DumpNetworks)(talk_base::NetworkManager *this, bool);
};

/* 2105 */
struct __cppobj __declspec(align(4)) talk_base::NetworkManagerBase : talk_base::NetworkManager
{
	std::vector<talk_base::Network *,std::allocator<talk_base::Network *> > networks_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::Network *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,talk_base::Network *> > > networks_map_;
	bool ipv6_enabled_;
};

/* 2106 */
struct __cppobj talk_base::BasicNetworkManager : talk_base::NetworkManagerBase, talk_base::MessageHandler
{
	talk_base::Thread *thread_;
	bool sent_first_update_;
	int start_count_;
};

/* 2107 */
struct __cppobj talk_base::scoped_ptr<talk_base::Network>
{
	talk_base::Network *ptr;
};

/* 2108 */
struct __cppobj talk_base::scoped_ptr<talk_base::StreamInterface>
{
	talk_base::StreamInterface *ptr;
};

/* 2109 */
struct __cppobj talk_base::AsyncWriteStream : talk_base::StreamInterface
{
	talk_base::scoped_ptr<talk_base::StreamInterface> stream_;
	talk_base::Thread *write_thread_;
	talk_base::StreamState state_;
	talk_base::Buffer buffer_;
	talk_base::CriticalSection crit_stream_;
	talk_base::CriticalSection crit_buffer_;
};

/* 2110 */
struct __cppobj talk_base::MemoryStreamBase : talk_base::StreamInterface
{
	char *buffer_;
	unsigned int buffer_length_;
	unsigned int data_length_;
	unsigned int seek_position_;
};

/* 2111 */
struct __cppobj talk_base::StreamEventData : talk_base::MessageData
{
	int events;
	int error;
};

/* 2112 */
struct std::money_base::pattern
{
	char field[4];
};

/* 2113 */
struct __cppobj std::money_base : std::locale::facet
{
};

/* 2114 */
struct __cppobj std::_Smanip<__int64>
{
	void (__cdecl *_Pfun)(std::ios_base *, __int64);
	__int64 _Manarg;
};

/* 2115 */
struct __cppobj std::_Allocator_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
};

/* 2116 */
struct __cppobj std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::_Allocator_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
};

/* 2117 */
struct __cppobj std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 2118 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
};

/* 2119 */
struct __cppobj std::_Fillobj<char>
{
	char _Fill;
};

/* 2120 */
struct __cppobj std::pointer_traits<std::pair<talk_base::StreamInterface *,int> *>
{
};

/* 2121 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2122 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Iterator012<std::random_access_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base0>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Ptr;
};

/* 2123 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 2124 */
struct __cppobj std::initializer_list<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_First;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Last;
};

/* 2125 */
struct __cppobj std::time_base : std::locale::facet
{
};

/* 2126 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::rebind<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
};

/* 2127 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::rebind<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
{
};

/* 2128 */
struct HINSTANCE__
{
	int unused;
};

/* 2129 */
struct __cppobj talk_base::FileStream : talk_base::StreamInterface
{
	_iobuf *file_;
};

/* 2130 */
struct __cppobj talk_base::scoped_ptr<talk_base::FileStream>
{
	talk_base::FileStream *ptr;
};

/* 2131 */
struct talk_base::ConstantLabel
{
	int value;
	const char *label;
};

/* 2132 */
struct stat
{
	unsigned int st_dev;
	unsigned __int16 st_ino;
	unsigned __int16 st_mode;
	__int16 st_nlink;
	__int16 st_uid;
	__int16 st_gid;
	unsigned int st_rdev;
	int st_size;
	__int64 st_atime;
	__int64 st_mtime;
	__int64 st_ctime;
};

/* 2133 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<talk_base::StreamAdapterInterface,talk_base::StreamInterface *,int,int,sigslot::single_threaded> : sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>
{
	talk_base::StreamAdapterInterface *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::StreamAdapterInterface *this, talk_base::StreamInterface *, int, int);
};

/* 2134 */
struct __cppobj __declspec(align(4)) talk_base::StringStream : talk_base::StreamInterface
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *str_;
	unsigned int read_pos_;
	bool read_only_;
};

/* 2135 */
struct __cppobj talk_base::LoggingAdapter : talk_base::StreamAdapterInterface
{
	talk_base::LoggingSeverity level_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > label_;
	bool hex_mode_;
	talk_base::LogMultilineState lms_;
};

/* 2136 */
struct __cppobj talk_base::NullStream : talk_base::StreamInterface
{
};

/* 2137 */
struct __cppobj talk_base::ExternalMemoryStream : talk_base::MemoryStreamBase
{
};

/* 2138 */
struct __cppobj talk_base::MemoryStream : talk_base::MemoryStreamBase
{
	char *buffer_alloc_;
};

/* 2139 */
struct __cppobj talk_base::StreamTap : talk_base::StreamAdapterInterface
{
	talk_base::scoped_ptr<talk_base::StreamInterface> tap_;
	talk_base::StreamResult tap_result_;
	int tap_error_;
};

/* 2140 */
struct __cppobj talk_base::FifoBuffer : talk_base::StreamInterface
{
	talk_base::StreamState state_;
	talk_base::scoped_array<char> buffer_;
	unsigned int buffer_length_;
	unsigned int data_length_;
	unsigned int read_position_;
	talk_base::Thread *owner_;
	talk_base::CriticalSection crit_;
};

/* 2141 */
struct __cppobj talk_base::StreamSegment : talk_base::StreamAdapterInterface
{
	unsigned int start_;
	unsigned int pos_;
	unsigned int length_;
};

/* 2142 */
struct _stat64i32
{
	unsigned int st_dev;
	unsigned __int16 st_ino;
	unsigned __int16 st_mode;
	__int16 st_nlink;
	__int16 st_uid;
	__int16 st_gid;
	unsigned int st_rdev;
	int st_size;
	__int64 st_atime;
	__int64 st_mtime;
	__int64 st_ctime;
};

/* 2143 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > > : std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0>
{
	char *_Ptr;
};

/* 2144 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
{
};

/* 2145 */
struct __cppobj talk_base::TestRandomGenerator : talk_base::RandomGenerator
{
	int seed_;
};

/* 2146 */
struct __cppobj talk_base::Base64
{
};

/* 2147 */
struct __cppobj talk_base::SecureRandomGenerator : talk_base::RandomGenerator
{
	HINSTANCE__ *advapi32_;
	int (__stdcall *rtl_gen_random_)(void *, unsigned int);
};

/* 2148 */
struct __cppobj talk_base::scoped_ptr<talk_base::RandomGenerator>
{
	talk_base::RandomGenerator *ptr;
};

/* 2149 */
struct __cppobj talk_base::scoped_array<unsigned char>
{
	char *ptr;
};

/* 2156 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::TransportChannelStats> > : std::_Container_base0
{
	cricket::TransportChannelStats *_Myfirst;
	cricket::TransportChannelStats *_Mylast;
	cricket::TransportChannelStats *_Myend;
};

/* 2157 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::TransportChannelStats,std::allocator<cricket::TransportChannelStats> > > : std::_Vector_val<std::_Simple_types<cricket::TransportChannelStats> >
{
};

/* 2158 */
struct __cppobj std::vector<cricket::TransportChannelStats,std::allocator<cricket::TransportChannelStats> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::TransportChannelStats,std::allocator<cricket::TransportChannelStats> > >
{
};

/* 2159 */
struct __cppobj cricket::TransportStats
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name;
	std::vector<cricket::TransportChannelStats,std::allocator<cricket::TransportChannelStats> > channel_stats;
};

/* 2160 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::TransportStats second;
};

/* 2150 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> _Myval;
};

/* 2152 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::ConnectionInfo> > : std::_Container_base0
{
	cricket::ConnectionInfo *_Myfirst;
	cricket::ConnectionInfo *_Mylast;
	cricket::ConnectionInfo *_Myend;
};

/* 2153 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::ConnectionInfo,std::allocator<cricket::ConnectionInfo> > > : std::_Vector_val<std::_Simple_types<cricket::ConnectionInfo> >
{
};

/* 2154 */
struct __cppobj std::vector<cricket::ConnectionInfo,std::allocator<cricket::ConnectionInfo> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::ConnectionInfo,std::allocator<cricket::ConnectionInfo> > >
{
};

/* 2155 */
struct __cppobj cricket::TransportChannelStats
{
	int component;
	std::vector<cricket::ConnectionInfo,std::allocator<cricket::ConnectionInfo> > connection_infos;
};

/* 2151 */
struct __cppobj cricket::ConnectionInfo
{
	bool best_connection;
	bool writable;
	bool readable;
	bool timeout;
	bool new_connection;
	unsigned int rtt;
	unsigned int sent_total_bytes;
	unsigned int sent_bytes_second;
	unsigned int recv_total_bytes;
	unsigned int recv_bytes_second;
	cricket::Candidate local_candidate;
	cricket::Candidate remote_candidate;
	void *key;
};

/* 2161 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2162 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > >
{
};

/* 2163 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > >
{
};

/* 2164 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > >
{
};

/* 2165 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >,0> >
{
};

/* 2166 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >,0> >
{
};

/* 2167 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >
{
};

/* 2168 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >
{
};

/* 2169 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2170 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> *_Ptr;
};

/* 2171 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > >,std::_Iterator_base0>
{
};

/* 2172 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > >
{
};

/* 2174 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
};

/* 2173 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Myval;
};

/* 2175 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2176 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 2177 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
{
};

/* 2178 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 2179 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
{
};

/* 2180 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
{
};

/* 2181 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 2182 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 2183 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2184 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *_Ptr;
};

/* 2185 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>
{
};

/* 2186 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
{
};

/* 2187 */
struct __cppobj std::initializer_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *_First;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *_Last;
};

/* 2188 */
struct __cppobj std::_Allocator_base<cricket::ConnectionInfo>
{
};

/* 2189 */
struct __cppobj std::allocator<cricket::ConnectionInfo> : std::_Allocator_base<cricket::ConnectionInfo>
{
};

/* 2190 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ConnectionInfo> > : std::allocator<cricket::ConnectionInfo>
{
};

/* 2191 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::ConnectionInfo,int,cricket::ConnectionInfo const *,cricket::ConnectionInfo const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2192 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ConnectionInfo> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::ConnectionInfo,int,cricket::ConnectionInfo const *,cricket::ConnectionInfo const &,std::_Iterator_base0>
{
	cricket::ConnectionInfo *_Ptr;
};

/* 2193 */
struct __cppobj std::initializer_list<cricket::ConnectionInfo>
{
	cricket::ConnectionInfo *_First;
	cricket::ConnectionInfo *_Last;
};

/* 2194 */
struct __cppobj __declspec(align(4)) cricket::ProtocolAddress
{
	talk_base::SocketAddress address;
	cricket::ProtocolType proto;
	bool secure;
};

/* 2195 */
struct __cppobj std::_Allocator_base<cricket::ContentInfo>
{
};

/* 2196 */
struct __cppobj std::allocator<cricket::ContentInfo> : std::_Allocator_base<cricket::ContentInfo>
{
};

/* 2197 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ContentInfo> > : std::allocator<cricket::ContentInfo>
{
};

/* 2198 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::ContentInfo,int,cricket::ContentInfo const *,cricket::ContentInfo const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2199 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ContentInfo> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::ContentInfo,int,cricket::ContentInfo const *,cricket::ContentInfo const &,std::_Iterator_base0>
{
	cricket::ContentInfo *_Ptr;
};

/* 2200 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::ContentInfo> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ContentInfo> > >
{
};

/* 2201 */
struct __cppobj std::initializer_list<cricket::ContentInfo>
{
	cricket::ContentInfo *_First;
	cricket::ContentInfo *_Last;
};

/* 2203 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::ContentParser *second;
};

/* 2202 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> _Myval;
};

/* 2204 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2205 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > >
{
};

/* 2206 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > >
{
};

/* 2207 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::ContentParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > >
{
};

/* 2208 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::ContentParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::ContentParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >,0> >
{
};

/* 2209 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::ContentParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::ContentParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >,0> >
{
};

/* 2210 */
struct __cppobj std::binary_function<int,int,bool>
{
};

/* 2211 */
struct __cppobj std::less<int> : std::binary_function<int,int,bool>
{
};

/* 2212 */
struct __cppobj std::_Allocator_base<std::pair<int const ,cricket::TransportChannelProxy *> >
{
};

/* 2213 */
struct __cppobj std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> > : std::_Allocator_base<std::pair<int const ,cricket::TransportChannelProxy *> >
{
};

/* 2214 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,cricket::TransportChannelProxy *>,int,std::pair<int const ,cricket::TransportChannelProxy *> const *,std::pair<int const ,cricket::TransportChannelProxy *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2215 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,cricket::TransportChannelProxy *>,int,std::pair<int const ,cricket::TransportChannelProxy *> const *,std::pair<int const ,cricket::TransportChannelProxy *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> *_Ptr;
};

/* 2216 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > >,std::_Iterator_base0>
{
};

/* 2217 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > >
{
};

/* 2218 */
struct __cppobj cricket::RelayMessage : cricket::StunMessage
{
};

/* 2219 */
struct __cppobj cricket::SessionRedirect
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > target;
};

/* 2220 */
struct __cppobj std::_Allocator_base<cricket::Candidate>
{
};

/* 2221 */
struct __cppobj std::allocator<cricket::Candidate> : std::_Allocator_base<cricket::Candidate>
{
};

/* 2222 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Candidate> > : std::allocator<cricket::Candidate>
{
};

/* 2223 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::Candidate,int,cricket::Candidate const *,cricket::Candidate const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2224 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::Candidate> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::Candidate,int,cricket::Candidate const *,cricket::Candidate const &,std::_Iterator_base0>
{
	cricket::Candidate *_Ptr;
};

/* 2225 */
struct __cppobj std::initializer_list<cricket::Candidate>
{
	cricket::Candidate *_First;
	cricket::Candidate *_Last;
};

/* 2226 */
struct __cppobj cricket::StunAddressAttribute : cricket::StunAttribute
{
	talk_base::SocketAddress address_;
};

/* 2227 */
struct __cppobj cricket::StunXorAddressAttribute : cricket::StunAddressAttribute
{
	cricket::StunMessage *owner_;
};

/* 2228 */
struct __cppobj cricket::StunByteStringAttribute : cricket::StunAttribute
{
	char *bytes_;
};

/* 2229 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned short> > : std::_Container_base0
{
	unsigned __int16 *_Myfirst;
	unsigned __int16 *_Mylast;
	unsigned __int16 *_Myend;
};

/* 2230 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<unsigned short,std::allocator<unsigned short> > > : std::_Vector_val<std::_Simple_types<unsigned short> >
{
};

/* 2231 */
struct __cppobj std::vector<unsigned short,std::allocator<unsigned short> > : std::_Vector_alloc<0,std::_Vec_base_types<unsigned short,std::allocator<unsigned short> > >
{
};

/* 2232 */
struct __cppobj cricket::StunUInt16ListAttribute : cricket::StunAttribute
{
	std::vector<unsigned short,std::allocator<unsigned short> > *attr_types_;
};

/* 2233 */
struct __cppobj cricket::SessionStats
{
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > proxy_to_transport;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > transport_stats;
};

/* 2234 */
struct __cppobj std::_Allocator_base<cricket::TransportChannelStats>
{
};

/* 2235 */
struct __cppobj std::allocator<cricket::TransportChannelStats> : std::_Allocator_base<cricket::TransportChannelStats>
{
};

/* 2236 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportChannelStats> > : std::allocator<cricket::TransportChannelStats>
{
};

/* 2237 */
struct __cppobj std::initializer_list<cricket::TransportChannelStats>
{
	cricket::TransportChannelStats *_First;
	cricket::TransportChannelStats *_Last;
};

/* 2238 */
struct __cppobj cricket::StunUInt32Attribute : cricket::StunAttribute
{
	unsigned int bits_;
};

/* 2239 */
struct __cppobj cricket::StunUInt64Attribute : cricket::StunAttribute
{
	unsigned __int64 bits_;
};

/* 2240 */
struct __cppobj cricket::StunErrorCodeAttribute : cricket::StunAttribute
{
	char class_;
	char number_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > reason_;
};

/* 2241 */
struct __cppobj cricket::MessageError : cricket::ParseError
{
	buzz::QName type;
};

/* 2242 */
struct __cppobj cricket::TurnMessage : cricket::StunMessage
{
};

/* 2243 */
struct __cppobj std::_Allocator_base<cricket::TransportInfo>
{
};

/* 2244 */
struct __cppobj std::allocator<cricket::TransportInfo> : std::_Allocator_base<cricket::TransportInfo>
{
};

/* 2245 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportInfo> > : std::allocator<cricket::TransportInfo>
{
};

/* 2246 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::TransportInfo,int,cricket::TransportInfo const *,cricket::TransportInfo const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2247 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::TransportInfo> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::TransportInfo,int,cricket::TransportInfo const *,cricket::TransportInfo const &,std::_Iterator_base0>
{
	cricket::TransportInfo *_Ptr;
};

/* 2248 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::TransportInfo> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::TransportInfo> > >
{
};

/* 2249 */
struct __cppobj std::initializer_list<cricket::TransportInfo>
{
	cricket::TransportInfo *_First;
	cricket::TransportInfo *_Last;
};

/* 2250 */
struct __cppobj cricket::SessionTerminate
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > reason;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > debug_reason;
};

/* 2251 */
struct __cppobj cricket::ContentMessage
{
	bool owns_contents;
	std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > contents;
	std::vector<cricket::TransportInfo,std::allocator<cricket::TransportInfo> > transports;
	std::vector<cricket::ContentGroup,std::allocator<cricket::ContentGroup> > groups;
};

/* 2252 */
struct __cppobj cricket::ProxyConnection : cricket::Connection
{
	int error_;
};

/* 2254 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::TransportParser *second;
};

/* 2253 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> _Myval;
};

/* 2255 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2256 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > >
{
};

/* 2257 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > >
{
};

/* 2258 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > >
{
};

/* 2259 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >,0> >
{
};

/* 2260 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >,0> >
{
};

/* 2261 */
struct __cppobj cricket::TransportOptions
{
	bool ice_restart;
	bool prefer_passive_role;
};

/* 2263 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	cricket::CandidateTranslator *second;
};

/* 2262 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> _Myval;
};

/* 2264 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2265 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > >
{
};

/* 2266 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > >
{
};

/* 2267 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::CandidateTranslator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > >
{
};

/* 2268 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::CandidateTranslator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::CandidateTranslator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >,0> >
{
};

/* 2269 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::CandidateTranslator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::CandidateTranslator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >,0> >
{
};

/* 2270 */
struct __cppobj cricket::SessionError : cricket::WriteError
{
};

/* 2271 */
struct __cppobj cricket::SessionMessage
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > id;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > from;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > to;
	cricket::SignalingProtocol protocol;
	cricket::ActionType type;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > sid;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > initiator;
	buzz::XmlElement *action_elem;
	buzz::XmlElement *stanza;
};

/* 2272 */
struct __cppobj std::_Allocator_base<cricket::ContentGroup>
{
};

/* 2273 */
struct __cppobj std::allocator<cricket::ContentGroup> : std::_Allocator_base<cricket::ContentGroup>
{
};

/* 2274 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ContentGroup> > : std::allocator<cricket::ContentGroup>
{
};

/* 2275 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::ContentGroup,int,cricket::ContentGroup const *,cricket::ContentGroup const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2276 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ContentGroup> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::ContentGroup,int,cricket::ContentGroup const *,cricket::ContentGroup const &,std::_Iterator_base0>
{
	cricket::ContentGroup *_Ptr;
};

/* 2277 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::ContentGroup> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ContentGroup> > >
{
};

/* 2278 */
struct __cppobj std::initializer_list<cricket::ContentGroup>
{
	cricket::ContentGroup *_First;
	cricket::ContentGroup *_Last;
};

/* 2279 */
struct __cppobj cricket::ConnectionRequest : cricket::StunRequest
{
	cricket::Connection *connection_;
};

/* 2280 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >
{
};

/* 2281 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >
{
};

/* 2282 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2283 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> *_Ptr;
};

/* 2284 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > >,std::_Iterator_base0>
{
};

/* 2285 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > >
{
};

/* 2286 */
struct __cppobj std::_Allocator_base<unsigned int>
{
};

/* 2287 */
struct __cppobj std::allocator<unsigned int> : std::_Allocator_base<unsigned int>
{
};

/* 2288 */
struct __cppobj std::allocator_traits<std::allocator<unsigned int> >
{
};

/* 2289 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> >
{
};

/* 2290 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> >
{
};

/* 2291 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> > >
{
};

/* 2292 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int> > : std::allocator<unsigned int>
{
};

/* 2293 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> > > : std::allocator<std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> >
{
};

/* 2294 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int> >::rebind<unsigned int>
{
};

/* 2295 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int> >::rebind<unsigned int *>
{
};

/* 2296 */
struct __cppobj std::_Allocator_base<unsigned int *>
{
};

/* 2297 */
struct __cppobj std::allocator<unsigned int *> : std::_Allocator_base<unsigned int *>
{
};

/* 2298 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int *> > : std::allocator<unsigned int *>
{
};

/* 2299 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,cricket::Transport::ChannelMapEntry>,int,std::pair<int const ,cricket::Transport::ChannelMapEntry> const *,std::pair<int const ,cricket::Transport::ChannelMapEntry> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2300 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,cricket::Transport::ChannelMapEntry>,int,std::pair<int const ,cricket::Transport::ChannelMapEntry> const *,std::pair<int const ,cricket::Transport::ChannelMapEntry> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<int const ,cricket::Transport::ChannelMapEntry>,void *> *_Ptr;
};

/* 2301 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > >,std::_Iterator_base0>
{
};

/* 2302 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > >
{
};

/* 2303 */
struct __cppobj std::binary_function<talk_base::SocketAddress,talk_base::SocketAddress,bool>
{
};

/* 2304 */
struct __cppobj std::_Allocator_base<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >
{
};

/* 2305 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *>
{
};

/* 2306 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2307 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *>
{
};

/* 2308 */
struct __cppobj std::_Allocator_base<std::pair<int const ,cricket::Transport::ChannelMapEntry> >
{
};

/* 2309 */
struct __cppobj std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> > : std::_Allocator_base<std::pair<int const ,cricket::Transport::ChannelMapEntry> >
{
};

/* 2310 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> >
{
};

/* 2311 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> >
{
};

/* 2312 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> > >
{
};

/* 2313 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *>
{
};

/* 2314 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *>
{
};

/* 2315 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> >
{
};

/* 2316 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *>
{
};

/* 2317 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 2318 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *>
{
};

/* 2319 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *>
{
};

/* 2320 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2321 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2322 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2323 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2324 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2325 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> >
{
};

/* 2326 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> >
{
};

/* 2327 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> >
{
};

/* 2328 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *>
{
};

/* 2329 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *>
{
};

/* 2330 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2331 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2332 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2333 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > >
{
};

/* 2334 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2335 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *>
{
};

/* 2336 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2337 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2338 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> >
{
};

/* 2339 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> >
{
};

/* 2340 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> >
{
};

/* 2341 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *>
{
};

/* 2342 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *>
{
};

/* 2343 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *>
{
};

/* 2344 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2345 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2346 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2347 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> >
{
};

/* 2348 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> >
{
};

/* 2349 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> > >
{
};

/* 2350 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> >
{
};

/* 2351 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> >
{
};

/* 2352 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded> *,void *> > >
{
};

/* 2353 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2354 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2355 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> >
{
};

/* 2356 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> >
{
};

/* 2357 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> >
{
};

/* 2358 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *>
{
};

/* 2359 */
struct __cppobj std::allocator<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *>
{
};

/* 2360 */
struct __cppobj std::less<talk_base::SocketAddress> : std::binary_function<talk_base::SocketAddress,talk_base::SocketAddress,bool>
{
};

/* 2361 */
struct __cppobj std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > : std::_Allocator_base<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >
{
};

/* 2362 */
struct __cppobj std::_Tmap_traits<talk_base::SocketAddress,cricket::Connection *,std::less<talk_base::SocketAddress>,std::allocator<std::pair<talk_base::SocketAddress const ,cricket::Connection *> >,0>
{
};

/* 2363 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,int,sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> * const *,sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2364 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 2365 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> >
{
};

/* 2366 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> >
{
};

/* 2367 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> >
{
};

/* 2368 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2369 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2370 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2371 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *>
{
};

/* 2372 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2373 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2374 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2375 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > >
{
};

/* 2376 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2377 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> >
{
};

/* 2378 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2379 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> > >
{
};

/* 2380 */
struct __cppobj std::_Allocator_base<unsigned char>
{
};

/* 2381 */
struct __cppobj std::allocator<unsigned char> : std::_Allocator_base<unsigned char>
{
};

/* 2382 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned char> > : std::allocator<unsigned char>
{
};

/* 2383 */
struct __cppobj std::allocator_traits<std::allocator<unsigned char> >
{
};

/* 2384 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned char> >::rebind<unsigned char>
{
};

/* 2385 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned char> >::rebind<unsigned char *>
{
};

/* 2386 */
struct __cppobj std::allocator_traits<std::allocator<cricket::ContentInfo> >
{
};

/* 2387 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ContentInfo> >::rebind<cricket::ContentInfo>
{
};

/* 2388 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ContentInfo> >::rebind<cricket::ContentInfo *>
{
};

/* 2389 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,int,sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> * const *,sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2390 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *>
{
};

/* 2391 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> >
{
};

/* 2392 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> >
{
};

/* 2393 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> >
{
};

/* 2394 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 2395 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 2396 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 2397 */
struct __cppobj std::allocator<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 2398 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2399 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2400 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2401 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 2402 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2403 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2404 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2405 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2406 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2407 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 2408 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2409 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> >
{
};

/* 2410 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *>
{
};

/* 2411 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *>
{
};

/* 2412 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> >
{
};

/* 2413 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> >
{
};

/* 2414 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> >
{
};

/* 2415 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2416 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2417 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2418 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2419 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2420 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2421 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> >
{
};

/* 2422 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> >
{
};

/* 2423 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> > > : std::allocator<std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> >
{
};

/* 2424 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,cricket::TransportChannelProxy *>,void *> > >
{
};

/* 2425 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2426 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2427 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2428 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> >
{
};

/* 2429 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> >
{
};

/* 2430 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,int,sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> * const *,sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2431 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,int,sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> * const *,sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2432 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > first;
	bool second;
};

/* 2433 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> > > > second;
};

/* 2434 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> >
{
};

/* 2435 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> >
{
};

/* 2436 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> >
{
};

/* 2437 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *>
{
};

/* 2438 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *>
{
};

/* 2439 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2440 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2441 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2442 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 2443 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2444 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2445 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2446 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> >
{
};

/* 2447 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *>
{
};

/* 2448 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2449 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2450 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2451 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > >
{
};

/* 2452 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2453 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2454 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> *_Ptr;
};

/* 2455 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > >,std::_Iterator_base0>
{
};

/* 2456 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > >
{
};

/* 2457 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> >
{
};

/* 2458 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> > >
{
};

/* 2459 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportStats,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> >,0>
{
};

/* 2460 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> >
{
};

/* 2461 */
struct __cppobj std::allocator<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *>
{
};

/* 2462 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2463 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > >
{
};

/* 2464 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2465 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2466 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2467 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2468 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > >
{
};

/* 2469 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2470 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2471 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2472 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2473 */
struct __cppobj std::allocator_traits<std::allocator<cricket::ContentGroup> >
{
};

/* 2474 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ContentGroup> >::rebind<cricket::ContentGroup>
{
};

/* 2475 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ContentGroup> >::rebind<cricket::ContentGroup *>
{
};

/* 2476 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2477 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> >
{
};

/* 2478 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> >
{
};

/* 2479 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> >
{
};

/* 2480 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> > >
{
};

/* 2481 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >
{
};

/* 2482 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >
{
};

/* 2483 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::SessionClient *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> >,0>
{
};

/* 2484 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2485 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2486 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2487 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 2488 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2489 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2490 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > : std::_Iterator012<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base0>
{
	char *_Ptr;
};

/* 2491 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
{
};

/* 2492 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,int,sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> * const *,sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2493 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,int,sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> * const *,sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2494 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2495 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > >
{
};

/* 2496 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2497 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2498 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2499 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2500 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > >
{
};

/* 2501 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2502 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> >
{
};

/* 2503 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> >
{
};

/* 2504 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> > >
{
};

/* 2505 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2506 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> >
{
};

/* 2507 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::Transport::ChannelMapEntry> > > > first;
	bool second;
};

/* 2508 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2509 */
struct __cppobj std::_Tmap_traits<int,cricket::TransportChannelProxy *,std::less<int>,std::allocator<std::pair<int const ,cricket::TransportChannelProxy *> >,0>
{
};

/* 2510 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportProxy *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> >,0>
{
};

/* 2511 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >
{
};

/* 2512 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >
{
};

/* 2513 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2514 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> *_Ptr;
};

/* 2515 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > >,std::_Iterator_base0>
{
};

/* 2516 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > >
{
};

/* 2517 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::StunRequest *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> >,0>
{
};

/* 2518 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2519 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > : std::_Iterator012<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base0>
{
	unsigned int *_Ptr;
};

/* 2520 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
{
};

/* 2521 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> >
{
};

/* 2522 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> >
{
};

/* 2523 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> > >
{
};

/* 2524 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> >
{
};

/* 2525 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> > >
{
};

/* 2526 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2527 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2528 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *>
{
};

/* 2529 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *>
{
};

/* 2530 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2531 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > >
{
};

/* 2532 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2533 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2534 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::SocketAddress const ,cricket::Connection *>,int,std::pair<talk_base::SocketAddress const ,cricket::Connection *> const *,std::pair<talk_base::SocketAddress const ,cricket::Connection *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2535 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::SocketAddress const ,cricket::Connection *>,int,std::pair<talk_base::SocketAddress const ,cricket::Connection *> const *,std::pair<talk_base::SocketAddress const ,cricket::Connection *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> *_Ptr;
};

/* 2536 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > >,std::_Iterator_base0>
{
};

/* 2537 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > >
{
};

/* 2538 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > >
{
};

/* 2539 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2540 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2541 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2542 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2543 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> >
{
};

/* 2544 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> > >
{
};

/* 2545 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> *,void *> > >
{
};

/* 2546 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> >
{
};

/* 2547 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2548 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2549 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2550 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> >
{
};

/* 2551 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> >
{
};

/* 2552 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> >
{
};

/* 2553 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *,void *> > >
{
};

/* 2554 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> >
{
};

/* 2555 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> >
{
};

/* 2556 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> >
{
};

/* 2557 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *>
{
};

/* 2558 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> >
{
};

/* 2559 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> >
{
};

/* 2560 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2561 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2562 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2563 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded> *,void *> > >
{
};

/* 2564 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0>
{
};

/* 2565 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 2566 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 2567 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2568 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2569 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > >
{
};

/* 2570 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2571 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2572 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2573 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> >
{
};

/* 2574 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2575 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *>
{
};

/* 2576 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *>
{
};

/* 2577 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2578 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2579 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2580 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > >
{
};

/* 2581 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2582 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *>
{
};

/* 2583 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 2584 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 2585 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 2586 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 2587 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2588 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2589 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2590 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2591 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *>
{
};

/* 2592 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> >
{
};

/* 2593 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2594 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> > >
{
};

/* 2595 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> >
{
};

/* 2596 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > >
{
};

/* 2597 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2598 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *,void *> >
{
};

/* 2599 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::Port *,cricket::Connection *,sigslot::single_threaded> *>
{
};

/* 2600 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > >
{
};

/* 2601 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2602 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> > >
{
};

/* 2603 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *>
{
};

/* 2604 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *>
{
};

/* 2605 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >
{
};

/* 2606 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >
{
};

/* 2607 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::Error,sigslot::single_threaded> *,void *> > >
{
};

/* 2608 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2609 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> *,void *> > >
{
};

/* 2610 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *>
{
};

/* 2611 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > >
{
};

/* 2612 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2613 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2614 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 2615 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2616 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded> *,void *> > >
{
};

/* 2617 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 2618 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2619 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2620 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2621 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >
{
};

/* 2622 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >
{
};

/* 2623 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *>,void *> >
{
};

/* 2624 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> *,void *> > >
{
};

/* 2625 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2626 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *>,void *> >
{
};

/* 2627 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> > > > first;
	bool second;
};

/* 2628 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *>
{
};

/* 2629 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> *> > >
{
};

/* 2630 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2631 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2632 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2633 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > >
{
};

/* 2634 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *,void *> >
{
};

/* 2635 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *>
{
};

/* 2636 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::BaseSession *,enum cricket::ContentAction,sigslot::single_threaded> *>
{
};

/* 2637 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2638 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *>,void *> *_Ptr;
};

/* 2639 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > >,std::_Iterator_base0>
{
};

/* 2640 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > >
{
};

/* 2641 */
struct __cppobj std::_Tmap_traits<int,cricket::Transport::ChannelMapEntry,std::less<int>,std::allocator<std::pair<int const ,cricket::Transport::ChannelMapEntry> >,0>
{
};

/* 2642 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> > > : std::allocator<std::_Tree_node<std::pair<talk_base::SocketAddress const ,cricket::Connection *>,void *> >
{
};

/* 2643 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2644 */
struct __cppobj std::allocator<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2645 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2646 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *>
{
};

/* 2647 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2648 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2649 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2650 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > >
{
};

/* 2651 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2652 */
struct __cppobj std::allocator_traits<std::allocator<cricket::TransportInfo> >
{
};

/* 2653 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2654 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2655 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 2656 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2657 */
struct __cppobj std::allocator<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2658 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 2659 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2660 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> > >
{
};

/* 2661 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> > > > first;
	bool second;
};

/* 2662 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2663 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::SocketAddress const ,cricket::Connection *> > > > first;
	bool second;
};

/* 2664 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2665 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2666 */
struct __cppobj std::initializer_list<unsigned char>
{
	const char *_First;
	const char *_Last;
};

/* 2667 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *,void *> >
{
};

/* 2668 */
struct __cppobj std::allocator<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> *>
{
};

/* 2669 */
struct __cppobj std::allocator_traits<std::allocator<cricket::Candidate> >
{
};

/* 2670 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2671 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2672 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *>,void *> *_Ptr;
};

/* 2673 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > >,std::_Iterator_base0>
{
};

/* 2674 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > >
{
};

/* 2675 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > >
{
};

/* 2676 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2677 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > >
{
};

/* 2678 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2679 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2680 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2681 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > >
{
};

/* 2682 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2683 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2684 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > > first;
	bool second;
};

/* 2685 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,cricket::TransportChannelProxy *> > > > second;
};

/* 2686 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 2687 */
struct __cppobj std::allocator<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base4<cricket::PortInterface *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 2688 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2689 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2690 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded> *,void *> > >
{
};

/* 2691 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> > > > first;
	bool second;
};

/* 2692 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> *>
{
};

/* 2693 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2694 */
struct __cppobj __unaligned __declspec(align(8)) std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> > : std::basic_istream<char,std::char_traits<char> >
{
	_BYTE gap60[72];
};

/* 2695 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> > > > first;
	bool second;
};

/* 2696 */
struct __cppobj std::pointer_traits<cricket::ContentInfo *>
{
};

/* 2697 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::SessionClient *> *>
{
};

/* 2698 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2699 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > >
{
};

/* 2700 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportInfo> >::rebind<cricket::TransportInfo>
{
};

/* 2701 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportInfo> >::rebind<cricket::TransportInfo *>
{
};

/* 2702 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Candidate> >::rebind<cricket::Candidate>
{
};

/* 2703 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Candidate> >::rebind<cricket::Candidate *>
{
};

/* 2704 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::Session *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2705 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded> *,void *> > >
{
};

/* 2706 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *>,void *> > >
{
};

/* 2707 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::BaseSession *,std::vector<cricket::ContentInfo,std::allocator<cricket::ContentInfo> > const &,sigslot::single_threaded> *> > >
{
};

/* 2708 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> *>
{
};

/* 2709 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::Session *> >,0>
{
};

/* 2710 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::PortAllocatorSessionMuxer *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> >,0>
{
};

/* 2711 */
struct __cppobj __declspec(align(8)) sigslot::_connection6<cricket::SessionManager,cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_connection_base6<cricket::BaseSession *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>
{
	cricket::SessionManager *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::SessionManager *this, cricket::BaseSession *, buzz::XmlElement *, buzz::QName *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, buzz::XmlElement *);
};

/* 2712 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TransportProxy,cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::Transport *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	cricket::TransportProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TransportProxy *this, cricket::Transport *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
};

/* 2713 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::SessionManager,cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_connection_base2<cricket::Session *,buzz::XmlElement const *,sigslot::single_threaded>
{
	cricket::SessionManager *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::SessionManager *this, cricket::Session *, buzz::XmlElement *);
};

/* 2714 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::SessionManager,cricket::Session *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::Session *,sigslot::single_threaded>
{
	cricket::SessionManager *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::SessionManager *this, cricket::Session *);
};

/* 2715 */
struct __cppobj talk_base::InsecureCryptStringImpl : talk_base::CryptStringImpl
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password_;
};

/* 2716 */
struct __cppobj talk_base::EmptyCryptStringImpl : talk_base::CryptStringImpl
{
};

/* 2717 */
struct __cppobj talk_base::ByteBuffer::ReadPosition
{
	unsigned int start_;
	int version_;
};

/* 2718 */
struct __cppobj __declspec(align(4)) talk_base::SSLStreamAdapter : talk_base::StreamAdapterInterface
{
	bool ignore_bad_cert_;
};

/* 2719 */
struct __cppobj talk_base::FormatCryptString
{
	char *storage_;
	unsigned int capacity_;
	unsigned int length_;
};

/* 2720 */
struct __cppobj talk_base::RefCountInterface
{
	talk_base::RefCountInterfaceVtbl *vfptr;
};

/* 2721 */
union $E08D2D124706043F106C50FF75308E67
{
	void (__thiscall *~RefCountInterface)(talk_base::RefCountInterface *this);
	void *(__thiscall *__vecDelDtor)(talk_base::RefCountInterface *this, unsigned int);
};

/* 2722 */
struct talk_base::RefCountInterfaceVtbl
{
	int (__thiscall *AddRef)(talk_base::RefCountInterface *this);
	int (__thiscall *Release)(talk_base::RefCountInterface *this);
	$E08D2D124706043F106C50FF75308E67 ___u2;
};

/* 2723 */
struct __cppobj std::_Allocator_base<talk_base::Task *>
{
};

/* 2724 */
struct __cppobj std::allocator<talk_base::Task *> : std::_Allocator_base<talk_base::Task *>
{
};

/* 2725 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::Task *> >
{
};

/* 2726 */
struct __cppobj std::_Allocator_base<std::_Tree_node<talk_base::Task *,void *> >
{
};

/* 2727 */
struct __cppobj std::allocator<std::_Tree_node<talk_base::Task *,void *> > : std::_Allocator_base<std::_Tree_node<talk_base::Task *,void *> >
{
};

/* 2728 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<talk_base::Task *,void *> > > : std::allocator<std::_Tree_node<talk_base::Task *,void *> >
{
};

/* 2729 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Task *> > : std::allocator<talk_base::Task *>
{
};

/* 2730 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Task *> >::rebind<talk_base::Task *>
{
};

/* 2731 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Task *> >::rebind<talk_base::Task * *>
{
};

/* 2732 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Task *> >::rebind<std::_Tree_node<talk_base::Task *,void *> >
{
};

/* 2733 */
struct __cppobj std::binary_function<talk_base::Task *,talk_base::Task *,bool>
{
};

/* 2734 */
struct __cppobj std::less<talk_base::Task *> : std::binary_function<talk_base::Task *,talk_base::Task *,bool>
{
};

/* 2735 */
struct __cppobj std::_Tset_traits<talk_base::Task *,std::less<talk_base::Task *>,std::allocator<talk_base::Task *>,0>
{
};

/* 2736 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,talk_base::Task *,int,talk_base::Task * const *,talk_base::Task * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2737 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,talk_base::Task *,int,talk_base::Task * const *,talk_base::Task * const &,std::_Iterator_base0>
{
	std::_Tree_node<talk_base::Task *,void *> *_Ptr;
};

/* 2738 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> >,std::_Iterator_base0>
{
};

/* 2739 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,talk_base::Task *,int,talk_base::Task * const *,talk_base::Task * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2740 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::Task *> > > : std::_Iterator012<std::random_access_iterator_tag,talk_base::Task *,int,talk_base::Task * const *,talk_base::Task * const &,std::_Iterator_base0>
{
	talk_base::Task **_Ptr;
};

/* 2741 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::Task *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::Task *> > >
{
};

/* 2742 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > >,bool>
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > > first;
	bool second;
};

/* 2743 */
struct __cppobj std::initializer_list<talk_base::Task *>
{
	talk_base::Task *const *_First;
	talk_base::Task *const *_Last;
};

/* 2744 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<talk_base::Task *,void *> > >
{
};

/* 2745 */
struct __cppobj std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > > >
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > > first;
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Task *> > > second;
};

/* 2746 */
struct __cppobj std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<buzz::XmlElement *> > > : std::_Iterator_base12
{
	unsigned int _Myoff;
};

/* 2747 */
struct __cppobj std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<buzz::XmlElement *> > > : std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<buzz::XmlElement *> > >
{
};

/* 2748 */
struct __cppobj std::_Allocator_base<buzz::XmlElement *>
{
};

/* 2749 */
struct __cppobj std::allocator<buzz::XmlElement *> : std::_Allocator_base<buzz::XmlElement *>
{
};

/* 2750 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmlElement *> > : std::allocator<buzz::XmlElement *>
{
};

/* 2751 */
struct __cppobj std::allocator_traits<std::allocator<buzz::XmlElement *> >
{
};

/* 2752 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmlElement *> >::rebind<buzz::XmlElement *>
{
};

/* 2753 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmlElement *> >::rebind<buzz::XmlElement * *>
{
};

/* 2754 */
struct __cppobj std::_Allocator_base<std::_Container_proxy>
{
};

/* 2755 */
struct __cppobj std::allocator<std::_Container_proxy> : std::_Allocator_base<std::_Container_proxy>
{
};

/* 2756 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Container_proxy> > : std::allocator<std::_Container_proxy>
{
};

/* 2757 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmlElement *> >::rebind<std::_Container_proxy>
{
};

/* 2758 */
struct __cppobj std::_Allocator_base<buzz::XmlElement * *>
{
};

/* 2759 */
struct __cppobj std::allocator<buzz::XmlElement * *> : std::_Allocator_base<buzz::XmlElement * *>
{
};

/* 2760 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmlElement * *> > : std::allocator<buzz::XmlElement * *>
{
};

/* 2761 */
struct std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *_Myval;
};

/* 2762 */
struct __cppobj sigslot::_connection_base2<char const *,int,sigslot::single_threaded>
{
	sigslot::_connection_base2<char const *,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2763 */
struct sigslot::_connection_base2<char const *,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *this, const char *, int);
	sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *this);
	sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2764 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2765 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> >
{
};

/* 2766 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *>
{
};

/* 2767 */
struct __cppobj std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *>
{
};

/* 2768 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> >
{
};

/* 2769 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> >
{
};

/* 2770 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> >
{
};

/* 2771 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<char const *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<char const *,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2772 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<char const *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<char const *,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2773 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2774 */
struct std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *_Myval;
};

/* 2775 */
struct __cppobj sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded>
{
	sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2776 */
struct sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *this, talk_base::SocketAddress);
	sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *this);
	sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2777 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2778 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2779 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2780 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2781 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > >
{
};

/* 2782 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2783 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,int,sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> * const *,sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2784 */
struct std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *_Myval;
};

/* 2785 */
struct __cppobj sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>
{
	sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2786 */
struct sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *this, buzz::XmppEngine::State);
	sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *this);
	sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2787 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,int,sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> * const *,sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2788 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2789 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2790 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > >
{
};

/* 2791 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2792 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *>
{
};

/* 2793 */
struct __cppobj std::allocator_traits<std::allocator<std::_Container_proxy> >
{
};

/* 2794 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > >
{
};

/* 2795 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,void *> > >
{
};

/* 2796 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> >
{
};

/* 2797 */
struct __cppobj std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *>
{
};

/* 2798 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> >
{
};

/* 2799 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> >
{
};

/* 2800 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> >
{
};

/* 2801 */
struct __cppobj std::allocator_traits<std::allocator<buzz::XmlElement * *> >
{
};

/* 2802 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,void *> > >
{
};

/* 2803 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *>
{
};

/* 2804 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> >
{
};

/* 2805 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> >
{
};

/* 2806 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2807 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > >
{
};

/* 2808 */
struct __cppobj std::initializer_list<buzz::XmlElement *>
{
	buzz::XmlElement *const *_First;
	buzz::XmlElement *const *_Last;
};

/* 2809 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > >
{
};

/* 2810 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> >
{
};

/* 2811 */
struct __cppobj std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *>
{
};

/* 2812 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> >
{
};

/* 2813 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > >
{
};

/* 2814 */
struct __cppobj std::list<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> >
{
};

/* 2815 */
struct __cppobj std::list<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> >
{
};

/* 2816 */
struct __cppobj std::list<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> >
{
};

/* 2817 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,void *> > >
{
};

/* 2818 */
struct __cppobj buzz::XmppUserSettings
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > user_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > host_;
	talk_base::CryptString pass_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_mechanism_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_token_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > resource_;
	buzz::TlsOptions use_tls_;
	bool allow_plain_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > test_server_domain_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > token_service_;
};

/* 2819 */
struct __cppobj buzz::XmppClientSettings : buzz::XmppUserSettings
{
	talk_base::SocketAddress server_;
	cricket::ProtocolType protocol_;
	talk_base::ProxyType proxy_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > proxy_host_;
	int proxy_port_;
	bool use_proxy_auth_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > proxy_user_;
	talk_base::CryptString proxy_pass_;
};

/* 2820 */
struct __cppobj buzz::XmppIqHandler
{
	buzz::XmppIqHandlerVtbl *vfptr;
};

/* 2821 */
struct buzz::XmppIqHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppIqHandler *this, unsigned int);
	void (__thiscall *IqResponse)(buzz::XmppIqHandler *this, void *, buzz::XmlElement *);
};

/* 2824 */
struct __cppobj sigslot::_signal_base1<talk_base::SocketAddress,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2825 */
struct __cppobj sigslot::signal1<talk_base::SocketAddress,sigslot::single_threaded> : sigslot::_signal_base1<talk_base::SocketAddress,sigslot::single_threaded>
{
};

/* 2822 */
struct __cppobj buzz::AsyncSocket
{
	buzz::AsyncSocketVtbl *vfptr;
	sigslot::signal1<talk_base::SocketAddress,sigslot::single_threaded> SignalConnected;
	sigslot::signal0<sigslot::single_threaded> SignalSSLConnected;
	sigslot::signal0<sigslot::single_threaded> SignalClosed;
	sigslot::signal0<sigslot::single_threaded> SignalRead;
	sigslot::signal0<sigslot::single_threaded> SignalError;
};

/* 2823 */
struct buzz::AsyncSocketVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::AsyncSocket *this, unsigned int);
	buzz::AsyncSocket::State (__thiscall *state)(buzz::AsyncSocket *this);
	buzz::AsyncSocket::Error (__thiscall *error)(buzz::AsyncSocket *this);
	int (__thiscall *GetError)(buzz::AsyncSocket *this);
	bool (__thiscall *Connect)(buzz::AsyncSocket *this, talk_base::SocketAddress *);
	bool (__thiscall *Read)(buzz::AsyncSocket *this, char *, unsigned int, unsigned int *);
	bool (__thiscall *Write)(buzz::AsyncSocket *this, const char *, unsigned int);
	bool (__thiscall *Close)(buzz::AsyncSocket *this);
};

/* 2826 */
struct __cppobj buzz::XmppSessionHandler
{
	buzz::XmppSessionHandlerVtbl *vfptr;
};

/* 2827 */
struct buzz::XmppSessionHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppSessionHandler *this, unsigned int);
	void (__thiscall *OnStateChange)(buzz::XmppSessionHandler *this, int);
};

/* 2828 */
struct __cppobj buzz::XmppEngine
{
	buzz::XmppEngineVtbl *vfptr;
};

/* 2829 */
struct buzz::XmppEngineVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppEngine *this, unsigned int);
	_BYTE gap4[12];
	buzz::XmppReturnStatus (__thiscall *SetUser)(buzz::XmppEngine *this, buzz::Jid *);
	buzz::Jid *(__thiscall *GetUser)(buzz::XmppEngine *this);
	buzz::XmppReturnStatus (__thiscall *SetSaslHandler)(buzz::XmppEngine *this, buzz::SaslHandler *);
	buzz::XmppReturnStatus (__thiscall *SetTls)(buzz::XmppEngine *this, buzz::TlsOptions);
	buzz::XmppReturnStatus (__thiscall *SetTlsServer)(buzz::XmppEngine *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	buzz::TlsOptions (__thiscall *GetTls)(buzz::XmppEngine *this);
	buzz::XmppReturnStatus (__thiscall *SetRequestedResource)(buzz::XmppEngine *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *GetRequestedResource)(buzz::XmppEngine *this);
	void (__thiscall *SetLanguage)(buzz::XmppEngine *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	buzz::XmppReturnStatus (__thiscall *SetSessionHandler)(buzz::XmppEngine *this, buzz::XmppSessionHandler *);
	buzz::XmppReturnStatus (__thiscall *Connect)(buzz::XmppEngine *this, talk_base::SocketAddress);
	talk_base::SocketAddress *(__thiscall *GetAddress)(buzz::XmppEngine *this, talk_base::SocketAddress *result);
	buzz::XmppEngine::State (__thiscall *GetState)(buzz::XmppEngine *this);
	bool (__thiscall *IsEncrypted)(buzz::XmppEngine *this);
	buzz::XmppEngine::Error (__thiscall *GetError)(buzz::XmppEngine *this, int *);
	buzz::XmlElement *(__thiscall *GetStreamError)(buzz::XmppEngine *this);
	buzz::XmppReturnStatus (__thiscall *Disconnect)(buzz::XmppEngine *this);
	buzz::XmppReturnStatus (__thiscall *AddStanzaHandler)(buzz::XmppEngine *this, buzz::XmppStanzaHandler *, buzz::XmppEngine::HandlerLevel);
	buzz::XmppReturnStatus (__thiscall *RemoveStanzaHandler)(buzz::XmppEngine *this, buzz::XmppStanzaHandler *);
	buzz::XmppReturnStatus (__thiscall *SendStanza)(buzz::XmppEngine *this, buzz::XmlElement *);
	buzz::XmppReturnStatus (__thiscall *SendRaw)(buzz::XmppEngine *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	buzz::XmppReturnStatus (__thiscall *SendIq)(buzz::XmppEngine *this, buzz::XmlElement *, buzz::XmppIqHandler *, void **);
	buzz::XmppReturnStatus (__thiscall *RemoveIqHandler)(buzz::XmppEngine *this, void *, buzz::XmppIqHandler **);
	buzz::XmppReturnStatus (__thiscall *SendStanzaError)(buzz::XmppEngine *this, buzz::XmlElement *, buzz::XmppStanzaError, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *);
	buzz::Jid *(__thiscall *FullJid)(buzz::XmppEngine *this);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *NextId)(buzz::XmppEngine *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result);
};

/* 2830 */
struct __cppobj sigslot::_signal_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2831 */
struct __cppobj sigslot::signal1<enum buzz::XmppEngine::State,sigslot::single_threaded> : sigslot::_signal_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>
{
};

/* 2832 */
struct __cppobj sigslot::_signal_base2<char const *,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<char const *,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2833 */
struct __cppobj sigslot::signal2<char const *,int,sigslot::single_threaded> : sigslot::_signal_base2<char const *,int,sigslot::single_threaded>
{
};

/* 2841 */
struct __cppobj talk_base::scoped_ptr<buzz::XmppClient::Private>
{
	buzz::XmppClient::Private *ptr;
};

/* 2834 */
struct __cppobj __declspec(align(8)) buzz::XmppClient : buzz::XmppTaskParentInterface, buzz::XmppClientInterface, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<enum buzz::XmppEngine::State,sigslot::single_threaded> SignalStateChange;
	sigslot::signal2<char const *,int,sigslot::single_threaded> SignalLogInput;
	sigslot::signal2<char const *,int,sigslot::single_threaded> SignalLogOutput;
	talk_base::scoped_ptr<buzz::XmppClient::Private> d_;
	bool delivering_signal_;
	bool valid_;
};

/* 2835 */
struct __cppobj talk_base::scoped_ptr<buzz::AsyncSocket>
{
	buzz::AsyncSocket *ptr;
};

/* 2836 */
struct __cppobj talk_base::scoped_ptr<buzz::XmppEngine>
{
	buzz::XmppEngine *ptr;
};

/* 2838 */
struct __cppobj talk_base::scoped_ptr<buzz::PreXmppAuth>
{
	buzz::PreXmppAuth *ptr;
};

/* 2839 */
struct __cppobj buzz::CaptchaChallenge
{
	bool captcha_needed_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > captcha_token_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > captcha_image_url_;
};

/* 2840 */
struct __cppobj __declspec(align(4)) buzz::XmppClient::Private : sigslot::has_slots<sigslot::single_threaded>, buzz::XmppSessionHandler, buzz::XmppOutputHandler
{
	buzz::XmppClient *const client_;
	talk_base::scoped_ptr<buzz::AsyncSocket> socket_;
	talk_base::scoped_ptr<buzz::XmppEngine> engine_;
	talk_base::scoped_ptr<buzz::PreXmppAuth> pre_auth_;
	talk_base::CryptString pass_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_mechanism_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_token_;
	talk_base::SocketAddress server_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > proxy_host_;
	int proxy_port_;
	buzz::XmppEngine::Error pre_engine_error_;
	int pre_engine_subcode_;
	buzz::CaptchaChallenge captcha_challenge_;
	bool signal_closed_;
	bool allow_plain_;
};

/* 2837 */
struct __cppobj buzz::PreXmppAuth : buzz::SaslHandler
{
	sigslot::signal0<sigslot::single_threaded> SignalAuthDone;
};

/* 2842 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<buzz::XmppTask,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	buzz::XmppTask *m_pobject;
	void (__thiscall *m_pmemfun)(buzz::XmppTask *this);
};

/* 2843 */
struct __cppobj __declspec(align(4)) buzz::PlainSaslHandler : buzz::SaslHandler
{
	buzz::Jid jid_;
	talk_base::CryptString password_;
	bool allow_plain_;
};

/* 2844 */
struct __cppobj buzz::SaslPlainMechanism : buzz::SaslMechanism
{
	buzz::Jid user_jid_;
	talk_base::CryptString password_;
};

/* 2845 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<buzz::XmppClient::Private,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	buzz::XmppClient::Private *m_pobject;
	void (__thiscall *m_pmemfun)(buzz::XmppClient::Private *this);
};

/* 2846 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<buzz::XmppClient::Private,talk_base::SocketAddress,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::SocketAddress,sigslot::single_threaded>
{
	buzz::XmppClient::Private *m_pobject;
	void (__thiscall *m_pmemfun)(buzz::XmppClient::Private *this, talk_base::SocketAddress);
};

/* 2847 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<buzz::XmppClient,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	buzz::XmppClient *m_pobject;
	void (__thiscall *m_pmemfun)(buzz::XmppClient *this);
};

/* 2848 */
struct __cppobj sigslot::_connection_base1<int,sigslot::single_threaded>
{
	sigslot::_connection_base1<int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2849 */
struct sigslot::_connection_base1<int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<int,sigslot::single_threaded> *this, int);
	sigslot::_connection_base1<int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<int,sigslot::single_threaded> *this);
	sigslot::_connection_base1<int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2850 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<int,sigslot::single_threaded> *>
{
};

/* 2851 */
struct __cppobj std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<int,sigslot::single_threaded> *>
{
};

/* 2852 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<int,sigslot::single_threaded> *,int,sigslot::_connection_base1<int,sigslot::single_threaded> * const *,sigslot::_connection_base1<int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2853 */
struct std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<int,sigslot::single_threaded> *_Myval;
};

/* 2854 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<int,sigslot::single_threaded> *,int,sigslot::_connection_base1<int,sigslot::single_threaded> * const *,sigslot::_connection_base1<int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2855 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2856 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2857 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> >
{
};

/* 2858 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> >
{
};

/* 2859 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> >
{
};

/* 2860 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<int,sigslot::single_threaded> *,void *> > >
{
};

/* 2861 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> > >
{
};

/* 2862 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2863 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<int,sigslot::single_threaded> *> >
{
};

/* 2864 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> > >
{
};

/* 2865 */
struct __cppobj std::list<sigslot::_connection_base1<int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> >
{
};

/* 2866 */
struct __cppobj sigslot::_signal_base1<int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2867 */
struct __cppobj sigslot::signal1<int,sigslot::single_threaded> : sigslot::_signal_base1<int,sigslot::single_threaded>
{
};

/* 2868 */
struct __cppobj XmppSocket : buzz::AsyncSocket, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<int,sigslot::single_threaded> SignalCloseEvent;
	talk_base::AsyncSocket *cricket_socket_;
	buzz::AsyncSocket::State state_;
	talk_base::ByteBuffer buffer_;
	buzz::TlsOptions tls_;
};

/* 2869 */
struct __cppobj XmppPump : talk_base::MessageHandler, talk_base::TaskRunner
{
	buzz::XmppClient *client_;
	buzz::XmppEngine::State state_;
	XmppPumpNotify *notify_;
};

/* 2870 */
struct __cppobj __declspec(align(4)) XmppAuth : buzz::PreXmppAuth
{
	buzz::Jid jid_;
	talk_base::CryptString passwd_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_mechanism_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_token_;
	bool done_;
};

/* 2871 */
struct __cppobj LoginData : talk_base::MessageData
{
	buzz::XmppClientSettings xcs;
};

/* 2872 */
struct __cppobj XmppThread : talk_base::AutoThread, XmppPumpNotify, talk_base::MessageHandler
{
	XmppPump *pump_;
};

/* 2873 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2874 */
struct std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *_Myval;
};

/* 2875 */
struct __cppobj sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2884 */
struct sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *this, buzz::MucRoomsLookupTask *, buzz::MucRoomsInfo *);
	sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2876 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2877 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> >
{
};

/* 2878 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > >
{
};

/* 2879 */
struct __cppobj std::list<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> >
{
};

/* 2880 */
struct __cppobj sigslot::_signal_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2881 */
struct __cppobj sigslot::signal2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> : sigslot::_signal_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>
{
};

/* 2882 */
struct __cppobj buzz::MucRoomsLookupTask : buzz::IqTask
{
	sigslot::signal2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> SignalResult;
};

/* 2883 */
const struct __cppobj buzz::MucRoomsInfo
{
	buzz::Jid jid;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
	int members;
};

/* 2885 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2886 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2887 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > >
{
};

/* 2888 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2889 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2890 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> >
{
};

/* 2891 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> >
{
};

/* 2892 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2893 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *,void *> >
{
};

/* 2894 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *>
{
};

/* 2895 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2896 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2897 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> >
{
};

/* 2898 */
struct __cppobj std::allocator<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *>
{
};

/* 2899 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2900 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2901 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2902 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > >
{
};

/* 2903 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2904 */
struct __cppobj std::allocator<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> *>
{
};

/* 2905 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::IqTask *,buzz::XmlElement const *,sigslot::single_threaded> *,void *> > >
{
};

/* 2906 */
struct std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *_Myval;
};

/* 2907 */
struct __cppobj sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>
{
	sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2913 */
struct sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *this, buzz::MucRoomConfigTask *);
	sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2914 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2915 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> >
{
};

/* 2908 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > >
{
};

/* 2909 */
struct __cppobj std::list<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> >
{
};

/* 2910 */
struct __cppobj sigslot::_signal_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2911 */
struct __cppobj sigslot::signal1<buzz::MucRoomConfigTask *,sigslot::single_threaded> : sigslot::_signal_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>
{
};

/* 2912 */
struct __cppobj buzz::MucRoomConfigTask : buzz::IqTask
{
	sigslot::signal1<buzz::MucRoomConfigTask *,sigslot::single_threaded> SignalResult;
	buzz::Jid room_jid_;
};

/* 2916 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> >
{
};

/* 2917 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> >
{
};

/* 2918 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> >
{
};

/* 2919 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *>
{
};

/* 2920 */
struct __cppobj std::allocator<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *>
{
};

/* 2921 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,int,sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> * const *,sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2922 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,int,sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> * const *,sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2923 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2924 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > >
{
};

/* 2925 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2926 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded> *,void *> > >
{
};

/* 2927 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2928 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2929 */
struct std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *_Myval;
};

/* 2930 */
struct __cppobj sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>
{
	sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2945 */
struct sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *this, buzz::MucRoomDiscoveryTask *, bool, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > *, std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > *);
	sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2931 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2932 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> >
{
};

/* 2933 */
struct __cppobj std::_List_buy<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > >
{
};

/* 2934 */
struct __cppobj std::list<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> >
{
};

/* 2935 */
struct __cppobj sigslot::_signal_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 2936 */
struct __cppobj sigslot::signal6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> : sigslot::_signal_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>
{
};

/* 2937 */
struct __cppobj buzz::MucRoomDiscoveryTask : buzz::IqTask
{
	sigslot::signal6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> SignalResult;
};

/* 2939 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Container_base0
{
	std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2940 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 2941 */
struct __cppobj std::_Tree_buy<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Tree_alloc<0,std::_Tree_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 2942 */
struct __cppobj std::_Tree_comp<0,std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > : std::_Tree_buy<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 2943 */
struct __cppobj std::_Tree<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > : std::_Tree_comp<0,std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >
{
};

/* 2944 */
const struct __cppobj std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Tree<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >
{
};

/* 2938 */
struct __cppobj std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>
{
	std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *_Left;
	std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *_Parent;
	std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *_Right;
	char _Color;
	char _Isnil;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Myval;
};

/* 2946 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2947 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> >
{
};

/* 2948 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *>
{
};

/* 2949 */
struct __cppobj std::allocator<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *>
{
};

/* 2950 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2951 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base0>
{
	std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *_Ptr;
};

/* 2952 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Iterator_base0>
{
};

/* 2953 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,bool>
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > first;
	bool second;
};

/* 2954 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,int,sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> * const *,sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2955 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,int,sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> * const *,sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 2956 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2957 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > >
{
};

/* 2958 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 2959 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> >
{
};

/* 2960 */
struct __cppobj std::allocator<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > : std::_Allocator_base<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> >
{
};

/* 2961 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
{
};

/* 2962 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *>
{
};

/* 2963 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >
{
};

/* 2964 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >
{
};

/* 2965 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >
{
};

/* 2966 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > > : std::allocator<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> >
{
};

/* 2967 */
struct __cppobj std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > first;
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > second;
};

/* 2968 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
{
};

/* 2969 */
struct __cppobj std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0>
{
};

/* 2970 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > first;
	bool second;
};

/* 2971 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > second;
};

/* 2972 */
struct __cppobj buzz::PresenceStatus
{
	buzz::Jid jid_;
	int pri_;
	buzz::PresenceStatus::Show show_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > status_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > nick_;
	bool available_;
	int e_code_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > e_str_;
	bool feedback_probation_;
	bool know_capabilities_;
	bool voice_capability_;
	bool pmuc_capability_;
	bool video_capability_;
	bool camera_capability_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > caps_node_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > version_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > sent_time_;
};

/* 2973 */
struct __cppobj buzz::MucPresenceStatus : buzz::PresenceStatus
{
	buzz::MucPresenceStatus::Role role_;
	buzz::MucPresenceStatus::Affiliation affiliation_;
};

/* 2974 */
struct __cppobj buzz::Status
{
	buzz::Jid jid_;
	int pri_;
	buzz::Status::Show show_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > status_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > nick_;
	bool available_;
	int e_code_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > e_str_;
	bool feedback_probation_;
	bool know_capabilities_;
	bool voice_capability_;
	bool pmuc_capability_;
	bool video_capability_;
	bool camera_capability_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > caps_node_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > version_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > sent_time_;
};

/* 2975 */
struct __cppobj buzz::PresenceOutTask : buzz::XmppTask
{
};

/* 2976 */
struct __cppobj buzz::PresenceOutTaskMuc : buzz::XmppTask
{
};

/* 2978 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	buzz::MucPresenceStatus second;
};

/* 2977 */
struct __cppobj std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> *_Left;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> *_Parent;
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> _Myval;
};

/* 2979 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2980 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > >
{
};

/* 2981 */
struct __cppobj std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > >
{
};

/* 2982 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >,0> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > >
{
};

/* 2983 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >,0> >
{
};

/* 2984 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >,0> >
{
};

/* 2985 */
struct __cppobj buzz::Muc
{
	buzz::Muc::State state_;
	buzz::Jid jid_;
	buzz::Jid local_jid_;
	std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > members_;
};

/* 2986 */
struct __cppobj std::pair<buzz::Jid const ,buzz::Muc *>
{
	buzz::Jid first;
	buzz::Muc *second;
};

/* 2987 */
struct __cppobj std::_Allocator_base<std::pair<buzz::Jid const ,buzz::Muc *> >
{
};

/* 2988 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> >
{
};

/* 2989 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> >
{
};

/* 2990 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> > >
{
};

/* 2991 */
struct std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *_Myval;
};

/* 2992 */
struct __cppobj sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded>
{
	sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2993 */
struct sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *this, buzz::Jid *);
	sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *this);
	sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2994 */
struct std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *_Myval;
};

/* 2995 */
struct __cppobj sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded>
{
	sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 2996 */
struct sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *this, buzz::PresenceStatus *);
	sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *this);
	sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 2997 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 2998 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> >
{
};

/* 2999 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > >
{
};

/* 3000 */
struct __cppobj std::list<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> >
{
};

/* 3001 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> >
{
};

/* 3002 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> >
{
};

/* 3003 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> >
{
};

/* 3004 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *>
{
};

/* 3005 */
struct __cppobj std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *>
{
};

/* 3006 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,int,sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> * const *,sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3007 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,int,sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> * const *,sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3008 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3009 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > >
{
};

/* 3010 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3011 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> >
{
};

/* 3012 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> >
{
};

/* 3013 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> > >
{
};

/* 3014 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,int,sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> * const *,sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3015 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,int,sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> * const *,sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3016 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3017 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3018 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >
{
};

/* 3019 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >
{
};

/* 3020 */
struct std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *_Myval;
};

/* 3021 */
struct __cppobj sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded>
{
	sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3022 */
struct sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *this, buzz::Jid *, int);
	sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *this);
	sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3023 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3024 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> >
{
};

/* 3025 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> >
{
};

/* 3026 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> >
{
};

/* 3027 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> >
{
};

/* 3028 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > >
{
};

/* 3029 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *>
{
};

/* 3030 */
struct __cppobj std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *>
{
};

/* 3031 */
struct std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *_Myval;
};

/* 3032 */
struct __cppobj sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3033 */
struct sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *this, buzz::Jid *, buzz::MucPresenceStatus *);
	sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3034 */
struct __cppobj std::binary_function<buzz::Jid,buzz::Jid,bool>
{
};

/* 3035 */
struct __cppobj std::less<buzz::Jid> : std::binary_function<buzz::Jid,buzz::Jid,bool>
{
};

/* 3036 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3037 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> *_Ptr;
};

/* 3038 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > >,std::_Iterator_base0>
{
};

/* 3039 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > >
{
};

/* 3040 */
struct __cppobj std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *>
{
	std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> *_Left;
	std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> *_Parent;
	std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<buzz::Jid const ,buzz::Muc *> _Myval;
};

/* 3041 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3042 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<buzz::Jid const ,buzz::Muc *>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > >
{
};

/* 3043 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> >
{
};

/* 3044 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> >
{
};

/* 3045 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> > > : std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> >
{
};

/* 3046 */
struct __cppobj std::_Tree_buy<std::pair<buzz::Jid const ,buzz::Muc *>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<buzz::Jid const ,buzz::Muc *>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > > >
{
};

/* 3047 */
struct __cppobj std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > : std::_Allocator_base<std::pair<buzz::Jid const ,buzz::Muc *> >
{
};

/* 3048 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,void *> > >
{
};

/* 3049 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3050 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3051 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3052 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > >
{
};

/* 3053 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3054 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus>,void *> >
{
};

/* 3055 */
struct __cppobj std::_Tmap_traits<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> >,0>
{
};

/* 3056 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3057 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3058 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3059 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> >
{
};

/* 3060 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,void *> >
{
};

/* 3061 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > >
{
};

/* 3062 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *>
{
};

/* 3063 */
struct __cppobj std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *>
{
};

/* 3064 */
struct __cppobj std::pointer_traits<std::pair<buzz::Jid const ,buzz::Muc *> const *>
{
};

/* 3065 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> >,0> > : std::_Tree_buy<std::pair<buzz::Jid const ,buzz::Muc *>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > >
{
};

/* 3066 */
struct __cppobj std::_Tree<std::_Tmap_traits<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> >,0> >
{
};

/* 3067 */
struct __cppobj std::map<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > > : std::_Tree<std::_Tmap_traits<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> >,0> >
{
};

/* 3068 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<buzz::Jid const ,buzz::Muc *>,int,std::pair<buzz::Jid const ,buzz::Muc *> const *,std::pair<buzz::Jid const ,buzz::Muc *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3069 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<buzz::Jid const ,buzz::Muc *>,int,std::pair<buzz::Jid const ,buzz::Muc *> const *,std::pair<buzz::Jid const ,buzz::Muc *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> *_Ptr;
};

/* 3070 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > >,std::_Iterator_base0>
{
};

/* 3071 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > >
{
};

/* 3072 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > > first;
	bool second;
};

/* 3073 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,buzz::Muc *> > > > second;
};

/* 3074 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,buzz::Muc *>,void *> > >
{
};

/* 3075 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> >
{
};

/* 3076 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> >
{
};

/* 3077 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > >
{
};

/* 3078 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3079 */
struct __cppobj std::list<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> >
{
};

/* 3080 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *>
{
};

/* 3081 */
struct __cppobj std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *>
{
};

/* 3082 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,void *> > >
{
};

/* 3083 */
struct __cppobj std::list<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> >
{
};

/* 3084 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> >
{
};

/* 3085 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > >
{
};

/* 3086 */
struct __cppobj std::list<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> >
{
};

/* 3087 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> >
{
};

/* 3088 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3089 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > >
{
};

/* 3090 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3091 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,void *> > >
{
};

/* 3092 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,buzz::MucPresenceStatus,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> >,0>
{
};

/* 3093 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > first;
	bool second;
};

/* 3094 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > second;
};

/* 3095 */
struct __cppobj std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > >
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > first;
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> > > > second;
};

/* 3096 */
struct __cppobj sigslot::_signal_base1<buzz::PresenceStatus const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3097 */
struct __cppobj sigslot::signal1<buzz::PresenceStatus const &,sigslot::single_threaded> : sigslot::_signal_base1<buzz::PresenceStatus const &,sigslot::single_threaded>
{
};

/* 3098 */
struct __cppobj sigslot::_signal_base1<buzz::Jid const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3099 */
struct __cppobj sigslot::signal1<buzz::Jid const &,sigslot::single_threaded> : sigslot::_signal_base1<buzz::Jid const &,sigslot::single_threaded>
{
};

/* 3100 */
struct __cppobj sigslot::_signal_base2<buzz::Jid const &,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3101 */
struct __cppobj sigslot::signal2<buzz::Jid const &,int,sigslot::single_threaded> : sigslot::_signal_base2<buzz::Jid const &,int,sigslot::single_threaded>
{
};

/* 3102 */
struct __cppobj sigslot::_signal_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3103 */
struct __cppobj sigslot::signal2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> : sigslot::_signal_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>
{
};

/* 3104 */
struct __cppobj __declspec(align(8)) buzz::PresencePushTaskMuc : buzz::XmppTask
{
	sigslot::signal1<buzz::PresenceStatus const &,sigslot::single_threaded> SignalStatusUpdate;
	sigslot::signal1<buzz::Jid const &,sigslot::single_threaded> SignalMucJoined;
	sigslot::signal2<buzz::Jid const &,int,sigslot::single_threaded> SignalMucLeft;
	sigslot::signal2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> SignalMucStatusUpdate;
	std::map<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > > *mucs_;
};

/* 3105 */
struct __cppobj buzz::MucGrantMembershipTask : buzz::IqTask
{
};

/* 3106 */
struct __cppobj std::_List_node<cricket::TCPPort::Incoming,void *>
{
	std::_List_node<cricket::TCPPort::Incoming,void *> *_Next;
	std::_List_node<cricket::TCPPort::Incoming,void *> *_Prev;
	cricket::TCPPort::Incoming _Myval;
};

/* 3107 */
struct __cppobj cricket::TCPPort::Incoming
{
	talk_base::SocketAddress addr;
	talk_base::AsyncPacketSocket *socket;
};

/* 3108 */
struct __cppobj std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> > : std::_Container_base0
{
	std::_List_node<cricket::TCPPort::Incoming,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3109 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<cricket::TCPPort::Incoming,std::allocator<cricket::TCPPort::Incoming> > > : std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> >
{
};

/* 3110 */
struct __cppobj std::_List_buy<cricket::TCPPort::Incoming,std::allocator<cricket::TCPPort::Incoming> > : std::_List_alloc<0,std::_List_base_types<cricket::TCPPort::Incoming,std::allocator<cricket::TCPPort::Incoming> > >
{
};

/* 3111 */
struct __cppobj std::list<cricket::TCPPort::Incoming,std::allocator<cricket::TCPPort::Incoming> > : std::_List_buy<cricket::TCPPort::Incoming,std::allocator<cricket::TCPPort::Incoming> >
{
};

/* 3112 */
struct __cppobj __declspec(align(8)) cricket::TCPPort : cricket::Port
{
	bool incoming_only_;
	bool allow_listen_;
	talk_base::AsyncPacketSocket *socket_;
	int error_;
	std::list<cricket::TCPPort::Incoming,std::allocator<cricket::TCPPort::Incoming> > incoming_;
};

/* 3113 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::ProtocolAddress> > : std::_Container_base0
{
	cricket::ProtocolAddress *_Myfirst;
	cricket::ProtocolAddress *_Mylast;
	cricket::ProtocolAddress *_Myend;
};

/* 3114 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > > : std::_Vector_val<std::_Simple_types<cricket::ProtocolAddress> >
{
};

/* 3115 */
struct __cppobj std::vector<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > >
{
};

/* 3116 */
struct __cppobj cricket::RelayCredentials
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > username;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password;
};

/* 3117 */
struct __cppobj cricket::RelayServerConfig
{
	cricket::RelayType type;
	std::vector<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > ports;
	cricket::RelayCredentials credentials;
};

/* 3118 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::RelayServerConfig> > : std::_Container_base0
{
	cricket::RelayServerConfig *_Myfirst;
	cricket::RelayServerConfig *_Mylast;
	cricket::RelayServerConfig *_Myend;
};

/* 3119 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::RelayServerConfig,std::allocator<cricket::RelayServerConfig> > > : std::_Vector_val<std::_Simple_types<cricket::RelayServerConfig> >
{
};

/* 3120 */
struct __cppobj std::vector<cricket::RelayServerConfig,std::allocator<cricket::RelayServerConfig> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::RelayServerConfig,std::allocator<cricket::RelayServerConfig> > >
{
};

/* 3121 */
struct __cppobj cricket::PortConfiguration : talk_base::MessageData
{
	talk_base::SocketAddress stun_address;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > username;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password;
	std::vector<cricket::RelayServerConfig,std::allocator<cricket::RelayServerConfig> > relays;
};

/* 3122 */
struct std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *_Myval;
};

/* 3123 */
struct __cppobj sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3125 */
struct sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *this, cricket::AllocationSequence *);
	sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3126 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3127 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> >
{
};

/* 3128 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > >
{
};

/* 3129 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> >
{
};

/* 3130 */
struct __cppobj sigslot::_signal_base1<cricket::AllocationSequence *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3131 */
struct __cppobj sigslot::signal1<cricket::AllocationSequence *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::AllocationSequence *,sigslot::single_threaded>
{
};

/* 3145 */
struct __cppobj std::_Vector_val<std::_Simple_types<enum cricket::ProtocolType> > : std::_Container_base0
{
	cricket::ProtocolType *_Myfirst;
	cricket::ProtocolType *_Mylast;
	cricket::ProtocolType *_Myend;
};

/* 3146 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<enum cricket::ProtocolType,std::allocator<enum cricket::ProtocolType> > > : std::_Vector_val<std::_Simple_types<enum cricket::ProtocolType> >
{
};

/* 3147 */
struct __cppobj std::vector<enum cricket::ProtocolType,std::allocator<enum cricket::ProtocolType> > : std::_Vector_alloc<0,std::_Vec_base_types<enum cricket::ProtocolType,std::allocator<enum cricket::ProtocolType> > >
{
};

/* 3148 */
struct __cppobj talk_base::scoped_ptr<talk_base::AsyncPacketSocket>
{
	talk_base::AsyncPacketSocket *ptr;
};

/* 3149 */
struct __cppobj std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > : std::_Container_base12
{
	cricket::Port ***_Map;
	unsigned int _Mapsize;
	unsigned int _Myoff;
	unsigned int _Mysize;
};

/* 3150 */
struct __cppobj std::_Deque_alloc<0,std::_Deque_base_types<cricket::Port *,std::allocator<cricket::Port *> > > : std::_Deque_val<std::_Deque_simple_types<cricket::Port *> >
{
};

/* 3151 */
struct __cppobj std::deque<cricket::Port *,std::allocator<cricket::Port *> > : std::_Deque_alloc<0,std::_Deque_base_types<cricket::Port *,std::allocator<cricket::Port *> > >
{
};

/* 3124 */
struct __cppobj cricket::AllocationSequence : talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::AllocationSequence *,sigslot::single_threaded> SignalPortAllocationComplete;
	cricket::BasicPortAllocatorSession *session_;
	talk_base::Network *network_;
	talk_base::IPAddress ip_;
	cricket::PortConfiguration *config_;
	cricket::AllocationSequence::State state_;
	unsigned int flags_;
	std::vector<enum cricket::ProtocolType,std::allocator<enum cricket::ProtocolType> > protocols_;
	talk_base::scoped_ptr<talk_base::AsyncPacketSocket> udp_socket_;
	std::deque<cricket::Port *,std::allocator<cricket::Port *> > ports;
	int phase_;
};

/* 3133 */
struct __cppobj talk_base::scoped_ptr<talk_base::PacketSocketFactory>
{
	talk_base::PacketSocketFactory *ptr;
};

/* 3134 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::PortConfiguration *> > : std::_Container_base0
{
	cricket::PortConfiguration **_Myfirst;
	cricket::PortConfiguration **_Mylast;
	cricket::PortConfiguration **_Myend;
};

/* 3135 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortConfiguration *,std::allocator<cricket::PortConfiguration *> > > : std::_Vector_val<std::_Simple_types<cricket::PortConfiguration *> >
{
};

/* 3136 */
struct __cppobj std::vector<cricket::PortConfiguration *,std::allocator<cricket::PortConfiguration *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortConfiguration *,std::allocator<cricket::PortConfiguration *> > >
{
};

/* 3137 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::AllocationSequence *> > : std::_Container_base0
{
	cricket::AllocationSequence **_Myfirst;
	cricket::AllocationSequence **_Mylast;
	cricket::AllocationSequence **_Myend;
};

/* 3138 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::AllocationSequence *,std::allocator<cricket::AllocationSequence *> > > : std::_Vector_val<std::_Simple_types<cricket::AllocationSequence *> >
{
};

/* 3139 */
struct __cppobj std::vector<cricket::AllocationSequence *,std::allocator<cricket::AllocationSequence *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::AllocationSequence *,std::allocator<cricket::AllocationSequence *> > >
{
};

/* 3141 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::BasicPortAllocatorSession::PortData> > : std::_Container_base0
{
	cricket::BasicPortAllocatorSession::PortData *_Myfirst;
	cricket::BasicPortAllocatorSession::PortData *_Mylast;
	cricket::BasicPortAllocatorSession::PortData *_Myend;
};

/* 3142 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::BasicPortAllocatorSession::PortData,std::allocator<cricket::BasicPortAllocatorSession::PortData> > > : std::_Vector_val<std::_Simple_types<cricket::BasicPortAllocatorSession::PortData> >
{
};

/* 3143 */
struct __cppobj std::vector<cricket::BasicPortAllocatorSession::PortData,std::allocator<cricket::BasicPortAllocatorSession::PortData> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::BasicPortAllocatorSession::PortData,std::allocator<cricket::BasicPortAllocatorSession::PortData> > >
{
};

/* 3144 */
struct __cppobj cricket::BasicPortAllocatorSession : cricket::PortAllocatorSession, talk_base::MessageHandler
{
	cricket::BasicPortAllocator *allocator_;
	talk_base::Thread *network_thread_;
	talk_base::scoped_ptr<talk_base::PacketSocketFactory> owned_socket_factory_;
	talk_base::PacketSocketFactory *socket_factory_;
	bool configuration_done_;
	bool allocation_started_;
	bool network_manager_started_;
	bool running_;
	bool allocation_sequences_created_;
	std::vector<cricket::PortConfiguration *,std::allocator<cricket::PortConfiguration *> > configs_;
	std::vector<cricket::AllocationSequence *,std::allocator<cricket::AllocationSequence *> > sequences_;
	std::vector<cricket::BasicPortAllocatorSession::PortData,std::allocator<cricket::BasicPortAllocatorSession::PortData> > ports_;
};

/* 3132 */
struct __cppobj __declspec(align(4)) cricket::BasicPortAllocator : cricket::PortAllocator
{
	talk_base::NetworkManager *network_manager_;
	talk_base::PacketSocketFactory *socket_factory_;
	talk_base::SocketAddress stun_address_;
	std::vector<cricket::RelayServerConfig,std::allocator<cricket::RelayServerConfig> > relays_;
	bool allow_tcp_listen_;
};

/* 3140 */
struct __cppobj cricket::BasicPortAllocatorSession::PortData
{
	cricket::Port *port_;
	cricket::AllocationSequence *sequence_;
	cricket::BasicPortAllocatorSession::PortData::State state_;
};

/* 3152 */
struct __cppobj std::_Allocator_base<cricket::ProtocolAddress>
{
};

/* 3153 */
struct __cppobj std::allocator<cricket::ProtocolAddress> : std::_Allocator_base<cricket::ProtocolAddress>
{
};

/* 3154 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ProtocolAddress> > : std::allocator<cricket::ProtocolAddress>
{
};

/* 3155 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::ProtocolAddress,int,cricket::ProtocolAddress const *,cricket::ProtocolAddress const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3156 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ProtocolAddress> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::ProtocolAddress,int,cricket::ProtocolAddress const *,cricket::ProtocolAddress const &,std::_Iterator_base0>
{
	cricket::ProtocolAddress *_Ptr;
};

/* 3157 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::ProtocolAddress> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::ProtocolAddress> > >
{
};

/* 3158 */
struct __cppobj std::initializer_list<cricket::ProtocolAddress>
{
	cricket::ProtocolAddress *_First;
	cricket::ProtocolAddress *_Last;
};

/* 3159 */
struct __cppobj cricket::UDPPort : cricket::Port
{
	talk_base::SocketAddress server_addr_;
	cricket::StunRequestManager requests_;
	talk_base::AsyncPacketSocket *socket_;
	int error_;
	talk_base::AsyncResolver *resolver_;
	bool ready_;
	int stun_keepalive_delay_;
};

/* 3160 */
struct __cppobj cricket::StunPort : cricket::UDPPort
{
};

/* 3161 */
struct std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *_Myval;
};

/* 3162 */
struct __cppobj sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded>
{
	sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3164 */
struct sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *this, cricket::TurnPort *, talk_base::SocketAddress *, int);
	sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *this);
	sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3165 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3166 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> >
{
};

/* 3167 */
struct __cppobj std::_List_buy<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > >
{
};

/* 3168 */
struct __cppobj std::list<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> >
{
};

/* 3169 */
struct __cppobj sigslot::_signal_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3170 */
struct __cppobj sigslot::signal3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> : sigslot::_signal_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded>
{
};

/* 3173 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3174 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<enum talk_base::Socket::Option const ,int>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > >
{
};

/* 3175 */
struct __cppobj std::_Tree_buy<std::pair<enum talk_base::Socket::Option const ,int>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<enum talk_base::Socket::Option const ,int>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > > >
{
};

/* 3176 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> >,0> > : std::_Tree_buy<std::pair<enum talk_base::Socket::Option const ,int>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > >
{
};

/* 3177 */
struct __cppobj std::_Tree<std::_Tmap_traits<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> >,0> >
{
};

/* 3178 */
struct __cppobj std::map<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > > : std::_Tree<std::_Tmap_traits<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> >,0> >
{
};

/* 3190 */
struct __cppobj std::_List_val<std::_List_simple_types<cricket::TurnEntry *> > : std::_Container_base0
{
	std::_List_node<cricket::TurnEntry *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3191 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<cricket::TurnEntry *,std::allocator<cricket::TurnEntry *> > > : std::_List_val<std::_List_simple_types<cricket::TurnEntry *> >
{
};

/* 3192 */
struct __cppobj std::_List_buy<cricket::TurnEntry *,std::allocator<cricket::TurnEntry *> > : std::_List_alloc<0,std::_List_base_types<cricket::TurnEntry *,std::allocator<cricket::TurnEntry *> > >
{
};

/* 3193 */
struct __cppobj std::list<cricket::TurnEntry *,std::allocator<cricket::TurnEntry *> > : std::_List_buy<cricket::TurnEntry *,std::allocator<cricket::TurnEntry *> >
{
};

/* 3163 */
struct __cppobj __declspec(align(4)) cricket::TurnPort : cricket::Port
{
	sigslot::signal3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> SignalCreatePermissionResult;
	cricket::ProtocolAddress server_address_;
	cricket::RelayCredentials credentials_;
	talk_base::scoped_ptr<talk_base::AsyncPacketSocket> socket_;
	std::map<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > > socket_options_;
	talk_base::AsyncResolver *resolver_;
	int error_;
	cricket::StunRequestManager request_manager_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > realm_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > nonce_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > hash_;
	int next_channel_number_;
	std::list<cricket::TurnEntry *,std::allocator<cricket::TurnEntry *> > entries_;
	bool connected_;
};

/* 3172 */
struct __cppobj std::pair<enum talk_base::Socket::Option const ,int>
{
	talk_base::Socket::Option first;
	int second;
};

/* 3171 */
struct __cppobj std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *>
{
	std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> *_Left;
	std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> *_Parent;
	std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<enum talk_base::Socket::Option const ,int> _Myval;
};

/* 3179 */
struct std::_List_node<cricket::TurnEntry *,void *>
{
	std::_List_node<cricket::TurnEntry *,void *> *_Next;
	std::_List_node<cricket::TurnEntry *,void *> *_Prev;
	cricket::TurnEntry *_Myval;
};

/* 3184 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3185 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> >
{
};

/* 3186 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > >
{
};

/* 3187 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> >
{
};

/* 3188 */
struct __cppobj sigslot::_signal_base1<cricket::TurnEntry *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3189 */
struct __cppobj sigslot::signal1<cricket::TurnEntry *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::TurnEntry *,sigslot::single_threaded>
{
};

/* 3182 */
struct __cppobj cricket::TurnEntry : sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::TurnEntry *,sigslot::single_threaded> SignalDestroyed;
	cricket::TurnPort *port_;
	int channel_id_;
	talk_base::SocketAddress ext_addr_;
	cricket::TurnEntry::BindState state_;
};

/* 3180 */
struct std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *_Myval;
};

/* 3181 */
struct __cppobj sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3183 */
struct sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *this, cricket::TurnEntry *);
	sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3194 */
struct std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *_Myval;
};

/* 3195 */
struct __cppobj sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3196 */
struct sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *this, cricket::ProtocolAddress *);
	sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3197 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3198 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> >
{
};

/* 3199 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > >
{
};

/* 3200 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> >
{
};

/* 3201 */
struct __cppobj sigslot::_signal_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3202 */
struct __cppobj sigslot::signal1<cricket::ProtocolAddress const *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::ProtocolAddress const *,sigslot::single_threaded>
{
};

/* 3203 */
struct __cppobj std::_Deque_val<std::_Deque_simple_types<cricket::ProtocolAddress> > : std::_Container_base12
{
	cricket::ProtocolAddress **_Map;
	unsigned int _Mapsize;
	unsigned int _Myoff;
	unsigned int _Mysize;
};

/* 3204 */
struct __cppobj std::_Deque_alloc<0,std::_Deque_base_types<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > > : std::_Deque_val<std::_Deque_simple_types<cricket::ProtocolAddress> >
{
};

/* 3205 */
struct __cppobj std::deque<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > : std::_Deque_alloc<0,std::_Deque_base_types<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > >
{
};

/* 3209 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::RelayEntry *> > : std::_Container_base0
{
	cricket::RelayEntry **_Myfirst;
	cricket::RelayEntry **_Mylast;
	cricket::RelayEntry **_Myend;
};

/* 3210 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::RelayEntry *,std::allocator<cricket::RelayEntry *> > > : std::_Vector_val<std::_Simple_types<cricket::RelayEntry *> >
{
};

/* 3211 */
struct __cppobj std::vector<cricket::RelayEntry *,std::allocator<cricket::RelayEntry *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::RelayEntry *,std::allocator<cricket::RelayEntry *> > >
{
};

/* 3206 */
struct __cppobj cricket::RelayPort : cricket::Port
{
	sigslot::signal1<cricket::ProtocolAddress const *,sigslot::single_threaded> SignalConnectFailure;
	sigslot::signal1<cricket::ProtocolAddress const *,sigslot::single_threaded> SignalSoftTimeout;
	std::deque<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > server_addr_;
	std::vector<cricket::ProtocolAddress,std::allocator<cricket::ProtocolAddress> > external_addr_;
	bool ready_;
	std::vector<cricket::RelayEntry *,std::allocator<cricket::RelayEntry *> > entries_;
	std::vector<std::pair<enum talk_base::Socket::Option,int>,std::allocator<std::pair<enum talk_base::Socket::Option,int> > > options_;
	int error_;
};

/* 3208 */
struct __cppobj cricket::RelayEntry : talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	cricket::RelayPort *port_;
	talk_base::SocketAddress ext_addr_;
	unsigned int server_index_;
	bool connected_;
	bool locked_;
	cricket::RelayConnection *current_connection_;
};

/* 3207 */
struct __cppobj cricket::RelayConnection : sigslot::has_slots<sigslot::single_threaded>
{
	talk_base::AsyncPacketSocket *socket_;
	cricket::ProtocolAddress *protocol_address_;
	cricket::StunRequestManager *request_manager_;
};

/* 3212 */
struct __cppobj cricket::TCPConnection : cricket::Connection
{
	talk_base::AsyncPacketSocket *socket_;
	int error_;
};

/* 3213 */
struct __cppobj std::_Allocator_base<cricket::TCPPort::Incoming>
{
};

/* 3214 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> >
{
};

/* 3215 */
struct __cppobj std::_Allocator_base<std::_List_node<cricket::TCPPort::Incoming,void *> >
{
};

/* 3216 */
struct __cppobj std::allocator<std::_List_node<cricket::TCPPort::Incoming,void *> > : std::_Allocator_base<std::_List_node<cricket::TCPPort::Incoming,void *> >
{
};

/* 3217 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *>
{
};

/* 3218 */
struct __cppobj std::_Allocator_base<cricket::RelayEntry *>
{
};

/* 3219 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> >
{
};

/* 3220 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> > >
{
};

/* 3221 */
struct __cppobj std::allocator<cricket::RelayEntry *> : std::_Allocator_base<cricket::RelayEntry *>
{
};

/* 3222 */
struct __cppobj std::allocator_traits<std::allocator<cricket::RelayEntry *> >
{
};

/* 3223 */
struct __cppobj std::binary_function<enum talk_base::Socket::Option,enum talk_base::Socket::Option,bool>
{
};

/* 3224 */
struct __cppobj std::allocator<cricket::TCPPort::Incoming> : std::_Allocator_base<cricket::TCPPort::Incoming>
{
};

/* 3225 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> > > : std::allocator<std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> >
{
};

/* 3226 */
struct __cppobj std::_Allocator_base<std::pair<enum talk_base::Socket::Option const ,int> >
{
};

/* 3227 */
struct __cppobj std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > : std::_Allocator_base<std::pair<enum talk_base::Socket::Option const ,int> >
{
};

/* 3228 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RelayEntry *> > : std::allocator<cricket::RelayEntry *>
{
};

/* 3229 */
struct __cppobj std::_Allocator_base<cricket::ProtocolAddress *>
{
};

/* 3230 */
struct __cppobj std::_Allocator_base<std::_List_node<cricket::TurnEntry *,void *> >
{
};

/* 3231 */
struct __cppobj std::allocator<cricket::ProtocolAddress *> : std::_Allocator_base<cricket::ProtocolAddress *>
{
};

/* 3232 */
struct __cppobj std::allocator_traits<std::allocator<cricket::ProtocolAddress *> >
{
};

/* 3233 */
struct __cppobj std::_Allocator_base<cricket::TurnEntry *>
{
};

/* 3234 */
struct __cppobj std::allocator<std::_List_node<cricket::TurnEntry *,void *> > : std::_Allocator_base<std::_List_node<cricket::TurnEntry *,void *> >
{
};

/* 3235 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<cricket::TurnEntry *,void *> > >
{
};

/* 3236 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<cricket::TCPPort::Incoming,void *> > > : std::allocator<std::_List_node<cricket::TCPPort::Incoming,void *> >
{
};

/* 3237 */
struct __cppobj std::_Allocator_base<std::pair<enum talk_base::Socket::Option,int> >
{
};

/* 3238 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<cricket::TCPPort::Incoming,void *> > >
{
};

/* 3239 */
struct __cppobj std::allocator<cricket::TurnEntry *> : std::_Allocator_base<cricket::TurnEntry *>
{
};

/* 3240 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<cricket::TurnEntry *,void *> > > : std::allocator<std::_List_node<cricket::TurnEntry *,void *> >
{
};

/* 3241 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,cricket::TCPPort::Incoming,int,cricket::TCPPort::Incoming const *,cricket::TCPPort::Incoming const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3242 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,cricket::TCPPort::Incoming,int,cricket::TCPPort::Incoming const *,cricket::TCPPort::Incoming const &,std::_Iterator_base0>
{
	std::_List_node<cricket::TCPPort::Incoming,void *> *_Ptr;
};

/* 3243 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> >,std::_Iterator_base0>
{
};

/* 3244 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> > >
{
};

/* 3245 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::TCPPort::Incoming> >,std::_Iterator_base0>
{
};

/* 3246 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RelayEntry *> >::rebind<cricket::RelayEntry *>
{
};

/* 3247 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RelayEntry *> >::rebind<cricket::RelayEntry * *>
{
};

/* 3248 */
struct __cppobj std::less<enum talk_base::Socket::Option> : std::binary_function<enum talk_base::Socket::Option,enum talk_base::Socket::Option,bool>
{
};

/* 3249 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *>
{
};

/* 3250 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ProtocolAddress *> > : std::allocator<cricket::ProtocolAddress *>
{
};

/* 3251 */
struct __cppobj std::_Allocator_base<cricket::AllocationSequence *>
{
};

/* 3252 */
struct __cppobj std::_Allocator_base<cricket::Port *>
{
};

/* 3253 */
struct __cppobj std::_Allocator_base<cricket::BasicPortAllocatorSession::PortData>
{
};

/* 3254 */
struct __cppobj std::allocator<cricket::BasicPortAllocatorSession::PortData> : std::_Allocator_base<cricket::BasicPortAllocatorSession::PortData>
{
};

/* 3255 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::BasicPortAllocatorSession::PortData> > : std::allocator<cricket::BasicPortAllocatorSession::PortData>
{
};

/* 3256 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::BasicPortAllocatorSession::PortData,int,cricket::BasicPortAllocatorSession::PortData const *,cricket::BasicPortAllocatorSession::PortData const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3257 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::BasicPortAllocatorSession::PortData> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::BasicPortAllocatorSession::PortData,int,cricket::BasicPortAllocatorSession::PortData const *,cricket::BasicPortAllocatorSession::PortData const &,std::_Iterator_base0>
{
	cricket::BasicPortAllocatorSession::PortData *_Ptr;
};

/* 3258 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::BasicPortAllocatorSession::PortData> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::BasicPortAllocatorSession::PortData> > >
{
};

/* 3259 */
struct __cppobj std::allocator<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *>
{
};

/* 3260 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::RelayServerConfig,int,cricket::RelayServerConfig const *,cricket::RelayServerConfig const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3261 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::RelayServerConfig> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::RelayServerConfig,int,cricket::RelayServerConfig const *,cricket::RelayServerConfig const &,std::_Iterator_base0>
{
	cricket::RelayServerConfig *_Ptr;
};

/* 3262 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::RelayServerConfig> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::RelayServerConfig> > >
{
};

/* 3263 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3264 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3265 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3266 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> >
{
};

/* 3267 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> >
{
};

/* 3268 */
struct __cppobj std::_Allocator_base<cricket::PortConfiguration *>
{
};

/* 3269 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3270 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3271 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::AllocationSequence *,int,cricket::AllocationSequence * const *,cricket::AllocationSequence * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3272 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::AllocationSequence *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::AllocationSequence *,int,cricket::AllocationSequence * const *,cricket::AllocationSequence * const &,std::_Iterator_base0>
{
	cricket::AllocationSequence **_Ptr;
};

/* 3273 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::AllocationSequence *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::AllocationSequence *> > >
{
};

/* 3274 */
struct __cppobj std::allocator<cricket::Port *> : std::_Allocator_base<cricket::Port *>
{
};

/* 3275 */
struct __cppobj std::allocator_traits<std::allocator<cricket::Port *> >
{
};

/* 3276 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *>
{
};

/* 3277 */
struct __cppobj std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *>
{
};

/* 3278 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> >
{
};

/* 3279 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> >
{
};

/* 3280 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> >
{
};

/* 3281 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,cricket::TurnEntry *,int,cricket::TurnEntry * const *,cricket::TurnEntry * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3282 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,cricket::TurnEntry *,int,cricket::TurnEntry * const *,cricket::TurnEntry * const &,std::_Iterator_base0>
{
	std::_List_node<cricket::TurnEntry *,void *> *_Ptr;
};

/* 3283 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> >,std::_Iterator_base0>
{
};

/* 3284 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> > >
{
};

/* 3285 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::TurnEntry *> >,std::_Iterator_base0>
{
};

/* 3286 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3287 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3288 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > >
{
};

/* 3289 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3290 */
struct __cppobj std::_Allocator_base<enum cricket::ProtocolType>
{
};

/* 3291 */
struct __cppobj std::allocator<enum cricket::ProtocolType> : std::_Allocator_base<enum cricket::ProtocolType>
{
};

/* 3292 */
struct __cppobj std::_Wrap_alloc<std::allocator<enum cricket::ProtocolType> > : std::allocator<enum cricket::ProtocolType>
{
};

/* 3293 */
struct __cppobj std::allocator_traits<std::allocator<enum cricket::ProtocolType> >
{
};

/* 3294 */
struct __cppobj std::_Wrap_alloc<std::allocator<enum cricket::ProtocolType> >::rebind<enum cricket::ProtocolType>
{
};

/* 3295 */
struct __cppobj std::_Wrap_alloc<std::allocator<enum cricket::ProtocolType> >::rebind<enum cricket::ProtocolType *>
{
};

/* 3296 */
struct __cppobj std::allocator<cricket::AllocationSequence *> : std::_Allocator_base<cricket::AllocationSequence *>
{
};

/* 3297 */
struct __cppobj std::allocator_traits<std::allocator<cricket::AllocationSequence *> >
{
};

/* 3298 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3299 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3300 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3301 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3302 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3303 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > >
{
};

/* 3304 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3305 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3306 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3307 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3308 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 3309 */
struct __cppobj std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 3310 */
struct __cppobj std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > >
{
	std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > *_Mycont;
	unsigned int _Myoff;
};

/* 3311 */
struct __cppobj std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > > : std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > >
{
};

/* 3312 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3313 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > >
{
};

/* 3314 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3315 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<enum talk_base::Socket::Option const ,int>,int,std::pair<enum talk_base::Socket::Option const ,int> const *,std::pair<enum talk_base::Socket::Option const ,int> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3316 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<enum talk_base::Socket::Option const ,int>,int,std::pair<enum talk_base::Socket::Option const ,int> const *,std::pair<enum talk_base::Socket::Option const ,int> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<enum talk_base::Socket::Option const ,int>,void *> *_Ptr;
};

/* 3317 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > >,std::_Iterator_base0>
{
};

/* 3318 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > > >
{
};

/* 3319 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::PortConfiguration *,int,cricket::PortConfiguration * const *,cricket::PortConfiguration * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3320 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,int,sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> * const *,sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3321 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,int,sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> * const *,sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3322 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3323 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortConfiguration *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::PortConfiguration *,int,cricket::PortConfiguration * const *,cricket::PortConfiguration * const &,std::_Iterator_base0>
{
	cricket::PortConfiguration **_Ptr;
};

/* 3324 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortConfiguration *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortConfiguration *> > >
{
};

/* 3325 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 3326 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 3327 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 3328 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *>
{
};

/* 3329 */
struct __cppobj std::allocator<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *>
{
};

/* 3330 */
struct __cppobj std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::ProtocolAddress> > > : std::_Iterator_base12
{
	unsigned int _Myoff;
};

/* 3331 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3332 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3333 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3334 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 3335 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3336 */
struct __cppobj std::allocator<cricket::PortConfiguration *> : std::_Allocator_base<cricket::PortConfiguration *>
{
};

/* 3337 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortConfiguration *> > : std::allocator<cricket::PortConfiguration *>
{
};

/* 3338 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> >
{
};

/* 3339 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> >
{
};

/* 3340 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> >
{
};

/* 3341 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *>
{
};

/* 3342 */
struct __cppobj std::allocator<std::pair<enum talk_base::Socket::Option,int> > : std::_Allocator_base<std::pair<enum talk_base::Socket::Option,int> >
{
};

/* 3343 */
struct __cppobj std::allocator_traits<std::allocator<std::pair<enum talk_base::Socket::Option,int> > >
{
};

/* 3344 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,enum cricket::ProtocolType,int,enum cricket::ProtocolType const *,enum cricket::ProtocolType const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3345 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<enum cricket::ProtocolType> > > : std::_Iterator012<std::random_access_iterator_tag,enum cricket::ProtocolType,int,enum cricket::ProtocolType const *,enum cricket::ProtocolType const &,std::_Iterator_base0>
{
	cricket::ProtocolType *_Ptr;
};

/* 3346 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3347 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3348 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::Connection *> > : std::_Container_base0
{
	cricket::Connection **_Myfirst;
	cricket::Connection **_Mylast;
	cricket::Connection **_Myend;
};

/* 3349 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::Connection *,std::allocator<cricket::Connection *> > > : std::_Vector_val<std::_Simple_types<cricket::Connection *> >
{
};

/* 3350 */
struct __cppobj std::vector<cricket::Connection *,std::allocator<cricket::Connection *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::Connection *,std::allocator<cricket::Connection *> > >
{
};

/* 3351 */
struct __cppobj std::_Allocator_base<cricket::Connection *>
{
};

/* 3352 */
struct __cppobj std::allocator<cricket::Connection *> : std::_Allocator_base<cricket::Connection *>
{
};

/* 3353 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Connection *> > : std::allocator<cricket::Connection *>
{
};

/* 3354 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::Connection *,int,cricket::Connection * const *,cricket::Connection * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3355 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::Connection *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::Connection *,int,cricket::Connection * const *,cricket::Connection * const &,std::_Iterator_base0>
{
	cricket::Connection **_Ptr;
};

/* 3356 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::Connection *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::Connection *> > >
{
};

/* 3357 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Port *> > : std::allocator<cricket::Port *>
{
};

/* 3358 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Port *> >::rebind<cricket::Port *>
{
};

/* 3359 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Port *> >::rebind<cricket::Port * *>
{
};

/* 3360 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Port *> >::rebind<std::_Container_proxy>
{
};

/* 3361 */
struct __cppobj std::_Allocator_base<cricket::Port * *>
{
};

/* 3362 */
struct __cppobj std::allocator<cricket::Port * *> : std::_Allocator_base<cricket::Port * *>
{
};

/* 3363 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Port * *> > : std::allocator<cricket::Port * *>
{
};

/* 3364 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 3365 */
struct __cppobj std::allocator<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 3366 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum talk_base::Socket::Option const ,int> > > > first;
	bool second;
};

/* 3367 */
struct __cppobj std::initializer_list<std::pair<enum talk_base::Socket::Option const ,int> >
{
	std::pair<enum talk_base::Socket::Option const ,int> *_First;
	std::pair<enum talk_base::Socket::Option const ,int> *_Last;
};

/* 3368 */
struct __cppobj std::allocator_traits<std::allocator<cricket::Connection *> >
{
};

/* 3369 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Connection *> >::rebind<cricket::Connection *>
{
};

/* 3370 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::Connection *> >::rebind<cricket::Connection * *>
{
};

/* 3371 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 3372 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3373 */
struct __cppobj std::allocator_traits<std::allocator<cricket::ProtocolAddress> >
{
};

/* 3374 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ProtocolAddress> >::rebind<cricket::ProtocolAddress>
{
};

/* 3375 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ProtocolAddress> >::rebind<cricket::ProtocolAddress *>
{
};

/* 3376 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::pair<enum talk_base::Socket::Option,int> > > : std::allocator<std::pair<enum talk_base::Socket::Option,int> >
{
};

/* 3377 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::pair<enum talk_base::Socket::Option,int> > >::rebind<std::pair<enum talk_base::Socket::Option,int> >
{
};

/* 3378 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::pair<enum talk_base::Socket::Option,int> > >::rebind<std::pair<enum talk_base::Socket::Option,int> *>
{
};

/* 3379 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3380 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > >
{
};

/* 3381 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3382 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3383 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3384 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3385 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3386 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > >
{
};

/* 3387 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> > >
{
};

/* 3388 */
struct __cppobj std::allocator_traits<std::allocator<cricket::Port * *> >
{
};

/* 3389 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> >
{
};

/* 3390 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> >
{
};

/* 3391 */
struct __cppobj std::pointer_traits<cricket::RelayServerConfig const *>
{
};

/* 3392 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::Port *> > : std::_Container_base0
{
	cricket::Port **_Myfirst;
	cricket::Port **_Mylast;
	cricket::Port **_Myend;
};

/* 3393 */
struct __cppobj std::_Allocator_base<cricket::RelayServerConfig>
{
};

/* 3394 */
struct __cppobj std::allocator<cricket::RelayServerConfig> : std::_Allocator_base<cricket::RelayServerConfig>
{
};

/* 3395 */
struct __cppobj std::allocator_traits<std::allocator<cricket::RelayServerConfig> >
{
};

/* 3396 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *>
{
};

/* 3397 */
struct __cppobj std::allocator<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *>
{
};

/* 3398 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 3399 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 3400 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> >
{
};

/* 3401 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,std::pair<enum talk_base::Socket::Option,int>,int,std::pair<enum talk_base::Socket::Option,int> const *,std::pair<enum talk_base::Socket::Option,int> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3402 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<enum talk_base::Socket::Option,int> > > > : std::_Iterator012<std::random_access_iterator_tag,std::pair<enum talk_base::Socket::Option,int>,int,std::pair<enum talk_base::Socket::Option,int> const *,std::pair<enum talk_base::Socket::Option,int> const &,std::_Iterator_base0>
{
	std::pair<enum talk_base::Socket::Option,int> *_Ptr;
};

/* 3403 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<enum talk_base::Socket::Option,int> > > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<enum talk_base::Socket::Option,int> > > >
{
};

/* 3404 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded> *,void *> > >
{
};

/* 3405 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3406 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *>
{
};

/* 3407 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::Port *,std::allocator<cricket::Port *> > > : std::_Vector_val<std::_Simple_types<cricket::Port *> >
{
};

/* 3408 */
struct __cppobj std::vector<cricket::Port *,std::allocator<cricket::Port *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::Port *,std::allocator<cricket::Port *> > >
{
};

/* 3409 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > >
{
};

/* 3410 */
struct __cppobj std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > > : std::_Iterator_base12
{
	unsigned int _Myoff;
};

/* 3411 */
struct __cppobj std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > > : std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<cricket::Port *> > >
{
};

/* 3412 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::AllocationSequence *> > : std::allocator<cricket::AllocationSequence *>
{
};

/* 3413 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3414 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::ProtocolAddress const *,sigslot::single_threaded> *,void *> > >
{
};

/* 3415 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> >
{
};

/* 3416 */
struct __cppobj std::allocator_traits<std::allocator<cricket::PortConfiguration *> >
{
};

/* 3417 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortConfiguration *> >::rebind<cricket::PortConfiguration *>
{
};

/* 3418 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortConfiguration *> >::rebind<cricket::PortConfiguration * *>
{
};

/* 3419 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RelayServerConfig> > : std::allocator<cricket::RelayServerConfig>
{
};

/* 3420 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RelayServerConfig> >::rebind<cricket::RelayServerConfig>
{
};

/* 3421 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RelayServerConfig> >::rebind<cricket::RelayServerConfig *>
{
};

/* 3422 */
struct __cppobj std::allocator_traits<std::allocator<cricket::BasicPortAllocatorSession::PortData> >
{
};

/* 3423 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::BasicPortAllocatorSession::PortData> >::rebind<cricket::BasicPortAllocatorSession::PortData>
{
};

/* 3424 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::BasicPortAllocatorSession::PortData> >::rebind<cricket::BasicPortAllocatorSession::PortData *>
{
};

/* 3425 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base3<cricket::TurnPort *,talk_base::SocketAddress const &,int,sigslot::single_threaded> *,void *> > >
{
};

/* 3426 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> > >
{
};

/* 3427 */
struct __cppobj std::_Tmap_traits<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> >,0>
{
};

/* 3428 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *> > >
{
};

/* 3429 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *,void *> >
{
};

/* 3430 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded> *>
{
};

/* 3431 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > >
{
};

/* 3432 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3433 */
struct __cppobj std::pointer_traits<cricket::BasicPortAllocatorSession::PortData *>
{
};

/* 3434 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> *,void *> > >
{
};

/* 3435 */
struct __cppobj std::pointer_traits<cricket::ProtocolAddress const *>
{
};

/* 3436 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::AllocationSequence *> >::rebind<cricket::AllocationSequence *>
{
};

/* 3437 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::AllocationSequence *> >::rebind<cricket::AllocationSequence * *>
{
};

/* 3438 */
struct __cppobj std::pointer_traits<std::pair<talk_base::SocketAddress const ,cricket::Connection *> const *>
{
};

/* 3439 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::BasicPortAllocatorSession,cricket::Port *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::Port *,sigslot::single_threaded>
{
	cricket::BasicPortAllocatorSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BasicPortAllocatorSession *this, cricket::Port *);
};

/* 3440 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::AllocationSequence,talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::AllocationSequence *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::AllocationSequence *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
};

/* 3441 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::BasicPortAllocatorSession,cricket::AllocationSequence *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::AllocationSequence *,sigslot::single_threaded>
{
	cricket::BasicPortAllocatorSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BasicPortAllocatorSession *this, cricket::AllocationSequence *);
};

/* 3442 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::BasicPortAllocatorSession,cricket::Port *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::Port *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::BasicPortAllocatorSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BasicPortAllocatorSession *this, cricket::Port *, cricket::Candidate *);
};

/* 3443 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<cricket::BasicPortAllocatorSession,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	cricket::BasicPortAllocatorSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BasicPortAllocatorSession *this);
};

/* 3444 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::AllocationSequence,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::AllocationSequence *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::AllocationSequence *this, cricket::PortInterface *);
};

/* 3445 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::BasicPortAllocatorSession,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::BasicPortAllocatorSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BasicPortAllocatorSession *this, cricket::PortInterface *);
};

/* 3446 */
struct __cppobj talk_base::BasicPacketSocketFactory : talk_base::PacketSocketFactory
{
	talk_base::Thread *thread_;
	talk_base::SocketFactory *socket_factory_;
};

/* 3447 */
struct __cppobj cricket::CreateTunnelData : talk_base::MessageData
{
	buzz::Jid jid;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > description;
	talk_base::Thread *thread;
	talk_base::StreamInterface *stream;
};

/* 3448 */
struct __cppobj cricket::TunnelSession : sigslot::has_slots<sigslot::single_threaded>
{
	cricket::TunnelSessionClientBase *client_;
	cricket::Session *session_;
	cricket::PseudoTcpChannel *channel_;
};

/* 3449 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::TunnelSession *> > : std::_Container_base0
{
	cricket::TunnelSession **_Myfirst;
	cricket::TunnelSession **_Mylast;
	cricket::TunnelSession **_Myend;
};

/* 3450 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::TunnelSession *,std::allocator<cricket::TunnelSession *> > > : std::_Vector_val<std::_Simple_types<cricket::TunnelSession *> >
{
};

/* 3451 */
struct __cppobj std::vector<cricket::TunnelSession *,std::allocator<cricket::TunnelSession *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::TunnelSession *,std::allocator<cricket::TunnelSession *> > >
{
};

/* 3452 */
struct __cppobj __declspec(align(4)) cricket::TunnelSessionClientBase : cricket::SessionClient, talk_base::MessageHandler
{
	buzz::Jid jid_;
	cricket::SessionManager *session_manager_;
	std::vector<cricket::TunnelSession *,std::allocator<cricket::TunnelSession *> > sessions_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > namespace_;
	bool shutdown_;
};

/* 3455 */
struct __cppobj cricket::IPseudoTcpNotify
{
	cricket::IPseudoTcpNotifyVtbl *vfptr;
};

/* 3474 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3475 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> >
{
};

/* 3476 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > >
{
};

/* 3477 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> >
{
};

/* 3478 */
struct __cppobj sigslot::_signal_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3479 */
struct __cppobj sigslot::signal1<cricket::PseudoTcpChannel *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>
{
};

/* 3472 */
struct __cppobj cricket::PseudoTcpChannel : cricket::IPseudoTcpNotify, talk_base::MessageHandler, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal1<cricket::PseudoTcpChannel *,sigslot::single_threaded> SignalChannelClosed;
	talk_base::Thread *signal_thread_;
	talk_base::Thread *worker_thread_;
	talk_base::Thread *stream_thread_;
	cricket::Session *session_;
	cricket::TransportChannel *channel_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > content_name_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > channel_name_;
	cricket::PseudoTcp *tcp_;
	cricket::PseudoTcpChannel::InternalStream *stream_;
	bool stream_readable_;
	bool pending_read_event_;
	bool ready_to_connect_;
	talk_base::CriticalSection cs_;
};

/* 3468 */
union $46C560F74CB43B56A46BE484E100C9FD
{
	void (__thiscall *~IPseudoTcpNotify)(cricket::IPseudoTcpNotify *this);
	void *(__thiscall *__vecDelDtor)(cricket::IPseudoTcpNotify *this, unsigned int);
};

/* 3469 */
struct cricket::IPseudoTcpNotifyVtbl
{
	void (__thiscall *OnTcpOpen)(cricket::IPseudoTcpNotify *this, cricket::PseudoTcp *);
	void (__thiscall *OnTcpReadable)(cricket::IPseudoTcpNotify *this, cricket::PseudoTcp *);
	void (__thiscall *OnTcpWriteable)(cricket::IPseudoTcpNotify *this, cricket::PseudoTcp *);
	void (__thiscall *OnTcpClosed)(cricket::IPseudoTcpNotify *this, cricket::PseudoTcp *, unsigned int);
	cricket::IPseudoTcpNotify::WriteResult (__thiscall *TcpWritePacket)(cricket::IPseudoTcpNotify *this, cricket::PseudoTcp *, const char *, unsigned int);
	$46C560F74CB43B56A46BE484E100C9FD ___u5;
};

/* 3470 */
struct std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *_Myval;
};

/* 3458 */
struct __cppobj std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> > : std::_Container_base0
{
	std::_List_node<cricket::PseudoTcp::RSegment,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3459 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<cricket::PseudoTcp::RSegment,std::allocator<cricket::PseudoTcp::RSegment> > > : std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> >
{
};

/* 3460 */
struct __cppobj std::_List_buy<cricket::PseudoTcp::RSegment,std::allocator<cricket::PseudoTcp::RSegment> > : std::_List_alloc<0,std::_List_base_types<cricket::PseudoTcp::RSegment,std::allocator<cricket::PseudoTcp::RSegment> > >
{
};

/* 3461 */
struct __cppobj std::list<cricket::PseudoTcp::RSegment,std::allocator<cricket::PseudoTcp::RSegment> > : std::_List_buy<cricket::PseudoTcp::RSegment,std::allocator<cricket::PseudoTcp::RSegment> >
{
};

/* 3464 */
struct __cppobj std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> > : std::_Container_base0
{
	std::_List_node<cricket::PseudoTcp::SSegment,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3465 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<cricket::PseudoTcp::SSegment,std::allocator<cricket::PseudoTcp::SSegment> > > : std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> >
{
};

/* 3466 */
struct __cppobj std::_List_buy<cricket::PseudoTcp::SSegment,std::allocator<cricket::PseudoTcp::SSegment> > : std::_List_alloc<0,std::_List_base_types<cricket::PseudoTcp::SSegment,std::allocator<cricket::PseudoTcp::SSegment> > >
{
};

/* 3467 */
struct __cppobj std::list<cricket::PseudoTcp::SSegment,std::allocator<cricket::PseudoTcp::SSegment> > : std::_List_buy<cricket::PseudoTcp::SSegment,std::allocator<cricket::PseudoTcp::SSegment> >
{
};

/* 3453 */
struct __cppobj __declspec(align(4)) cricket::PseudoTcp
{
	cricket::PseudoTcpVtbl *vfptr;
	cricket::IPseudoTcpNotify *m_notify;
	cricket::PseudoTcp::Shutdown m_shutdown;
	int m_error;
	cricket::PseudoTcp::TcpState m_state;
	unsigned int m_conv;
	bool m_bReadEnable;
	bool m_bWriteEnable;
	bool m_bOutgoing;
	unsigned int m_lasttraffic;
	std::list<cricket::PseudoTcp::RSegment,std::allocator<cricket::PseudoTcp::RSegment> > m_rlist;
	unsigned int m_rbuf_len;
	unsigned int m_rcv_nxt;
	unsigned int m_rcv_wnd;
	unsigned int m_lastrecv;
	char m_rwnd_scale;
	talk_base::FifoBuffer m_rbuf;
	std::list<cricket::PseudoTcp::SSegment,std::allocator<cricket::PseudoTcp::SSegment> > m_slist;
	unsigned int m_sbuf_len;
	unsigned int m_snd_nxt;
	unsigned int m_snd_wnd;
	unsigned int m_lastsend;
	unsigned int m_snd_una;
	char m_swnd_scale;
	talk_base::FifoBuffer m_sbuf;
	unsigned int m_mss;
	unsigned int m_msslevel;
	unsigned int m_largest;
	unsigned int m_mtu_advise;
	unsigned int m_rto_base;
	unsigned int m_ts_recent;
	unsigned int m_ts_lastack;
	unsigned int m_rx_rttvar;
	unsigned int m_rx_srtt;
	unsigned int m_rx_rto;
	unsigned int m_ssthresh;
	unsigned int m_cwnd;
	char m_dup_acks;
	unsigned int m_recover;
	unsigned int m_t_ack;
	bool m_use_nagling;
	unsigned int m_ack_delay;
	bool m_support_wnd_scale;
};

/* 3480 */
struct __cppobj cricket::PseudoTcpChannel::InternalStream : talk_base::StreamInterface
{
	cricket::PseudoTcpChannel *parent_;
};

/* 3471 */
struct __cppobj sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3454 */
struct cricket::PseudoTcpVtbl
{
	void *(__thiscall *__vecDelDtor)(cricket::PseudoTcp *this, unsigned int);
};

/* 3456 */
struct std::_List_node<cricket::PseudoTcp::RSegment,void *>
{
	std::_List_node<cricket::PseudoTcp::RSegment,void *> *_Next;
	std::_List_node<cricket::PseudoTcp::RSegment,void *> *_Prev;
	cricket::PseudoTcp::RSegment _Myval;
};

/* 3462 */
struct std::_List_node<cricket::PseudoTcp::SSegment,void *>
{
	std::_List_node<cricket::PseudoTcp::SSegment,void *> *_Next;
	std::_List_node<cricket::PseudoTcp::SSegment,void *> *_Prev;
	cricket::PseudoTcp::SSegment _Myval;
};

/* 3473 */
struct sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *this, cricket::PseudoTcpChannel *);
	sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3457 */
struct cricket::PseudoTcp::RSegment
{
	unsigned int seq;
	unsigned int len;
};

/* 3463 */
struct __cppobj __declspec(align(4)) cricket::PseudoTcp::SSegment
{
	unsigned int seq;
	unsigned int len;
	char xmit;
	bool bCtrl;
};

/* 3481 */
struct cricket::PseudoTcp::Segment
{
	unsigned int conv;
	unsigned int seq;
	unsigned int ack;
	char flags;
	unsigned __int16 wnd;
	const char *data;
	unsigned int len;
	unsigned int tsval;
	unsigned int tsecr;
};

/* 3482 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,cricket::PseudoTcp::SSegment,int,cricket::PseudoTcp::SSegment const *,cricket::PseudoTcp::SSegment const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3483 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,cricket::PseudoTcp::SSegment,int,cricket::PseudoTcp::SSegment const *,cricket::PseudoTcp::SSegment const &,std::_Iterator_base0>
{
	std::_List_node<cricket::PseudoTcp::SSegment,void *> *_Ptr;
};

/* 3484 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> >,std::_Iterator_base0>
{
};

/* 3485 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> > >
{
};

/* 3486 */
struct __cppobj cricket::EventData : talk_base::MessageData
{
	int event;
	int error;
};

/* 3487 */
struct __cppobj cricket::TunnelContentDescription : cricket::ContentDescription
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > description;
};

/* 3488 */
struct std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *_Myval;
};

/* 3489 */
struct __cppobj sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>
{
	sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3491 */
struct sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *this, cricket::TunnelSessionClient *, buzz::Jid, std::basic_string<char,std::char_traits<char>,std::allocator<char> >, cricket::Session *);
	sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *this);
	sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3492 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3493 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> >
{
};

/* 3494 */
struct __cppobj std::_List_buy<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > >
{
};

/* 3495 */
struct __cppobj std::list<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> >
{
};

/* 3496 */
struct __cppobj sigslot::_signal_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3497 */
struct __cppobj sigslot::signal4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> : sigslot::_signal_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>
{
};

/* 3490 */
struct __cppobj cricket::TunnelSessionClient : cricket::TunnelSessionClientBase, sigslot::has_slots<sigslot::single_threaded>
{
	sigslot::signal4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> SignalIncomingTunnel;
};

/* 3498 */
struct __cppobj std::_Allocator_base<std::_List_node<cricket::PseudoTcp::SSegment,void *> >
{
};

/* 3499 */
struct __cppobj std::allocator<std::_List_node<cricket::PseudoTcp::SSegment,void *> > : std::_Allocator_base<std::_List_node<cricket::PseudoTcp::SSegment,void *> >
{
};

/* 3500 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<cricket::PseudoTcp::SSegment,void *> > >
{
};

/* 3501 */
struct __cppobj std::_Allocator_base<std::_List_node<cricket::PseudoTcp::RSegment,void *> >
{
};

/* 3502 */
struct __cppobj std::allocator<std::_List_node<cricket::PseudoTcp::RSegment,void *> > : std::_Allocator_base<std::_List_node<cricket::PseudoTcp::RSegment,void *> >
{
};

/* 3503 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<cricket::PseudoTcp::RSegment,void *> > >
{
};

/* 3504 */
struct __cppobj std::_Allocator_base<cricket::PseudoTcp::RSegment>
{
};

/* 3505 */
struct __cppobj std::allocator<cricket::PseudoTcp::RSegment> : std::_Allocator_base<cricket::PseudoTcp::RSegment>
{
};

/* 3506 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<cricket::PseudoTcp::RSegment,void *> > > : std::allocator<std::_List_node<cricket::PseudoTcp::RSegment,void *> >
{
};

/* 3507 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,cricket::PseudoTcp::RSegment,int,cricket::PseudoTcp::RSegment const *,cricket::PseudoTcp::RSegment const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3508 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,cricket::PseudoTcp::RSegment,int,cricket::PseudoTcp::RSegment const *,cricket::PseudoTcp::RSegment const &,std::_Iterator_base0>
{
	std::_List_node<cricket::PseudoTcp::RSegment,void *> *_Ptr;
};

/* 3509 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> >,std::_Iterator_base0>
{
};

/* 3510 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::RSegment> > >
{
};

/* 3511 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<cricket::PseudoTcp::SSegment,void *> > > : std::allocator<std::_List_node<cricket::PseudoTcp::SSegment,void *> >
{
};

/* 3512 */
struct __cppobj std::_Allocator_base<cricket::PseudoTcp::SSegment>
{
};

/* 3513 */
struct __cppobj std::allocator<cricket::PseudoTcp::SSegment> : std::_Allocator_base<cricket::PseudoTcp::SSegment>
{
};

/* 3514 */
struct __cppobj std::allocator_traits<std::allocator<cricket::ConnectionInfo> >
{
};

/* 3515 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> >
{
};

/* 3516 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> >
{
};

/* 3517 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> >
{
};

/* 3518 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3519 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3520 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3521 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > >
{
};

/* 3522 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3523 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 3524 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 3525 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > >
{
};

/* 3526 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3527 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3528 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3529 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *>
{
};

/* 3530 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,int,sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> * const *,sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3531 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,int,sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> * const *,sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3532 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3533 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > >
{
};

/* 3534 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3535 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 3536 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 3537 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 3538 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> >
{
};

/* 3539 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> >
{
};

/* 3540 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> >
{
};

/* 3541 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *>
{
};

/* 3542 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *>
{
};

/* 3543 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3544 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,int,sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> * const *,sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3545 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> >
{
};

/* 3546 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> > >
{
};

/* 3547 */
struct __cppobj std::_Allocator_base<cricket::TunnelSession *>
{
};

/* 3548 */
struct __cppobj std::allocator<cricket::TunnelSession *> : std::_Allocator_base<cricket::TunnelSession *>
{
};

/* 3549 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TunnelSession *> > : std::allocator<cricket::TunnelSession *>
{
};

/* 3550 */
struct __cppobj std::allocator_traits<std::allocator<cricket::TunnelSession *> >
{
};

/* 3551 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TunnelSession *> >::rebind<cricket::TunnelSession *>
{
};

/* 3552 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TunnelSession *> >::rebind<cricket::TunnelSession * *>
{
};

/* 3553 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ConnectionInfo> >::rebind<cricket::ConnectionInfo>
{
};

/* 3554 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ConnectionInfo> >::rebind<cricket::ConnectionInfo *>
{
};

/* 3555 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 3556 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3557 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::TunnelSession *,int,cricket::TunnelSession * const *,cricket::TunnelSession * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3558 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::TunnelSession *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::TunnelSession *,int,cricket::TunnelSession * const *,cricket::TunnelSession * const &,std::_Iterator_base0>
{
	cricket::TunnelSession **_Ptr;
};

/* 3559 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3560 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3561 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > >
{
};

/* 3562 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3563 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *,void *> >
{
};

/* 3564 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *>
{
};

/* 3565 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,int,sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> * const *,sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3566 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *>
{
};

/* 3567 */
struct __cppobj std::allocator<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *>
{
};

/* 3568 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> >
{
};

/* 3569 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::TunnelSession *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::TunnelSession *> > >
{
};

/* 3570 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *,void *> > >
{
};

/* 3571 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3572 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<cricket::PseudoTcp::SSegment> >,std::_Iterator_base0>
{
};

/* 3573 */
struct __cppobj std::initializer_list<cricket::PseudoTcp::SSegment>
{
	cricket::PseudoTcp::SSegment *_First;
	cricket::PseudoTcp::SSegment *_Last;
};

/* 3574 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded> *,void *> > >
{
};

/* 3575 */
struct __cppobj std::initializer_list<cricket::PseudoTcp::RSegment>
{
	cricket::PseudoTcp::RSegment *_First;
	cricket::PseudoTcp::RSegment *_Last;
};

/* 3576 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > >
{
};

/* 3577 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3578 */
struct __cppobj std::allocator<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *>
{
};

/* 3579 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> >
{
};

/* 3580 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> >
{
};

/* 3581 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> >
{
};

/* 3582 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded> *>
{
};

/* 3583 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> *,void *> > >
{
};

/* 3584 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TunnelSession,cricket::PseudoTcpChannel *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PseudoTcpChannel *,sigslot::single_threaded>
{
	cricket::TunnelSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TunnelSession *this, cricket::PseudoTcpChannel *);
};

/* 3585 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TunnelSession,cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded> : sigslot::_connection_base2<cricket::BaseSession *,enum cricket::BaseSession::State,sigslot::single_threaded>
{
	cricket::TunnelSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TunnelSession *this, cricket::BaseSession *, cricket::BaseSession::State);
};

/* 3586 */
struct addrinfo
{
	int ai_flags;
	int ai_family;
	int ai_socktype;
	int ai_protocol;
	unsigned int ai_addrlen;
	char *ai_canonname;
	sockaddr *ai_addr;
	addrinfo *ai_next;
};

/* 3587 */
struct _WSAPROTOCOLCHAIN
{
	int ChainLen;
	unsigned int ChainEntries[7];
};

/* 3588 */
struct _WSAPROTOCOL_INFOW
{
	unsigned int dwServiceFlags1;
	unsigned int dwServiceFlags2;
	unsigned int dwServiceFlags3;
	unsigned int dwServiceFlags4;
	unsigned int dwProviderFlags;
	_GUID ProviderId;
	unsigned int dwCatalogEntryId;
	_WSAPROTOCOLCHAIN ProtocolChain;
	int iVersion;
	int iAddressFamily;
	int iMaxSockAddr;
	int iMinSockAddr;
	int iSocketType;
	int iProtocol;
	int iProtocolMaxOffset;
	int iNetworkByteOrder;
	int iSecurityScheme;
	unsigned int dwMessageSize;
	unsigned int dwProviderReserved;
	wchar_t szProtocol[256];
};

/* 3589 */
struct talk_base::timeval
{
	int tv_sec;
	int tv_usec;
};

/* 3590 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::MessageQueue *> > : std::_Container_base0
{
	talk_base::MessageQueue **_Myfirst;
	talk_base::MessageQueue **_Mylast;
	talk_base::MessageQueue **_Myend;
};

/* 3591 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::MessageQueue *,std::allocator<talk_base::MessageQueue *> > > : std::_Vector_val<std::_Simple_types<talk_base::MessageQueue *> >
{
};

/* 3592 */
struct __cppobj std::vector<talk_base::MessageQueue *,std::allocator<talk_base::MessageQueue *> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::MessageQueue *,std::allocator<talk_base::MessageQueue *> > >
{
};

/* 3593 */
struct __cppobj talk_base::MessageQueueManager
{
	std::vector<talk_base::MessageQueue *,std::allocator<talk_base::MessageQueue *> > message_queues_;
	talk_base::CriticalSection crit_;
};

/* 3594 */
struct __cppobj sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded>
{
	sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3613 */
struct sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *this, talk_base::AsyncFile *);
	sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3598 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3599 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> >
{
};

/* 3600 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > >
{
};

/* 3601 */
struct __cppobj std::list<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> >
{
};

/* 3602 */
struct __cppobj sigslot::_signal_base1<talk_base::AsyncFile *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3603 */
struct __cppobj sigslot::signal1<talk_base::AsyncFile *,sigslot::single_threaded> : sigslot::_signal_base1<talk_base::AsyncFile *,sigslot::single_threaded>
{
};

/* 3607 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3608 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> >
{
};

/* 3609 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > >
{
};

/* 3610 */
struct __cppobj std::list<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> >
{
};

/* 3611 */
struct __cppobj sigslot::_signal_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3612 */
struct __cppobj sigslot::signal2<talk_base::AsyncFile *,int,sigslot::single_threaded> : sigslot::_signal_base2<talk_base::AsyncFile *,int,sigslot::single_threaded>
{
};

/* 3595 */
struct __cppobj talk_base::AsyncFile
{
	talk_base::AsyncFileVtbl *vfptr;
	sigslot::signal1<talk_base::AsyncFile *,sigslot::single_threaded> SignalReadEvent;
	sigslot::signal1<talk_base::AsyncFile *,sigslot::single_threaded> SignalWriteEvent;
	sigslot::signal2<talk_base::AsyncFile *,int,sigslot::single_threaded> SignalCloseEvent;
};

/* 3596 */
struct talk_base::AsyncFileVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::AsyncFile *this, unsigned int);
	bool (__thiscall *readable)(talk_base::AsyncFile *this);
	void (__thiscall *set_readable)(talk_base::AsyncFile *this, bool);
	bool (__thiscall *writable)(talk_base::AsyncFile *this);
	void (__thiscall *set_writable)(talk_base::AsyncFile *this, bool);
};

/* 3597 */
struct std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *_Myval;
};

/* 3604 */
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *_Myval;
};

/* 3605 */
struct __cppobj sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded>
{
	sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3606 */
struct sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *this, talk_base::AsyncFile *, int);
	sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *this);
	sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3614 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *>
{
};

/* 3615 */
struct __cppobj talk_base::Dispatcher
{
	talk_base::DispatcherVtbl *vfptr;
};

/* 3616 */
struct talk_base::DispatcherVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::Dispatcher *this, unsigned int);
	unsigned int (__thiscall *GetRequestedEvents)(talk_base::Dispatcher *this);
	void (__thiscall *OnPreEvent)(talk_base::Dispatcher *this, unsigned int);
	void (__thiscall *OnEvent)(talk_base::Dispatcher *this, unsigned int, int);
	void *(__thiscall *GetWSAEvent)(talk_base::Dispatcher *this);
	unsigned int (__thiscall *GetSocket)(talk_base::Dispatcher *this);
	bool (__thiscall *CheckSignalClose)(talk_base::Dispatcher *this);
};

/* 3617 */
struct __cppobj std::_Allocator_base<talk_base::Dispatcher *>
{
};

/* 3618 */
struct __cppobj std::allocator<talk_base::Dispatcher *> : std::_Allocator_base<talk_base::Dispatcher *>
{
};

/* 3619 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::Dispatcher *> >
{
};

/* 3620 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::Dispatcher *> > : std::_Container_base0
{
	talk_base::Dispatcher **_Myfirst;
	talk_base::Dispatcher **_Mylast;
	talk_base::Dispatcher **_Myend;
};

/* 3621 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,talk_base::Dispatcher *,int,talk_base::Dispatcher * const *,talk_base::Dispatcher * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3622 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::Dispatcher *> > > : std::_Iterator012<std::random_access_iterator_tag,talk_base::Dispatcher *,int,talk_base::Dispatcher * const *,talk_base::Dispatcher * const &,std::_Iterator_base0>
{
	talk_base::Dispatcher **_Ptr;
};

/* 3623 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::Dispatcher *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::Dispatcher *> > >
{
};

/* 3624 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Dispatcher *> > : std::allocator<talk_base::Dispatcher *>
{
};

/* 3625 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Dispatcher *> >::rebind<talk_base::Dispatcher *>
{
};

/* 3626 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Dispatcher *> >::rebind<talk_base::Dispatcher * *>
{
};

/* 3627 */
struct __cppobj std::allocator_traits<std::allocator<unsigned int *> >
{
};

/* 3628 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::Dispatcher *,std::allocator<talk_base::Dispatcher *> > > : std::_Vector_val<std::_Simple_types<talk_base::Dispatcher *> >
{
};

/* 3629 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *>
{
};

/* 3630 */
struct __cppobj std::allocator<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *>
{
};

/* 3631 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> >
{
};

/* 3632 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> >
{
};

/* 3633 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> >
{
};

/* 3634 */
struct __cppobj std::_Allocator_base<talk_base::MessageQueue *>
{
};

/* 3635 */
struct __cppobj std::allocator<talk_base::MessageQueue *> : std::_Allocator_base<talk_base::MessageQueue *>
{
};

/* 3636 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> >
{
};

/* 3637 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> >
{
};

/* 3638 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> >
{
};

/* 3639 */
struct __cppobj std::allocator<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *>
{
};

/* 3640 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::MessageQueue *> > : std::allocator<talk_base::MessageQueue *>
{
};

/* 3641 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::MessageQueue *> >
{
};

/* 3642 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::MessageQueue *> >::rebind<talk_base::MessageQueue *>
{
};

/* 3643 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::MessageQueue *> >::rebind<talk_base::MessageQueue * *>
{
};

/* 3644 */
struct __cppobj std::vector<talk_base::Dispatcher *,std::allocator<talk_base::Dispatcher *> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::Dispatcher *,std::allocator<talk_base::Dispatcher *> > >
{
};

/* 3645 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,talk_base::MessageQueue *,int,talk_base::MessageQueue * const *,talk_base::MessageQueue * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3646 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::MessageQueue *> > > : std::_Iterator012<std::random_access_iterator_tag,talk_base::MessageQueue *,int,talk_base::MessageQueue * const *,talk_base::MessageQueue * const &,std::_Iterator_base0>
{
	talk_base::MessageQueue **_Ptr;
};

/* 3647 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<talk_base::MessageQueue *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<talk_base::MessageQueue *> > >
{
};

/* 3648 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3649 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,int,sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> * const *,sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3650 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3651 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> > >
{
};

/* 3652 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3653 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3654 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3655 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned int *> > : std::_Container_base0
{
	unsigned int **_Myfirst;
	unsigned int **_Mylast;
	unsigned int **_Myend;
};

/* 3656 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<unsigned int *,std::allocator<unsigned int *> > > : std::_Vector_val<std::_Simple_types<unsigned int *> >
{
};

/* 3657 */
struct __cppobj std::pointer_traits<talk_base::Message *>
{
};

/* 3658 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3659 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *> > >
{
};

/* 3660 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int *> >::rebind<unsigned int *>
{
};

/* 3661 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int *> >::rebind<unsigned int * *>
{
};

/* 3662 */
struct __cppobj std::pointer_traits<talk_base::DelayedMessage *>
{
};

/* 3663 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<talk_base::AsyncFile *,sigslot::single_threaded> *,void *> > >
{
};

/* 3664 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3665 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncFile *,int,sigslot::single_threaded> *> > >
{
};

/* 3666 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,unsigned int *,int,unsigned int * const *,unsigned int * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3667 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int *> > > : std::_Iterator012<std::random_access_iterator_tag,unsigned int *,int,unsigned int * const *,unsigned int * const &,std::_Iterator_base0>
{
	unsigned int **_Ptr;
};

/* 3668 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int *> > >
{
};

/* 3669 */
struct __cppobj std::vector<unsigned int *,std::allocator<unsigned int *> > : std::_Vector_alloc<0,std::_Vec_base_types<unsigned int *,std::allocator<unsigned int *> > >
{
};

/* 3670 */
struct __cppobj talk_base::PhysicalSocketServer : talk_base::SocketServer
{
	std::vector<talk_base::Dispatcher *,std::allocator<talk_base::Dispatcher *> > dispatchers_;
	std::vector<unsigned int *,std::allocator<unsigned int *> > iterators_;
	talk_base::Signaler *signal_wakeup_;
	talk_base::CriticalSection crit_;
	bool fWait_;
	unsigned int last_tick_tracked_;
	int last_tick_dispatch_count_;
	void *socket_ev_;
};

/* 3671 */
struct __cppobj talk_base::EventDispatcher : talk_base::Dispatcher
{
	talk_base::PhysicalSocketServer *ss_;
	void *hev_;
};

/* 3672 */
struct __cppobj talk_base::Signaler : talk_base::EventDispatcher
{
	bool *pf_;
};

/* 3673 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,buzz::QName,int,buzz::QName const *,buzz::QName const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3674 */
struct __cppobj std::_Tree_node<buzz::QName,void *>
{
	std::_Tree_node<buzz::QName,void *> *_Left;
	std::_Tree_node<buzz::QName,void *> *_Parent;
	std::_Tree_node<buzz::QName,void *> *_Right;
	char _Color;
	char _Isnil;
	buzz::QName _Myval;
};

/* 3675 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,buzz::QName,int,buzz::QName const *,buzz::QName const &,std::_Iterator_base0>
{
	std::_Tree_node<buzz::QName,void *> *_Ptr;
};

/* 3676 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> >,std::_Iterator_base0>
{
};

/* 3677 */
struct __cppobj std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > > >
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > > first;
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > > second;
};

/* 3678 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<buzz::QName> > : std::_Container_base0
{
	std::_Tree_node<buzz::QName,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3679 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<buzz::QName,std::allocator<buzz::QName> > > : std::_Tree_val<std::_Tree_simple_types<buzz::QName> >
{
};

/* 3680 */
struct __cppobj std::_Tree_buy<buzz::QName,std::allocator<buzz::QName> > : std::_Tree_alloc<0,std::_Tree_base_types<buzz::QName,std::allocator<buzz::QName> > >
{
};

/* 3681 */
struct __cppobj std::_Tree_comp<0,std::_Tset_traits<buzz::QName,std::less<buzz::QName>,std::allocator<buzz::QName>,0> > : std::_Tree_buy<buzz::QName,std::allocator<buzz::QName> >
{
};

/* 3682 */
struct __cppobj std::_Tree<std::_Tset_traits<buzz::QName,std::less<buzz::QName>,std::allocator<buzz::QName>,0> > : std::_Tree_comp<0,std::_Tset_traits<buzz::QName,std::less<buzz::QName>,std::allocator<buzz::QName>,0> >
{
};

/* 3683 */
struct __cppobj std::binary_function<buzz::QName,buzz::QName,bool>
{
};

/* 3684 */
struct __cppobj std::less<buzz::QName> : std::binary_function<buzz::QName,buzz::QName,bool>
{
};

/* 3685 */
struct __cppobj std::_Allocator_base<std::_Tree_node<buzz::QName,void *> >
{
};

/* 3686 */
struct __cppobj std::allocator<std::_Tree_node<buzz::QName,void *> > : std::_Allocator_base<std::_Tree_node<buzz::QName,void *> >
{
};

/* 3687 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<buzz::QName,void *> > > : std::allocator<std::_Tree_node<buzz::QName,void *> >
{
};

/* 3688 */
struct __cppobj std::_Allocator_base<buzz::QName>
{
};

/* 3689 */
struct __cppobj std::allocator<buzz::QName> : std::_Allocator_base<buzz::QName>
{
};

/* 3690 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > >,bool>
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<buzz::QName> > > first;
	bool second;
};

/* 3691 */
struct __cppobj std::initializer_list<buzz::QName>
{
	buzz::QName *_First;
	buzz::QName *_Last;
};

/* 3692 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,buzz::XmlElement *,int,buzz::XmlElement * const *,buzz::XmlElement * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3693 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<buzz::XmlElement *> > > : std::_Iterator012<std::random_access_iterator_tag,buzz::XmlElement *,int,buzz::XmlElement * const *,buzz::XmlElement * const &,std::_Iterator_base0>
{
	buzz::XmlElement **_Ptr;
};

/* 3694 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<buzz::XmlElement *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<buzz::XmlElement *> > >
{
};

/* 3695 */
struct __cppobj std::_Tset_traits<buzz::QName,std::less<buzz::QName>,std::allocator<buzz::QName>,0>
{
};

/* 3696 */
struct __cppobj std::set<buzz::QName,std::less<buzz::QName>,std::allocator<buzz::QName> > : std::_Tree<std::_Tset_traits<buzz::QName,std::less<buzz::QName>,std::allocator<buzz::QName>,0> >
{
};

/* 3697 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<buzz::QName,void *> > >
{
};

/* 3698 */
struct __cppobj buzz::XmlPrinterImpl
{
	std::basic_ostream<char,std::char_traits<char> > *pout_;
	buzz::XmlnsStack *ns_stack_;
};

/* 3699 */
struct _CRYPTOAPI_BLOB
{
	unsigned int cbData;
	char *pbData;
};

/* 3700 */
struct _CRYPT_ALGORITHM_IDENTIFIER
{
	char *pszObjId;
	_CRYPTOAPI_BLOB Parameters;
};

/* 3701 */
struct _CRYPT_BIT_BLOB
{
	unsigned int cbData;
	char *pbData;
	unsigned int cUnusedBits;
};

/* 3702 */
struct _CERT_PUBLIC_KEY_INFO
{
	_CRYPT_ALGORITHM_IDENTIFIER Algorithm;
	_CRYPT_BIT_BLOB PublicKey;
};

/* 3703 */
struct _CERT_EXTENSION
{
	char *pszObjId;
	int fCritical;
	_CRYPTOAPI_BLOB Value;
};

/* 3704 */
struct _CERT_INFO
{
	unsigned int dwVersion;
	_CRYPTOAPI_BLOB SerialNumber;
	_CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
	_CRYPTOAPI_BLOB Issuer;
	_FILETIME NotBefore;
	_FILETIME NotAfter;
	_CRYPTOAPI_BLOB Subject;
	_CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
	_CRYPT_BIT_BLOB IssuerUniqueId;
	_CRYPT_BIT_BLOB SubjectUniqueId;
	unsigned int cExtension;
	_CERT_EXTENSION *rgExtension;
};

/* 3705 */
struct _CERT_CONTEXT
{
	unsigned int dwCertEncodingType;
	char *pbCertEncoded;
	unsigned int cbCertEncoded;
	_CERT_INFO *pCertInfo;
	void *hCertStore;
};

/* 3706 */
union $598610CC988E402B9A82B84B75BDDF21
{
	unsigned int dwValue;
	unsigned int Algid;
	unsigned int dwLength;
};

/* 3707 */
struct _CRYPT_OID_INFO
{
	unsigned int cbSize;
	const char *pszOID;
	const wchar_t *pwszName;
	unsigned int dwGroupId;
	$598610CC988E402B9A82B84B75BDDF21 ___u4;
	_CRYPTOAPI_BLOB ExtraInfo;
};

/* 3708 */
struct _SCHANNEL_CRED
{
	unsigned int dwVersion;
	unsigned int cCreds;
	_CERT_CONTEXT **paCred;
	void *hRootStore;
	unsigned int cMappers;
	_HMAPPER **aphMappers;
	unsigned int cSupportedAlgs;
	unsigned int *palgSupportedAlgs;
	unsigned int grbitEnabledProtocols;
	unsigned int dwMinimumCipherStrength;
	unsigned int dwMaximumCipherStrength;
	unsigned int dwSessionLifespan;
	unsigned int dwFlags;
	unsigned int dwCredFormat;
};

/* 3709 */
struct _SecPkgCred_SupportedAlgs
{
	unsigned int cSupportedAlgs;
	unsigned int *palgSupportedAlgs;
};

/* 3710 */
struct __cppobj talk_base::SecBufferBundleBase
{
};

/* 3711 */
struct __cppobj talk_base::CSecBufferBase : _SecBuffer
{
};

/* 3712 */
struct __cppobj talk_base::CSecBuffer<&talk_base::CSecBufferBase::FreeNone> : talk_base::CSecBufferBase
{
};

/* 3713 */
struct __cppobj talk_base::CSecBufferBundle<1,&talk_base::CSecBufferBase::FreeNone> : talk_base::SecBufferBundleBase
{
	_SecBufferDesc desc_;
	talk_base::CSecBuffer<&talk_base::CSecBufferBase::FreeNone> buffers_[1];
};

/* 3714 */
struct __cppobj talk_base::CSecBufferBundle<4,&talk_base::CSecBufferBase::FreeNone> : talk_base::SecBufferBundleBase
{
	_SecBufferDesc desc_;
	talk_base::CSecBuffer<&talk_base::CSecBufferBase::FreeNone> buffers_[4];
};

/* 3715 */
struct __cppobj talk_base::CSecBufferBundle<2,&talk_base::CSecBufferBase::FreeNone> : talk_base::SecBufferBundleBase
{
	_SecBufferDesc desc_;
	talk_base::CSecBuffer<&talk_base::CSecBufferBase::FreeNone> buffers_[2];
};

/* 3716 */
struct __cppobj talk_base::CSecBuffer<&talk_base::CSecBufferBase::FreeSSPI> : talk_base::CSecBufferBase
{
};

/* 3717 */
struct __cppobj talk_base::CSecBufferBundle<2,&talk_base::CSecBufferBase::FreeSSPI> : talk_base::SecBufferBundleBase
{
	_SecBufferDesc desc_;
	talk_base::CSecBuffer<&talk_base::CSecBufferBase::FreeSSPI> buffers_[2];
};

/* 3718 */
struct _SecPkgCred_CipherStrengths
{
	unsigned int dwMinimumCipherStrength;
	unsigned int dwMaximumCipherStrength;
};

/* 3719 */
struct _SID_AND_ATTRIBUTES
{
	void *Sid;
	unsigned int Attributes;
};

/* 3720 */
struct _TOKEN_MANDATORY_LABEL
{
	_SID_AND_ATTRIBUTES Label;
};

/* 3721 */
struct _SYSTEMTIME
{
	unsigned __int16 wYear;
	unsigned __int16 wMonth;
	unsigned __int16 wDayOfWeek;
	unsigned __int16 wDay;
	unsigned __int16 wHour;
	unsigned __int16 wMinute;
	unsigned __int16 wSecond;
	unsigned __int16 wMilliseconds;
};

/* 3722 */
struct __cppobj cricket::P2PTransportParser : cricket::TransportParser
{
};

/* 3723 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >
{
};

/* 3724 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> >
{
};

/* 3725 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> >
{
};

/* 3726 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> > >
{
};

/* 3727 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >
{
};

/* 3728 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3729 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> *_Ptr;
};

/* 3730 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > >,std::_Iterator_base0>
{
};

/* 3731 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > >
{
};

/* 3732 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> >
{
};

/* 3733 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> >
{
};

/* 3734 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> >
{
};

/* 3735 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *>,void *> > >
{
};

/* 3736 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >
{
};

/* 3737 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >
{
};

/* 3738 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::TransportParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >,0>
{
};

/* 3739 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> >
{
};

/* 3740 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> >
{
};

/* 3741 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >
{
};

/* 3742 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >
{
};

/* 3743 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> >
{
};

/* 3744 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3745 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> *_Ptr;
};

/* 3746 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > >,std::_Iterator_base0>
{
};

/* 3747 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > >
{
};

/* 3748 */
struct __cppobj std::initializer_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >
{
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> *_First;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> *_Last;
};

/* 3749 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *>,void *> >
{
};

/* 3750 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3751 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> *_Ptr;
};

/* 3752 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > >,std::_Iterator_base0>
{
};

/* 3753 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > >
{
};

/* 3754 */
struct __cppobj std::initializer_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >
{
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> *_First;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> *_Last;
};

/* 3755 */
struct __cppobj std::pointer_traits<cricket::ContentInfo const *>
{
};

/* 3756 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::CandidateTranslator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> >,0>
{
};

/* 3757 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> const *>
{
};

/* 3758 */
struct __cppobj std::initializer_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> >
{
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> *_First;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> *_Last;
};

/* 3759 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> const *>
{
};

/* 3760 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> > > > first;
	bool second;
};

/* 3761 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> > > > first;
	bool second;
};

/* 3762 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> > > > first;
	bool second;
};

/* 3763 */
struct __cppobj std::pointer_traits<cricket::TransportInfo const *>
{
};

/* 3764 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *>,void *> > >
{
};

/* 3765 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::ContentParser *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> >,0>
{
};

/* 3766 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> const *>
{
};

/* 3767 */
struct __cppobj cricket::StreamInterfaceChannel : talk_base::StreamInterface, sigslot::has_slots<sigslot::single_threaded>
{
	cricket::TransportChannel *channel_;
	talk_base::StreamState state_;
	talk_base::FifoBuffer fifo_;
};

/* 3768 */
struct __cppobj cricket::P2PTransport : cricket::Transport
{
};

/* 3769 */
struct __cppobj talk_base::scoped_ptr<talk_base::SSLStreamAdapter>
{
	talk_base::SSLStreamAdapter *ptr;
};

/* 3770 */
struct __cppobj cricket::DtlsTransportChannelWrapper : cricket::TransportChannelImpl
{
	cricket::Transport *transport_;
	talk_base::Thread *worker_thread_;
	cricket::TransportChannelImpl *channel_;
	talk_base::scoped_ptr<talk_base::SSLStreamAdapter> dtls_;
	cricket::StreamInterfaceChannel *downward_;
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > srtp_ciphers_;
	cricket::DtlsTransportChannelWrapper::State dtls_state_;
	talk_base::SSLIdentity *local_identity_;
	talk_base::SSLRole ssl_role_;
	talk_base::Buffer remote_fingerprint_value_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > remote_fingerprint_algorithm_;
};

/* 3771 */
struct __cppobj __declspec(align(8)) cricket::DtlsTransport<cricket::P2PTransport> : cricket::P2PTransport
{
	talk_base::SSLIdentity *identity_;
	talk_base::SSLRole secure_role_;
	talk_base::scoped_ptr<talk_base::SSLFingerprint> remote_fingerprint_;
};

/* 3772 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3773 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3774 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3775 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > >
{
};

/* 3776 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3777 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> >
{
};

/* 3778 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> *>
{
};

/* 3779 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3780 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3781 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3782 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> >
{
};

/* 3783 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> >
{
};

/* 3784 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 3785 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 3786 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> >
{
};

/* 3787 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *,void *> > >
{
};

/* 3788 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> >
{
};

/* 3789 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> > >
{
};

/* 3790 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> > > : std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats>,void *> >
{
};

/* 3791 */
struct __cppobj std::_Tuple_val<int const &>
{
	const int *_Val;
};

/* 3792 */
struct __cppobj std::tuple<int const &> : std::tuple<>
{
	std::_Tuple_val<int const &> _Myfirst;
};

/* 3793 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *>
{
};

/* 3794 */
struct __cppobj std::pointer_traits<std::pair<int const ,cricket::TransportChannelProxy *> *>
{
};

/* 3795 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportParser *> *>
{
};

/* 3796 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::ContentParser *> *>
{
};

/* 3797 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> const *>
{
};

/* 3798 */
struct __cppobj std::allocator_traits<std::allocator<cricket::TransportChannelStats> >
{
};

/* 3799 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportChannelStats> >::rebind<cricket::TransportChannelStats>
{
};

/* 3800 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportChannelStats> >::rebind<cricket::TransportChannelStats *>
{
};

/* 3801 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> > >
{
};

/* 3802 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 3803 */
struct __cppobj std::allocator<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *>
{
};

/* 3804 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *>
{
};

/* 3805 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded> *,void *> >
{
};

/* 3806 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportProxy *> *>
{
};

/* 3807 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > >
{
};

/* 3808 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3809 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::CandidateTranslator *> *>
{
};

/* 3810 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::TransportStats> > > > first;
	bool second;
};

/* 3811 */
struct __cppobj std::pointer_traits<std::pair<int const ,cricket::TransportChannelProxy *> const *>
{
};

/* 3812 */
struct __cppobj std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &&>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Val;
};

/* 3813 */
struct __cppobj std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &&> : std::tuple<>
{
	std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &&> _Myfirst;
};

/* 3814 */
struct __cppobj std::move_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::TransportInfo> > > >
{
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::TransportInfo> > > current;
};

/* 3815 */
struct __cppobj std::pointer_traits<cricket::Candidate const *>
{
};

/* 3816 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::StreamInterfaceChannel,talk_base::StreamInterface *,int,int,sigslot::single_threaded> : sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>
{
	cricket::StreamInterfaceChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::StreamInterfaceChannel *this, talk_base::StreamInterface *, int, int);
};

/* 3817 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::BaseSession,cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportProxy *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	cricket::BaseSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BaseSession *this, cricket::TransportProxy *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
};

/* 3818 */
struct __cppobj __declspec(align(8)) sigslot::_connection6<cricket::BaseSession,cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_connection_base6<cricket::Transport *,buzz::XmlElement const *,buzz::QName const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,buzz::XmlElement const *,sigslot::single_threaded>
{
	cricket::BaseSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BaseSession *this, cricket::Transport *, buzz::XmlElement *, buzz::QName *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, buzz::XmlElement *);
};

/* 3819 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::BaseSession,cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base3<cricket::Transport *,int,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::BaseSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BaseSession *this, cricket::Transport *, int, cricket::Candidate *);
};

/* 3820 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::BaseSession,cricket::Transport *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::Transport *,sigslot::single_threaded>
{
	cricket::BaseSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BaseSession *this, cricket::Transport *);
};

/* 3821 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<cricket::BaseSession,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	cricket::BaseSession *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::BaseSession *this);
};

/* 3822 */
struct __cppobj buzz::XmppIqEntry
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > id_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > to_;
	buzz::XmppEngine *const engine_;
	buzz::XmppIqHandler *const iq_handler_;
};

/* 3823 */
struct __cppobj std::_Vector_val<std::_Simple_types<buzz::XmppIqEntry *> > : std::_Container_base0
{
	buzz::XmppIqEntry **_Myfirst;
	buzz::XmppIqEntry **_Mylast;
	buzz::XmppIqEntry **_Myend;
};

/* 3824 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<buzz::XmppIqEntry *,std::allocator<buzz::XmppIqEntry *> > > : std::_Vector_val<std::_Simple_types<buzz::XmppIqEntry *> >
{
};

/* 3825 */
struct __cppobj std::_Allocator_base<buzz::XmppIqEntry *>
{
};

/* 3826 */
struct __cppobj std::allocator<buzz::XmppIqEntry *> : std::_Allocator_base<buzz::XmppIqEntry *>
{
};

/* 3827 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmppIqEntry *> > : std::allocator<buzz::XmppIqEntry *>
{
};

/* 3828 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,buzz::XmppStanzaHandler *,int,buzz::XmppStanzaHandler * const *,buzz::XmppStanzaHandler * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3829 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<buzz::XmppStanzaHandler *> > > : std::_Iterator012<std::random_access_iterator_tag,buzz::XmppStanzaHandler *,int,buzz::XmppStanzaHandler * const *,buzz::XmppStanzaHandler * const &,std::_Iterator_base0>
{
	buzz::XmppStanzaHandler **_Ptr;
};

/* 3830 */
struct __cppobj std::_Allocator_base<buzz::XmppStanzaHandler *>
{
};

/* 3831 */
struct __cppobj std::allocator<buzz::XmppStanzaHandler *> : std::_Allocator_base<buzz::XmppStanzaHandler *>
{
};

/* 3832 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmppStanzaHandler *> > : std::allocator<buzz::XmppStanzaHandler *>
{
};

/* 3833 */
struct __cppobj std::allocator_traits<std::allocator<buzz::XmppStanzaHandler *> >
{
};

/* 3834 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmppStanzaHandler *> >::rebind<buzz::XmppStanzaHandler *>
{
};

/* 3835 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmppStanzaHandler *> >::rebind<buzz::XmppStanzaHandler * *>
{
};

/* 3836 */
struct __cppobj std::allocator_traits<std::allocator<buzz::XmppIqEntry *> >
{
};

/* 3837 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmppIqEntry *> >::rebind<buzz::XmppIqEntry *>
{
};

/* 3838 */
struct __cppobj std::_Wrap_alloc<std::allocator<buzz::XmppIqEntry *> >::rebind<buzz::XmppIqEntry * *>
{
};

/* 3839 */
struct __cppobj std::vector<buzz::XmppIqEntry *,std::allocator<buzz::XmppIqEntry *> > : std::_Vector_alloc<0,std::_Vec_base_types<buzz::XmppIqEntry *,std::allocator<buzz::XmppIqEntry *> > >
{
};

/* 3840 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,buzz::XmppIqEntry *,int,buzz::XmppIqEntry * const *,buzz::XmppIqEntry * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3841 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<buzz::XmppIqEntry *> > > : std::_Iterator012<std::random_access_iterator_tag,buzz::XmppIqEntry *,int,buzz::XmppIqEntry * const *,buzz::XmppIqEntry * const &,std::_Iterator_base0>
{
	buzz::XmppIqEntry **_Ptr;
};

/* 3842 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<buzz::XmppIqEntry *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<buzz::XmppIqEntry *> > >
{
};

/* 3843 */
struct __cppobj std::_Vector_val<std::_Simple_types<buzz::XmppStanzaHandler *> > : std::_Container_base0
{
	buzz::XmppStanzaHandler **_Myfirst;
	buzz::XmppStanzaHandler **_Mylast;
	buzz::XmppStanzaHandler **_Myend;
};

/* 3844 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<buzz::XmppStanzaHandler *,std::allocator<buzz::XmppStanzaHandler *> > > : std::_Vector_val<std::_Simple_types<buzz::XmppStanzaHandler *> >
{
};

/* 3845 */
struct __cppobj std::vector<buzz::XmppStanzaHandler *,std::allocator<buzz::XmppStanzaHandler *> > : std::_Vector_alloc<0,std::_Vec_base_types<buzz::XmppStanzaHandler *,std::allocator<buzz::XmppStanzaHandler *> > >
{
};

/* 3846 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<buzz::XmppStanzaHandler *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<buzz::XmppStanzaHandler *> > >
{
};

/* 3847 */
struct __cppobj buzz::XmppStanzaParseHandler
{
	buzz::XmppStanzaParseHandlerVtbl *vfptr;
};

/* 3848 */
struct buzz::XmppStanzaParseHandlerVtbl
{
	void *(__thiscall *__vecDelDtor)(buzz::XmppStanzaParseHandler *this, unsigned int);
	void (__thiscall *StartStream)(buzz::XmppStanzaParseHandler *this, buzz::XmlElement *);
	void (__thiscall *Stanza)(buzz::XmppStanzaParseHandler *this, buzz::XmlElement *);
	void (__thiscall *EndStream)(buzz::XmppStanzaParseHandler *this);
	void (__thiscall *XmlError)(buzz::XmppStanzaParseHandler *this);
};

/* 3850 */
struct __cppobj buzz::XmppStanzaParser::ParseHandler : buzz::XmlParseHandler
{
	buzz::XmppStanzaParser *const outer_;
};

/* 3849 */
struct __cppobj buzz::XmppStanzaParser
{
	buzz::XmppStanzaParseHandler *psph_;
	buzz::XmppStanzaParser::ParseHandler innerHandler_;
	buzz::XmlParser parser_;
	int depth_;
	buzz::XmlBuilder builder_;
};

/* 3852 */
struct __cppobj buzz::XmppEngineImpl::StanzaParseHandler : buzz::XmppStanzaParseHandler
{
	buzz::XmppEngineImpl *const outer_;
};

/* 3855 */
struct __cppobj talk_base::scoped_ptr<buzz::XmppLoginTask>
{
	buzz::XmppLoginTask *ptr;
};

/* 3856 */
struct __cppobj talk_base::scoped_ptr<std::vector<buzz::XmppStanzaHandler *,std::allocator<buzz::XmppStanzaHandler *> > >
{
	std::vector<buzz::XmppStanzaHandler *,std::allocator<buzz::XmppStanzaHandler *> > *ptr;
};

/* 3857 */
struct __cppobj talk_base::scoped_ptr<std::vector<buzz::XmppIqEntry *,std::allocator<buzz::XmppIqEntry *> > >
{
	std::vector<buzz::XmppIqEntry *,std::allocator<buzz::XmppIqEntry *> > *ptr;
};

/* 3858 */
struct __cppobj talk_base::scoped_ptr<buzz::SaslHandler>
{
	buzz::SaslHandler *ptr;
};

/* 3859 */
struct __cppobj talk_base::scoped_ptr<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > >
{
	std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > *ptr;
};

/* 3851 */
struct __cppobj buzz::XmppEngineImpl : buzz::XmppEngine
{
	buzz::XmppEngineImpl::StanzaParseHandler stanza_parse_handler_;
	buzz::XmppStanzaParser stanza_parser_;
	int engine_entered_;
	buzz::Jid user_jid_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > password_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > requested_resource_;
	buzz::TlsOptions tls_option_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > tls_server_hostname_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > tls_server_domain_;
	talk_base::scoped_ptr<buzz::XmppLoginTask> login_task_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > lang_;
	int next_id_;
	buzz::Jid bound_jid_;
	buzz::XmppEngine::State state_;
	bool encrypted_;
	buzz::XmppEngine::Error error_code_;
	int subcode_;
	talk_base::scoped_ptr<buzz::XmlElement> stream_error_;
	bool raised_reset_;
	buzz::XmppOutputHandler *output_handler_;
	buzz::XmppSessionHandler *session_handler_;
	talk_base::SocketAddress address_;
	buzz::XmlnsStack xmlns_stack_;
	talk_base::scoped_ptr<std::vector<buzz::XmppStanzaHandler *,std::allocator<buzz::XmppStanzaHandler *> > > stanza_handlers_[6];
	talk_base::scoped_ptr<std::vector<buzz::XmppIqEntry *,std::allocator<buzz::XmppIqEntry *> > > iq_entries_;
	talk_base::scoped_ptr<buzz::SaslHandler> sasl_handler_;
	talk_base::scoped_ptr<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > > output_;
};

/* 3853 */
struct __cppobj talk_base::scoped_ptr<buzz::SaslMechanism>
{
	buzz::SaslMechanism *ptr;
};

/* 3854 */
struct __cppobj buzz::XmppLoginTask
{
	buzz::XmppEngineImpl *pctx_;
	bool authNeeded_;
	bool allowNonGoogleLogin_;
	buzz::XmppLoginTask::LoginTaskState state_;
	buzz::XmlElement *pelStanza_;
	bool isStart_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > iqId_;
	talk_base::scoped_ptr<buzz::XmlElement> pelFeatures_;
	buzz::Jid fullJid_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > streamId_;
	talk_base::scoped_ptr<std::vector<buzz::XmlElement *,std::allocator<buzz::XmlElement *> > > pvecQueuedStanzas_;
	talk_base::scoped_ptr<buzz::SaslMechanism> sasl_mech_;
};

/* 3860 */
struct __cppobj buzz::XmppEngineImpl::EnterExit
{
	buzz::XmppEngineImpl *engine_;
	buzz::XmppEngine::State state_;
	buzz::XmppEngine::Error error_;
};

/* 3861 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<XmppSocket,talk_base::AsyncSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>
{
	XmppSocket *m_pobject;
	void (__thiscall *m_pmemfun)(XmppSocket *this, talk_base::AsyncSocket *);
};

/* 3862 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<XmppSocket,talk_base::AsyncSocket *,int,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>
{
	XmppSocket *m_pobject;
	void (__thiscall *m_pmemfun)(XmppSocket *this, talk_base::AsyncSocket *, int);
};

/* 3863 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<XmppPump,enum buzz::XmppEngine::State,sigslot::single_threaded> : sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>
{
	XmppPump *m_pobject;
	void (__thiscall *m_pmemfun)(XmppPump *this, buzz::XmppEngine::State);
};

/* 3864 */
struct __cppobj buzz::SaslAnonymousMechanism : buzz::SaslMechanism
{
};

/* 3865 */
struct __cppobj buzz::SaslCookieMechanism : buzz::SaslMechanism
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > mechanism_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > username_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > cookie_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > token_service_;
};

/* 3866 */
struct __cppobj std::pointer_traits<cricket::TCPPort::Incoming *>
{
};

/* 3867 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::TCPConnection,talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::TCPConnection *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPConnection *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
};

/* 3868 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TCPConnection,talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>
{
	cricket::TCPConnection *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPConnection *this, talk_base::AsyncPacketSocket *, int);
};

/* 3869 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TCPConnection,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	cricket::TCPConnection *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPConnection *this, talk_base::AsyncPacketSocket *);
};

/* 3870 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TCPPort,talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::TCPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPPort *this, talk_base::AsyncPacketSocket *, talk_base::SocketAddress *);
};

/* 3871 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TCPPort,talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	cricket::TCPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPPort *this, talk_base::AsyncPacketSocket *, talk_base::AsyncPacketSocket *);
};

/* 3872 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::TCPPort,talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::TCPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPPort *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
};

/* 3873 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TCPPort,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	cricket::TCPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TCPPort *this, talk_base::AsyncPacketSocket *);
};

/* 3874 */
struct __cppobj std::_Tuple_val<talk_base::SocketAddress const &>
{
	talk_base::SocketAddress *_Val;
};

/* 3875 */
struct __cppobj std::tuple<talk_base::SocketAddress const &> : std::tuple<>
{
	std::_Tuple_val<talk_base::SocketAddress const &> _Myfirst;
};

/* 3876 */
struct __cppobj std::pointer_traits<std::pair<talk_base::SocketAddress const ,cricket::Connection *> *>
{
};

/* 3877 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::Port,cricket::Connection *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>
{
	cricket::Port *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::Port *this, cricket::Connection *);
};

/* 3878 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::Connection,void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> : sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>
{
	cricket::Connection *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::Connection *this, const void *, unsigned int, cricket::StunRequest *);
};

/* 3879 */
struct __cppobj talk_base::scoped_ptr<cricket::IceMessage>
{
	cricket::IceMessage *ptr;
};

/* 3880 */
struct __cppobj cricket::TurnCreatePermissionRequest : cricket::StunRequest, sigslot::has_slots<sigslot::single_threaded>
{
	cricket::TurnPort *port_;
	cricket::TurnEntry *entry_;
	talk_base::SocketAddress ext_addr_;
};

/* 3881 */
struct __cppobj cricket::TurnRefreshRequest : cricket::StunRequest
{
	cricket::TurnPort *port_;
};

/* 3882 */
struct __cppobj cricket::TurnAllocateRequest : cricket::StunRequest
{
	cricket::TurnPort *port_;
};

/* 3883 */
struct __cppobj cricket::TurnChannelBindRequest : cricket::StunRequest, sigslot::has_slots<sigslot::single_threaded>
{
	cricket::TurnPort *port_;
	cricket::TurnEntry *entry_;
	int channel_id_;
	talk_base::SocketAddress ext_addr_;
};

/* 3884 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> >
{
};

/* 3885 */
struct __cppobj std::binary_function<cricket::TurnEntry *,int,bool>
{
};

/* 3886 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *>
{
};

/* 3887 */
struct __cppobj std::unary_function<cricket::TurnEntry *,bool>
{
};

/* 3888 */
struct __cppobj std::binary_function<cricket::TurnEntry *,talk_base::IPAddress,bool>
{
};

/* 3889 */
struct __cppobj std::pointer_to_binary_function<cricket::TurnEntry *,talk_base::IPAddress,bool,bool (__cdecl*)(cricket::TurnEntry *,talk_base::IPAddress)> : std::binary_function<cricket::TurnEntry *,talk_base::IPAddress,bool>
{
	bool (__cdecl *_Pfun)(cricket::TurnEntry *, talk_base::IPAddress);
};

/* 3890 */
struct __cppobj std::binder2nd<std::pointer_to_binary_function<cricket::TurnEntry *,talk_base::IPAddress,bool,bool (__cdecl*)(cricket::TurnEntry *,talk_base::IPAddress)> > : std::unary_function<cricket::TurnEntry *,bool>
{
	std::pointer_to_binary_function<cricket::TurnEntry *,talk_base::IPAddress,bool,bool (__cdecl*)(cricket::TurnEntry *,talk_base::IPAddress)> op;
	talk_base::IPAddress value;
};

/* 3891 */
struct __cppobj std::binary_function<cricket::TurnEntry *,talk_base::SocketAddress,bool>
{
};

/* 3892 */
struct __cppobj std::pointer_to_binary_function<cricket::TurnEntry *,talk_base::SocketAddress,bool,bool (__cdecl*)(cricket::TurnEntry *,talk_base::SocketAddress)> : std::binary_function<cricket::TurnEntry *,talk_base::SocketAddress,bool>
{
	bool (__cdecl *_Pfun)(cricket::TurnEntry *, talk_base::SocketAddress);
};

/* 3893 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *>
{
};

/* 3894 */
struct __cppobj std::bad_function_call : std::exception
{
};

/* 3895 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3896 */
struct __cppobj std::binder2nd<std::pointer_to_binary_function<cricket::TurnEntry *,talk_base::SocketAddress,bool,bool (__cdecl*)(cricket::TurnEntry *,talk_base::SocketAddress)> > : std::unary_function<cricket::TurnEntry *,bool>
{
	std::pointer_to_binary_function<cricket::TurnEntry *,talk_base::SocketAddress,bool,bool (__cdecl*)(cricket::TurnEntry *,talk_base::SocketAddress)> op;
	talk_base::SocketAddress value;
};

/* 3897 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> >
{
};

/* 3898 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> >
{
};

/* 3899 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3900 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *,void *> > >
{
};

/* 3901 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3902 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > >
{
};

/* 3903 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3904 */
struct __cppobj std::pointer_traits<std::pair<enum talk_base::Socket::Option const ,int> *>
{
};

/* 3905 */
struct __cppobj std::pointer_to_binary_function<cricket::TurnEntry *,int,bool,bool (__cdecl*)(cricket::TurnEntry *,int)> : std::binary_function<cricket::TurnEntry *,int,bool>
{
	bool (__cdecl *_Pfun)(cricket::TurnEntry *, int);
};

/* 3906 */
struct __cppobj std::binder2nd<std::pointer_to_binary_function<cricket::TurnEntry *,int,bool,bool (__cdecl*)(cricket::TurnEntry *,int)> > : std::unary_function<cricket::TurnEntry *,bool>
{
	std::pointer_to_binary_function<cricket::TurnEntry *,int,bool,bool (__cdecl*)(cricket::TurnEntry *,int)> op;
	int value;
};

/* 3907 */
struct __cppobj std::_Tuple_val<enum talk_base::Socket::Option const &>
{
	talk_base::Socket::Option *_Val;
};

/* 3908 */
struct __cppobj std::tuple<enum talk_base::Socket::Option const &> : std::tuple<>
{
	std::_Tuple_val<enum talk_base::Socket::Option const &> _Myfirst;
};

/* 3909 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TurnCreatePermissionRequest,cricket::TurnEntry *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>
{
	cricket::TurnCreatePermissionRequest *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnCreatePermissionRequest *this, cricket::TurnEntry *);
};

/* 3910 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TurnPort,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	cricket::TurnPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnPort *this, talk_base::AsyncPacketSocket *);
};

/* 3911 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TurnPort,cricket::Connection *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>
{
	cricket::TurnPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnPort *this, cricket::Connection *);
};

/* 3912 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TurnPort,talk_base::SignalThread *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>
{
	cricket::TurnPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnPort *this, talk_base::SignalThread *);
};

/* 3913 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::TurnPort,talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::TurnPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnPort *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
};

/* 3914 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TurnChannelBindRequest,cricket::TurnEntry *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TurnEntry *,sigslot::single_threaded>
{
	cricket::TurnChannelBindRequest *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnChannelBindRequest *this, cricket::TurnEntry *);
};

/* 3915 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::TurnPort,void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> : sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>
{
	cricket::TurnPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnPort *this, const void *, unsigned int, cricket::StunRequest *);
};

/* 3916 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TurnPort,talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>
{
	cricket::TurnPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TurnPort *this, talk_base::AsyncPacketSocket *, int);
};

/* 3917 */
struct __cppobj std::_Allocator_base<cricket::PortAllocatorSessionProxy *>
{
};

/* 3918 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::PortAllocatorSessionProxy *,int,cricket::PortAllocatorSessionProxy * const *,cricket::PortAllocatorSessionProxy * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3919 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSessionProxy *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::PortAllocatorSessionProxy *,int,cricket::PortAllocatorSessionProxy * const *,cricket::PortAllocatorSessionProxy * const &,std::_Iterator_base0>
{
	cricket::PortAllocatorSessionProxy **_Ptr;
};

/* 3920 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSessionProxy *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSessionProxy *> > >
{
};

/* 3921 */
struct __cppobj std::allocator<cricket::PortAllocatorSessionProxy *> : std::_Allocator_base<cricket::PortAllocatorSessionProxy *>
{
};

/* 3922 */
struct __cppobj std::allocator_traits<std::allocator<cricket::PortAllocatorSessionProxy *> >
{
};

/* 3923 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3924 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 3925 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3926 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> *>
{
};

/* 3927 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> >
{
};

/* 3928 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> >
{
};

/* 3929 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> > > : std::allocator<std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> >
{
};

/* 3930 */
struct __cppobj std::_Allocator_base<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >
{
};

/* 3931 */
struct __cppobj std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > : std::_Allocator_base<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >
{
};

/* 3932 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> >
{
};

/* 3933 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> >
{
};

/* 3934 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> >
{
};

/* 3935 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *>
{
};

/* 3936 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *>
{
};

/* 3937 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > >
{
};

/* 3938 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 3939 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortAllocatorSessionProxy *> > : std::allocator<cricket::PortAllocatorSessionProxy *>
{
};

/* 3940 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<cricket::PortInterface * const,cricket::PortProxy *>,int,std::pair<cricket::PortInterface * const,cricket::PortProxy *> const *,std::pair<cricket::PortInterface * const,cricket::PortProxy *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3941 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<cricket::PortInterface * const,cricket::PortProxy *>,int,std::pair<cricket::PortInterface * const,cricket::PortProxy *> const *,std::pair<cricket::PortInterface * const,cricket::PortProxy *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> *_Ptr;
};

/* 3942 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > >,std::_Iterator_base0>
{
};

/* 3943 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > >
{
};

/* 3944 */
struct __cppobj std::binary_function<cricket::PortInterface *,cricket::PortInterface *,bool>
{
};

/* 3945 */
struct __cppobj std::less<cricket::PortInterface *> : std::binary_function<cricket::PortInterface *,cricket::PortInterface *,bool>
{
};

/* 3946 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::PortAllocatorSessionMuxer *> const *>
{
};

/* 3947 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> *,void *> > >
{
};

/* 3948 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<cricket::PortInterface * const,cricket::PortProxy *> > > > first;
	bool second;
};

/* 3949 */
struct __cppobj std::_Allocator_base<cricket::PortInterface *>
{
};

/* 3950 */
struct __cppobj std::allocator<cricket::PortInterface *> : std::_Allocator_base<cricket::PortInterface *>
{
};

/* 3951 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortInterface *> > : std::allocator<cricket::PortInterface *>
{
};

/* 3952 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortAllocatorSessionProxy *> >::rebind<cricket::PortAllocatorSessionProxy *>
{
};

/* 3953 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortAllocatorSessionProxy *> >::rebind<cricket::PortAllocatorSessionProxy * *>
{
};

/* 3954 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<cricket::PortInterface * const,cricket::PortProxy *>,void *> > >
{
};

/* 3955 */
struct __cppobj std::allocator_traits<std::allocator<cricket::PortInterface *> >
{
};

/* 3956 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::PortInterface *,int,cricket::PortInterface * const *,cricket::PortInterface * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3957 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::PortInterface *,int,cricket::PortInterface * const *,cricket::PortInterface * const &,std::_Iterator_base0>
{
	cricket::PortInterface **_Ptr;
};

/* 3958 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > >
{
};

/* 3959 */
struct __cppobj std::iterator<std::random_access_iterator_tag,cricket::PortInterface *,int,cricket::PortInterface * *,cricket::PortInterface * &>
{
};

/* 3960 */
struct __cppobj std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > >,std::iterator<std::random_access_iterator_tag,cricket::PortInterface *,int,cricket::PortInterface * *,cricket::PortInterface * &> > : std::iterator<std::random_access_iterator_tag,cricket::PortInterface *,int,cricket::PortInterface * *,cricket::PortInterface * &>
{
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > > current;
};

/* 3961 */
struct __cppobj std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > > > : std::_Revranit<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortInterface *> > >,std::iterator<std::random_access_iterator_tag,cricket::PortInterface *,int,cricket::PortInterface * *,cricket::PortInterface * &> >
{
};

/* 3962 */
struct __cppobj std::_Tmap_traits<cricket::PortInterface *,cricket::PortProxy *,std::less<cricket::PortInterface *>,std::allocator<std::pair<cricket::PortInterface * const,cricket::PortProxy *> >,0>
{
};

/* 3963 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortInterface *> >::rebind<cricket::PortInterface *>
{
};

/* 3964 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortInterface *> >::rebind<cricket::PortInterface * *>
{
};

/* 3965 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::PortAllocator,cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortAllocatorSessionMuxer *,sigslot::single_threaded>
{
	cricket::PortAllocator *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocator *this, cricket::PortAllocatorSessionMuxer *);
};

/* 3966 */
struct __cppobj cricket::StunBindingRequest : cricket::StunRequest
{
	cricket::UDPPort *port_;
	bool keep_alive_;
	talk_base::SocketAddress server_addr_;
	unsigned int start_time_;
};

/* 3967 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::UDPPort,talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::UDPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::UDPPort *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
};

/* 3968 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::UDPPort,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	cricket::UDPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::UDPPort *this, talk_base::AsyncPacketSocket *);
};

/* 3969 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::UDPPort,talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncPacketSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::UDPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::UDPPort *this, talk_base::AsyncPacketSocket *, talk_base::SocketAddress *);
};

/* 3970 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::UDPPort,void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> : sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>
{
	cricket::UDPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::UDPPort *this, const void *, unsigned int, cricket::StunRequest *);
};

/* 3971 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::UDPPort,talk_base::SignalThread *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::SignalThread *,sigslot::single_threaded>
{
	cricket::UDPPort *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::UDPPort *this, talk_base::SignalThread *);
};

/* 3972 */
struct __cppobj cricket::AllocateRequest : cricket::StunRequest
{
	cricket::RelayEntry *entry_;
	cricket::RelayConnection *connection_;
	unsigned int start_time_;
};

/* 3973 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::ProtocolAddress> >::rebind<std::_Container_proxy>
{
};

/* 3974 */
struct __cppobj std::pointer_traits<cricket::ProtocolAddress *>
{
};

/* 3975 */
struct __cppobj std::pointer_traits<std::pair<enum talk_base::Socket::Option,int> *>
{
};

/* 3976 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::RelayConnection,void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded> : sigslot::_connection_base3<void const *,unsigned int,cricket::StunRequest *,sigslot::single_threaded>
{
	cricket::RelayConnection *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::RelayConnection *this, const void *, unsigned int, cricket::StunRequest *);
};

/* 3977 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::RelayEntry,talk_base::AsyncPacketSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncPacketSocket *,sigslot::single_threaded>
{
	cricket::RelayEntry *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::RelayEntry *this, talk_base::AsyncPacketSocket *);
};

/* 3978 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::RelayEntry,talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_connection_base4<talk_base::AsyncPacketSocket *,char const *,unsigned int,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	cricket::RelayEntry *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::RelayEntry *this, talk_base::AsyncPacketSocket *, const char *, unsigned int, talk_base::SocketAddress *);
};

/* 3979 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::RelayEntry,talk_base::AsyncPacketSocket *,int,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncPacketSocket *,int,sigslot::single_threaded>
{
	cricket::RelayEntry *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::RelayEntry *this, talk_base::AsyncPacketSocket *, int);
};

/* 3980 */
struct __cppobj talk_base::DisposeData<cricket::RelayConnection> : talk_base::MessageData
{
	cricket::RelayConnection *data_;
};

/* 3981 */
struct __cppobj talk_base::scoped_ptr<talk_base::AsyncSocket>
{
	talk_base::AsyncSocket *ptr;
};

/* 3982 */
struct __cppobj talk_base::AsyncTCPSocketBase : talk_base::AsyncPacketSocket
{
	talk_base::scoped_ptr<talk_base::AsyncSocket> socket_;
	bool listen_;
	char *inbuf_;
	char *outbuf_;
	unsigned int insize_;
	unsigned int inpos_;
	unsigned int outsize_;
	unsigned int outpos_;
};

/* 3983 */
struct __cppobj cricket::AsyncStunTCPSocket : talk_base::AsyncTCPSocketBase
{
};

/* 3984 */
struct std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *_Myval;
};

/* 3985 */
struct __cppobj sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 3993 */
struct sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this, talk_base::AsyncProxyServerSocket *, talk_base::SocketAddress *);
	sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 3986 */
struct __cppobj __declspec(align(4)) talk_base::BufferedReadAdapter : talk_base::AsyncSocketAdapter
{
	char *buffer_;
	unsigned int buffer_size_;
	unsigned int data_len_;
	bool buffering_;
};

/* 3994 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 3987 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 3988 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 3989 */
struct __cppobj std::list<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >
{
};

/* 3990 */
struct __cppobj sigslot::_signal_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 3991 */
struct __cppobj sigslot::signal2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> : sigslot::_signal_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded>
{
};

/* 3992 */
struct __cppobj talk_base::AsyncProxyServerSocket : talk_base::BufferedReadAdapter
{
	sigslot::signal2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> SignalConnectRequest;
};

/* 3995 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3996 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3997 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> >
{
};

/* 3998 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 3999 */
struct __cppobj std::allocator<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *>
{
};

/* 4000 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4001 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 4002 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 4003 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 4004 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *> > >
{
};

/* 4005 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<talk_base::AsyncProxyServerSocket *,talk_base::SocketAddress const &,sigslot::single_threaded> *,void *> > >
{
};

/* 4006 */
struct __cppobj talk_base::HttpAuthContext
{
	talk_base::HttpAuthContextVtbl *vfptr;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > auth_method;
};

/* 4007 */
struct talk_base::HttpAuthContextVtbl
{
	void *(__thiscall *__vecDelDtor)(talk_base::HttpAuthContext *this, unsigned int);
};

/* 4008 */
struct __cppobj talk_base::AsyncHttpsProxySocket : talk_base::BufferedReadAdapter
{
	talk_base::SocketAddress proxy_;
	talk_base::SocketAddress dest_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > agent_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > user_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > headers_;
	talk_base::CryptString pass_;
	bool force_connect_;
	unsigned int content_length_;
	int defer_error_;
	bool expect_close_;
	talk_base::AsyncHttpsProxySocket::ProxyState state_;
	talk_base::HttpAuthContext *context_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > unknown_mechanisms_;
};

/* 4009 */
struct __cppobj talk_base::AsyncSSLSocket : talk_base::BufferedReadAdapter
{
};

/* 4010 */
struct __cppobj talk_base::AsyncSocksProxySocket : talk_base::BufferedReadAdapter
{
	talk_base::AsyncSocksProxySocket::State state_;
	talk_base::SocketAddress proxy_;
	talk_base::SocketAddress dest_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > user_;
	talk_base::CryptString pass_;
};

/* 4011 */
struct __cppobj talk_base::AsyncUDPSocket : talk_base::AsyncPacketSocket
{
	talk_base::scoped_ptr<talk_base::AsyncSocket> socket_;
	char *buf_;
	unsigned int size_;
};

/* 4012 */
struct __cppobj talk_base::AsyncTCPSocket : talk_base::AsyncTCPSocketBase
{
};

/* 4013 */
struct __cppobj std::pointer_traits<cricket::ContentGroup const *>
{
};

/* 4014 */
struct __cppobj std::pointer_traits<cricket::ContentGroup *>
{
};

/* 4015 */
struct __cppobj std::pointer_traits<cricket::TransportInfo *>
{
};

/* 4016 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::PseudoTcpChannel,cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> : sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>
{
	cricket::PseudoTcpChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PseudoTcpChannel *this, cricket::TransportChannel *, const char *, unsigned int, int);
};

/* 4017 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::PseudoTcpChannel,cricket::TransportChannel *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>
{
	cricket::PseudoTcpChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PseudoTcpChannel *this, cricket::TransportChannel *);
};

/* 4018 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::PseudoTcpChannel,cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::PseudoTcpChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PseudoTcpChannel *this, cricket::TransportChannel *, cricket::Candidate *);
};

/* 4019 */
struct __cppobj talk_base::scoped_ptr<talk_base::Socket>
{
	talk_base::Socket *ptr;
};

/* 4020 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<talk_base::SignalThread,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	talk_base::SignalThread *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::SignalThread *this);
};

/* 4021 */
struct __cppobj std::_Allocator_base<void *>
{
};

/* 4022 */
struct __cppobj std::allocator<void *> : std::_Allocator_base<void *>
{
};

/* 4023 */
struct __cppobj std::allocator_traits<std::allocator<void *> >
{
};

/* 4024 */
struct __cppobj std::_Vector_val<std::_Simple_types<void *> > : std::_Container_base0
{
	void **_Myfirst;
	void **_Mylast;
	void **_Myend;
};

/* 4025 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<void *,std::allocator<void *> > > : std::_Vector_val<std::_Simple_types<void *> >
{
};

/* 4026 */
struct __cppobj std::_Wrap_alloc<std::allocator<void *> > : std::allocator<void *>
{
};

/* 4027 */
struct __cppobj std::_Wrap_alloc<std::allocator<void *> >::rebind<void *>
{
};

/* 4028 */
struct __cppobj std::_Wrap_alloc<std::allocator<void *> >::rebind<void * *>
{
};

/* 4029 */
struct __cppobj std::vector<void *,std::allocator<void *> > : std::_Vector_alloc<0,std::_Vec_base_types<void *,std::allocator<void *> > >
{
};

/* 4030 */
struct _WSANETWORKEVENTS
{
	int lNetworkEvents;
	int iErrorCode[10];
};

/* 4031 */
struct __cppobj talk_base::PhysicalSocket : talk_base::AsyncSocket, sigslot::has_slots<sigslot::single_threaded>
{
	talk_base::PhysicalSocketServer *ss_;
	unsigned int s_;
	char enabled_events_;
	bool udp_;
	int error_;
	int family_;
	talk_base::Socket::ConnState state_;
	talk_base::AsyncResolver *resolver_;
};

/* 4032 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<talk_base::PhysicalSocket,talk_base::AsyncResolver *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncResolver *,sigslot::single_threaded>
{
	talk_base::PhysicalSocket *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::PhysicalSocket *this, talk_base::AsyncResolver *);
};

/* 4033 */
struct talk_base::ip_option_information
{
	char Ttl;
	char Tos;
	char Flags;
	char OptionsSize;
	char *OptionsData;
};

/* 4034 */
struct __cppobj talk_base::SocketDispatcher : talk_base::Dispatcher, talk_base::PhysicalSocket
{
	int id_;
	bool signal_close_;
	int signal_err_;
};

/* 4035 */
struct __cppobj __declspec(align(4)) talk_base::WinPing
{
	HINSTANCE__ *dll_;
	void *hping_;
	void *hping6_;
	void *(__stdcall *create_)();
	int (__stdcall *close_)(void *);
	unsigned int (__stdcall *send_)(void *, unsigned int, void *, unsigned __int16, talk_base::ip_option_information *, void *, unsigned int, unsigned int);
	void *(__stdcall *create6_)();
	unsigned int (__stdcall *send6_)(void *, void *, int (__stdcall *)(), void *, sockaddr_in6 *, sockaddr_in6 *, void *, unsigned __int16, talk_base::ip_option_information *, void *, unsigned int, unsigned int);
	char *data_;
	unsigned int dlen_;
	char *reply_;
	unsigned int rlen_;
	bool valid_;
};

/* 4036 */
struct __cppobj __declspec(align(4)) std::pair<char const *,bool>
{
	const char *first;
	bool second;
};

/* 4037 */
struct __cppobj std::pointer_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
{
};

/* 4038 */
struct XML_Feature
{
	XML_FeatureEnum feature;
	const char *name;
	int value;
};

/* 4039 */
struct XML_Expat_Version
{
	int major;
	int minor;
	int micro;
};

/* 4040 */
struct HASH_TABLE_ITER
{
	NAMED **p;
	NAMED **end;
};

/* 4041 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<talk_base::AsyncSocketAdapter,talk_base::AsyncSocket *,int,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>
{
	talk_base::AsyncSocketAdapter *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::AsyncSocketAdapter *this, talk_base::AsyncSocket *, int);
};

/* 4042 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<talk_base::AsyncSocketAdapter,talk_base::AsyncSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>
{
	talk_base::AsyncSocketAdapter *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::AsyncSocketAdapter *this, talk_base::AsyncSocket *);
};

/* 4043 */
struct __cppobj cricket::RemoteCandidate : cricket::Candidate
{
	cricket::PortInterface *origin_port_;
};

/* 4044 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSession *> > : std::_Container_base0
{
	cricket::PortAllocatorSession **_Myfirst;
	cricket::PortAllocatorSession **_Mylast;
	cricket::PortAllocatorSession **_Myend;
};

/* 4045 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortAllocatorSession *,std::allocator<cricket::PortAllocatorSession *> > > : std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSession *> >
{
};

/* 4046 */
struct __cppobj std::vector<cricket::PortAllocatorSession *,std::allocator<cricket::PortAllocatorSession *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::PortAllocatorSession *,std::allocator<cricket::PortAllocatorSession *> > >
{
};

/* 4047 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::RemoteCandidate> > : std::_Container_base0
{
	cricket::RemoteCandidate *_Myfirst;
	cricket::RemoteCandidate *_Mylast;
	cricket::RemoteCandidate *_Myend;
};

/* 4048 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::RemoteCandidate,std::allocator<cricket::RemoteCandidate> > > : std::_Vector_val<std::_Simple_types<cricket::RemoteCandidate> >
{
};

/* 4049 */
struct __cppobj std::vector<cricket::RemoteCandidate,std::allocator<cricket::RemoteCandidate> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::RemoteCandidate,std::allocator<cricket::RemoteCandidate> > >
{
};

/* 4050 */
struct __cppobj __declspec(align(8)) cricket::P2PTransportChannel : cricket::TransportChannelImpl, talk_base::MessageHandler
{
	cricket::P2PTransport *transport_;
	cricket::PortAllocator *allocator_;
	talk_base::Thread *worker_thread_;
	bool incoming_only_;
	bool waiting_for_signaling_;
	int error_;
	std::vector<cricket::PortAllocatorSession *,std::allocator<cricket::PortAllocatorSession *> > allocator_sessions_;
	std::vector<cricket::PortInterface *,std::allocator<cricket::PortInterface *> > ports_;
	std::vector<cricket::Connection *,std::allocator<cricket::Connection *> > connections_;
	cricket::Connection *best_connection_;
	cricket::Connection *pending_best_connection_;
	std::vector<cricket::RemoteCandidate,std::allocator<cricket::RemoteCandidate> > remote_candidates_;
	bool sort_dirty_;
	bool was_writable_;
	std::map<enum talk_base::Socket::Option,int,std::less<enum talk_base::Socket::Option>,std::allocator<std::pair<enum talk_base::Socket::Option const ,int> > > options_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > ice_ufrag_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > ice_pwd_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > remote_ice_ufrag_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > remote_ice_pwd_;
	cricket::TransportProtocol protocol_type_;
	cricket::IceMode remote_ice_mode_;
	cricket::IceRole ice_role_;
	unsigned __int64 tiebreaker_;
	unsigned int remote_candidate_generation_;
};

/* 4051 */
struct __cppobj std::_Allocator_base<cricket::RemoteCandidate>
{
};

/* 4052 */
struct __cppobj std::allocator<cricket::RemoteCandidate> : std::_Allocator_base<cricket::RemoteCandidate>
{
};

/* 4053 */
struct __cppobj std::allocator_traits<std::allocator<cricket::RemoteCandidate> >
{
};

/* 4054 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RemoteCandidate> > : std::allocator<cricket::RemoteCandidate>
{
};

/* 4055 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RemoteCandidate> >::rebind<cricket::RemoteCandidate>
{
};

/* 4056 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::RemoteCandidate> >::rebind<cricket::RemoteCandidate *>
{
};

/* 4057 */
struct __cppobj std::_Allocator_base<cricket::PortAllocatorSession *>
{
};

/* 4058 */
struct __cppobj std::allocator<cricket::PortAllocatorSession *> : std::_Allocator_base<cricket::PortAllocatorSession *>
{
};

/* 4059 */
struct __cppobj std::allocator_traits<std::allocator<cricket::PortAllocatorSession *> >
{
};

/* 4060 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::PortAllocatorSession *,int,cricket::PortAllocatorSession * const *,cricket::PortAllocatorSession * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4061 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSession *> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::PortAllocatorSession *,int,cricket::PortAllocatorSession * const *,cricket::PortAllocatorSession * const &,std::_Iterator_base0>
{
	cricket::PortAllocatorSession **_Ptr;
};

/* 4062 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,cricket::RemoteCandidate,int,cricket::RemoteCandidate const *,cricket::RemoteCandidate const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4063 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::RemoteCandidate> > > : std::_Iterator012<std::random_access_iterator_tag,cricket::RemoteCandidate,int,cricket::RemoteCandidate const *,cricket::RemoteCandidate const &,std::_Iterator_base0>
{
	cricket::RemoteCandidate *_Ptr;
};

/* 4064 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::RemoteCandidate> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::RemoteCandidate> > >
{
};

/* 4065 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSession *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<cricket::PortAllocatorSession *> > >
{
};

/* 4066 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortAllocatorSession *> > : std::allocator<cricket::PortAllocatorSession *>
{
};

/* 4067 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortAllocatorSession *> >::rebind<cricket::PortAllocatorSession *>
{
};

/* 4068 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::PortAllocatorSession *> >::rebind<cricket::PortAllocatorSession * *>
{
};

/* 4069 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::DtlsTransportChannelWrapper,cricket::TransportChannelImpl *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>
{
	cricket::DtlsTransportChannelWrapper *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::DtlsTransportChannelWrapper *this, cricket::TransportChannelImpl *);
};

/* 4070 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::DtlsTransportChannelWrapper,talk_base::StreamInterface *,int,int,sigslot::single_threaded> : sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>
{
	cricket::DtlsTransportChannelWrapper *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::DtlsTransportChannelWrapper *this, talk_base::StreamInterface *, int, int);
};

/* 4071 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::DtlsTransportChannelWrapper,cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> : sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>
{
	cricket::DtlsTransportChannelWrapper *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::DtlsTransportChannelWrapper *this, cricket::TransportChannel *, const char *, unsigned int, int);
};

/* 4072 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::DtlsTransportChannelWrapper,cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::DtlsTransportChannelWrapper *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::DtlsTransportChannelWrapper *this, cricket::TransportChannel *, cricket::Candidate *);
};

/* 4073 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::DtlsTransportChannelWrapper,cricket::TransportChannel *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>
{
	cricket::DtlsTransportChannelWrapper *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::DtlsTransportChannelWrapper *this, cricket::TransportChannel *);
};

/* 4074 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::DtlsTransportChannelWrapper,cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::DtlsTransportChannelWrapper *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::DtlsTransportChannelWrapper *this, cricket::TransportChannelImpl *, cricket::Candidate *);
};

/* 4075 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<cricket::TransportChannelProxy,cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded> : sigslot::_connection_base4<cricket::TransportChannel *,char const *,unsigned int,int,sigslot::single_threaded>
{
	cricket::TransportChannelProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TransportChannelProxy *this, cricket::TransportChannel *, const char *, unsigned int, int);
};

/* 4076 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::TransportChannelProxy,cricket::TransportChannel *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>
{
	cricket::TransportChannelProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TransportChannelProxy *this, cricket::TransportChannel *);
};

/* 4077 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::TransportChannelProxy,cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::TransportChannelProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::TransportChannelProxy *this, cricket::TransportChannel *, cricket::Candidate *);
};

/* 4078 */
struct __cppobj __declspec(align(4)) cricket::StatsParam : talk_base::MessageData
{
	cricket::TransportStats *stats;
	bool result;
};

/* 4079 */
struct __cppobj cricket::IceRoleParam : talk_base::MessageData
{
	cricket::IceRole role;
};

/* 4080 */
struct __cppobj cricket::ChannelParams : talk_base::MessageData
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
	int component;
	cricket::TransportChannelImpl *channel;
	cricket::Candidate *candidate;
};

/* 4081 */
struct __cppobj cricket::IdentityParam : talk_base::MessageData
{
	talk_base::SSLIdentity *identity;
};

/* 4082 */
struct __cppobj __declspec(align(4)) cricket::TransportDescriptionParams : talk_base::MessageData
{
	cricket::TransportDescription *desc;
	cricket::ContentAction action;
	bool result;
};

/* 4083 */
struct __cppobj std::pointer_traits<std::pair<int const ,cricket::Transport::ChannelMapEntry> *>
{
};

/* 4084 */
struct __cppobj std::_Allocator_base<cricket::TransportChannelImpl *>
{
};

/* 4085 */
struct __cppobj std::allocator<cricket::TransportChannelImpl *> : std::_Allocator_base<cricket::TransportChannelImpl *>
{
};

/* 4086 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportChannelImpl *> > : std::allocator<cricket::TransportChannelImpl *>
{
};

/* 4087 */
struct __cppobj std::allocator_traits<std::allocator<cricket::TransportChannelImpl *> >
{
};

/* 4088 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportChannelImpl *> >::rebind<cricket::TransportChannelImpl *>
{
};

/* 4089 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::TransportChannelImpl *> >::rebind<cricket::TransportChannelImpl * *>
{
};

/* 4090 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::TransportChannelImpl *> > : std::_Container_base0
{
	cricket::TransportChannelImpl **_Myfirst;
	cricket::TransportChannelImpl **_Mylast;
	cricket::TransportChannelImpl **_Myend;
};

/* 4091 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::TransportChannelImpl *,std::allocator<cricket::TransportChannelImpl *> > > : std::_Vector_val<std::_Simple_types<cricket::TransportChannelImpl *> >
{
};

/* 4092 */
struct __cppobj std::vector<cricket::TransportChannelImpl *,std::allocator<cricket::TransportChannelImpl *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::TransportChannelImpl *,std::allocator<cricket::TransportChannelImpl *> > >
{
};

/* 4093 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::Transport,cricket::TransportChannel *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TransportChannel *,sigslot::single_threaded>
{
	cricket::Transport *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::Transport *this, cricket::TransportChannel *);
};

/* 4094 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::Transport,cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportChannel *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::Transport *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::Transport *this, cricket::TransportChannel *, cricket::Candidate *);
};

/* 4095 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::Transport,cricket::TransportChannelImpl *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::TransportChannelImpl *,sigslot::single_threaded>
{
	cricket::Transport *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::Transport *this, cricket::TransportChannelImpl *);
};

/* 4096 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::Transport,cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::TransportChannelImpl *,cricket::Candidate const &,sigslot::single_threaded>
{
	cricket::Transport *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::Transport *this, cricket::TransportChannelImpl *, cricket::Candidate *);
};

/* 4097 */
struct __cppobj talk_base::MethodFunctor1<cricket::Transport const ,bool (__thiscall cricket::Transport::*)(enum talk_base::SSLRole *)const ,bool,enum talk_base::SSLRole *>
{
	bool (__thiscall *method_)(cricket::Transport *this, talk_base::SSLRole *);
	__declspec(align(8)) cricket::Transport *object_;
	talk_base::SSLRole *p1_;
};

/* 4098 */
struct __cppobj __declspec(align(8)) talk_base::Thread::FunctorMessageHandler<bool,talk_base::MethodFunctor1<cricket::Transport const ,bool (__thiscall cricket::Transport::*)(enum talk_base::SSLRole *)const ,bool,enum talk_base::SSLRole *> > : talk_base::MessageHandler
{
	talk_base::MethodFunctor1<cricket::Transport const ,bool (__thiscall cricket::Transport::*)(enum talk_base::SSLRole *)const ,bool,enum talk_base::SSLRole *> functor_;
	bool result_;
};

/* 4099 */
struct MD5Context
{
	unsigned int buf[4];
	unsigned int bits[2];
	unsigned int in[16];
};

/* 4100 */
struct SHA1_CTX
{
	unsigned int state[5];
	unsigned int count[2];
	char buffer[64];
};

/* 4101 */
struct __cppobj talk_base::Md5Digest : talk_base::MessageDigest
{
	MD5Context ctx_;
};

/* 4102 */
struct __cppobj talk_base::MessageDigestFactory
{
};

/* 4103 */
struct __cppobj talk_base::Sha1Digest : talk_base::MessageDigest
{
	SHA1_CTX ctx_;
};

/* 4104 */
struct __cppobj talk_base::scoped_ptr<talk_base::MessageDigest>
{
	talk_base::MessageDigest *ptr;
};

/* 4105 */
struct __cppobj std::_Allocator_base<cricket::StunRequest *>
{
};

/* 4106 */
struct __cppobj std::allocator<cricket::StunRequest *> : std::_Allocator_base<cricket::StunRequest *>
{
};

/* 4107 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::StunRequest *> > : std::allocator<cricket::StunRequest *>
{
};

/* 4108 */
struct __cppobj std::allocator_traits<std::allocator<cricket::StunRequest *> >
{
};

/* 4109 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::StunRequest *> >::rebind<cricket::StunRequest *>
{
};

/* 4110 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::StunRequest *> >::rebind<cricket::StunRequest * *>
{
};

/* 4111 */
struct __cppobj std::_Vector_val<std::_Simple_types<cricket::StunRequest *> > : std::_Container_base0
{
	cricket::StunRequest **_Myfirst;
	cricket::StunRequest **_Mylast;
	cricket::StunRequest **_Myend;
};

/* 4112 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<cricket::StunRequest *,std::allocator<cricket::StunRequest *> > > : std::_Vector_val<std::_Simple_types<cricket::StunRequest *> >
{
};

/* 4113 */
struct __cppobj std::vector<cricket::StunRequest *,std::allocator<cricket::StunRequest *> > : std::_Vector_alloc<0,std::_Vec_base_types<cricket::StunRequest *,std::allocator<cricket::StunRequest *> > >
{
};

/* 4114 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,cricket::StunRequest *> *>
{
};

/* 4115 */
struct __cppobj talk_base::scoped_ptr<cricket::StunMessage>
{
	cricket::StunMessage *ptr;
};

/* 4116 */
struct __cppobj std::_Allocator_base<unsigned short>
{
};

/* 4117 */
struct __cppobj std::allocator<unsigned short> : std::_Allocator_base<unsigned short>
{
};

/* 4118 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned short> > : std::allocator<unsigned short>
{
};

/* 4119 */
struct __cppobj std::allocator_traits<std::allocator<unsigned short> >
{
};

/* 4120 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned short> >::rebind<unsigned short>
{
};

/* 4121 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned short> >::rebind<unsigned short *>
{
};

/* 4122 */
struct __cppobj std::_Allocator_base<cricket::StunAttribute *>
{
};

/* 4123 */
struct __cppobj std::allocator<cricket::StunAttribute *> : std::_Allocator_base<cricket::StunAttribute *>
{
};

/* 4124 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::StunAttribute *> > : std::allocator<cricket::StunAttribute *>
{
};

/* 4125 */
struct __cppobj std::allocator_traits<std::allocator<cricket::StunAttribute *> >
{
};

/* 4126 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::StunAttribute *> >::rebind<cricket::StunAttribute *>
{
};

/* 4127 */
struct __cppobj std::_Wrap_alloc<std::allocator<cricket::StunAttribute *> >::rebind<cricket::StunAttribute * *>
{
};

/* 4128 */
struct __cppobj std::initializer_list<unsigned short>
{
	const unsigned __int16 *_First;
	const unsigned __int16 *_Last;
};

/* 4129 */
struct __cppobj talk_base::TypedMessageData<cricket::PortAllocatorSessionProxy *> : talk_base::MessageData
{
	cricket::PortAllocatorSessionProxy *data_;
};

/* 4130 */
struct __cppobj std::_Tuple_val<cricket::PortInterface * const &>
{
	cricket::PortInterface *const *_Val;
};

/* 4131 */
struct __cppobj std::tuple<cricket::PortInterface * const &> : std::tuple<>
{
	std::_Tuple_val<cricket::PortInterface * const &> _Myfirst;
};

/* 4132 */
struct __cppobj std::pointer_traits<std::pair<cricket::PortInterface * const,cricket::PortProxy *> *>
{
};

/* 4133 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::PortAllocatorSessionProxy,cricket::PortAllocatorSession *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>
{
	cricket::PortAllocatorSessionProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocatorSessionProxy *this, cricket::PortAllocatorSession *);
};

/* 4134 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::PortAllocatorSessionProxy,cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::PortAllocatorSessionProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocatorSessionProxy *this, cricket::PortAllocatorSession *, cricket::PortInterface *);
};

/* 4135 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::PortAllocatorSessionMuxer,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::PortAllocatorSessionMuxer *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocatorSessionMuxer *this, cricket::PortInterface *);
};

/* 4136 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::PortAllocatorSessionProxy,cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	cricket::PortAllocatorSessionProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocatorSessionProxy *this, cricket::PortAllocatorSession *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
};

/* 4137 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::PortAllocatorSessionMuxer,cricket::PortAllocatorSession *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>
{
	cricket::PortAllocatorSessionMuxer *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocatorSessionMuxer *this, cricket::PortAllocatorSession *);
};

/* 4138 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::PortAllocatorSessionMuxer,cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::PortAllocatorSessionMuxer *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortAllocatorSessionMuxer *this, cricket::PortAllocatorSession *, cricket::PortInterface *);
};

/* 4139 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1> > : std::_Tree_buy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 4140 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1> > : std::_Tree_comp<0,std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1> >
{
};

/* 4141 */
struct __cppobj talk_base::iless
{
};

/* 4142 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>
{
};

/* 4143 */
struct __cppobj std::multimap<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1> >
{
};

/* 4144 */
struct HWND__
{
	int unused;
};

/* 4145 */
struct __cppobj talk_base::LoggingSocketAdapter : talk_base::AsyncSocketAdapter
{
	talk_base::LoggingSeverity level_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > label_;
	bool hex_mode_;
	talk_base::LogMultilineState lms_;
};

/* 4146 */
struct __cppobj talk_base::HttpData
{
	talk_base::HttpDataVtbl *vfptr;
	talk_base::HttpVersion version;
	talk_base::scoped_ptr<talk_base::StreamInterface> document;
	std::multimap<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,talk_base::iless,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > headers_;
};

/* 4147 */
union $254E048C742F9F6469CB1F2E5276B9B4
{
	void (__thiscall *~HttpData)(talk_base::HttpData *this);
	void *(__thiscall *__vecDelDtor)(talk_base::HttpData *this, unsigned int);
};

/* 4148 */
struct talk_base::HttpDataVtbl
{
	unsigned int (__thiscall *formatLeader)(talk_base::HttpData *this, char *, unsigned int);
	talk_base::HttpError (__thiscall *parseLeader)(talk_base::HttpData *this, const char *, unsigned int);
	$254E048C742F9F6469CB1F2E5276B9B4 ___u2;
};

/* 4149 */
struct __cppobj talk_base::HttpRequestData : talk_base::HttpData
{
	talk_base::HttpVerb verb;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > path;
};

/* 4150 */
struct __cppobj talk_base::HttpResponseData : talk_base::HttpData
{
	unsigned int scode;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > message;
};

/* 4151 */
struct __cppobj talk_base::AsyncSSLServerSocket : talk_base::BufferedReadAdapter
{
};

/* 4152 */
struct __cppobj talk_base::AsyncSocksProxyServerSocket : talk_base::AsyncProxyServerSocket
{
	talk_base::AsyncSocksProxyServerSocket::State state_;
};

/* 4153 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<talk_base::AsyncUDPSocket,talk_base::AsyncSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>
{
	talk_base::AsyncUDPSocket *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::AsyncUDPSocket *this, talk_base::AsyncSocket *);
};

/* 4154 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<talk_base::AsyncTCPSocketBase,talk_base::AsyncSocket *,int,sigslot::single_threaded> : sigslot::_connection_base2<talk_base::AsyncSocket *,int,sigslot::single_threaded>
{
	talk_base::AsyncTCPSocketBase *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::AsyncTCPSocketBase *this, talk_base::AsyncSocket *, int);
};

/* 4155 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<talk_base::AsyncTCPSocketBase,talk_base::AsyncSocket *,sigslot::single_threaded> : sigslot::_connection_base1<talk_base::AsyncSocket *,sigslot::single_threaded>
{
	talk_base::AsyncTCPSocketBase *m_pobject;
	void (__thiscall *m_pmemfun)(talk_base::AsyncTCPSocketBase *this, talk_base::AsyncSocket *);
};

/* 4156 */
struct __cppobj std::_Allocator_base<std::_Tree_node<unsigned char,void *> >
{
};

/* 4157 */
struct __cppobj std::allocator<std::_Tree_node<unsigned char,void *> > : std::_Allocator_base<std::_Tree_node<unsigned char,void *> >
{
};

/* 4158 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<unsigned char,void *> > > : std::allocator<std::_Tree_node<unsigned char,void *> >
{
};

/* 4159 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<unsigned char,void *> > >
{
};

/* 4160 */
struct __declspec(align(2)) std::_Tree_node<unsigned char,void *>
{
	std::_Tree_node<unsigned char,void *> *_Left;
	std::_Tree_node<unsigned char,void *> *_Parent;
	std::_Tree_node<unsigned char,void *> *_Right;
	char _Color;
	char _Isnil;
	char _Myval;
};

/* 4161 */
struct __cppobj std::pointer_traits<cricket::PseudoTcp::SSegment *>
{
};

/* 4162 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4163 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<unsigned char> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base0>
{
	std::_Tree_node<unsigned char,void *> *_Ptr;
};

/* 4164 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<unsigned char> > : std::_Container_base0
{
	std::_Tree_node<unsigned char,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 4165 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<unsigned char,std::allocator<unsigned char> > > : std::_Tree_val<std::_Tree_simple_types<unsigned char> >
{
};

/* 4166 */
struct __cppobj std::_Tree_buy<unsigned char,std::allocator<unsigned char> > : std::_Tree_alloc<0,std::_Tree_base_types<unsigned char,std::allocator<unsigned char> > >
{
};

/* 4167 */
struct __cppobj std::_Tree_comp<0,std::_Tset_traits<unsigned char,std::less<unsigned char>,std::allocator<unsigned char>,0> > : std::_Tree_buy<unsigned char,std::allocator<unsigned char> >
{
};

/* 4168 */
struct __cppobj std::_Tree<std::_Tset_traits<unsigned char,std::less<unsigned char>,std::allocator<unsigned char>,0> > : std::_Tree_comp<0,std::_Tset_traits<unsigned char,std::less<unsigned char>,std::allocator<unsigned char>,0> >
{
};

/* 4169 */
struct __cppobj std::binary_function<unsigned char,unsigned char,bool>
{
};

/* 4170 */
struct __cppobj std::less<unsigned char> : std::binary_function<unsigned char,unsigned char,bool>
{
};

/* 4171 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<unsigned char> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<unsigned char> >,std::_Iterator_base0>
{
};

/* 4172 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<unsigned char> > >,bool>
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<unsigned char> > > first;
	bool second;
};

/* 4173 */
struct __cppobj std::set<unsigned char,std::less<unsigned char>,std::allocator<unsigned char> > : std::_Tree<std::_Tset_traits<unsigned char,std::less<unsigned char>,std::allocator<unsigned char>,0> >
{
};

/* 4174 */
struct __cppobj std::pointer_traits<cricket::PseudoTcp::RSegment *>
{
};

/* 4175 */
struct __cppobj std::_Tset_traits<unsigned char,std::less<unsigned char>,std::allocator<unsigned char>,0>
{
};

/* 4176 */
struct __cppobj talk_base::WinsockInitializer
{
	int err_;
};

/* 4177 */
struct WSAData
{
	unsigned __int16 wVersion;
	unsigned __int16 wHighVersion;
	char szDescription[257];
	char szSystemStatus[129];
	unsigned __int16 iMaxSockets;
	unsigned __int16 iMaxUdpDg;
	char *lpVendorInfo;
};

/* 4178 */
struct normal_encoding
{
	encoding enc;
	char type[256];
	int (__cdecl *isName2)(encoding *, const char *);
	int (__cdecl *isName3)(encoding *, const char *);
	int (__cdecl *isName4)(encoding *, const char *);
	int (__cdecl *isNmstrt2)(encoding *, const char *);
	int (__cdecl *isNmstrt3)(encoding *, const char *);
	int (__cdecl *isNmstrt4)(encoding *, const char *);
	int (__cdecl *isInvalid2)(encoding *, const char *);
	int (__cdecl *isInvalid3)(encoding *, const char *);
	int (__cdecl *isInvalid4)(encoding *, const char *);
};

/* 4179 */
struct unknown_encoding
{
	normal_encoding normal;
	int (__cdecl *convert)(void *, const char *);
	void *userData;
	unsigned __int16 utf16[256];
	char utf8[256][4];
};

/* 4180 */
struct __cppobj std::nothrow_t
{
};

/* 4181 */
struct __cppobj std::_Allocator_base<std::_Tree_node<talk_base::Network *,void *> >
{
};

/* 4182 */
struct __cppobj std::allocator<std::_Tree_node<talk_base::Network *,void *> > : std::_Allocator_base<std::_Tree_node<talk_base::Network *,void *> >
{
};

/* 4183 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<talk_base::Network *,void *> > > : std::allocator<std::_Tree_node<talk_base::Network *,void *> >
{
};

/* 4184 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::Network *> >::rebind<std::_Tree_node<talk_base::Network *,void *> >
{
};

/* 4185 */
struct __cppobj std::binary_function<talk_base::Network *,talk_base::Network *,bool>
{
};

/* 4186 */
struct __cppobj std::less<talk_base::Network *> : std::binary_function<talk_base::Network *,talk_base::Network *,bool>
{
};

/* 4187 */
struct __cppobj std::_Tset_traits<talk_base::Network *,std::less<talk_base::Network *>,std::allocator<talk_base::Network *>,0>
{
};

/* 4188 */
struct __cppobj std::pointer_traits<std::pair<enum talk_base::Socket::Option const ,int> const *>
{
};

/* 4189 */
struct std::_Tree_node<talk_base::Network *,void *>
{
	std::_Tree_node<talk_base::Network *,void *> *_Left;
	std::_Tree_node<talk_base::Network *,void *> *_Parent;
	std::_Tree_node<talk_base::Network *,void *> *_Right;
	char _Color;
	char _Isnil;
	talk_base::Network *_Myval;
};

/* 4190 */
struct __cppobj std::pair<cricket::Connection * *,int>
{
	cricket::Connection **first;
	int second;
};

/* 4191 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<talk_base::Network *,void *> > >
{
};

/* 4192 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,talk_base::Network *,int,talk_base::Network * const *,talk_base::Network * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4193 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,talk_base::Network *,int,talk_base::Network * const *,talk_base::Network * const &,std::_Iterator_base0>
{
	std::_Tree_node<talk_base::Network *,void *> *_Ptr;
};

/* 4194 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> > : std::_Container_base0
{
	std::_Tree_node<talk_base::Network *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 4195 */
struct __cppobj std::pointer_traits<cricket::RemoteCandidate *>
{
};

/* 4196 */
struct std::_Temp_iterator<cricket::Connection *>::_Bufpar
{
	cricket::Connection **_Begin;
	cricket::Connection **_Current;
	cricket::Connection **_Hiwater;
	int _Size;
};

/* 4197 */
struct __cppobj std::_Temp_iterator<cricket::Connection *> : std::iterator<std::output_iterator_tag,void,void,void,void>
{
	std::_Temp_iterator<cricket::Connection *>::_Bufpar _Buf;
	std::_Temp_iterator<cricket::Connection *>::_Bufpar *_Pbuf;
};

/* 4198 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<talk_base::Network *,std::allocator<talk_base::Network *> > > : std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> >
{
};

/* 4199 */
struct __cppobj std::_Tree_buy<talk_base::Network *,std::allocator<talk_base::Network *> > : std::_Tree_alloc<0,std::_Tree_base_types<talk_base::Network *,std::allocator<talk_base::Network *> > >
{
};

/* 4200 */
struct __cppobj std::_Tree_comp<0,std::_Tset_traits<talk_base::Network *,std::less<talk_base::Network *>,std::allocator<talk_base::Network *>,0> > : std::_Tree_buy<talk_base::Network *,std::allocator<talk_base::Network *> >
{
};

/* 4201 */
struct __cppobj std::_Tree<std::_Tset_traits<talk_base::Network *,std::less<talk_base::Network *>,std::allocator<talk_base::Network *>,0> > : std::_Tree_comp<0,std::_Tset_traits<talk_base::Network *,std::less<talk_base::Network *>,std::allocator<talk_base::Network *>,0> >
{
};

/* 4202 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> >,std::_Iterator_base0>
{
};

/* 4203 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> > >,bool>
{
	std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<talk_base::Network *> > > first;
	bool second;
};

/* 4204 */
struct __cppobj std::set<talk_base::Network *,std::less<talk_base::Network *>,std::allocator<talk_base::Network *> > : std::_Tree<std::_Tset_traits<talk_base::Network *,std::less<talk_base::Network *>,std::allocator<talk_base::Network *>,0> >
{
};

/* 4205 */
struct __cppobj ConnectionCompare
{
};

/* 4206 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::P2PTransportChannel,cricket::Connection *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::Connection *,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::Connection *);
};

/* 4207 */
struct __cppobj __declspec(align(8)) sigslot::_connection6<cricket::P2PTransportChannel,cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> : sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::PortInterface *, talk_base::SocketAddress *, cricket::ProtocolType, cricket::IceMessage *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, bool);
};

/* 4208 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortAllocatorSession *,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::PortAllocatorSession *);
};

/* 4209 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base2<cricket::PortAllocatorSession *,cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::PortAllocatorSession *, cricket::PortInterface *);
};

/* 4210 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded> : sigslot::_connection_base2<cricket::PortAllocatorSession *,std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > const &,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::PortAllocatorSession *, std::vector<cricket::Candidate,std::allocator<cricket::Candidate> > *);
};

/* 4211 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<cricket::P2PTransportChannel,cricket::Connection *,char const *,unsigned int,sigslot::single_threaded> : sigslot::_connection_base3<cricket::Connection *,char const *,unsigned int,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::Connection *, const char *, unsigned int);
};

/* 4212 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::P2PTransportChannel,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::P2PTransportChannel *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::P2PTransportChannel *this, cricket::PortInterface *);
};

/* 4213 */
union SHA1Transform::__l2::CHAR64LONG16
{
	char c[64];
	unsigned int l[16];
};

/* 4214 */
struct __cppobj __declspec(align(8)) sigslot::_connection6<cricket::PortProxy,cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded> : sigslot::_connection_base6<cricket::PortInterface *,talk_base::SocketAddress const &,enum cricket::ProtocolType,cricket::IceMessage *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,bool,sigslot::single_threaded>
{
	cricket::PortProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortProxy *this, cricket::PortInterface *, talk_base::SocketAddress *, cricket::ProtocolType, cricket::IceMessage *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, bool);
};

/* 4215 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<cricket::PortProxy,cricket::PortInterface *,sigslot::single_threaded> : sigslot::_connection_base1<cricket::PortInterface *,sigslot::single_threaded>
{
	cricket::PortProxy *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::PortProxy *this, cricket::PortInterface *);
};

/* 4216 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
};

/* 4217 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 4218 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Container_base0
{
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *_Myfirst;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *_Mylast;
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *_Myend;
};

/* 4219 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > : std::_Vector_val<std::_Simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 4220 */
struct __cppobj std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
{
};

/* 4221 */
struct __cppobj std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 4222 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > : std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 4223 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4224 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > : std::_Iterator012<std::random_access_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0>
{
	std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *_Ptr;
};

/* 4225 */
struct __cppobj std::allocator_traits<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
{
};

/* 4226 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 4227 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *>
{
};

/* 4228 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *>
{
};

/* 4229 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *>
{
};

/* 4230 */
struct _SEC_WINNT_AUTH_IDENTITY_A
{
	char *User;
	unsigned int UserLength;
	char *Domain;
	unsigned int DomainLength;
	char *Password;
	unsigned int PasswordLength;
	unsigned int Flags;
};

/* 4231 */
struct __cppobj __declspec(align(2)) talk_base::Url<char>
{
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > host_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > path_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > query_;
	unsigned __int16 port_;
	bool secure_;
};

/* 4232 */
struct talk_base::Enum<enum talk_base::HttpHeader>
{
	talk_base::HttpHeader val;
};

/* 4233 */
struct __cppobj __declspec(align(4)) talk_base::NegotiateAuthContext : talk_base::HttpAuthContext
{
	_SecHandle cred;
	_SecHandle ctx;
	unsigned int steps;
	bool specified_credentials;
};

/* 4234 */
struct talk_base::Enum<enum talk_base::HttpVersion>
{
	talk_base::HttpVersion val;
};

/* 4235 */
struct talk_base::Enum<enum talk_base::HttpVerb>
{
	talk_base::HttpVerb val;
};

/* 4237 */
struct __declspec(align(4)) GCheader
{
	GCObject *next;
	char tt;
	char marked;
};

/* 4238 */
union L_Umaxalign
{
	long double u;
	void *s;
	int l;
};

/* 4239 */
struct $2FD4FBC65D0C512FC47E6C723A86F8DA
{
	GCObject *next;
	char tt;
	char marked;
	char extra;
	unsigned int hash;
	unsigned int len;
};

/* 4240 */
union TString
{
	L_Umaxalign dummy;
	$2FD4FBC65D0C512FC47E6C723A86F8DA tsv;
};

/* 4249 */
struct $87CF6D6E8EE0ECAF3C457EB8DAFDA081
{
	GCObject *next;
	char tt;
	char marked;
	Table *metatable;
	Table *env;
	unsigned int len;
};

/* 4250 */
union __declspec(align(8)) Udata
{
	L_Umaxalign dummy;
	$87CF6D6E8EE0ECAF3C457EB8DAFDA081 uv;
};

/* 4241 */
union Value
{
	GCObject *gc;
	void *p;
	int b;
	int (__cdecl *f)(lua_State *);
};

/* 4242 */
struct $214230D657A5CF53A733675F9E20072B
{
	Value v__;
	int tt__;
};

/* 4243 */
union $CB571E694056FA675660E83E845BA3E5
{
	$214230D657A5CF53A733675F9E20072B i;
	long double d__;
};

/* 4244 */
struct lua_TValue
{
	$CB571E694056FA675660E83E845BA3E5 u;
};

/* 4264 */
struct CClosure
{
	GCObject *next;
	char tt;
	char marked;
	char nupvalues;
	GCObject *gclist;
	int (__cdecl *f)(lua_State *);
	lua_TValue upvalue[1];
};

/* 4269 */
struct LClosure
{
	GCObject *next;
	char tt;
	char marked;
	char nupvalues;
	GCObject *gclist;
	Proto *p;
	UpVal *upvals[1];
};

/* 4268 */
union Closure
{
	CClosure c;
	LClosure l;
};

/* 4248 */
struct Table
{
	GCObject *next;
	char tt;
	char marked;
	char flags;
	char lsizenode;
	int sizearray;
	lua_TValue *array;
	Node *node;
	Node *lastfree;
	Table *metatable;
	GCObject *gclist;
};

/* 4265 */
struct __declspec(align(2)) Proto
{
	GCObject *next;
	char tt;
	char marked;
	lua_TValue *k;
	unsigned int *code;
	Proto **p;
	int *lineinfo;
	LocVar *locvars;
	Upvaldesc *upvalues;
	Closure *cache;
	TString *source;
	int sizeupvalues;
	int sizek;
	int sizecode;
	int sizelineinfo;
	int sizep;
	int sizelocvars;
	int linedefined;
	int lastlinedefined;
	GCObject *gclist;
	char numparams;
	char is_vararg;
	char maxstacksize;
};

/* 4253 */
struct $2E6324AB507C8ECCB4D4155EA554B7C5
{
	UpVal *prev;
	UpVal *next;
};

/* 4254 */
union $CD82AF980D583A2B5CA351BFEED8487A
{
	lua_TValue value;
	$2E6324AB507C8ECCB4D4155EA554B7C5 l;
};

/* 4252 */
struct UpVal
{
	GCObject *next;
	char tt;
	char marked;
	lua_TValue *v;
	$CD82AF980D583A2B5CA351BFEED8487A u;
};

/* 4259 */
struct $0F841590A95885B59AFC1DD491AEF5B1
{
	lua_TValue *base;
	const unsigned int *savedpc;
};

/* 4260 */
struct __declspec(align(4)) $83225D3B935359A92257E1D58FB5D33E
{
	int ctx;
	int (__cdecl *k)(lua_State *);
	int old_errfunc;
	char old_allowhook;
	char status;
};

/* 4261 */
union $F19E5F4B8243304B2A9C12D28838366E
{
	$0F841590A95885B59AFC1DD491AEF5B1 l;
	$83225D3B935359A92257E1D58FB5D33E c;
};

/* 4258 */
struct CallInfo
{
	lua_TValue *func;
	lua_TValue *top;
	CallInfo *previous;
	CallInfo *next;
	__int16 nresults;
	char callstatus;
	int extra;
	$F19E5F4B8243304B2A9C12D28838366E u;
};

/* 4256 */
struct lua_State
{
	GCObject *next;
	char tt;
	char marked;
	char status;
	lua_TValue *top;
	global_State *l_G;
	CallInfo *ci;
	const unsigned int *oldpc;
	lua_TValue *stack_last;
	lua_TValue *stack;
	int stacksize;
	unsigned __int16 nny;
	unsigned __int16 nCcalls;
	char hookmask;
	char allowhook;
	int basehookcount;
	int hookcount;
	void (__cdecl *hook)(lua_State *, lua_Debug *);
	GCObject *openupval;
	GCObject *gclist;
	lua_longjmp *errorJmp;
	int errfunc;
	CallInfo base_ci;
};

/* 4236 */
union GCObject
{
	GCheader gch;
	TString ts;
	Udata u;
	Closure cl;
	Table h;
	Proto p;
	UpVal uv;
	lua_State th;
};

/* 4246 */
struct __declspec(align(8)) $E5A33DB2916B5DB2588AEA3BDEEB641C
{
	$CB571E694056FA675660E83E845BA3E5 u;
	Node *next;
};

/* 4247 */
union TKey
{
	$E5A33DB2916B5DB2588AEA3BDEEB641C nk;
	lua_TValue tvk;
};

/* 4245 */
struct Node
{
	lua_TValue i_val;
	TKey i_key;
};

/* 4266 */
struct LocVar
{
	TString *varname;
	int startpc;
	int endpc;
};

/* 4267 */
struct __declspec(align(4)) Upvaldesc
{
	TString *name;
	char instack;
	char idx;
};

/* 4251 */
struct stringtable
{
	GCObject **hash;
	unsigned int nuse;
	int size;
};

/* 4255 */
struct Mbuffer
{
	char *buffer;
	unsigned int n;
	unsigned int buffsize;
};

/* 4257 */
struct global_State
{
	void *(__cdecl *frealloc)(void *, void *, unsigned int, unsigned int);
	void *ud;
	unsigned int totalbytes;
	int GCdebt;
	unsigned int GCmemtrav;
	unsigned int GCestimate;
	stringtable strt;
	lua_TValue l_registry;
	unsigned int seed;
	char currentwhite;
	char gcstate;
	char gckind;
	char gcrunning;
	int sweepstrgc;
	GCObject *allgc;
	GCObject *finobj;
	GCObject **sweepgc;
	GCObject **sweepfin;
	GCObject *gray;
	GCObject *grayagain;
	GCObject *weak;
	GCObject *ephemeron;
	GCObject *allweak;
	GCObject *tobefnz;
	UpVal uvhead;
	Mbuffer buff;
	int gcpause;
	int gcmajorinc;
	int gcstepmul;
	int (__cdecl *panic)(lua_State *);
	lua_State *mainthread;
	const long double *version;
	TString *memerrmsg;
	TString *tmname[17];
	Table *mt[9];
};

/* 4262 */
struct lua_Debug
{
	int event;
	const char *name;
	const char *namewhat;
	const char *what;
	const char *source;
	int currentline;
	int linedefined;
	int lastlinedefined;
	char nups;
	char nparams;
	char isvararg;
	char istailcall;
	char short_src[60];
	CallInfo *i_ci;
};

/* 4263 */
struct lua_longjmp
{
	lua_longjmp *previous;
	int b[16];
	volatile int status;
};

/* 4270 */
struct Zio
{
	unsigned int n;
	const char *p;
	const char *(__cdecl *reader)(lua_State *, void *, unsigned int *);
	void *data;
	lua_State *L;
};

/* 4271 */
struct CallS
{
	lua_TValue *func;
	int nresults;
};

/* 4272 */
struct hostent
{
	char *h_name;
	char **h_aliases;
	__int16 h_addrtype;
	__int16 h_length;
	char **h_addr_list;
};

/* 4273 */
struct luaL_Reg
{
	const char *name;
	int (__cdecl *func)(lua_State *);
};

/* 4274 */
struct LoadF
{
	int n;
	_iobuf *f;
	char buff[512];
};

/* 4275 */
struct luaL_Buffer
{
	char *b;
	unsigned int size;
	unsigned int n;
	lua_State *L;
	char initb[512];
};

/* 4276 */
struct LoadS
{
	const char *s;
	unsigned int size;
};

/* 4277 */
struct $E12CD0AAF55CABD9CF2CCDEC91240BE2
{
	const char *init;
	int len;
};

/* 4278 */
struct MatchState
{
	int matchdepth;
	const char *src_init;
	const char *src_end;
	const char *p_end;
	lua_State *L;
	int level;
	$E12CD0AAF55CABD9CF2CCDEC91240BE2 capture[32];
};

/* 4279 */
struct Capture
{
	const char *s;
	__int16 idx;
	char kind;
	char siz;
};

/* 4280 */
struct Inst
{
	char code;
	char aux;
	__int16 key;
};

/* 4281 */
union $225627C25F208099584D7E050004CEA7
{
	int ps;
	int n;
};

/* 4282 */
struct TTree
{
	char tag;
	char cap;
	unsigned __int16 key;
	$225627C25F208099584D7E050004CEA7 u;
};

/* 4283 */
struct Charset
{
	char cs[32];
};

/* 4284 */
union Instruction
{
	Inst i;
	int offset;
	char buff[1];
};

/* 4285 */
struct Pattern
{
	Instruction *code;
	int codesize;
	TTree tree[1];
};

/* 4286 */
struct DumpState
{
	lua_State *L;
	int (__cdecl *writer)(lua_State *, const void *, unsigned int, void *);
	void *data;
	int strip;
	int status;
};

/* 4287 */
struct LX
{
	lua_State l;
};

/* 4288 */
struct LG
{
	LX l;
	global_State g;
};

/* 4289 */
struct Vardesc
{
	__int16 idx;
};

/* 4290 */
struct $BB060D39E7238A47113398A1F32FF441
{
	Vardesc *arr;
	int n;
	int size;
};

/* 4291 */
struct __declspec(align(4)) Labeldesc
{
	TString *name;
	int pc;
	int line;
	char nactvar;
};

/* 4292 */
struct Labellist
{
	Labeldesc *arr;
	int n;
	int size;
};

/* 4293 */
struct Dyndata
{
	$BB060D39E7238A47113398A1F32FF441 actvar;
	Labellist gt;
	Labellist label;
};

/* 4294 */
struct SParser
{
	Zio *z;
	Mbuffer buff;
	Dyndata dyd;
	const char *mode;
	const char *name;
};

/* 4295 */
struct CompileState
{
	Pattern *p;
	int ncode;
	lua_State *L;
};

/* 4296 */
struct Stack
{
	const char *s;
	Instruction *p;
	int caplevel;
};

/* 4297 */
struct CapState
{
	Capture *cap;
	Capture *ocap;
	lua_State *L;
	int ptop;
	const char *s;
	int valuecached;
};

/* 4298 */
struct $C24B690AE6B73EA933246FF18399BF89
{
	const char *s;
	const char *e;
};

/* 4299 */
union $9A9270A2BAEC81B8D66F0AC71043271C
{
	Capture *cp;
	$C24B690AE6B73EA933246FF18399BF89 s;
};

/* 4300 */
struct StrAux
{
	int isstring;
	$9A9270A2BAEC81B8D66F0AC71043271C u;
};

/* 4301 */
struct fd_set
{
	unsigned int fd_count;
	unsigned int fd_array[64];
};

/* 4302 */
struct t_timeout_
{
	long double block;
	long double total;
	long double start;
};

/* 4303 */
struct timeval
{
	int tv_sec;
	int tv_usec;
};

/* 4304 */
struct t_io_
{
	void *ctx;
	int (__cdecl *send)(void *, const char *, unsigned int, unsigned int *, t_timeout_ *);
	int (__cdecl *recv)(void *, char *, unsigned int, unsigned int *, t_timeout_ *);
	const char *(__cdecl *error)(void *, int);
};

/* 4305 */
struct t_buffer_
{
	long double birthday;
	unsigned int sent;
	unsigned int received;
	t_io_ *io;
	t_timeout_ *tm;
	unsigned int first;
	unsigned int last;
	char data[8192];
};

/* 4306 */
struct t_opt
{
	const char *name;
	int (__cdecl *func)(lua_State *, unsigned int *);
};

/* 4307 */
struct __declspec(align(8)) t_udp_
{
	unsigned int sock;
	t_timeout_ tm;
	int family;
};

/* 4308 */
struct __declspec(align(8)) t_tcp_
{
	unsigned int sock;
	t_io_ io;
	t_buffer_ buf;
	t_timeout_ tm;
	int family;
};

/* 4309 */
struct LoadState
{
	lua_State *L;
	Zio *Z;
	Mbuffer *b;
	const char *name;
};

/* 4310 */
union SemInfo
{
	long double r;
	TString *ts;
};

/* 4311 */
struct Token
{
	int token;
	SemInfo seminfo;
};

/* 4312 */
struct __declspec(align(4)) FuncState
{
	Proto *f;
	Table *h;
	FuncState *prev;
	LexState *ls;
	BlockCnt *bl;
	int pc;
	int lasttarget;
	int jpc;
	int nk;
	int np;
	int firstlocal;
	__int16 nlocvars;
	char nactvar;
	char nups;
	char freereg;
};

/* 4313 */
struct $E051CE2B9F82DAF3DF41A87CC23C5300
{
	_BYTE t[24];
	_BYTE gap18[8];
	FuncState *fs;
	lua_State *L;
};

/* 4314 */
struct $2DD5AC840A5499F97379E50FB54D5C7D
{
	_BYTE gap0[16];
	_BYTE lookahead[24];
};

/* 4315 */
union $66D74683C4A79D9AA4409774AD16C01E
{
	$E051CE2B9F82DAF3DF41A87CC23C5300 __s0;
	$2DD5AC840A5499F97379E50FB54D5C7D __s1;
};

/* 4316 */
struct LexState
{
	int current;
	int linenumber;
	int lastline;
	__declspec(align(8)) $66D74683C4A79D9AA4409774AD16C01E ___u3;
	Zio *z;
	Mbuffer *buff;
	Dyndata *dyd;
	TString *source;
	TString *envn;
	char decpoint;
};

/* 4317 */
struct __declspec(align(2)) BlockCnt
{
	BlockCnt *previous;
	__int16 firstlabel;
	__int16 firstgoto;
	char nactvar;
	char upval;
	char isloop;
};

/* 4318 */
struct $09ACBCA4CBD29C872DCFC839FE5DAE82
{
	char left;
	char right;
};

/* 4319 */
const struct $346E9CE2A8D7888D5091AC1B7AE5459B
{
	char left;
	char right;
};

/* 4320 */
struct LHS_assign
{
	LHS_assign *prev;
	expdesc v;
};

/* 4321 */
struct $98C0CBD984D22C3432E90A173E496903
{
	__int16 idx;
	char t;
	char vt;
};

/* 4322 */
union $C00E68E5889FB446FFA01C98F08372BC
{
	$98C0CBD984D22C3432E90A173E496903 ind;
	int info;
	long double nval;
};

/* 4323 */
struct expdesc
{
	expkind k;
	$C00E68E5889FB446FFA01C98F08372BC u;
	int t;
	int f;
};

/* 4324 */
struct ConsControl
{
	expdesc v;
	expdesc *t;
	int nh;
	int na;
	int tostore;
};

/* 4325 */
struct ipv6_mreq
{
	in6_addr ipv6mr_multiaddr;
	unsigned int ipv6mr_interface;
};

/* 4326 */
struct ip_mreq
{
	in_addr imr_multiaddr;
	in_addr imr_interface;
};

/* 4327 */
struct linger
{
	unsigned __int16 l_onoff;
	unsigned __int16 l_linger;
};

/* 4341 */
struct tagPOINT
{
	int x;
	int y;
};

/* 4342 */
struct tagSIZE
{
	int cx;
	int cy;
};

/* 4334 */
struct __cppobj CObject
{
	CObjectVtbl *vfptr;
};

/* 4339 */
struct __cppobj CObList : CObject
{
	CObList::CNode *m_pNodeHead;
	CObList::CNode *m_pNodeTail;
	int m_nCount;
	CObList::CNode *m_pNodeFree;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4333 */
const struct __cppobj CString
{
	char *m_pchData;
};

/* 4343 */
struct tagRECT
{
	int left;
	int top;
	int right;
	int bottom;
};

/* 4344 */
struct __cppobj CRect : tagRECT
{
};

/* 4345 */
struct __cppobj CPoint : tagPOINT
{
};

/* 4346 */
struct _EAXPRESET
{
	unsigned int dwEnvironment;
	float fVolume;
	float fDecay;
	float fDamping;
};

/* 4351 */
struct __cppobj CPtrList : CObject
{
	CPtrList::CNode *m_pNodeHead;
	CPtrList::CNode *m_pNodeTail;
	int m_nCount;
	CPtrList::CNode *m_pNodeFree;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4355 */
struct __cppobj CTypedPtrList<CPtrList,long *> : CPtrList
{
};

/* 4395 */
struct __cppobj CVideo
{
	CVidMode *pCurrentMode;
};

/* 4401 */
struct __cppobj std::_Vector_val<std::_Simple_types<DP_Player *> > : std::_Container_base0
{
	DP_Player **_Myfirst;
	DP_Player **_Mylast;
	DP_Player **_Myend;
};

/* 4402 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<DP_Player *,std::allocator<DP_Player *> > > : std::_Vector_val<std::_Simple_types<DP_Player *> >
{
};

/* 4403 */
struct __cppobj std::vector<DP_Player *,std::allocator<DP_Player *> > : std::_Vector_alloc<0,std::_Vec_base_types<DP_Player *,std::allocator<DP_Player *> > >
{
};

/* 4404 */
struct __cppobj std::_Deque_val<std::_Deque_simple_types<DP_Packet *> > : std::_Container_base12
{
	DP_Packet ***_Map;
	unsigned int _Mapsize;
	unsigned int _Myoff;
	unsigned int _Mysize;
};

/* 4405 */
struct __cppobj std::_Deque_alloc<0,std::_Deque_base_types<DP_Packet *,std::allocator<DP_Packet *> > > : std::_Deque_val<std::_Deque_simple_types<DP_Packet *> >
{
};

/* 4406 */
struct __cppobj std::deque<DP_Packet *,std::allocator<DP_Packet *> > : std::_Deque_alloc<0,std::_Deque_base_types<DP_Packet *,std::allocator<DP_Packet *> > >
{
};

/* 4407 */
struct __cppobj std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > >
{
	std::deque<DP_Packet *,std::allocator<DP_Packet *> > c;
};

/* 4412 */
struct __cppobj DPWrapper
{
	std::vector<DP_Player *,std::allocator<DP_Player *> > m_players;
	std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > > m_packetQueue;
	int m_currentSessionId;
	IDPProvider *m_provider;
	IDPPeer *m_connection;
	int m_peerState;
	bool m_server;
	int m_ReplyFlags;
	int m_playerCreateID;
	DP_ProviderID m_nProvider;
	int m_nMyID;
	$6FC90F99FF4F7ED550567EC3ED4998F8 PEER_STATE;
};

/* 4413 */
struct cnetworkwindow_queueentry_st
{
	int dpIDFrom;
	int dpIDTo;
	char *pInfo;
	unsigned int dwSize;
	unsigned int dwFlags;
};

/* 4414 */
struct __cppobj CTypedPtrList<CPtrList,cnetworkwindow_queueentry_st *> : CPtrList
{
};

/* 4415 */
struct __cppobj CNetworkWindow
{
	char m_bInitialized;
	char m_bVSSent;
	char m_bVSReceived;
	char m_nPlayerNumber;
	unsigned __int16 m_nAckExpected;
	unsigned __int16 m_nNextFrameToSend;
	unsigned __int16 m_nFrameExpected;
	unsigned __int16 m_nTooFar;
	unsigned __int16 m_nOldestFrame;
	cnetworkwindow_queueentry_st m_pOutgoingBuffers[1];
	cnetworkwindow_queueentry_st m_pIncomingBuffers[1];
	CTypedPtrList<CPtrList,cnetworkwindow_queueentry_st *> m_lQueueIncomingMessages;
	CTypedPtrList<CPtrList,cnetworkwindow_queueentry_st *> m_lQueueOutgoingMessages;
	char m_pbTimeOutSet[1];
	unsigned int m_pnTimeOut[1];
	char m_pbArrived[1];
	unsigned __int16 m_nNumBuffered;
	char m_bNoNak;
	char padding;
	unsigned int m_nPacketTimeout;
	unsigned int m_nAckTimer;
	char m_bAckTimerSet;
	char m_bSomethingHappened;
	unsigned int m_nNextEvent;
	unsigned int m_nPlayerTimeout;
	unsigned int m_nNoMessageTimeout;
};

/* 4416 */
struct __cppobj CNetworkConnectionSettings
{
	unsigned int dwFlags;
	unsigned int dwMaxPlayers;
	CString sPlayerName;
};

/* 4417 */
struct __cppobj CNetwork
{
	_GUID m_nApplicationGuid;
	char m_bApplicationGuidDefined;
	char m_bAutoConnectCheck;
	char m_bServiceProviderEnumerated;
	char m_bServiceProviderSelected;
	int m_nServiceProvider;
	int m_nTotalServiceProviders;
	CString m_ppszServiceProviderNames[4];
	DP_ProviderID m_pnServiceProviderIDS[4];
	char m_bConnectionInitialized;
	char m_bSocketConnecting;
	char m_bSocketConnected;
	CString m_sIPAddress;
	char padding2;
	void *m_lpDPAddress;
	unsigned int m_dwDPAddressSize;
	CString m_version;
	char m_bSessionSelected;
	int m_nSession;
	char m_bSessionNameToMake;
	char padding3;
	CString m_sSessionNameToMake;
	CString m_sSessionDescriptionToMake;
	char m_bSessionPasswordEnabled;
	char padding4;
	CString m_sSessionPassword;
	char m_bAllowNewConnections;
	char m_bConnectionEstablished;
	char m_bIsHost;
	DPWrapper m_directPlay;
	int m_nMaxPlayers;
	unsigned int m_dwSessionFlags;
	char m_bMaxPlayersDefined;
	char m_bSessionOptionsDefined;
	CString m_sJoinedGame;
	CString m_sLeftGame;
	CString m_sDroppedGame;
	char m_bPlayerNameToMake;
	char m_bPlayerCreated;
	int m_idLocalPlayer;
	CString m_sLocalPlayerName;
	int m_nTotalPlayers;
	CString m_psPlayerName[6];
	int m_pPlayerID[6];
	char m_pbPlayerVisible[6];
	char m_pbPlayerEnumerateFlag[6];
	int m_nLocalPlayer;
	int m_nHostPlayer;
	CString m_sHostIPAddress;
	int m_bAnnounceNewPlayers;
	CNetworkWindow m_pSlidingWindow[6];
	CNetworkWindow m_SystemWindow;
	unsigned int m_dwCRC32[256];
	CNetworkConnectionSettings m_connectionSettings;
	unsigned int m_lastMessageSentTime;
	unsigned int m_lastMessageReceivedTime[6];
};

/* 4418 */
struct CSteamID::SteamID_t::SteamIDComponent_t
{
	unsigned __int32 m_unAccountID : 32;
	unsigned __int32 m_unAccountInstance : 20;
	unsigned __int32 m_EAccountType : 4;
	__int32 m_EUniverse : 8;
};

/* 4419 */
union CSteamID::SteamID_t
{
	CSteamID::SteamID_t::SteamIDComponent_t m_comp;
	unsigned __int64 m_unAll64Bits;
};

/* 4420 */
struct __cppobj CSteamID
{
	CSteamID::SteamID_t m_steamid;
};

/* 4421 */
struct __cppobj CCallbackBase
{
	CCallbackBaseVtbl *vfptr;
	char m_nCallbackFlags;
	int m_iCallback;
};

/* 4425 */
struct __cppobj CCallResult<CSteam,CreateItemResult_t> : CCallbackBase
{
	unsigned __int64 m_hAPICall;
	CSteam *m_pObj;
	void (__thiscall *m_Func)(CSteam *this, CreateItemResult_t *, bool);
};

/* 4427 */
struct __cppobj CCallResult<CSteam,SteamUGCQueryCompleted_t> : CCallbackBase
{
	unsigned __int64 m_hAPICall;
	CSteam *m_pObj;
	void (__thiscall *m_Func)(CSteam *this, SteamUGCQueryCompleted_t *, bool);
};

/* 4429 */
struct __cppobj CCallResult<CSteam,SubmitItemUpdateResult_t> : CCallbackBase
{
	unsigned __int64 m_hAPICall;
	CSteam *m_pObj;
	void (__thiscall *m_Func)(CSteam *this, SubmitItemUpdateResult_t *, bool);
};

/* 4432 */
struct __cppobj CCallResult<CSteam,SteamUGCRequestUGCDetailsResult_t> : CCallbackBase
{
	unsigned __int64 m_hAPICall;
	CSteam *m_pObj;
	void (__thiscall *m_Func)(CSteam *this, SteamUGCRequestUGCDetailsResult_t *, bool);
};

/* 4433 */
struct CSteam::SubscribedItems
{
	unsigned __int64 vecPublished[16];
	int curSubscribed;
	int numSubscribed;
};

/* 4423 */
struct __cppobj CSteam
{
	bool m_isSteamConnected;
	__unaligned __declspec(align(1)) CSteamID m_SteamID;
	CCallResult<CSteam,CreateItemResult_t> m_CreateItemCompleted;
	CCallResult<CSteam,SteamUGCQueryCompleted_t> m_PublishedQueryCompleted;
	CCallResult<CSteam,SubmitItemUpdateResult_t> m_SubmitItemUpdateCompleted;
	int m_RemainingPublished;
	int m_CurPagePublished;
	CString m_PublishingName;
	CString m_PublishingDir;
	int m_CloudState;
	CCallResult<CSteam,SteamUGCRequestUGCDetailsResult_t> m_RequestUGCDetailsCompleted;
	CSteam::SubscribedItems m_Subscribed;
	unsigned __int64 m_nUploadId;
	ISteamRemoteStorage *m_RemoteStorage;
	ISteamUGC *m_UGC;
	ISteamUserStats *m_UserStats;
	void (*logger)(const char *, ...);
};

/* 4442 */
struct __cppobj CProgressBar
{
	unsigned int m_nSecondsToTimeout;
	int m_nProgressBarCaption;
	int m_nParchmentCaption;
	int m_nActionProgress;
	int m_nActionTarget;
	char m_bTravelActive;
	char m_bWaiting;
	int m_nWaitingReason;
	char m_bDisableMinibars;
	char m_bTimeoutVisible;
	char m_bProgressBarActivated;
	char m_bRemoteWaiting[6];
	int m_nRemoteActionProgress[6];
	int m_nRemoteActionTarget[6];
	int m_nRemoteWaitingReason[6];
};

/* 4328 */
struct __cppobj CChitin
{
	CChitinVtbl *vfptr;
	__declspec(align(8)) int m_mouseLButton;
	int m_mouseRButton;
	int m_bMouseLButtonDown;
	tagPOINT m_mouseLDblClickPoint;
	unsigned int m_mouseLDblClickCount;
	int m_bMouseRButtonDown;
	tagPOINT m_mouseRDblClickPoint;
	unsigned int m_mouseRDblClickCount;
	int m_bMouseMButtonDown;
	tagPOINT m_mouseMDblClickPoint;
	unsigned int m_mouseMDblClickCount;
	unsigned int m_mouseDblClickTime;
	tagSIZE m_mouseDblClickSize;
	int bEngineActive;
	int bServicingEnabled;
	int bMessagesEnabled;
	CObList lEngines;
	unsigned int nIterations;
	CWarp *pStartingEngine;
	unsigned int nTimer;
	unsigned int nTimerRes;
	CString m_sCommandLine;
	CRect m_rClient;
	char m_bReInitializing;
	char m_bScreenEdgeScroll;
	unsigned int m_opSystemPlatformId;
	__int16 m_capsLockState;
	CPoint m_ptScreen;
	int m_bStartUpHost;
	int m_bStartUpConnect;
	CString m_sStartUpAddress;
	CString m_sStartUpPort;
	CString m_sStartUpPlayer;
	CString m_sStartUpPassword;
	int m_bStartUpNewGame;
	int m_bStartUpLoadGame;
	CString m_sStartUpSession;
	char m_bStartUpDirectPlayLobby;
	char m_bStartUpGameSpyLocation;
	CString m_sStartUpGameSpyLocation;
	char m_bStartUpThroneOfBhaal;
	CSoundMixer *cSoundMixer;
	int m_nMaxPlayers;
	int m_nCurrentSong;
	_EAXPRESET m_nSoundEnvironment;
	int m_bSoundInitialized;
	char padding;
	int m_bInMouseWheelQueue;
	CTypedPtrList<CPtrList,long *> m_lstMouseWheel;
	unsigned int m_wheelScrollLines;
	int m_bIsMouseInWindow;
	int m_bFrameOutline;
	int m_bUseMirrorFX;
	unsigned int m_msgAutoPlay;
	void *m_hEvent;
	char m_bUsePlanescapeSoundReductionCurve;
	unsigned int m_nSoundReductionCurveRadius;
	unsigned int m_nTickCount;
	int m_nAIPerSec;
	int m_nAIElasped;
	unsigned int m_nRenderTickCount;
	int m_nRenderPerSec;
	int m_nRenderElasped;
	int m_nAISleeper;
	int m_bIsTouchUI;
	int m_bUseBGRA;
	int m_bRenderTilesLinear;
	CString m_sFontName;
	int m_nFullFrameTimer;
	int m_nGameTimer;
	int m_nRenderTimer;
	int m_nSearchTimer;
	CWarp *pActiveEngine;
	CVideo cVideo;
	CNetwork cNetwork;
	CSteam cSteam;
	char padding2;
	int bPointerUpdated;
	CPoint cMousePosition;
	int nAUCounter;
	int bInTimer;
	int m_AIStale;
	int m_displayStale;
	int m_bInSyncUpdate;
	unsigned int m_keyRepeatDelay;
	unsigned int m_keyRepeatRate;
	CProgressBar cProgressBar;
	unsigned __int16 m_nAICounter;
	int m_bManualFrameControl;
	int m_displayDebug;
	int m_displaySerialize;
	int m_bExitOnError;
	int m_bEnableCucumber;
	CResRef *pCurRes;
	CString m_sFontNameNormal;
	CString m_sFontNameRealms;
	CString m_sFontNameStoneBig;
	CString m_sFontNameStoneSml;
	CString m_sFontNameToolFont;
	CString m_sFontNameFloatTxt;
	int m_bDisplaySubtitles;
	int m_bReverseMouseWheelZoom;
};

/* 4340 */
struct CChitinVtbl
{
	void (__thiscall *SynchronousUpdate)(CChitin *this);
	_BYTE gap4[24];
	unsigned int (__thiscall *GetIDSSetGameResolution)(CChitin *this);
	unsigned int (__thiscall *GetIDSSetGameBitDepth)(CChitin *this);
	unsigned int (__thiscall *GetIDSBadDeskTopBitDepth)(CChitin *this);
	unsigned int (__thiscall *GetIDSWindowsFonts)(CChitin *this);
	CRes *(__thiscall *AllocResObject)(CChitin *this, int);
	CString *(__thiscall *GetIconRes)(CChitin *this);
	void (__thiscall *GetScreenShotFilePrefix)(CChitin *this, CString *);
	int (__thiscall *FontRectOutline)(CChitin *this);
	int (__thiscall *InitializeServices)(CChitin *this);
	void (__thiscall *SetProgressBar)(CChitin *this, char, int, int, int, char, int, char, int, char, char, unsigned int);
	void (__thiscall *SetProgressBarActivateEngine)(CChitin *this, int);
	void (__thiscall *BroadcastMultiplayerProgressBarInfo)(CChitin *this);
	void (__thiscall *SetCDSwitchStatus)(CChitin *this, char, char, char, CString *, char, char, char);
	void (__thiscall *SetCDSwitchActivateEngine)(CChitin *this, int);
	void (__thiscall *OnMultiplayerSessionOpen)(CChitin *this, CString *, CString *, CString *);
	void (__thiscall *OnMultiplayerSessionToClose)(CChitin *this);
	void (__thiscall *OnMultiplayerSessionClose)(CChitin *this);
	void (__thiscall *OnMultiplayerPlayerJoin)(CChitin *this, int, CString *);
	void (__thiscall *OnMultiplayerPlayerVisible)(CChitin *this, int);
	void (__thiscall *OnMultiplayerPlayerLeave)(CChitin *this, int, CString *);
	int (__thiscall *MessageCallback)(CChitin *this, char *, unsigned int);
	char (__thiscall *GetGamespyResponse)(CChitin *this, char, char **, unsigned int *);
	void (__thiscall *AsynchronousUpdate)(CChitin *this, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
	void (__thiscall *SelectEngine)(CChitin *this, CWarp *);
	void (__thiscall *ShutDown)(CChitin *this, int, const char *, const char *);
	const char *(__thiscall *GetKeyFileName)(CChitin *this);
	char (__thiscall *GetNumberSoundChannels)(CChitin *this);
	int (__thiscall *GetMovieVolume)(CChitin *this);
	void (__thiscall *LoadOptions)(CChitin *this);
	void (__thiscall *PreLoadFonts)(CChitin *this);
	void (__thiscall *SetSoundVolumes)(CChitin *this);
	unsigned __int16 (__thiscall *GetMultiplayerGameSpyPort)(CChitin *this);
	unsigned __int16 (__thiscall *GetMultiplayerDirectPlayPort)(CChitin *this);
	void (__thiscall *SetRenderCount)(CChitin *this, char);
	int (__thiscall *ConfirmQuit)(CChitin *this);
	void (__thiscall *GetGameSpyGameName)(CChitin *this, CString *);
	void (__thiscall *GetGameSpyCode)(CChitin *this, CString *);
	void (__thiscall *GetPanicCDStrings)(CChitin *this, CString *, CString *, CString *);
	void (__thiscall *OnMixerInitialize)(CChitin *this);
	int (__thiscall *Is3DSound)(CChitin *this, int);
	int (__thiscall *GetEAXActive)(CChitin *this);
	void (__thiscall *RedrawScreen)(CChitin *this);
	char (__thiscall *GetSoundEnvironment)(CChitin *this, CString, unsigned int *, float *, float *, float *, float *);
	char (__thiscall *CutsceneModeActive)(CChitin *this);
};

/* 4335 */
struct CObjectVtbl
{
	void *(__thiscall *__vecDelDtor)(CObject *this, unsigned int);
};

/* 4337 */
struct CObList::CNode
{
	CObList::CNode *pNext;
	CObList::CNode *pPrev;
	CObject *data;
};

/* 4338 */
struct CPlex
{
	CPlex *pNext;
	unsigned int dwReserved[1];
};

/* 4336 */
struct __cppobj CWarp : CObject
{
	CWarp *pLastEngine;
	CObList lTimers;
};

/* 4354 */
struct __cppobj CSoundMixer
{
	CSoundMixerImp *pimpl;
};

/* 4350 */
struct CPtrList::CNode
{
	CPtrList::CNode *pNext;
	CPtrList::CNode *pPrev;
	void *data;
};

/* 4371 */
struct __cppobj __declspec(align(2)) CVidPalette
{
	unsigned int m_nAUCounter;
	unsigned int m_nAUCounterBase;
	tagRGBQUAD *m_pPalette;
	int m_nEntries;
	unsigned int rgbGlobalTint;
	unsigned __int16 m_nType;
	char m_bPaletteOwner;
	int m_bSubRangesCalculated;
	char m_rangeColors[7];
};

/* 4372 */
struct CVIDIMG_PALETTEAFFECT
{
	unsigned int rgbTintColor;
	unsigned int rgbAddColor;
	unsigned int rgbLightColor;
	unsigned int *pRangeTints[7];
	char aRangeTintPeriods[8];
	unsigned int *pRangeAdds[7];
	char aRangeAddPeriods[8];
	unsigned int *pRangeLights[7];
	char aRangeLightPeriods[7];
	char suppressTints;
};

/* 4373 */
struct __cppobj CVidImage
{
	CVidPalette m_cPalette;
	CVIDIMG_PALETTEAFFECT mPaletteAffects;
};

/* 4330 */
struct __cppobj CResRef
{
	char m_resRef[8];
};

/* 4377 */
struct __cppobj CResHelper<CResBitmap,1>
{
	CResBitmap *pRes;
	CResRef cResRef;
};

/* 4378 */
struct __cppobj CVidBitmap : CVidImage, CResHelper<CResBitmap,1>
{
	__int16 m_nBitCount;
	CString m_szResFileName;
};

/* 4370 */
struct tagRGBQUAD
{
	char rgbBlue;
	char rgbGreen;
	char rgbRed;
	char rgbReserved;
};

/* 4394 */
struct __cppobj CVidMode
{
	int m_nPrintFile;
	int m_nPointerNumber;
	unsigned int m_dwCursorRenderFlags;
	unsigned int m_dwRedMask;
	unsigned int m_dwGreenMask;
	unsigned int m_dwBlueMask;
	char m_bFadeTo;
	char m_nFade;
	SDL_Window *m_pWindow;
	void *m_glContext;
	CVidBitmap m_circle;
	int nWidth;
	int nHeight;
	bool bRedrawEntireScreen;
	bool bHardwareMouseCursor;
	CVidCell *pPointerVidCell;
	CVidCell *pTooltipVidCell;
	char m_bPrintScreen;
	unsigned int nTickCount;
	float m_fInputScale;
	unsigned int rgbGlobalTint;
	char m_nGammaCorrection;
	char m_nBrightnessCorrection;
	int m_nScreenScrollY;
	int m_nScreenScrollX;
	int nRShift;
	int nGShift;
	int nBShift;
	tagRGBQUAD rgbTint;
	int bPointerEnabled;
	CRect rPointerStorage;
	CRect m_rLockedRect;
	CVidCell *m_lastCursor;
	int m_lastCursorFrame;
	int m_lastCursorSequence;
	int m_lastCursorNumber;
	unsigned int m_lastCursorFlags;
	unsigned int m_lastCursorResId;
	SDL_Cursor *m_hwCursor;
	SDL_Surface *m_hwCursorSurface;
	int nVRamSurfaces;
	CVidBitmap m_rgbMasterBitmap;
};

/* 4400 */
struct __declspec(align(4)) DP_Player
{
	unsigned int id;
	char name[32];
	char remoteAddr[32];
	int sessionId;
	unsigned int flags;
	void *batton;
	IDPPeer *peer;
	bool in_game;
};

/* 4396 */
struct __cppobj DP_Packet
{
	unsigned int flags;
	char *data;
	unsigned int dataLength;
	unsigned int offset;
};

/* 4408 */
struct __cppobj IDPProvider
{
	IDPProviderVtbl *vfptr;
};

/* 4397 */
struct __cppobj IDPPeer
{
	IDPPeerVtbl *vfptr;
	int m_packetSentCount;
	int m_packetReceivedCount;
};

/* 4422 */
struct CCallbackBaseVtbl
{
	void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
	void (__thiscall *Run)(CCallbackBase *this, void *);
	int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
};

/* 4424 */
struct __declspec(align(8)) CreateItemResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
	bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
};

/* 4426 */
struct __declspec(align(4)) SteamUGCQueryCompleted_t
{
	unsigned __int64 m_handle;
	EResult m_eResult;
	unsigned int m_unNumResultsReturned;
	unsigned int m_unTotalMatchingResults;
	bool m_bCachedData;
};

/* 4428 */
struct __declspec(align(4)) SubmitItemUpdateResult_t
{
	EResult m_eResult;
	bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
};

/* 4430 */
struct __declspec(align(8)) SteamUGCDetails_t
{
	unsigned __int64 m_nPublishedFileId;
	EResult m_eResult;
	EWorkshopFileType m_eFileType;
	unsigned int m_nCreatorAppID;
	unsigned int m_nConsumerAppID;
	char m_rgchTitle[129];
	char m_rgchDescription[8000];
	unsigned __int64 m_ulSteamIDOwner;
	unsigned int m_rtimeCreated;
	unsigned int m_rtimeUpdated;
	unsigned int m_rtimeAddedToUserList;
	ERemoteStoragePublishedFileVisibility m_eVisibility;
	bool m_bBanned;
	bool m_bAcceptedForUse;
	bool m_bTagsTruncated;
	char m_rgchTags[1025];
	unsigned __int64 m_hFile;
	unsigned __int64 m_hPreviewFile;
	char m_pchFileName[260];
	int m_nFileSize;
	int m_nPreviewFileSize;
	char m_rgchURL[256];
	unsigned int m_unVotesUp;
	unsigned int m_unVotesDown;
	float m_flScore;
	unsigned int m_unNumChildren;
};

/* 4431 */
struct __declspec(align(8)) SteamUGCRequestUGCDetailsResult_t
{
	SteamUGCDetails_t m_details;
	bool m_bCachedData;
};

/* 4434 */
struct __cppobj ISteamRemoteStorage
{
	ISteamRemoteStorageVtbl *vfptr;
};

/* 4437 */
struct __cppobj ISteamUGC
{
	ISteamUGCVtbl *vfptr;
};

/* 4439 */
struct __cppobj ISteamUserStats
{
	ISteamUserStatsVtbl *vfptr;
};

/* 4332 */
struct view_t
{
	void *viewOfFile;
	unsigned int viewBase;
	unsigned int viewSize;
	int size;
};

/* 4329 */
struct __cppobj __declspec(align(4)) CRes
{
	CResVtbl *vfptr;
	const char *resref;
	int type;
	view_t view;
	unsigned int nID;
	int zip_id;
	int override_id;
	void *pData;
	unsigned int nSize;
	unsigned int nCount;
	bool bWasMalloced;
	bool bLoaded;
};

/* 4347 */
struct __cppobj CSoundProperties
{
	_EAXPRESET m_iEAXpreset;
};

/* 4348 */
struct __cppobj CDWordArray : CObject
{
	unsigned int *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 4349 */
struct __cppobj CObArray : CObject
{
	CObject **m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 4352 */
struct __cppobj CTypedPtrList<CPtrList,CMusicPosition *> : CPtrList
{
};

/* 4353 */
struct __cppobj CSoundMixerImp
{
	struct ALCcontext_struct *alContext;
	struct ALCdevice_struct *alDevice;
	float pos[3];
	int bMixerInitialized;
	int bStreamPlaying;
	int m_bMusicInitialized;
	int bInPositionUpdate;
	int bInSoundUpdate;
	int bInQueueUpdate;
	int bInLoopingUpdate;
	unsigned int m_dwEAXProperties;
	CSoundProperties m_soundProperties;
	int m_nNumSongs;
	int m_nLastSong;
	int m_nCurrentSong;
	int m_nQuietMusicVolume;
	unsigned int m_nActiveArea;
	int m_nDuckingOn;
	CDWordArray m_aMusicSlots;
	char m_tSqrtTable[10001];
	int nMaxVoices;
	CObList lVoices;
	CObList lWaiting;
	CObList lLooping;
	CObArray aChannels;
	int nMaxChannels;
	int nGlobalVolume;
	int nPanRange;
	int nXCoordinate;
	int nYCoordinate;
	int nZCoordinate;
	CTypedPtrList<CPtrList,CMusicPosition *> m_lMusicPositions;
};

/* 4359 */
struct SDL_Rect
{
	int x;
	int y;
	int w;
	int h;
};

/* 4363 */
struct SDL_DisplayMode
{
	unsigned int format;
	int w;
	int h;
	int refresh_rate;
	void *driverdata;
};

/* 4364 */
struct SDL_Window
{
	const void *magic;
	unsigned int id;
	char *title;
	SDL_Surface *icon;
	int x;
	int y;
	int w;
	int h;
	int min_w;
	int min_h;
	int max_w;
	int max_h;
	unsigned int flags;
	unsigned int last_fullscreen_flags;
	SDL_Rect windowed;
	SDL_DisplayMode fullscreen_mode;
	float brightness;
	unsigned __int16 *gamma;
	unsigned __int16 *saved_gamma;
	SDL_Surface *surface;
	SDL_bool surface_valid;
	SDL_bool is_hiding;
	SDL_bool is_destroying;
	SDL_WindowShaper *shaper;
	SDL_HitTestResult (__cdecl *hit_test)(SDL_Window *, SDL_Point *, void *);
	void *hit_test_data;
	SDL_WindowUserData *data;
	void *driverdata;
	SDL_Window *prev;
	SDL_Window *next;
};

/* 4376 */
struct __cppobj CResBitmap : CRes
{
	char *m_pDataDecompressed;
	int texture;
	int nColors;
	int nXWords;
	char *m_pData;
	tagBITMAPFILEHEADER *pBitmapFileHeader;
	tagBITMAPINFOHEADER *pBitmapInfoHeader;
	tagRGBQUAD *pColorTable;
};

/* 4387 */
struct __cppobj CResHelper<CResCell,1000>
{
	CResCell *pRes;
	CResRef cResRef;
};

/* 4388 */
struct __cppobj __declspec(align(4)) CVidCell : CVidImage, CResHelper<CResCell,1000>
{
	CVidCellVtbl *vfptr;
	__int16 m_nCurrentFrame;
	unsigned __int16 m_nCurrentSequence;
	int m_nAnimType;
	int m_bPaletteChanged;
	frameTableEntry_st *m_pFrame;
	char m_bShadowOn;
};

/* 4393 */
struct SDL_Cursor
{
	SDL_Cursor *next;
	void *driverdata;
};

/* 4360 */
struct SDL_Surface
{
	unsigned int flags;
	SDL_PixelFormat *format;
	int w;
	int h;
	int pitch;
	void *pixels;
	void *userdata;
	int locked;
	void *lock_data;
	SDL_Rect clip_rect;
	SDL_BlitMap *map;
	int refcount;
};

/* 4410 */
union $0D6EAEC55292FED49B9FB9617DFB93BA
{
	void (__thiscall *~IDPProvider)(IDPProvider *this);
	void *(__thiscall *__vecDelDtor)(IDPProvider *this, unsigned int);
};

/* 4411 */
struct IDPProviderVtbl
{
	void (__thiscall *Connect)(IDPProvider *this, int, const char *);
	void (__thiscall *Listen)(IDPProvider *this, int, const char *) __declspec(align(8));
	bool (__thiscall *Pump)(IDPProvider *this, DP_Event *);
	void (__thiscall *Close)(IDPProvider *this);
	void (__thiscall *RequestSessionDetails)(IDPProvider *this, int);
	void (__thiscall *AllowJoin)(IDPProvider *this, bool);
	void (__thiscall *SetVersion)(IDPProvider *this, const char *);
	bool (__thiscall *IsBackendConnected)(IDPProvider *this);
	$0D6EAEC55292FED49B9FB9617DFB93BA ___u8;
};

/* 4398 */
union $821C5BD7E60FF7C325F64AD66E58DD23
{
	void (__thiscall *~IDPPeer)(IDPPeer *this);
	void *(__thiscall *__vecDelDtor)(IDPPeer *this, unsigned int);
};

/* 4399 */
struct IDPPeerVtbl
{
	void (__thiscall *Send)(IDPPeer *this, DP_Packet *, int);
	DP_Packet *(__thiscall *GetFrontPacket)(IDPPeer *this);
	int (__thiscall *HasData)(IDPPeer *this);
	void (__thiscall *Disconnect)(IDPPeer *this);
	void (__thiscall *GetAddress)(IDPPeer *this, char *, unsigned int);
	$821C5BD7E60FF7C325F64AD66E58DD23 ___u5;
};

/* 4436 */
struct ISteamRemoteStorageVtbl
{
	bool (__thiscall *FileWrite)(ISteamRemoteStorage *this, const char *, const void *, int);
	_BYTE gap4[24];
	bool (__thiscall *FileWriteStreamWriteChunk)(ISteamRemoteStorage *this, unsigned __int64, const void *, int);
	bool (__thiscall *FileWriteStreamClose)(ISteamRemoteStorage *this, unsigned __int64);
	bool (__thiscall *FileWriteStreamCancel)(ISteamRemoteStorage *this, unsigned __int64);
	bool (__thiscall *FileExists)(ISteamRemoteStorage *this, const char *);
	bool (__thiscall *FilePersisted)(ISteamRemoteStorage *this, const char *);
	int (__thiscall *GetFileSize)(ISteamRemoteStorage *this, const char *);
	__int64 (__thiscall *GetFileTimestamp)(ISteamRemoteStorage *this, const char *);
	ERemoteStoragePlatform (__thiscall *GetSyncPlatforms)(ISteamRemoteStorage *this, const char *);
	int (__thiscall *GetFileCount)(ISteamRemoteStorage *this);
	const char *(__thiscall *GetFileNameAndSize)(ISteamRemoteStorage *this, int, int *);
	bool (__thiscall *GetQuota)(ISteamRemoteStorage *this, int *, int *);
	bool (__thiscall *IsCloudEnabledForAccount)(ISteamRemoteStorage *this);
	bool (__thiscall *IsCloudEnabledForApp)(ISteamRemoteStorage *this);
	void (__thiscall *SetCloudEnabledForApp)(ISteamRemoteStorage *this, bool);
	unsigned __int64 (__thiscall *UGCDownload)(ISteamRemoteStorage *this, unsigned __int64, unsigned int);
	bool (__thiscall *GetUGCDownloadProgress)(ISteamRemoteStorage *this, unsigned __int64, int *, int *);
	bool (__thiscall *GetUGCDetails)(ISteamRemoteStorage *this, unsigned __int64, unsigned int *, char **, int *, CSteamID *);
	int (__thiscall *UGCRead)(ISteamRemoteStorage *this, unsigned __int64, void *, int, unsigned int, EUGCReadAction);
	int (__thiscall *GetCachedUGCCount)(ISteamRemoteStorage *this);
	unsigned __int64 (__thiscall *GetCachedUGCHandle)(ISteamRemoteStorage *this, int);
	unsigned __int64 (__thiscall *PublishWorkshopFile)(ISteamRemoteStorage *this, const char *, const char *, unsigned int, const char *, const char *, ERemoteStoragePublishedFileVisibility, SteamParamStringArray_t *, EWorkshopFileType);
	unsigned __int64 (__thiscall *CreatePublishedFileUpdateRequest)(ISteamRemoteStorage *this, unsigned __int64);
	bool (__thiscall *UpdatePublishedFileFile)(ISteamRemoteStorage *this, unsigned __int64, const char *);
	bool (__thiscall *UpdatePublishedFilePreviewFile)(ISteamRemoteStorage *this, unsigned __int64, const char *);
	bool (__thiscall *UpdatePublishedFileTitle)(ISteamRemoteStorage *this, unsigned __int64, const char *);
	bool (__thiscall *UpdatePublishedFileDescription)(ISteamRemoteStorage *this, unsigned __int64, const char *);
	bool (__thiscall *UpdatePublishedFileVisibility)(ISteamRemoteStorage *this, unsigned __int64, ERemoteStoragePublishedFileVisibility);
	bool (__thiscall *UpdatePublishedFileTags)(ISteamRemoteStorage *this, unsigned __int64, SteamParamStringArray_t *);
	unsigned __int64 (__thiscall *CommitPublishedFileUpdate)(ISteamRemoteStorage *this, unsigned __int64);
	unsigned __int64 (__thiscall *GetPublishedFileDetails)(ISteamRemoteStorage *this, unsigned __int64, unsigned int);
	unsigned __int64 (__thiscall *DeletePublishedFile)(ISteamRemoteStorage *this, unsigned __int64);
	unsigned __int64 (__thiscall *EnumerateUserPublishedFiles)(ISteamRemoteStorage *this, unsigned int);
	unsigned __int64 (__thiscall *SubscribePublishedFile)(ISteamRemoteStorage *this, unsigned __int64);
	unsigned __int64 (__thiscall *EnumerateUserSubscribedFiles)(ISteamRemoteStorage *this, unsigned int);
	unsigned __int64 (__thiscall *UnsubscribePublishedFile)(ISteamRemoteStorage *this, unsigned __int64);
	bool (__thiscall *UpdatePublishedFileSetChangeDescription)(ISteamRemoteStorage *this, unsigned __int64, const char *);
	unsigned __int64 (__thiscall *GetPublishedItemVoteDetails)(ISteamRemoteStorage *this, unsigned __int64);
	unsigned __int64 (__thiscall *UpdateUserPublishedItemVote)(ISteamRemoteStorage *this, unsigned __int64, bool);
	unsigned __int64 (__thiscall *GetUserPublishedItemVoteDetails)(ISteamRemoteStorage *this, unsigned __int64);
	unsigned __int64 (__thiscall *EnumerateUserSharedWorkshopFiles)(ISteamRemoteStorage *this, CSteamID, unsigned int, SteamParamStringArray_t *, SteamParamStringArray_t *);
	unsigned __int64 (__thiscall *PublishVideo)(ISteamRemoteStorage *this, EWorkshopVideoProvider, const char *, const char *, const char *, unsigned int, const char *, const char *, ERemoteStoragePublishedFileVisibility, SteamParamStringArray_t *);
	unsigned __int64 (__thiscall *SetUserPublishedFileAction)(ISteamRemoteStorage *this, unsigned __int64, EWorkshopFileAction);
	unsigned __int64 (__thiscall *EnumeratePublishedFilesByUserAction)(ISteamRemoteStorage *this, EWorkshopFileAction, unsigned int);
	unsigned __int64 (__thiscall *EnumeratePublishedWorkshopFiles)(ISteamRemoteStorage *this, EWorkshopEnumerationType, unsigned int, unsigned int, unsigned int, SteamParamStringArray_t *, SteamParamStringArray_t *);
	unsigned __int64 (__thiscall *UGCDownloadToLocation)(ISteamRemoteStorage *this, unsigned __int64, const char *, unsigned int);
};

/* 4438 */
struct ISteamUGCVtbl
{
	unsigned __int64 (__thiscall *CreateQueryUserUGCRequest)(ISteamUGC *this, unsigned int, EUserUGCList, EUGCMatchingUGCType, EUserUGCListSortOrder, unsigned int, unsigned int, unsigned int);
	_BYTE gap4[12];
	bool (__thiscall *ReleaseQueryUGCRequest)(ISteamUGC *this, unsigned __int64);
	bool (__thiscall *AddRequiredTag)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *AddExcludedTag)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *SetReturnLongDescription)(ISteamUGC *this, unsigned __int64, bool);
	bool (__thiscall *SetReturnTotalOnly)(ISteamUGC *this, unsigned __int64, bool);
	bool (__thiscall *SetAllowCachedResponse)(ISteamUGC *this, unsigned __int64, unsigned int);
	bool (__thiscall *SetCloudFileNameFilter)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *SetMatchAnyTag)(ISteamUGC *this, unsigned __int64, bool);
	bool (__thiscall *SetSearchText)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *SetRankedByTrendDays)(ISteamUGC *this, unsigned __int64, unsigned int);
	unsigned __int64 (__thiscall *RequestUGCDetails)(ISteamUGC *this, unsigned __int64, unsigned int);
	unsigned __int64 (__thiscall *CreateItem)(ISteamUGC *this, unsigned int, EWorkshopFileType);
	unsigned __int64 (__thiscall *StartItemUpdate)(ISteamUGC *this, unsigned int, unsigned __int64);
	bool (__thiscall *SetItemTitle)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *SetItemDescription)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *SetItemVisibility)(ISteamUGC *this, unsigned __int64, ERemoteStoragePublishedFileVisibility);
	bool (__thiscall *SetItemTags)(ISteamUGC *this, unsigned __int64, SteamParamStringArray_t *);
	bool (__thiscall *SetItemContent)(ISteamUGC *this, unsigned __int64, const char *);
	bool (__thiscall *SetItemPreview)(ISteamUGC *this, unsigned __int64, const char *);
	unsigned __int64 (__thiscall *SubmitItemUpdate)(ISteamUGC *this, unsigned __int64, const char *);
	EItemUpdateStatus (__thiscall *GetItemUpdateProgress)(ISteamUGC *this, unsigned __int64, unsigned __int64 *, unsigned __int64 *);
	unsigned __int64 (__thiscall *SubscribeItem)(ISteamUGC *this, unsigned __int64);
	unsigned __int64 (__thiscall *UnsubscribeItem)(ISteamUGC *this, unsigned __int64);
	unsigned int (__thiscall *GetNumSubscribedItems)(ISteamUGC *this);
	unsigned int (__thiscall *GetSubscribedItems)(ISteamUGC *this, unsigned __int64 *, unsigned int);
	bool (__thiscall *GetItemInstallInfo)(ISteamUGC *this, unsigned __int64, unsigned __int64 *, char *, unsigned int, bool *);
	bool (__thiscall *GetItemUpdateInfo)(ISteamUGC *this, unsigned __int64, bool *, bool *, unsigned __int64 *, unsigned __int64 *);
};

/* 4441 */
struct ISteamUserStatsVtbl
{
	bool (__thiscall *RequestCurrentStats)(ISteamUserStats *this);
	_BYTE gap4[20];
	bool (__thiscall *GetAchievement)(ISteamUserStats *this, const char *, bool *);
	bool (__thiscall *SetAchievement)(ISteamUserStats *this, const char *);
	bool (__thiscall *ClearAchievement)(ISteamUserStats *this, const char *);
	bool (__thiscall *GetAchievementAndUnlockTime)(ISteamUserStats *this, const char *, bool *, unsigned int *);
	bool (__thiscall *StoreStats)(ISteamUserStats *this);
	int (__thiscall *GetAchievementIcon)(ISteamUserStats *this, const char *);
	const char *(__thiscall *GetAchievementDisplayAttribute)(ISteamUserStats *this, const char *, const char *);
	bool (__thiscall *IndicateAchievementProgress)(ISteamUserStats *this, const char *, unsigned int, unsigned int);
	unsigned int (__thiscall *GetNumAchievements)(ISteamUserStats *this);
	const char *(__thiscall *GetAchievementName)(ISteamUserStats *this, unsigned int);
	unsigned __int64 (__thiscall *RequestUserStats)(ISteamUserStats *this, CSteamID);
	bool (__thiscall *GetUserStat)(ISteamUserStats *this, CSteamID, const char *, float *);
	bool (__thiscall *GetUserStat)(ISteamUserStats *this, CSteamID, const char *, int *);
	bool (__thiscall *GetUserAchievement)(ISteamUserStats *this, CSteamID, const char *, bool *);
	bool (__thiscall *GetUserAchievementAndUnlockTime)(ISteamUserStats *this, CSteamID, const char *, bool *, unsigned int *);
	bool (__thiscall *ResetAllStats)(ISteamUserStats *this, bool);
	unsigned __int64 (__thiscall *FindOrCreateLeaderboard)(ISteamUserStats *this, const char *, ELeaderboardSortMethod, ELeaderboardDisplayType);
	unsigned __int64 (__thiscall *FindLeaderboard)(ISteamUserStats *this, const char *);
	const char *(__thiscall *GetLeaderboardName)(ISteamUserStats *this, unsigned __int64);
	int (__thiscall *GetLeaderboardEntryCount)(ISteamUserStats *this, unsigned __int64);
	ELeaderboardSortMethod (__thiscall *GetLeaderboardSortMethod)(ISteamUserStats *this, unsigned __int64);
	ELeaderboardDisplayType (__thiscall *GetLeaderboardDisplayType)(ISteamUserStats *this, unsigned __int64);
	unsigned __int64 (__thiscall *DownloadLeaderboardEntries)(ISteamUserStats *this, unsigned __int64, ELeaderboardDataRequest, int, int);
	unsigned __int64 (__thiscall *DownloadLeaderboardEntriesForUsers)(ISteamUserStats *this, unsigned __int64, CSteamID *, int);
	bool (__thiscall *GetDownloadedLeaderboardEntry)(ISteamUserStats *this, unsigned __int64, int, LeaderboardEntry_t *, int *, int);
	unsigned __int64 (__thiscall *UploadLeaderboardScore)(ISteamUserStats *this, unsigned __int64, ELeaderboardUploadScoreMethod, int, const int *, int);
	unsigned __int64 (__thiscall *AttachLeaderboardUGC)(ISteamUserStats *this, unsigned __int64, unsigned __int64);
	unsigned __int64 (__thiscall *GetNumberOfCurrentPlayers)(ISteamUserStats *this);
	unsigned __int64 (__thiscall *RequestGlobalAchievementPercentages)(ISteamUserStats *this);
	int (__thiscall *GetMostAchievedAchievementInfo)(ISteamUserStats *this, char *, unsigned int, float *, bool *);
	int (__thiscall *GetNextMostAchievedAchievementInfo)(ISteamUserStats *this, int, char *, unsigned int, float *, bool *);
	bool (__thiscall *GetAchievementAchievedPercent)(ISteamUserStats *this, const char *, float *);
	unsigned __int64 (__thiscall *RequestGlobalStats)(ISteamUserStats *this, int);
	bool (__thiscall *GetGlobalStat)(ISteamUserStats *this, const char *, long double *);
	bool (__thiscall *GetGlobalStat)(ISteamUserStats *this, const char *, __int64 *);
	int (__thiscall *GetGlobalStatHistory)(ISteamUserStats *this, const char *, long double *, unsigned int);
	int (__thiscall *GetGlobalStatHistory)(ISteamUserStats *this, const char *, __int64 *, unsigned int);
};

/* 4331 */
struct CResVtbl
{
	bool (__thiscall *Parse)(CRes *this, void *);
	void (__thiscall *Dump)(CRes *this);
	CResRef *(__thiscall *GetResRef)(CRes *this, CResRef *result);
};

/* 4356 */
struct SDL_Color
{
	char r;
	char g;
	char b;
	char a;
};

/* 4365 */
union SDL_WindowShapeParams
{
	char binarizationCutoff;
	SDL_Color colorKey;
};

/* 4366 */
struct SDL_WindowShapeMode
{
	WindowShapeMode mode;
	SDL_WindowShapeParams parameters;
};

/* 4367 */
struct SDL_WindowShaper
{
	SDL_Window *window;
	unsigned int userx;
	unsigned int usery;
	SDL_WindowShapeMode mode;
	SDL_bool hasshape;
	void *driverdata;
};

/* 4368 */
const struct SDL_Point
{
	int x;
	int y;
};

/* 4369 */
struct SDL_WindowUserData
{
	char *name;
	void *data;
	SDL_WindowUserData *next;
};

/* 4374 */
struct __unaligned __declspec(align(2)) tagBITMAPFILEHEADER
{
	unsigned __int16 bfType;
	unsigned int bfSize;
	unsigned __int16 bfReserved1;
	unsigned __int16 bfReserved2;
	unsigned int bfOffBits;
};

/* 4375 */
struct tagBITMAPINFOHEADER
{
	unsigned int biSize;
	int biWidth;
	int biHeight;
	unsigned __int16 biPlanes;
	unsigned __int16 biBitCount;
	unsigned int biCompression;
	unsigned int biSizeImage;
	int biXPelsPerMeter;
	int biYPelsPerMeter;
	unsigned int biClrUsed;
	unsigned int biClrImportant;
};

/* 4392 */
struct CVidCellVtbl
{
	int (__thiscall *FrameAdvance)(CVidCell *this);
	int (__thiscall *Render)(CVidCell *this, unsigned int *, int, int, int, CRect *, unsigned int, CPoint *);
	int (__thiscall *Render)(CVidCell *this, int, int, CRect *, CVidPoly *, int, unsigned int, int);
	void (__thiscall *StoreBackground)(CVidCell *this, int, int, CRect *, CRect *, char);
	int (__thiscall *GetFrame)(CVidCell *this);
};

/* 4386 */
struct __cppobj CResCell : CRes
{
	void *pUncompressedData;
	unsigned int nUncompressedSize;
	bamHeader_st *m_pBamHeader;
	BAMHEADERV2 *m_pBamHeaderV2;
	MOSAICQUAD *m_pQuads;
	frameTableEntry_st *m_pFrames;
	sequenceTableEntry_st *m_pSequences;
	unsigned __int16 *m_pFrameList;
	unsigned __int16 m_nFrameList;
	tagRGBQUAD *m_pPalette;
	int m_bParsing;
};

/* 4382 */
struct $38E10E40B2EF73B2161E6B3C198C0D5B
{
	__int16 nQuadStart;
	__int16 nQuadCount;
};

/* 4383 */
union $74143772CF00BB5348E7DB27ADD3AEAF
{
	unsigned int nOffset;
	$38E10E40B2EF73B2161E6B3C198C0D5B v2;
};

/* 4384 */
struct frameTableEntry_st
{
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	__int16 nCenterX;
	__int16 nCenterY;
	$74143772CF00BB5348E7DB27ADD3AEAF ___u4;
};

/* 4358 */
struct SDL_PixelFormat
{
	unsigned int format;
	SDL_Palette *palette;
	char BitsPerPixel;
	char BytesPerPixel;
	char padding[2];
	unsigned int Rmask;
	unsigned int Gmask;
	unsigned int Bmask;
	unsigned int Amask;
	char Rloss;
	char Gloss;
	char Bloss;
	char Aloss;
	char Rshift;
	char Gshift;
	char Bshift;
	char Ashift;
	int refcount;
	SDL_PixelFormat *next;
};

/* 4361 */
struct SDL_BlitInfo
{
	char *src;
	int src_w;
	int src_h;
	int src_pitch;
	int src_skip;
	char *dst;
	int dst_w;
	int dst_h;
	int dst_pitch;
	int dst_skip;
	SDL_PixelFormat *src_fmt;
	SDL_PixelFormat *dst_fmt;
	char *table;
	int flags;
	unsigned int colorkey;
	char r;
	char g;
	char b;
	char a;
};

/* 4362 */
struct SDL_BlitMap
{
	SDL_Surface *dst;
	int identity;
	int (__cdecl *blit)(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *);
	void *data;
	SDL_BlitInfo info;
	unsigned int dst_palette_version;
	unsigned int src_palette_version;
};

/* 4409 */
struct DP_Event
{
	DP_EventType type;
	IDPPeer *peer;
	char channelID;
	unsigned int data;
	DP_Packet *packet;
};

/* 4435 */
struct SteamParamStringArray_t
{
	const char **m_ppStrings;
	int m_nNumStrings;
};

/* 4440 */
struct __cppobj LeaderboardEntry_t
{
	CSteamID m_steamIDUser;
	int m_nGlobalRank;
	int m_nScore;
	int m_cDetails;
	unsigned __int64 m_hUGC;
};

/* 4391 */
struct __cppobj CVidPoly
{
	CVIDPOLY_VERTEX *m_pVertices;
	int m_nVertices;
	_EdgeDescription *m_pET;
	_EdgeDescription *m_pAET;
	void (__thiscall *m_pDrawHLineFunction)(CVidPoly *this, void *, int, int, unsigned int, CRect *, CPoint *);
};

/* 4379 */
struct bamHeader_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned __int16 nFrames;
	char nSequences;
	char nTransparentColor;
	unsigned int nTableOffset;
	unsigned int nPaletteOffset;
	unsigned int nFrameListOffset;
};

/* 4380 */
struct BAMHEADERV2
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int nFrames;
	unsigned int nSequences;
	unsigned int nQuads;
	unsigned int nFramesOffset;
	unsigned int nSequencesOffset;
	unsigned int nQuadsOffset;
};

/* 4381 */
struct MOSAICQUAD
{
	int textureIndex;
	int x;
	int y;
	int w;
	int h;
	int sx;
	int sy;
};

/* 4385 */
struct sequenceTableEntry_st
{
	__int16 nFrames;
	unsigned __int16 nStartingFrame;
};

/* 4357 */
struct SDL_Palette
{
	int ncolors;
	SDL_Color *colors;
	unsigned int version;
	int refcount;
};

/* 4389 */
struct CVIDPOLY_VERTEX
{
	unsigned __int16 x;
	unsigned __int16 y;
};

/* 4390 */
struct _EdgeDescription
{
	_EdgeDescription *pNextEdge;
	int x;
	int nStartY;
	int nXDirection;
	int nXIncrement;
	int nErrTerm;
	int nErrTermAdjUp;
	int nErrTermAdjDown;
	int nCount;
};

/* 4443 */
struct __cppobj CResFont : CRes
{
	void *font;
};

/* 4444 */
struct __cppobj CResHelper<CResFont,1034>
{
	CResFont *pRes;
	CResRef cResRef;
};

/* 4445 */
struct __cppobj CVidCellFont : CVidCell
{
};

/* 4446 */
struct __cppobj CVidFont : CResHelper<CResFont,1034>
{
	CVidCellFont *vidCellFont;
	unsigned int foreground;
	unsigned int tintcolor;
	int pointSize;
	int zoom;
};

/* 4447 */
struct __unaligned __declspec(align(2)) WAV_Header
{
	unsigned __int16 wFormatTag;
	unsigned __int16 nChannels;
	unsigned int nSamplesPerSec;
	unsigned int nAvgBytesPerSec;
	unsigned __int16 nBlockAlign;
	unsigned __int16 wBitsPerSample;
	unsigned __int16 cbSize;
};

/* 4448 */
struct __cppobj CResWave : CRes
{
	int m_bCompressed;
	int m_bIsOgg;
	unsigned int m_nWaveNormalSize;
	unsigned int m_nWaveCompressedSize;
	char *m_pWaveData;
	WAV_Header *m_pWaveFormatEx;
};

/* 4449 */
struct __cppobj CResHelper<CResWave,4>
{
	CResWave *pRes;
	CResRef cResRef;
};

/* 4450 */
struct __cppobj CSound : CObject, CResHelper<CResWave,4>
{
	CSoundImp *pimpl;
};

/* 4451 */
struct __cppobj __declspec(align(4)) CSoundImp : CObject, CResHelper<CResWave,4>
{
	CSound *m_pParent;
	int m_bPositionedSound;
	int m_dwBufferSize;
	int m_dwFrequency;
	int m_nBufferFormat;
	int m_nRange;
	int m_nRangeVolume;
	int m_nXCoordinate;
	int m_nYCoordinate;
	int m_nZCoordinate;
	int m_nPan;
	int m_nVolume;
	bool m_bSoundInitialized;
	int m_nChannel;
	int m_nPriority;
	int m_nLooping;
	int m_nPitchVariance;
	int m_nVolumeVariance;
	bool m_b3DPositionning;
	unsigned int m_nSource;
	unsigned int m_nBuffer;
	bool m_bFireForget;
	unsigned int m_nArea;
	int m_dwOverrideFlags;
	bool m_bSoundIsntDucked;
};

/* 4452 */
struct __cppobj CInfToolTip : CVidCell
{
	CString m_sText;
	CRect m_rSource;
	int m_bUseSourceRect;
	CVidFont m_textFont;
	CSound m_openSnd;
};

/* 4453 */
struct __cppobj __declspec(align(4)) CInfCursor
{
	int bVisible;
	CVidCell vcCursors;
	CVidCell vcArrow;
	CVidCell vcCustom;
	CInfToolTip vcToolTip;
	unsigned int nAnimationCounter;
	int nAnimationSpeed;
	int nCurrentCursor;
	int nDirection;
	int nState;
	char bAnimatingCustom;
};

/* 4454 */
struct __cppobj CResText : CRes
{
	CString m_string;
};

/* 4455 */
struct __cppobj CResHelper<CResText,1012>
{
	CResText *pRes;
	CResRef cResRef;
};

/* 4456 */
struct __cppobj C2DArray : CResHelper<CResText,1012>
{
	CString *m_pNamesX;
	CString *m_pNamesY;
	CString *m_pArray;
	CString m_default;
	__int16 m_nSizeX;
	__int16 m_nSizeY;
};

/* 4457 */
struct __cppobj CResHelper<CResText,1008>
{
	CResText *pRes;
	CResRef cResRef;
};

/* 4460 */
struct __cppobj CTypedPtrList<CPtrList,CAIId *> : CPtrList
{
};

/* 4458 */
struct __cppobj CAIIdList : CResHelper<CResText,1008>
{
	CAIIdListVtbl *vfptr;
	CString m_fileName;
	CTypedPtrList<CPtrList,CAIId *> m_idList;
	int m_faster;
	CAIId **m_pIdArray;
	int m_nArray;
};

/* 4459 */
struct CAIIdListVtbl
{
	void *(__thiscall *__vecDelDtor)(CAIIdList *this, unsigned int);
};

/* 4461 */
struct __cppobj CAIId
{
	int m_id;
	CString m_line;
	CString m_start;
};

/* 4462 */
struct __cppobj CRuleTables
{
	C2DArray m_tReactionModCharisma;
	C2DArray m_tReactionModReputation;
	C2DArray m_tReputationMod;
	CAIIdList m_lNoDecodeList;
	C2DArray m_tProficiencySlots;
	C2DArray m_tProficiencySlotsMax;
	C2DArray m_tSkillPointsRace;
	C2DArray m_tSkillPointsDex;
	C2DArray m_tSkillPointsBard;
	C2DArray m_tSkillPointsRanger;
	C2DArray m_tSkillPointsShaman;
	C2DArray m_tAbilityRaceReq;
	C2DArray m_tAbilityRaceAdj;
	C2DArray m_tAbilityClassReq;
	C2DArray m_tAbilityClassMod;
	C2DArray m_tAbilityDualClassSrcReq;
	C2DArray m_tAbilityDualClassDstReq;
	C2DArray m_tSavingThrowPriest;
	C2DArray m_tSavingThrowWarrior;
	C2DArray m_tSavingThrowWizard;
	C2DArray m_tSavingThrowRogue;
	C2DArray m_tSavingThrowDwarfHalfling;
	C2DArray m_tSavingThrowGnome;
	C2DArray m_tSavingThrowMonk;
	C2DArray m_tClassHitPointsTables;
	C2DArray m_tHitPointsCONBonus;
	C2DArray m_tStartingGold;
	C2DArray m_tTHAC0;
	C2DArray m_tMaxSpellsPriest;
	C2DArray m_tMaxSpellsPriestPaladin;
	C2DArray m_tMaxSpellsPriestRanger;
	C2DArray m_tMaxSpellsMage;
	C2DArray m_tMaxSpellsMageBard;
	C2DArray m_tMaxSpellsMageSorcerer;
	C2DArray m_tMaxSpellsMageDragonDisciple;
	C2DArray m_tMaxSpellsShaman;
	C2DArray m_tMaxSpellsPriestWISBonus;
	C2DArray m_tMaxSpellsPriestDruid;
	C2DArray m_tKnownSpellsSorcerer;
	C2DArray m_tKnownSpellsShaman;
	C2DArray m_tBackstabMultiplier;
	C2DArray m_tSneakAttack;
	C2DArray m_tCripplingStrike;
	C2DArray m_tExperienceLevels;
	C2DArray m_tLayOnHandsAmount;
	CAIIdList m_lInstantActions;
	CAIIdList m_lAllowWhileSleepingActions;
	C2DArray m_tMonsterSummon1;
	C2DArray m_tMonsterSummon2;
	C2DArray m_tMonsterSummon3;
	C2DArray m_tAnimalSummon1;
	C2DArray m_tAnimalSummon2;
	C2DArray m_tStrengthMod;
	C2DArray m_tStrengthModExtra;
	C2DArray m_tIntoxicationMod;
	C2DArray m_tFatigueMod;
	C2DArray m_tEffectText;
	C2DArray m_tPlayerInteraction;
	C2DArray m_tNumSpells;
	C2DArray m_tToolTips;
	C2DArray m_tStartArea;
	C2DArray m_tStartPos;
	C2DArray m_tSparkleColors;
	C2DArray m_tMonths;
	C2DArray m_tYears;
	C2DArray m_tDexterityMod;
	C2DArray m_tPostDialog;
	C2DArray m_tCharacterSounds;
	C2DArray m_tRandomEquipment;
	C2DArray m_tRandomTreasure;
	C2DArray m_tRandomTreasureIWD;
	C2DArray m_tRandomMagic;
	C2DArray m_tRandomScroll;
	C2DArray m_tRandomWeapon;
	C2DArray m_tInteractionDialog;
	C2DArray m_tIntelligenceMod;
	C2DArray m_tDonateRumor;
	C2DArray m_tAreaLinkageCaching;
	C2DArray m_tAreaLinkageCachingSingle;
	C2DArray m_tCacheValidation;
	C2DArray m_tScriptDescription;
	C2DArray m_tCharacterStateDescription;
	C2DArray m_tMasterArea;
	C2DArray m_tMovieDescription;
	C2DArray m_tSpellDescription;
	C2DArray m_tBountyChance;
	C2DArray m_tNPCLevel;
	C2DArray m_tNPCLevel25;
	C2DArray m_tDeathSounds;
	C2DArray m_tAlignment;
	C2DArray m_tReputationStoreMod;
	C2DArray m_tReputationStart;
	C2DArray m_tXPCap;
	C2DArray m_tWeaponSpecialization;
	C2DArray m_tWeaponAttacks;
	C2DArray m_tLore;
	C2DArray m_tLoreBonus;
	C2DArray m_tCharismaStoreMod;
	C2DArray m_tRaiseDeadCost;
	C2DArray m_tHappiness;
	C2DArray m_tReputationDescription;
	C2DArray m_tPortraitReplacement;
	C2DArray m_tIntoxication;
	C2DArray m_tCustomSound;
	C2DArray m_tExclusiveItems;
	CAIIdList m_lChaseActions;
	CAIIdList m_lVEFProjectile;
	CAIIdList m_lProjectile;
	C2DArray m_tContingencyConditions;
	C2DArray m_tContingencyTargets;
	C2DArray m_tAbilitiesStart;
	C2DArray m_tWeaponProficiencies;
	C2DArray m_tClassAbilitiesFighterTrue;
	C2DArray m_tClassAbilitiesFighterBerserker;
	C2DArray m_tClassAbilitiesFighterWizardslayer;
	C2DArray m_tClassAbilitiesFighterKensai;
	C2DArray m_tClassAbilitiesPaladinTrue;
	C2DArray m_tClassAbilitiesPaladinCavalier;
	C2DArray m_tClassAbilitiesPaladinInquisitor;
	C2DArray m_tClassAbilitiesPaladinUndeadhunter;
	C2DArray m_tClassAbilitiesPaladinFallen;
	C2DArray m_tClassAbilitiesRangerTrue;
	C2DArray m_tClassAbilitiesRangerFeralan;
	C2DArray m_tClassAbilitiesRangerStalker;
	C2DArray m_tClassAbilitiesRangerBeastmaster;
	C2DArray m_tClassAbilitiesRangerFallen;
	C2DArray m_tClassAbilitiesThiefTrue;
	C2DArray m_tClassAbilitiesThiefAssassin;
	C2DArray m_tClassAbilitiesThiefBountyhunter;
	C2DArray m_tClassAbilitiesThiefSwashbuckler;
	C2DArray m_tClassAbilitiesBardTrue;
	C2DArray m_tClassAbilitiesBardBlade;
	C2DArray m_tClassAbilitiesBardJester;
	C2DArray m_tClassAbilitiesBardSkald;
	C2DArray m_tClassAbilitiesDruidTrue;
	C2DArray m_tClassAbilitiesShamanTrue;
	C2DArray m_tClassAbilitiesDruidTotemicdruid;
	C2DArray m_tClassAbilitiesDruidShapeshifter;
	C2DArray m_tClassAbilitiesDruidBeastfriend;
	C2DArray m_tClassAbilitiesClericTrue;
	C2DArray m_tClassAbilitiesClericTalos;
	C2DArray m_tClassAbilitiesClericHelm;
	C2DArray m_tClassAbilitiesClericLathander;
	C2DArray m_tClassAbilitiesMageTrue;
	C2DArray m_tClassAbilitiesMageAbjurer;
	C2DArray m_tClassAbilitiesMageNecromancer;
	C2DArray m_tClassAbilitiesMageTransmuter;
	C2DArray m_tClassAbilitiesMageDiviner;
	C2DArray m_tClassAbilitiesMageConjurer;
	C2DArray m_tClassAbilitiesMageInvoker;
	C2DArray m_tClassAbilitiesMageIllusionist;
	C2DArray m_tClassAbilitiesMageEnchanter;
	C2DArray m_tClassAbilitiesMonkTrue;
	C2DArray m_tClassAbilitiesMonkDarkMoon;
	C2DArray m_tClassAbilitiesMonkSunSoul;
	C2DArray m_tClassAbilitiesBarbarianTrue;
	C2DArray m_tSpellAutmaticPicker;
	C2DArray m_tSpellAutmaticPickerShaman;
	C2DArray m_tDualClassAllowed;
	C2DArray m_tRandomColors;
	C2DArray m_tSpawnGroup;
	C2DArray m_tItemUseAnimation;
	C2DArray m_tRangerHatedRace;
	C2DArray m_tXPBonus;
	C2DArray m_tCleanAir;
	C2DArray m_tSplashScreens;
	C2DArray m_tLevelModWildMage;
	C2DArray m_tKitTable;
	C2DArray m_tKitList;
	C2DArray *m_apKitList[256];
	C2DArray m_tSoundEnvironmentResRef;
	C2DArray m_tSoundEnvironmentEnvirons;
	C2DArray m_tItemDialog;
	C2DArray m_tLoadingHints;
	C2DArray m_tSchoolMessage;
	C2DArray m_tSecTypeMessage;
	C2DArray m_tContingencyExceptions;
	C2DArray m_tClassAbbreviations;
	C2DArray m_tNumLevelUpAbilities;
	C2DArray m_tXPList;
	C2DArray m_tTracking;
	C2DArray m_tMovieSoundOverride;
	C2DArray m_t25StartEquipment;
	C2DArray m_tWish;
	C2DArray m_tEntries;
	C2DArray m_tLoadingHints25;
	C2DArray m_tStartingWeapon;
	C2DArray m_tFamiliars;
	C2DArray m_tThiefSkills;
	C2DArray m_tThiefScaling;
	C2DArray m_tClassTHAC0;
	C2DArray m_tClassInnateSkills;
	C2DArray m_tTBPStartparty;
	C2DArray m_tExtraAnimations;
	C2DArray m_tExtraAnimationSpeeds;
	C2DArray m_tWildMagic;
	C2DArray m_tItemType;
	C2DArray m_tRaceTHAC0Bonus;
	C2DArray m_tClassColours;
	C2DArray m_tRaceColours;
	C2DArray m_tSlotSteal;
	C2DArray m_tNumWeaponSlots;
	C2DArray m_tItemUse;
	C2DArray m_tRaceText;
	C2DArray m_tTokenText;
	C2DArray m_tClassText;
	C2DArray m_tSetSnareLimit;
	C2DArray m_tSummonLimit;
	C2DArray m_tWeaponStyleBonus;
	C2DArray m_tBanterTimings;
	C2DArray m_tClassRaceRestrictions;
	C2DArray m_tMageRaceRestrictions;
	C2DArray m_tClassSpecialBonuses;
	C2DArray m_tMonkFists;
	C2DArray m_tSpellsToHide;
	C2DArray m_tSpellProtections;
	C2DArray m_tSpellAbilities;
	C2DArray m_tSummoningTables;
	C2DArray *m_apSummoningList;
	C2DArray m_tSevenEyes;
	C2DArray m_tItemSpec;
	C2DArray m_tRaceFeatures;
	C2DArray m_tAreaCreatureNodes;
	C2DArray m_tFogAreaSettings;
	C2DArray m_tFogPointSettings;
	C2DArray m_tCampaign;
	C2DArray m_tPartyAI;
	C2DArray m_tContainerIcons;
	C2DArray m_tFallen;
	C2DArray m_tAchievements;
	C2DArray m_tStatValues;
	CAIIdList m_lStats;
	C2DArray m_tSaveName;
	char m_bPPHostile;
	char m_bPPReport;
	char m_bPPBreakInvis;
	int m_nConcentration;
	CResRef m_damageSounds[16];
	CResRef m_damageEffectAnims[16];
	CResRef m_damageSplashAnims[16];
	unsigned int m_damageStrings[16];
	int m_speechOffsets[50];
	int m_speechNums[50];
};

/* 4463 */
struct __cppobj __declspec(align(4)) CTimerWorld
{
	unsigned int m_gameTime;
	char m_active;
	char m_nLastPercentage;
};

/* 4464 */
struct __cppobj CTypedPtrList<CPtrList,CPoint *> : CPtrList
{
};

/* 4465 */
struct __cppobj CGamePermission
{
	char m_permission[8];
};

/* 4466 */
struct __cppobj CMultiplayerSettings
{
	CGamePermission m_pcPermissions[6];
	CGamePermission m_cDefaultPermissions;
	int m_pnPlayerReady[6];
	int m_pnCharacterControlledByPlayer[6];
	char m_pbCharacterReady[6];
	char m_pnCharacterStatus[6];
	int m_pnLoadGameControlledByPlayer[6];
	char m_bRefreshCharacters;
	char m_nImportingBitField;
	char m_bRestrictStoreOption;
	char m_bJoinRequests;
	char m_bAllowReformParty;
	char m_bArbitrationLockStatus;
	char m_bArbitrationLockAllowInput;
	CPoint m_ptAreaStart;
	CString m_sAreaName;
	CString m_sSaveName;
	int m_idHostPermittedDialog;
	int m_nHostPermittedDialogDelay;
	char m_bHostPermittedDialog;
	char m_bHostPermittedStore;
	int m_idHostPermittedStore;
	char m_bFirstConnected;
	CString m_sCampaignType;
};

/* 4467 */
struct CMachineState
{
	unsigned int m_inputState;
};

/* 4468 */
struct __cppobj CMachineStates
{
	CMachineState m_machineStates[6];
};

/* 4469 */
struct __cppobj CInfButtonSettings
{
	int m_bEnabled;
	int m_bShowIcon;
	int m_bOverrideRender;
	int m_nButtonFrame;
	int m_nButtonSelectedFrame;
	CVidCell m_vcIcon;
	CVidCell m_vcLauncherIcon;
	int m_bSelectable;
	int m_bSelected;
	int m_bHighlighted;
	int m_itemCount;
	int m_itemCharge;
	int m_bGreyOut;
};

/* 4470 */
struct __cppobj CInfButtonArray
{
	CInfButtonSettings m_buttonArray[12];
	int m_configIcons[12];
	int m_buttonTypes[12];
	int m_buttonToConfigure;
	int m_nState;
	int m_nLastState;
	int m_bWayPointsOn;
	CVidCell m_vcButtons;
	CVidCell m_vcActions;
	int m_quickButtonToConfigure;
	int m_nListStartIndex;
	int m_nSelectedButton;
	int m_nFirstMageSpellIndex;
	int m_bToggleButtonCleric;
};

/* 4471 */
struct ResFixedHeader_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int nNumber;
	unsigned int nSize;
	unsigned int nTableOffset;
};

/* 4472 */
struct __cppobj CResTileSet : CRes
{
	ResFixedHeader_st *h;
};

/* 4473 */
struct __cppobj CSize : tagSIZE
{
};

/* 4474 */
struct __cppobj CResPVR : CRes
{
	int texture;
	int format;
	int filtering;
	CSize size;
};

/* 4475 */
struct CResTile
{
	CResTileSet *tis;
	int tileIndex;
	CResPVR *pvr;
};

/* 4476 */
struct __cppobj CVidTile : CVidImage
{
	CResTile *pRes;
	unsigned int m_dwFlags;
};

/* 4477 */
struct __cppobj CVRamPool
{
	int nVTiles;
	st_tiledef *pTileDef;
};

/* 4482 */
struct st_tiledef
{
	int nTile;
	int nUsageCount;
	int texture;
	CInfTileSet *pTileSet;
};

/* 4481 */
struct __cppobj CInfTileSet
{
	CResTileSet *tis[2];
	CVidTile cVidTile;
	CVRamPool *pVRPool;
	CResInfTile **pResTiles;
	unsigned int nTiles;
	unsigned int nTileSize;
};

/* 4478 */
struct TILE_CODE
{
	char tileNW;
	char tileNE;
	char tileSW;
	char tileSE;
};

/* 4479 */
struct VRAM_FLAGS
{
	__int8 bVRamUpdated : 1;
};

/* 4480 */
struct __cppobj __declspec(align(4)) CResInfTile : CResTile
{
	int nVRamTile;
	TILE_CODE renderCode;
	CResTile *pDualTileRes;
	VRAM_FLAGS flags;
};

/* 4483 */
struct __cppobj CGameObjectArray
{
};

/* 4484 */
struct __cppobj CGameRemoteObjectListEntry
{
	int remotePlayerID;
	int remoteObjectID;
	int localObjectID;
	CGameRemoteObjectListEntry *pNext;
};

/* 4485 */
struct __cppobj __declspec(align(4)) CGameRemoteObjectControlChange
{
	int oldPlayerID;
	int oldObjectID;
	int newPlayerID;
	int newObjectID;
	CGameRemoteObjectControlChange *pNext;
	char localControl;
};

/* 4486 */
struct __cppobj CGameRemoteObjectDeletion
{
	int deletedPlayerID;
	int deletedObjectID;
	CGameRemoteObjectDeletion *pNext;
};

/* 4487 */
struct __cppobj CGameRemoteObjectArray
{
	CGameRemoteObjectListEntry **m_pArray;
	__int16 m_nArraySize;
	__int16 m_nControlsChanged;
	CGameRemoteObjectControlChange *m_pControlsChanged;
	CGameRemoteObjectControlChange *m_pControlsChangedTail;
	__int16 m_nDeletions;
	CGameRemoteObjectDeletion *m_pDeletions;
	CGameRemoteObjectDeletion *m_pDeletionsTail;
	__int16 m_nControlsAreaChanged;
	CResRef m_psControlsAreaChangedName[6];
	unsigned int m_pnControlsAreaChangedPlayerNum[6];
	__int16 m_pnControlsAreaChangedFirstObject[6];
};

/* 4488 */
struct __cppobj CAreaFileHeader
{
	char m_areaName[8];
	unsigned int m_lastSaved;
	unsigned int m_flags;
	char m_areaEdgeNorth[8];
	unsigned int m_flagsEdgeNorth;
	char m_areaEdgeEast[8];
	unsigned int m_flagsEdgeEast;
	char m_areaEdgeSouth[8];
	unsigned int m_flagsEdgeSouth;
	char m_areaEdgeWest[8];
	unsigned int m_flagsEdgeWest;
	unsigned __int16 m_areaType;
	unsigned __int16 m_rainProbability;
	unsigned __int16 m_snowProbability;
	unsigned __int16 m_fogProbability;
	unsigned __int16 m_lightningProbability;
	char m_waterAlpha;
	char m_unused;
};

/* 4489 */
struct __cppobj CAreaSoundsAndMusic
{
	unsigned int m_dayMusic;
	unsigned int m_nightMusic;
	unsigned int m_battleWinningMusic;
	unsigned int m_battleStandOffMusic;
	unsigned int m_battleLosingMusic;
	unsigned int m_alt1Music0;
	unsigned int m_alt1Music1;
	unsigned int m_alt1Music2;
	unsigned int m_alt1Music3;
	unsigned int m_alt1Music4;
	char m_dayAmbient[8];
	char m_dayAmbientExtended[8];
	unsigned int m_dayAmbientVolume;
	char m_nightAmbient[8];
	char m_nightAmbientExtended[8];
	unsigned int m_nightAmbientVolume;
	unsigned int m_notUsed[16];
};

/* 4490 */
struct __cppobj CAreaFileRestEncounter
{
	char m_scriptName[32];
	unsigned int m_randomCreatureString[10];
	char m_randomCreature[10][8];
	unsigned __int16 m_randomCreatureNum;
	unsigned __int16 m_difficulty;
	unsigned int m_lifeSpan;
	unsigned __int16 m_huntingRange;
	unsigned __int16 m_followRange;
	unsigned __int16 m_maxTypeNum;
	unsigned __int16 m_activated;
	unsigned __int16 m_probDay;
	unsigned __int16 m_probNight;
	unsigned __int16 m_wFlags;
	char m_weights[10];
	unsigned int m_notUsed[11];
};

/* 4491 */
struct __cppobj CTypedPtrList<CPtrList,CAreaFileCharacterEntryPoint *> : CPtrList
{
};

/* 4492 */
struct WED_WedHeader_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int nLayers;
	unsigned int nTiledObjects;
	unsigned int nOffsetToLayerHeaders;
	unsigned int nOffsetToPolyHeader;
	unsigned int nOffsetToTiledObjects;
	unsigned int nOffsetToObjectTileList;
	unsigned __int16 nVisiblityRange;
	unsigned __int16 nChanceOfRain;
	unsigned __int16 nChanceOfFog;
	unsigned __int16 nChanceOfSnow;
	unsigned int dwFlags;
};

/* 4493 */
struct WED_LayerHeader_st
{
	unsigned __int16 nTilesAcross;
	unsigned __int16 nTilesDown;
	char rrTileSet[8];
	unsigned __int16 nNumUniqueTiles;
	unsigned __int16 nLayerFlags;
	unsigned int nOffsetToTileData;
	unsigned int nOffsetToTileList;
};

/* 4494 */
struct WED_PolyHeader_st
{
	unsigned int nPolys;
	unsigned int nOffsetToPolyList;
	unsigned int nOffsetToPointList;
	unsigned int nOffsetToScreenSectionList;
	unsigned int nOffsetToScreenPolyList;
};

/* 4495 */
struct WED_ScreenSectionList
{
	unsigned __int16 nStartingPoly;
	unsigned __int16 nNumPolys;
};

/* 4496 */
struct __unaligned __declspec(align(2)) WED_PolyList_st
{
	unsigned int nStartingPoint;
	unsigned int nNumPoints;
	char nType;
	char nHeight;
	unsigned __int16 nLeft;
	unsigned __int16 nRight;
	unsigned __int16 nTop;
	unsigned __int16 nBottom;
};

/* 4497 */
struct WED_PolyPoint_st
{
	unsigned __int16 x;
	unsigned __int16 y;
};

/* 4498 */
struct __cppobj CResWED : CRes
{
	WED_WedHeader_st *pWEDHeader;
	WED_LayerHeader_st *pLayers;
	WED_PolyHeader_st *pPolyHeader;
	WED_ScreenSectionList *pScreenSectionList;
	WED_PolyList_st *pPolyList;
	WED_PolyPoint_st *pPolyPoints;
};

/* 4532 */
struct __cppobj CPtrArray : CObject
{
	void **m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 4533 */
struct __cppobj CTypedPtrArray<CPtrArray,long *> : CPtrArray
{
};

/* 4536 */
struct __cppobj CAIGroup
{
	__int16 m_groupId;
	int m_groupChanged;
	CTypedPtrList<CPtrList,long *> m_memberList;
};

/* 4537 */
struct __cppobj CTypedPtrList<CPtrList,CResRef *> : CPtrList
{
};

/* 4547 */
struct __cppobj CGameSave
{
	unsigned int m_inputMode;
	CResRef m_cResCurrentWorldArea;
	unsigned int m_nCurrentWorldLink;
	unsigned int m_nPartyGold;
	__int16 m_curFormation;
	__int16 m_quickFormations[5];
	CItem *m_groupInventory[100];
	int m_bArenaMode;
	__int16 m_groupInventoryNumber;
	unsigned int m_mode;
	int m_cutScene;
	int m_nCutSceneStatusOverride;
};

/* 4548 */
struct CGameOptions
{
	unsigned int m_gore;
	unsigned int m_goreOption;
	unsigned int m_scrollSpeed;
	unsigned int m_displayVerbalText;
	unsigned int m_guiFeedBackLevel;
	unsigned int m_locatorFeedBackLevel;
	unsigned int m_soundMusicVolume;
	unsigned int m_soundFXVolume;
	unsigned int m_soundDialogVolume;
	unsigned int m_nVolumeAmbients;
	unsigned int m_soundMovieVolume;
	unsigned int m_soundFootStepsOn;
	unsigned int m_soundVoicesNo;
	unsigned int m_graphicsBrightness;
	unsigned int m_graphicsFontZoom;
	float m_spriteBlurAmount;
	unsigned int m_graphicsTranslucentShadows;
	unsigned int m_graphicsForceMirroringOff;
	unsigned int m_graphicsTranslucentEffects;
	unsigned int m_toolTips;
	unsigned int m_nBoredTime;
	unsigned int m_nCommandSoundsFrequency;
	unsigned int m_nSelectionSoundsFrequency;
	unsigned int m_bAlwaysDither;
	unsigned int m_nKeyBoardScrollAmount;
	unsigned int m_nEffectTextLevel;
	unsigned int m_nTutorialState;
	unsigned int m_nAttackSounds;
	unsigned int m_nAutoPauseState;
	unsigned int m_bAutoPauseCenter;
	int m_nDifficultyMultiplier;
	int m_nMPDifficultyMultiplier;
	int m_bNoExtraDamage;
	int m_bAutoUseMagicAmmo;
	int m_bNoExtraXP;
	unsigned int m_bInfravision;
	unsigned int m_bStupidQuickItemStuff;
	int m_bWeatherEnabled;
	int m_bCheatsEnabled;
	int m_bEnvironmentalAudio;
	int m_bRestHealParty;
	int m_bTerrainHugging;
	int m_bHPOverHead;
	int m_bDebugMode;
	int m_bUIEditMode;
	int m_bCloudSavesEnabled;
	int m_bNeverShowNuisanceSOD;
	int m_nActiveCampaign;
	int m_bDeveloperMode;
	int m_bForceDialogPause;
	int m_bUse3dAnimations;
	int m_bCriticalHitScreenShake;
	int m_bHotkeysOnToolTips;
	int m_bVeryLowPerformance;
	int m_bDisplayExtraCombatInfo;
	unsigned __int16 m_nAreaEffectsDensity;
	int m_bDuplicateFloatingText;
	char m_nTilesPrecachePercent;
	int m_bColorCircles;
	int m_bClassicCircles;
	int m_nCombatUI;
	int m_bOverConfirmEverything;
	int m_bShowLearnableSpells;
	int m_bShowTriggersOnTab;
	int m_bShowBlackSpace;
	int m_bUseNearestNeighbourScaling;
	int m_showAOE;
	int m_bDisableCastingGlows;
	int m_bLowMemSounds1;
	int m_bLowMemSounds2;
	int m_bDisableVEFVidCells;
	int m_bDisableDisplayText;
	int m_bMidLevelBrighten;
	int m_bHighLevelBrighten;
	unsigned __int16 m_nAreaEffectsRefreshProb;
	int m_bEnhancedPathSearch;
	int m_bPausingMap;
	int m_bExtraFeedback;
	int m_bFilterGames;
	int m_bAllLearnSpellInfo;
	int m_bDisableStaticsDuringCombat;
	int m_bDisableFootstepsDuringCombat;
	int m_bDisablePlacedSoundsDuringCombat;
	int m_nSuperDesperateSpeedAttempt;
	int m_bAutomatedSpeedAdjusting;
	int m_bAutomatedGraphicsTranslucentShadows;
	int m_bAutomatedVeryLowPerformance;
	int m_bAutomatedLowPerformance;
	int m_bAutomatedDisableBrightest;
	int m_bAutomatedLimitTransparency;
	int m_bAutomatedDisableCastingGlows;
	int m_bAutomatedDisableVEFVidCells;
	int m_bAutomatedMidLevelBrighten;
	int m_bAutomatedHighLevelBrighten;
	int m_bAutomatedSoundFootStepsOn;
	int m_bAutomatedAttackSounds;
	int m_bAutomatedUse3dAnimations;
	int m_bAutomatedDisableVVCSounds;
	int m_bAutomatedFasterBlur;
	int m_nCutAutomatedGraphicsTranslucentShadows;
	int m_nCutAutomatedVeryLowPerformance;
	int m_nCutAutomatedLowPerformance;
	int m_nCutAutomatedDisableBrightest;
	int m_nCutAutomatedLimitTransparency;
	int m_nCutAutomatedDisableCastingGlows;
	int m_nCutAutomatedDisableVEFVidCells;
	int m_nCutAutomatedMidLevelBrighten;
	int m_nCutAutomatedHighLevelBrighten;
	int m_nCutAutomatedSoundFootStepsOn;
	int m_nCutAutomatedAttackSounds;
	int m_nCutAutomatedUse3dAnimations;
	int m_nCutAutomatedDisableVVCSounds;
	int m_nCutAutomatedFasterBlur;
	int m_bPCOnlyCombatMode;
	int m_bFullyDisableNonVisibleDuringCombat;
	int m_bDisableVVCSounds;
	int m_bFasterBlur;
	int m_nFatFingerRadius;
	int m_bScaleUI;
	int m_nRenderActionQueue;
	int m_bConfirmDialog;
	int m_bHardwareMouseCursor;
	int m_bShowHealth;
	int m_bMaxHP;
	int m_bStoryMode;
	int m_bNightmareMode;
	int m_bNightmareBonusGold;
	int m_bNightmareBonusXP;
	int m_b3ESneakAttack;
	int m_bClericRangerFix;
	int m_bShowPauseDate;
	int m_bDisableCosmeticAttacks;
	int m_bJournalPopups;
	int m_bRenderTravelRegions;
	int m_bRenderSearchMap;
	int m_bRenderDynamicSearchMap;
	int m_bRenderFrameTimes;
	int m_bZoomLock;
	int m_bDisableMultiplayerBanters;
	int m_bRenderPath;
	int m_bFogEnabled;
	int m_bUseSpriteShader;
	int m_bCharacterHighlightsEnabled;
	int m_bGreyscaleOnPauseEnabled;
	int m_bShortDescription;
	int m_nMaxStringEntries;
	int m_bRenderExploredMap;
	int m_bEnableDirectX;
	int m_bEnableMPChatMenu;
	int m_bExpireTraps;
	int m_nDifficultyLevel;
};

/* 4549 */
struct __cppobj CTypedPtrArray<CPtrArray,CTypedPtrList<CPtrList,CGameJournalEntry *> *> : CPtrArray
{
};

/* 4550 */
struct __cppobj CGameJournal
{
	CTypedPtrArray<CPtrArray,CTypedPtrList<CPtrList,CGameJournalEntry *> *> m_aChapters;
};

/* 4551 */
struct __cppobj CWorldMapHeader
{
	unsigned int m_nMapCount;
	unsigned int m_nMapOffset;
};

/* 4555 */
struct __cppobj CWorldMap
{
	CResRef m_cResRef;
	CWorldMapHeader m_cHeader;
	CWorldMapData *m_pData;
	CWorldMapArea **m_ppAreas;
	CWorldMapLinks **m_ppLinks;
};

/* 4522 */
struct __cppobj CVariableHash
{
	CVariable *m_hashEntries;
	int m_nTableEntries;
};

/* 4556 */
struct __cppobj STR_RES
{
	CString szText;
	CSound cSound;
};

/* 4557 */
struct __cppobj CTypedPtrList<CPtrList,CSearchRequest *> : CPtrList
{
};

/* 4558 */
struct __cppobj CTypedPtrList<CPtrList,CMoveListEntry *> : CPtrList
{
};

/* 4559 */
struct __cppobj CMoveList : CTypedPtrList<CPtrList,CMoveListEntry *>
{
};

/* 4560 */
struct __cppobj CTypedPtrList<CPtrList,SAreaFileWrapper *> : CPtrList
{
};

/* 4576 */
struct __cppobj CTypedPtrList<CPtrList,CSavedGameStoredLocation *> : CPtrList
{
};

/* 4578 */
struct __cppobj CVVCHash
{
	CVVCHashEntry *m_hashEntries;
	int m_nTableEntries;
};

/* 4499 */
struct __cppobj CInfGame
{
	CRuleTables m_ruleTables;
	CTimerWorld m_worldTime;
	int m_bGameLoaded;
	char m_bInLoadGame;
	char m_bInLoadArea;
	char m_bInIniSpawn;
	unsigned int m_nUniqueAreaID;
	unsigned int m_nAreaFirstObject;
	char m_bFromNewGame;
	char m_bInDestroyGame;
	char m_bAnotherPlayerJoinedGame;
	char m_bInAreaTransition;
	int m_bStartedDeathSequence;
	CTypedPtrList<CPtrList,long *> m_lstTargetIds;
	CTypedPtrList<CPtrList,CPoint *> m_lstTargetPts;
	__int16 m_nState;
	int m_iconCount;
	char m_iconIndex;
	CResRef m_iconResRef;
	char m_tempCursor;
	int m_iContainer;
	int m_iContainerSprite;
	int m_bAllowTargetDead;
	CGamePermission m_singlePlayerPermissions;
	CMultiplayerSettings m_multiPlayerSettings;
	CMachineStates m_machineStates;
	CInfButtonArray m_cButtonArray;
	CVRamPool m_cVRamPool;
	int m_bSaveScreen;
	CString m_sSaveScreenArea;
	CVidBitmap m_rgbMasterBitmap;
	CGameObjectArray m_objectsArray;
	CGameRemoteObjectArray m_remoteObjectsArray;
	char m_visibleArea;
	char m_bPlayerScriptStyle;
	CGameArea *m_gameAreas[12];
	CGameArea *m_pGameAreaMaster;
	int m_characters[6];
	int m_charactersPortrait[6];
	__int16 m_nCharacters;
	CTypedPtrList<CPtrList,long *> m_lstGlobalCreatures;
	CTypedPtrArray<CPtrArray,long *> m_characterOverflow;
	__int16 m_nCharacterOverflowCount;
	__int16 m_nReputation;
	CPathSearch *m_pathSearch;
	CPathNode **m_listGrid;
	CAIGroup m_group;
	CTypedPtrList<CPtrList,long *> m_allies;
	CTypedPtrList<CPtrList,long *> m_familiars;
	char m_resrefFamiliarsDefault[9][8];
	CTypedPtrList<CPtrList,CResRef *> m_resrefFamiliars[9][9];
	int m_bFamiliarBlock;
	unsigned int m_nFamiliarSummoner;
	CString m_sSaveGame;
	int m_bAllowCutSceneBreak;
	CGameSave m_gameSave;
	CGameOptions m_options;
	CGameJournal m_cGameJournal;
	CWorldMap m_cWorldMap;
	int m_pKeymap[500];
	int m_pKeymapFlags[500];
	CVariableHash m_variables;
	CVariableHash m_namedCreatures;
	STR_RES m_soundNeedParty;
	STR_RES m_soundAreaTransitionRefused;
	char m_bForceDither;
	CVidCell m_vcLocator;
	CTypedPtrList<CPtrList,CSearchRequest *> m_searchRequests;
	CTypedPtrList<CPtrList,CSearchRequest *> m_searchRequestsBack;
	int m_searchRequestListEmpty;
	int m_searchShutdown;
	CPtrList m_lDisposableItems;
	__int16 m_currArmor;
	__int16 m_currAnimation;
	CAIIdList SAVE_OBJECT_LIST;
	int m_nProtagonistId;
	char m_bPartyAI;
	char m_bShowAreaNotes;
	char m_nTravelScreenImageToUse;
	CResRef m_resrefTravelScreenImage;
	unsigned int m_dwLastProgressRenderTickCount;
	unsigned int m_dwLastProgressMsgTickCount;
	unsigned int m_nLastSaveTime;
	unsigned int m_gameTime;
	unsigned int m_zoomLevel;
	unsigned int m_zoomEnabled;
	CPoint m_lastClick;
	int m_lastTarget;
	char m_bTriggerOutline;
	__declspec(align(4)) CVidPalette m_entanglePalette;
	CVidPalette m_webHoldPalette;
	int m_nCharacterTerminationSequenceDelay;
	int m_bNoDreamTonight;
	char m_bContinueHealing;
	CMoveList m_cMoveList;
	CMoveList m_cLimboList;
	CTypedPtrList<CPtrList,SAreaFileWrapper *> m_lTransitionPiles;
	CString m_transitionPilesResref;
	CPoint m_transitionPilesPtDest;
	int m_bMissionPackInfo;
	int m_bMissionPackInfo25;
	int m_bMissionPackInfoTBP;
	int m_nAIIndex;
	int m_nTimeStop;
	int m_nTimeStopCaster;
	int m_nGreyScale;
	int m_nBrownScale;
	CAIScriptFile *m_globalScriptFile;
	CStore *m_aServerStore[12];
	char m_nServerStoreDemands[12];
	CString m_appearanceWeapon;
	CString m_appearanceBody;
	CString m_appearanceShield;
	CString m_appearanceHelmet;
	char m_appearanceColorsWeapon[7];
	char m_appearanceColorsBody[7];
	char m_appearanceColorsShield[7];
	char m_appearanceColorsHelmet[7];
	int m_bOverrideRestEncounter;
	int m_bAddOnActivated;
	int m_bAddInActivated;
	CString m_sCurrentCampaign;
	int m_bCampaignEnabled;
	CTypedPtrList<CPtrList,CSavedGameStoredLocation *> m_storedLocations;
	CTypedPtrList<CPtrList,CSavedGameStoredLocation *> m_storedLocationsPocketPlane;
	CVVCHash m_VVCPriorities;
	int m_nCurrentVVCPriority;
};

/* 4509 */
struct __cppobj CTypedPtrList<CPtrList,CAreaUserNote *> : CPtrList
{
};

/* 4510 */
struct __cppobj CAreaUserNote
{
	unsigned __int16 m_startX;
	unsigned __int16 m_startY;
	unsigned int m_note;
	unsigned int m_dwflags;
	unsigned int m_id;
	unsigned int m_notUsed[9];
};

/* 4511 */
struct __cppobj __declspec(align(4)) CGameAreaNotes
{
	int m_bInitialized;
	CPoint m_ptCellSize;
	CPoint m_ptButtonSize;
	CTypedPtrList<CPtrList,CAreaUserNote *> m_areaNoteList;
	CAreaUserNote m_cAreaNote;
	int m_bAddingNote;
	unsigned int m_nNoteButtonClicked;
	CResRef m_rArea;
	CString m_szBuffer;
	char m_bNetworkDelete;
	char m_nCurrentIcon;
};

/* 4512 */
struct __cppobj CTypedPtrList<CPtrList,CAOEEntry *> : CPtrList
{
};

/* 4513 */
struct __cppobj CInfinity
{
	CInfTileSet *pTileSets[5];
	CResWED *pResWED;
	CVRamPool *pVRPool;
	CVidMode *pVidMode;
	int bUseDestSrc;
	int bRefreshVRamRect;
	int bInitialized;
	int bWEDDemanded;
	int nOffsetX;
	int nOffsetY;
	int nTilesX;
	int nTilesY;
	int nNewX;
	int nNewY;
	CRect rViewPortNotZoomed;
	CRect rViewPort;
	CRect rVRamRect;
	CRect rRequestRect;
	int nVisibleTilesX;
	int nVisibleTilesY;
	int nAreaX;
	int nAreaY;
	int nCurrentTileX;
	int nCurrentTileY;
	int nCurrentX;
	int nCurrentY;
	int nSub1XOffset;
	int nSub1YOffset;
	int nSub2XOffset;
	int nSub2YOffset;
	int nSub3XOffset;
	int nSub3YOffset;
	int nSub4XOffset;
	int nSub4YOffset;
	CSound sndThunder;
	int nCurrentLightningFrequency;
	int nNextLightningFrequency;
	int nNewLightningFrequency;
	int nCurrentRainLevel;
	int nNextRainLevel;
	int nCurrentSnowLevel;
	int nCurrentWindLevel;
	int nCurrentFogLevel;
	int nNextWindLevel;
	int nCurrentTimeOfDay;
	int nTimeToNextThunder;
	int nThunderLength;
	int bRenderCallLightning;
	int nRenderLightningTimer;
	CPoint cLightningPoint;
	CVidCell m_glowVidCell;
	CTypedPtrList<CPtrList,CAOEEntry *> m_lAOE;
	unsigned __int16 m_areaType;
	char m_renderDayNightCode;
	char m_oldRenderDayNightCode;
	char m_dayLightIntensity;
	char m_requestDayNightCode;
	char m_oldRequestDualTileCode;
	char m_bResizedViewPort;
	unsigned int m_nLastTickCount;
	CPoint m_ptCurrentPosExact;
	__int16 m_autoScrollSpeed;
	CPoint m_ptScrollDest;
	int m_nScrollAttempts;
	int m_nOldScrollState;
	char m_nScrollDelay;
	char m_bMovieBroadcast;
	int m_bStartLightning;
	int m_bStopLightning;
	char m_lightningStrikeProb;
	unsigned int m_rgbRainColor;
	unsigned int m_rgbLightningGlobalLighting;
	unsigned int m_rgbOverCastGlobalLighting;
	unsigned int m_rgbGlobalLighting;
	unsigned int m_rgbTimeOfDayGlobalLighting;
	unsigned int m_rgbTimeOfDayRainColor;
	int m_updateListenPosition;
	CGameArea *m_pArea;
	CVidBitmap m_vbMessageScreen;
	unsigned int m_strrefMessage;
	int m_bScreenShake;
	CPoint m_screenShakeDelta;
	CPoint m_screenShakeDecrease;
	float m_fZoomSaved;
	float m_fZoom;
	float m_fStoredZoom;
	int m_bZoomEnabled;
	int m_bZooming;
};

/* 4514 */
struct __cppobj __declspec(align(4)) CSearchBitmap
{
	CVidBitmap m_resSearch;
	char *m_pDynamicCost;
	char *m_snapshotDynamicCost;
	const char *m_snapshotTerrainTable;
	CSize m_GridSquareDimensions;
	CGameArea *m_pArea;
	char m_sourceSide;
	char m_snapshotPersonalSpace;
};

/* 4517 */
struct __cppobj CVisibilityMap
{
	unsigned __int16 *m_pMap;
	int m_nMapSize;
	__int16 m_nWidth;
	__int16 m_nHeight;
	char m_bOutDoor;
	CSearchBitmap *m_pSearchMap;
	int m_aCharacterIds[15];
	CVisibilityMapTreeNode **m_pVisMapTrees;
	CVisibilityMapEllipse *m_pVisMapEllipses;
};

/* 4518 */
struct __cppobj CTypedPtrList<CPtrList,__POSITION *> : CPtrList
{
};

/* 4519 */
struct __cppobj CTypedPtrList<CPtrList,CTiledObject *> : CPtrList
{
};

/* 4523 */
struct __cppobj CTypedPtrList<CPtrList,CGameAreaClairvoyanceEntry *> : CPtrList
{
};

/* 4524 */
struct __cppobj CTypedPtrList<CPtrList,void *> : CPtrList
{
};

/* 4527 */
struct __cppobj CMemINI : CTypedPtrList<CPtrList,void *>
{
	CString mFileName;
	CMemINISection *mpLastSection;
};

/* 4501 */
struct __cppobj __declspec(align(4)) CGameArea
{
	CAreaFileHeader m_header;
	int m_bHeaderExtendedNight;
	CAreaSoundsAndMusic m_headerSound;
	CAreaFileRestEncounter m_headerRestEncounter;
	CTypedPtrList<CPtrList,CAreaFileCharacterEntryPoint *> m_entryPoints;
	char m_id;
	char m_nCharacters;
	char m_nInfravision;
	char m_bAreaLoaded;
	CResRef m_resref;
	CResRef m_restMovieDay;
	CResRef m_restMovieNight;
	char m_waterAlpha;
	CResWED *m_pResWED;
	CInfGame *m_pGame;
	int m_nScrollState;
	int m_nKeyScrollState;
	int m_bSelectionSquareEnabled;
	int m_bTravelSquare;
	int m_iPickedOnDown;
	int m_iPicked;
	int m_iPickedTarget;
	int m_bPicked;
	int m_nToolTip;
	CPoint m_mousePos;
	CVidBitmap m_bmLum;
	CVidBitmap *m_pbmLumNight;
	CVidBitmap m_bmHeight;
	CObjectMarker *m_pObjectMarker;
	CObjectMarker *m_pObjectMarkerHealthBar;
	char m_firstRender;
	CRect m_selectSquare;
	__int16 m_rotation;
	CPoint m_moveDest;
	int m_groupMove;
	char m_terrainTable[16];
	char m_visibleTerrainTable[16];
	int m_nAIIndex;
	int m_bInPathSearch;
	unsigned int m_nInitialAreaID;
	unsigned int m_nFirstObject;
	unsigned int m_dwLastProgressRenderTickCount;
	unsigned int m_dwLastProgressMsgTickCount;
	char m_nRandomMonster;
	__int16 m_nVisibleMonster;
	char m_bRecentlySaved;
	unsigned int m_nSavedTime;
	CGameAreaNotes m_cGameAreaNotes;
	CInfinity m_cInfinity;
	CSearchBitmap m_search;
	CVisibilityMap m_visibility;
	char *m_pDynamicHeight;
	int m_startedMusic;
	unsigned int m_startedMusicCounter;
	CTypedPtrList<CPtrList,long *> m_lVertSort;
	CTypedPtrList<CPtrList,long *> m_lVertSortBack;
	CTypedPtrList<CPtrList,long *> m_lVertSortFlight;
	CTypedPtrList<CPtrList,long *> m_lVertSortUnder;
	CTypedPtrList<CPtrList,long *> m_lVertSortAdd;
	CTypedPtrList<CPtrList,long *> m_lVertSortBackAdd;
	CTypedPtrList<CPtrList,long *> m_lVertSortFlightAdd;
	CTypedPtrList<CPtrList,long *> m_lVertSortUnderAdd;
	CTypedPtrList<CPtrList,__POSITION *> m_lVertSortRemove;
	CTypedPtrList<CPtrList,__POSITION *> m_lVertSortBackRemove;
	CTypedPtrList<CPtrList,__POSITION *> m_lVertSortFlightRemove;
	CTypedPtrList<CPtrList,__POSITION *> m_lVertSortUnderRemove;
	CTypedPtrList<CPtrList,CTiledObject *> m_lTiledObjects;
	CTypedPtrList<CPtrList,long *> m_lGameTextObjects;
	CTypedPtrList<CPtrList,long *> m_lVertSortTransition;
	CPoint m_ptOldViewPos;
	CVariableHash m_variables;
	CVariableHash m_namedCreatures;
	char m_bPermitNewCharacters;
	__int16 m_nCurrentSong;
	int m_nBattleSongCounter;
	int m_nDamageCounter;
	__int16 m_nScreenFlash;
	__int16 m_nScreenFlashFade;
	unsigned int m_screenFlashRGB;
	CTypedPtrList<CPtrList,CGameAreaClairvoyanceEntry *> m_lClairvoyanceObjects;
	CTypedPtrList<CPtrList,long *> m_lContainersNeedingUpdate;
	int m_bAnySpritesInActions;
	int m_nMPSynchCounter;
	char m_nMPSignalType;
	char m_nMPSignalData;
	int m_nMPSignalsToSend;
	int m_nEnemyCountWork;
	int m_nEnemyCountLast;
	int m_nEnemyCount2ndLast;
	int m_nEnemyCountSequestered;
	int m_nTrapCountWork;
	int m_nTrapCountLast;
	int m_nTrapCount2ndLast;
	int m_nUnloadCounter;
	int m_bDisplayingHealth;
	CMemINI INIFile;
	CSpawnFile *mpSpawner;
	int m_nCreatureNodeCount;
	CSize m_lightmapRatio;
	CSound m_sndAmbientDay;
	CSound m_sndAmbientNight;
	char m_sndAmbientVolume;
	unsigned __int16 m_sndAmbientDayVolume;
	unsigned __int16 m_sndAmbientNightVolume;
};

/* 4535 */
struct __cppobj CPathSearch
{
	int PATH_SMOOTH;
	CPathNode **m_pListGrid;
	CPathNode *m_openList;
	__int16 m_openListLevel;
	__int16 m_nOpenList;
	int *m_pathBegin;
	__int16 m_nPathNodes;
	__int16 m_pathCurrent;
};

/* 4534 */
struct __declspec(align(4)) CPathNode
{
	CPathNode *m_pathNodePrev;
	CPathNode *m_listOpenLeft;
	CPathNode *m_listOpenRight;
	CPathNode *m_listOpenParent;
	int m_gridPosition;
	int m_costStart;
	int m_costTotal;
	char m_fIsOpen;
};

/* 4542 */
struct __cppobj CResHelper<CResItem,1005>
{
	CResItem *pRes;
	CResRef cResRef;
};

/* 4545 */
struct __cppobj CTypedPtrList<CPtrList,CGameEffectUsability *> : CPtrList
{
};

/* 4546 */
struct __cppobj CGameEffectUsabilityList : CTypedPtrList<CPtrList,CGameEffectUsability *>
{
};

/* 4543 */
struct __cppobj CItem : CResHelper<CResItem,1005>
{
	CItemVtbl *vfptr;
	int m_nAbilities;
	unsigned __int16 m_useCount1;
	unsigned __int16 m_useCount2;
	unsigned __int16 m_useCount3;
	unsigned __int16 m_wear;
	unsigned int m_flags;
	CSound m_useSound[2];
	__int16 m_numSounds;
	CGameEffectUsabilityList m_Usability;
};

/* 4552 */
struct __cppobj CWorldMapData
{
	char m_resMosaic[8];
	unsigned int m_nWidth;
	unsigned int m_nHeight;
	unsigned int m_nMapID;
	unsigned int m_strTitle;
	unsigned int m_nStartCenteredOnX;
	unsigned int m_nStartCenteredOnY;
	unsigned int m_nAreas;
	unsigned int m_nAreasOffset;
	unsigned int m_nOffsetToLinks;
	unsigned int m_nLinks;
	char m_resAreaIcons[8];
	unsigned int m_dwFlags;
	unsigned int nUnused[31];
};

/* 4553 */
struct __cppobj CWorldMapArea
{
	char m_resCurrentArea[8];
	char m_resOriginalArea[8];
	char m_strName[32];
	unsigned int m_dwFlags;
	unsigned int m_sequence;
	unsigned int m_mapLocationX;
	unsigned int m_mapLocationY;
	unsigned int m_strLabel;
	unsigned int m_strAreaName;
	char m_resAreaLoadMosaic[8];
	unsigned int m_nNorthEdgeStartingLink;
	unsigned int m_nNorthEdgeCount;
	unsigned int m_nWestEdgeStartingLink;
	unsigned int m_nWestEdgeCount;
	unsigned int m_nSouthEdgeStartingLink;
	unsigned int m_nSouthEdgeCount;
	unsigned int m_nEastEdgeStartingLink;
	unsigned int m_nEastEdgeCount;
	unsigned int nUnused[32];
};

/* 4554 */
struct __cppobj CWorldMapLinks
{
	unsigned int m_nArea;
	char m_entryPoint[32];
	unsigned int m_nDistanceScale;
	unsigned int m_dwLinkFlags;
	char m_resRandomEncounterArea0[8];
	char m_resRandomEncounterArea1[8];
	char m_resRandomEncounterArea2[8];
	char m_resRandomEncounterArea3[8];
	char m_resRandomEncounterArea4[8];
	unsigned int m_nEncounterProbability;
	unsigned int nUnused[32];
};

/* 4520 */
struct __cppobj __unaligned __declspec(align(4)) CAreaVariable
{
	char m_name[32];
	unsigned __int16 m_type;
	unsigned __int16 m_resRefType;
	unsigned int m_dWValue;
	int m_intValue;
	long double m_floatValue;
	char m_stringValue[32];
};

/* 4521 */
struct __cppobj CVariable : CAreaVariable
{
};

/* 4569 */
struct __cppobj CFile : CObject
{
	unsigned int m_hFile;
	int m_bCloseOnDelete;
	CString m_strFileName;
};

/* 4570 */
struct __cppobj CAIScriptFile
{
	__int16 m_parseMode;
	int m_lineNumber;
	CAIScript *m_curScript;
	CAIResponseSet *m_curResponseSet;
	CAICondition *m_curCondition;
	CAIResponse *m_curResponse;
	CString m_errors;
	CFile m_file;
	CString source;
	CString m_decompiledText;
	CAIIdList m_actions;
	CAIIdList m_triggers;
	CAIIdList m_objects;
};

/* 4571 */
struct __cppobj CStoreFileHeader
{
	unsigned int m_nStoreType;
	unsigned int m_strName;
	unsigned int m_nStoreFlags;
	unsigned int m_nBuyMarkUp;
	unsigned int m_nSellMarkDown;
	unsigned int m_nAdditionalMarkDown;
	unsigned __int16 m_nStealDifficulty;
	unsigned __int16 m_nMaxItems;
	char m_script[8];
	unsigned int m_nbuyTypesOffset;
	unsigned int m_nbuyTypesCount;
	unsigned int m_nInventoryOffset;
	unsigned int m_nInventoryCount;
	unsigned int m_nLore;
	unsigned int m_nIdentifyCost;
	char m_resRumor[8];
	unsigned int m_drinkOffset;
	unsigned int m_drinkCount;
	char m_resDonation[8];
	unsigned int m_nInnFlags;
	unsigned int m_nRoomCostPeasant;
	unsigned int m_nRoomCostMerchant;
	unsigned int m_nRoomCostNoble;
	unsigned int m_nRoomCostRoyal;
	unsigned int m_spellOffset;
	unsigned int m_spellCount;
	unsigned int m_rouletMaxBet;
	unsigned int m_crapsMaxBet;
	unsigned int m_wheelMaxBet;
	unsigned int m_rouletWinChance;
	unsigned int m_crapsWinChance;
	unsigned int m_wheelWinChance;
	unsigned int m_rouletWinAmount;
	unsigned int m_crapsWinAmount;
	unsigned int m_wheelWinAmount;
};

/* 4572 */
struct __cppobj CTypedPtrList<CPtrList,CStoreFileItem *> : CPtrList
{
};

/* 4575 */
struct __cppobj CStore
{
	CResRef m_resRef;
	CStoreFileHeader m_header;
	CTypedPtrList<CPtrList,CStoreFileItem *> m_lInventory;
	unsigned int *m_pBuyTypes;
	unsigned int m_nBuyTypes;
	CStoreFileDrinks *m_pDrinks;
	unsigned int m_nDrinks;
	CStoreFileSpell *m_pSpells;
	unsigned int m_nSpells;
	char m_pVersion[8];
	int m_bLocalCopy;
};

/* 4577 */
struct __cppobj CVVCHashEntry
{
	CResRef m_name;
	unsigned __int16 m_priority;
	unsigned int m_renderType;
	unsigned int m_renderMask;
};

/* 4502 */
const struct __cppobj CAIObjectType
{
	CString m_name;
	char m_EnemyAlly;
	char m_General;
	char m_Race;
	char m_Class;
	int m_Instance;
	char m_SpecialCase[5];
	char m_Specifics;
	char m_Gender;
	char m_Alignment;
};

/* 4500 */
struct __cppobj __declspec(align(2)) CGameObject
{
	CGameObjectVtbl *vfptr;
	char m_objectType;
	CPoint m_pos;
	int m_posZ;
	CGameArea *m_pArea;
	__POSITION *m_posVertList;
	char m_listType;
	CAIObjectType m_typeAI;
	int m_id;
	__int16 m_canBeSeen;
	int m_remotePlayerID;
	int m_remoteObjectID;
	char m_AISpeed;
	char m_bLocalControl;
	char m_AIInhibitor;
};

/* 4507 */
struct __cppobj CList<long,long> : CObject
{
	CList<long,long>::CNode *m_pNodeHead;
	CList<long,long>::CNode *m_pNodeTail;
	int m_nCount;
	CList<long,long>::CNode *m_pNodeFree;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4508 */
struct __cppobj __declspec(align(4)) CObjectMarker : CGameObject
{
	CList<long,long> m_lstObjectIds;
	bool m_bHealthBarMarker;
};

/* 4515 */
struct __cppobj __declspec(align(4)) CVisibilityMapTreeNode
{
	CPoint m_relativePos;
	unsigned __int16 m_nRange;
	__int16 m_aChildren[3];
	__int16 m_parent;
};

/* 4516 */
struct __cppobj __declspec(align(4)) CVisibilityMapEllipse
{
	__int16 m_nXExploreRange;
	__int16 m_nYExploreRange;
	char *m_pXEllipsePts;
	char *m_pYEllipsePts;
	char m_nXPtsSize;
	char m_nYPtsSize;
};

/* 4525 */
struct __cppobj CTypedPtrList<CPtrList,CMemINIValue *> : CPtrList
{
};

/* 4526 */
struct __cppobj CMemINISection : CTypedPtrList<CPtrList,CMemINIValue *>
{
	CString mSectionName;
};

/* 4531 */
struct __cppobj CSpawnFile : CTypedPtrList<CPtrList,void *>
{
	CSpawnList *mpExitList;
	CSpawnList *mpEnterList;
	int m_bInSpawn;
};

/* 4544 */
struct CItemVtbl
{
	void *(__thiscall *__vecDelDtor)(CItem *this, unsigned int);
};

/* 4541 */
struct __cppobj CResItem : CRes
{
	Item_ability_st *pAbilities;
	Item_effect_st *pEffects;
	Item_Header_st *pHeader;
};

/* 4561 */
struct __cppobj CTypedPtrList<CPtrList,CAIConditionResponse *> : CPtrList
{
};

/* 4562 */
struct __cppobj CAIScript
{
	CResRef cResRef;
	CTypedPtrList<CPtrList,CAIConditionResponse *> m_caList;
};

/* 4563 */
struct __cppobj CTypedPtrList<CPtrList,CAIResponse *> : CPtrList
{
};

/* 4564 */
struct __cppobj CAIResponseSet
{
	CTypedPtrList<CPtrList,CAIResponse *> m_responseList;
	int m_weightTotal;
};

/* 4565 */
struct __cppobj CTypedPtrList<CPtrList,CAITrigger *> : CPtrList
{
};

/* 4566 */
struct __cppobj CAICondition
{
	CTypedPtrList<CPtrList,CAITrigger *> m_triggerList;
};

/* 4567 */
struct __cppobj CTypedPtrList<CPtrList,CAIAction *> : CPtrList
{
};

/* 4568 */
struct __cppobj CAIResponse
{
	__int16 m_weight;
	__int16 m_responseNum;
	__int16 m_responseSetNum;
	__int16 m_scriptNum;
	CTypedPtrList<CPtrList,CAIAction *> m_actionList;
};

/* 4573 */
struct __cppobj CStoreFileDrinks
{
	char m_icon[8];
	unsigned int m_strName;
	unsigned int m_nCost;
	unsigned int m_nRumorChance;
};

/* 4574 */
struct __cppobj CStoreFileSpell
{
	char m_spell[8];
	unsigned int m_cost;
};

/* 4505 */
struct CGameObjectVtbl
{
	void *(__thiscall *__vecDelDtor)(CGameObject *this, unsigned int);
	_BYTE gap4[12];
	CAIObjectType *(__thiscall *GetAIType)(CGameObject *this);
	int (__thiscall *GetTargetId)(CGameObject *this);
	void (__thiscall *GetNextWaypoint)(CGameObject *this, CPoint *);
	__POSITION *(__thiscall *GetVertListPos)(CGameObject *this);
	char (__thiscall *GetVertListType)(CGameObject *this);
	void (__thiscall *SetVertListType)(CGameObject *this, char);
	char (__thiscall *CanSaveGame)(CGameObject *this, unsigned int *, int, int);
	char (__thiscall *CompressTime)(CGameObject *this, unsigned int);
	void (__thiscall *DebugDump)(CGameObject *this, CString *, char);
	int (__thiscall *IsOver)(CGameObject *this, CPoint *);
	int (__thiscall *DoesIntersect)(CGameObject *this, CRect);
	int (__thiscall *OnSearchMap)(CGameObject *this);
	void (__thiscall *OnActionButton)(CGameObject *this, CPoint *);
	void (__thiscall *OnFormationButton)(CGameObject *this, CPoint *);
	void (__thiscall *RemoveFromArea)(CGameObject *this);
	void (__thiscall *Render)(CGameObject *this, CGameArea *, CVidMode *);
	char (__thiscall *DoAIUpdate)(CGameObject *this, char, int);
	void (__thiscall *SetAIType)(CGameObject *this, CAIObjectType *, int);
	void (__thiscall *SetCursor)(CGameObject *this, int);
	void (__thiscall *SetTarget)(CGameObject *this, CPoint, int);
	void (__thiscall *SetVertListPos)(CGameObject *this, __POSITION *);
	int (__thiscall *EvaluateStatusTrigger)(CGameObject *this, CAITrigger *);
};

/* 4503 */
struct __cppobj __POSITION
{
};

/* 4506 */
struct CList<long,long>::CNode
{
	CList<long,long>::CNode *pNext;
	CList<long,long>::CNode *pPrev;
	int data;
};

/* 4528 */
struct __cppobj CTypedPtrList<CPtrList,CSpawn *> : CPtrList
{
};

/* 4530 */
struct __cppobj CSpawnList : CTypedPtrList<CPtrList,CSpawn *>
{
	CString mSectionAlias;
	int ReceivedFirstSpawnCall;
	unsigned int LastSpawnTime;
	int CheckSpawnTimes;
	unsigned int SpawnTimeOfDay;
	unsigned int mInterval;
	CSpawnVar *pControlVar;
};

/* 4538 */
struct Item_ability_st
{
	unsigned __int16 type;
	char quickSlotType;
	char largeDamageDice;
	char quickSlotIcon[8];
	char actionType;
	char actionCount;
	unsigned __int16 range;
	char launcherType;
	char largeDamageDiceCount;
	char speedFactor;
	char largeDamageDiceBonus;
	__int16 thac0Bonus;
	char damageDice;
	char school;
	char damageDiceCount;
	char secondaryType;
	__int16 damageDiceBonus;
	unsigned __int16 damageType;
	unsigned __int16 effectCount;
	unsigned __int16 startingEffect;
	unsigned __int16 maxUsageCount;
	unsigned __int16 usageFlags;
	__unaligned __declspec(align(1)) unsigned int abilityFlags;
	unsigned __int16 missileType;
	unsigned __int16 attackProbability[6];
};

/* 4539 */
struct Item_effect_st
{
	unsigned __int16 effectID;
	char targetType;
	char spellLevel;
	int effectAmount;
	unsigned int dwFlags;
	unsigned __int16 durationType;
	__unaligned __declspec(align(1)) unsigned int duration;
	char probabilityUpper;
	char probabilityLower;
	char res[8];
	unsigned int numDice;
	unsigned int diceSize;
	unsigned int savingThrow;
	int saveMod;
	unsigned int special;
};

/* 4540 */
struct __unaligned __declspec(align(2)) Item_Header_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int genericName;
	unsigned int identifiedName;
	char usedUpItemID[8];
	unsigned int itemFlags;
	unsigned __int16 itemType;
	unsigned int notUsableBy;
	char animationType[2];
	unsigned __int16 minLevelRequired;
	unsigned __int16 minSTRRequired;
	char minSTRBonusRequired;
	char notUsableBy2a;
	char minINTRequired;
	char notUsableBy2b;
	char minDEXRequired;
	char notUsableBy2c;
	char minWISRequired;
	char notUsableBy2d;
	char minCONRequired;
	char proficiencyType;
	unsigned __int16 minCHRRequired;
	unsigned int baseValue;
	unsigned __int16 maxStackable;
	char itemIcon[8];
	unsigned __int16 loreValue;
	char groundIcon[8];
	unsigned int baseWeight;
	unsigned int genericDescription;
	unsigned int identifiedDescription;
	char descriptionPicture[8];
	unsigned int attributes;
	unsigned int abilityOffset;
	unsigned __int16 abilityCount;
	unsigned int effectsOffset;
	unsigned __int16 equipedStartingEffect;
	unsigned __int16 equipedEffectCount;
};

/* 4504 */
const struct __cppobj CAITrigger
{
	__int16 m_triggerID;
	int m_specificID;
	CAIObjectType m_triggerCause;
	int m_flags;
	int m_specific2;
	int m_specific3;
	CString m_string1;
	CString m_string2;
};

/* 4529 */
struct __cppobj CSpawnVar
{
	CString mScope;
	CString mLabel;
};

/* 4579 */
struct __cppobj CBaldurEngine : CWarp
{
	int m_nSelectedCharacter;
	int m_nPickedCharacter;
};

/* 4580 */
struct __cppobj CDungeonMaster : CBaldurEngine
{
};

/* 4581 */
struct __cppobj CResWebm : CRes
{
	void *m_pCodec;
	unsigned int m_nFirstFrameTime;
	unsigned int m_nFrameWaitTime;
	bool m_bComplete;
	bool m_bLooping;
	CRect m_rRender;
	int m_texture;
	bool m_bGreyscale;
	bool m_bTiled;
	int m_nTransparent;
	bool m_bUseTone;
	float m_nDeltaX;
	float m_nDeltaY;
	float m_nOffsetX;
	float m_nOffsetY;
};

/* 4582 */
struct __cppobj __declspec(align(4)) CKeyInfo
{
	unsigned int m_repeatCount;
	int m_keyCode;
	char m_repeatDelay;
	char m_repeatRate;
};

/* 4583 */
struct __cppobj CBaldurProjector : CBaldurEngine
{
	CResWebm *m_pMovie;
	int bStretchToScreen;
	CFile *mve_file;
	int m_deactivateEngine;
	CKeyInfo m_pVirtualKeys[2];
	int m_pVirtualKeysFlags[2];
	CTypedPtrList<CPtrList,CResRef *> m_movieResRef;
	char m_bSelectEngine;
	char m_bFirstRender;
	void *m_pCodec;
	int m_nFirstFrameTime;
	CSound m_cSoundOverride;
	CResRef m_cSubtitles;
	CVidFont m_vidFont;
	int m_bDisplayTOBMovie;
};

/* 4584 */
struct __cppobj __declspec(align(4)) CScreenAI : CBaldurEngine
{
	CVidBitmap m_bmpScreen;
	C2DArray m_tSplashScreens;
	__int16 m_nSplashScreen;
	int m_nSplashTimer;
	int m_bInteractiveDemoQuit;
	char m_nBmpDraw;
	CKeyInfo m_pVirtualKeys[5];
	int m_pVirtualKeysFlags[5];
	char m_bCtrlKeyDown;
};

/* 4585 */
struct __cppobj CStringList::CNode
{
	CStringList::CNode *pNext;
	CStringList::CNode *pPrev;
	CString data;
};

/* 4586 */
struct __cppobj CStringList : CObject
{
	CStringList::CNode *m_pNodeHead;
	CStringList::CNode *m_pNodeTail;
	int m_nCount;
	CStringList::CNode *m_pNodeFree;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4587 */
struct __cppobj CCreatureFileHeader
{
	unsigned int m_name;
	unsigned int m_apparentName;
	unsigned int m_flags;
	unsigned int m_xpValue;
	unsigned int m_xp;
	unsigned int m_gold;
	unsigned int m_generalState;
	__int16 m_hitPoints;
	unsigned __int16 m_maxHitPointsBase;
	unsigned int m_animationType;
	char m_colors[7];
	char m_effectVersion;
	char m_portraitSmall[8];
	char m_portraitLarge[8];
	char m_reputation;
	char m_hideInShadowsBase;
	__int16 m_armorClass;
	__int16 m_armorClassBase;
	__int16 m_armorClassCrushingAdjustment;
	__int16 m_armorClassMissileAdjustment;
	__int16 m_armorClassPiercingAdjustment;
	__int16 m_armorClassSlashingAdjustment;
	char m_toHitArmorClass0Base;
	char m_numberOfAttacksBase;
	char m_saveVSDeathBase;
	char m_saveVSWandsBase;
	char m_saveVSPolyBase;
	char m_saveVSBreathBase;
	char m_saveVSSpellBase;
	char m_resistFireBase;
	char m_resistColdBase;
	char m_resistElectricityBase;
	char m_resistAcidBase;
	char m_resistMagicBase;
	char m_resistMagicFireBase;
	char m_resistMagicColdBase;
	char m_resistSlashingBase;
	char m_resistCrushingBase;
	char m_resistPiercingBase;
	char m_resistMissileBase;
	char m_detectIllusionBase;
	char m_setTrapsBase;
	char m_loreBase;
	char m_lockPickingBase;
	char m_moveSilentlyBase;
	char m_trapsBase;
	char m_pickPocketBase;
	char m_fatigue;
	char m_intoxication;
	char m_luckBase;
	char m_proficiencies[15];
	char m_bNightmare;
	char m_nTranslucent;
	char m_repChangeKilled;
	char m_repChangeJoined;
	char m_repChangeKicked;
	char m_undeadLevel;
	char m_trackingBase;
	char m_trackingTarget[32];
	unsigned int m_speech[100];
	char m_level1;
	char m_level2;
	char m_level3;
	char m_sex;
	char m_STRBase;
	char m_STRExtraBase;
	char m_INTBase;
	char m_WISBase;
	char m_DEXBase;
	char m_CONBase;
	char m_CHRBase;
	char m_morale;
	char m_moraleBreak;
	char m_hatedRace;
	unsigned __int16 m_moraleRecoveryTime;
	unsigned __int16 m_mageSpecUpperWord;
	unsigned __int16 m_mageSpecialization;
	char m_scriptOverRide[8];
	char m_scriptClass[8];
	char m_scriptRace[8];
	char m_scriptGeneral[8];
	char m_scriptDefault[8];
};

/* 4588 */
struct __cppobj CDerivedStatsTemplate
{
	unsigned int m_generalState;
	__int16 m_nMaxHitPoints;
	__int16 m_nArmorClass;
	__int16 m_nACCrushingMod;
	__int16 m_nACMissileMod;
	__int16 m_nACPiercingMod;
	__int16 m_nACSlashingMod;
	__int16 m_nTHAC0;
	__int16 m_nNumberOfAttacks;
	__int16 m_nSaveVSDeath;
	__int16 m_nSaveVSWands;
	__int16 m_nSaveVSPoly;
	__int16 m_nSaveVSBreath;
	__int16 m_nSaveVSSpell;
	__int16 m_nResistFire;
	__int16 m_nResistCold;
	__int16 m_nResistElectricity;
	__int16 m_nResistAcid;
	__int16 m_nResistMagic;
	__int16 m_nResistMagicFire;
	__int16 m_nResistMagicCold;
	__int16 m_nResistSlashing;
	__int16 m_nResistCrushing;
	__int16 m_nResistPiercing;
	__int16 m_nResistMissile;
	__int16 m_nLore;
	__int16 m_nLockPicking;
	__int16 m_nMoveSilently;
	__int16 m_nTraps;
	__int16 m_nPickPocket;
	__int16 m_nFatigue;
	__int16 m_nIntoxication;
	__int16 m_nLuck;
	__int16 m_nTracking;
	unsigned __int16 m_nLevel1;
	unsigned __int16 m_nLevel2;
	unsigned __int16 m_nLevel3;
	__int16 m_nSex;
	__int16 m_nSTR;
	__int16 m_nSTRExtra;
	__int16 m_nINT;
	__int16 m_nWIS;
	__int16 m_nDEX;
	__int16 m_nCON;
	__int16 m_nCHR;
	unsigned int m_nXPValue;
	unsigned int m_nXP;
	unsigned int m_nGold;
	unsigned int m_nMoraleBreak;
	unsigned int m_nMoraleRecoveryTime;
	__int16 m_nReputation;
	__int16 m_nHatedRace;
	int m_nHideInShadows;
	int m_nDetectIllusion;
	int m_nSetTraps;
	__int16 m_nDamageBonus;
	__int16 m_nSpellFailureMage;
	__int16 m_nSpellFailurePriest;
	__int16 m_nSpellDurationModMage;
	__int16 m_nSpellDurationModPriest;
	__int16 m_nTurnUndeadLevel;
	__int16 m_nBackstabDamageMultiplier;
	__int16 m_nLayOnHandsAmount;
	int m_bHeld;
	int m_bPolymorphed;
	int m_bIdentifyMode;
	int m_bEntangle;
	int m_bSanctuary;
	int m_bMinorGlobe;
	int m_bShieldGlobe;
	int m_bGrease;
	int m_bWeb;
	int m_bCasterHold;
	__int16 m_nTranslucent;
	__int16 m_nEncumberance;
	__int16 m_nMissileTHAC0Bonus;
	__int16 m_nMagicDamageResistance;
	__int16 m_nResistPoison;
	__int16 m_nSpellDurationModBard;
	int m_bDoNotJump;
	int m_bAuraCleansing;
	unsigned int m_nCastingType;
	__int16 m_nMentalSpeed;
	__int16 m_nPhysicalSpeed;
	__int16 m_nCastingLevelBonusMage;
	__int16 m_nCastingLevelBonusCleric;
	int m_bSeeInvisible;
	int m_bIgnoreDialogPause;
	int m_nMinHitPoints;
	int m_THAC0BonusRight;
	int m_THAC0BonusLeft;
	int m_DamageBonusRight;
	int m_DamageBonusLeft;
	int m_nStoneSkins;
	int m_nProficiencyBastardSword;
	int m_nProficiencyLongSword;
	int m_nProficiencyShortSword;
	int m_nProficiencyAxe;
	int m_nProficiencyTwoHandedSword;
	int m_nProficiencyKatana;
	int m_nProficiencyScimitarWakisashiNinjaTo;
	int m_nProficiencyDagger;
	int m_nProficiencyWarhammer;
	int m_nProficiencySpear;
	int m_nProficiencyHalberd;
	int m_nProficiencyFlailMorningStar;
	int m_nProficiencyMace;
	int m_nProficiencyQuarterStaff;
	int m_nProficiencyCrossbow;
	int m_nProficiencyLongBow;
	int m_nProficiencyShortBow;
	int m_nProficiencyDart;
	int m_nProficiencySling;
	int m_nProficiencyBlackjack;
	int m_nProficiencyGun;
	int m_nProficiencyMartialArts;
	int m_nProficiency2Handed;
	int m_nProficiencySwordAndShield;
	int m_nProficiencySingleWeapon;
	int m_nProficiency2Weapon;
	int m_nProficiencyClub;
	int m_nExtraProficiency2;
	int m_nExtraProficiency3;
	int m_nExtraProficiency4;
	int m_nExtraProficiency5;
	int m_nExtraProficiency6;
	int m_nExtraProficiency7;
	int m_nExtraProficiency8;
	int m_nExtraProficiency9;
	int m_nExtraProficiency10;
	int m_nExtraProficiency11;
	int m_nExtraProficiency12;
	int m_nExtraProficiency13;
	int m_nExtraProficiency14;
	int m_nExtraProficiency15;
	int m_nExtraProficiency16;
	int m_nExtraProficiency17;
	int m_nExtraProficiency18;
	int m_nExtraProficiency19;
	int m_nExtraProficiency20;
	int m_nPuppetMasterId;
	int m_nPuppetMasterType;
	int m_nPuppetType;
	int m_nPuppetId;
	int m_bCheckForBerserk;
	int m_bBerserkStage1;
	int m_bBerserkStage2;
	int m_nDamageLuck;
	CResRef m_cBardSong;
	CResRef m_cBackStab;
	int m_nVisualRange;
	int m_bExplore;
	int m_bThrullCharm;
	int m_bSummonDisable;
	int m_bSummonDisableAction;
	__int16 m_nHitBonus;
	__int16 m_nSpecificDamageBonus[11];
	__int16 m_nSchoolSaveBonus[12];
	unsigned int m_nKit;
	int m_bForceSurge;
	int m_nSurgeMod;
	int m_bImprovedHaste;
	unsigned int m_nScriptingStates[10];
	int m_nMeleeTHAC0Bonus;
	int m_nMeleeDamageBonus;
	int m_nMissileDamageBonus;
	int m_bDisableCircle;
	int m_nFistTHAC0Bonus;
	int m_nFistDamageBonus;
	unsigned int m_sClassStringOverrideMixed;
	unsigned int m_sClassStringOverrideLower;
	__int16 m_nClassTypeOverrideMixed;
	__int16 m_nClassTypeOverrideLower;
	int m_bPreventSpellProtectionEffects;
	int m_bImmunityToBackStab;
	int m_nLockPickingMTPBonus;
	int m_nMoveSilentlyMTPBonus;
	int m_nTrapsMTPBonus;
	int m_nPickPocketMTPBonus;
	int m_nHideInShadowsMTPBonus;
	int m_nDetectIllusionMTPBonus;
	int m_nSetTrapsMTPBonus;
	int m_bPreventAISlowDown;
	int m_nExistanceDelayOverride;
	int m_bAnimationOnlyHaste;
	int m_bNoPermanentDeath;
	int m_bImmuneToTurnUndead;
	int m_nChaosShield;
	int m_bNPCBump;
	int m_bUseAnyItem;
	int m_nAssassinate;
	int m_bSexChanged;
	int m_nSpellFailureInnate;
	int m_bImmuneToTracking;
	int m_bDeadMagic;
	int m_bImmuneToTimeStop;
	int m_bImmuneToSequester;
	int m_nStoneSkinsGolem;
	int m_nLevelDrain;
	int m_bDoNotDraw;
	int m_bIgnoreDrainDeath;
};

/* 4589 */
struct __cppobj CImmunitiesProjectile : CTypedPtrList<CPtrList,long *>
{
};

/* 4590 */
struct __cppobj CTypedPtrList<CPtrList,CGameEffect *> : CPtrList
{
};

/* 4591 */
struct __cppobj CImmunitiesEffect : CTypedPtrList<CPtrList,CGameEffect *>
{
};

/* 4592 */
struct __cppobj CTypedPtrList<CPtrList,CAIObjectType *> : CPtrList
{
};

/* 4593 */
struct __cppobj CImmunitiesAIType : CTypedPtrList<CPtrList,CAIObjectType *>
{
};

/* 4594 */
struct CImmunitiesSpellLevel
{
	int m_levels[10];
};

/* 4595 */
struct __cppobj CTypedPtrList<CPtrList,CWeaponIdentification *> : CPtrList
{
};

/* 4596 */
struct __cppobj CImmunitiesWeapon : CTypedPtrList<CPtrList,CWeaponIdentification *>
{
};

/* 4597 */
struct __cppobj CTypedPtrList<CPtrList,CSelectiveBonus *> : CPtrList
{
};

/* 4598 */
struct __cppobj CSelectiveBonusList : CTypedPtrList<CPtrList,CSelectiveBonus *>
{
};

/* 4599 */
struct __cppobj CTypedPtrList<CPtrList,CImmunitiesItemEquip *> : CPtrList
{
};

/* 4600 */
struct __cppobj CImmunitiesItemEquipList : CTypedPtrList<CPtrList,CImmunitiesItemEquip *>
{
};

/* 4601 */
struct __cppobj CTypedPtrList<CPtrList,CImmunitiesItemTypeEquip *> : CPtrList
{
};

/* 4602 */
struct __cppobj CImmunitiesItemTypeEquipList : CTypedPtrList<CPtrList,CImmunitiesItemTypeEquip *>
{
};

/* 4603 */
struct __cppobj CSpellLevelDecrementing
{
	int m_bImmune;
	int m_nLevels;
};

/* 4604 */
struct __cppobj CImmunitiesSpellLevelDecrementing
{
	CSpellLevelDecrementing m_levels[10];
};

/* 4605 */
struct __cppobj CImmunitiesSchoolAndSecondary : CTypedPtrList<CPtrList,long *>
{
};

/* 4606 */
struct __cppobj CTypedPtrList<CPtrList,CImmunitySpell *> : CPtrList
{
};

/* 4607 */
struct __cppobj CImmunitiesSpellList : CTypedPtrList<CPtrList,CImmunitySpell *>
{
};

/* 4608 */
struct __cppobj CTypedPtrList<CPtrList,CSchoolAndSecondaryDecrementing *> : CPtrList
{
};

/* 4609 */
struct __cppobj CImmunitiesSchoolAndSecondaryDecrementing : CTypedPtrList<CPtrList,CSchoolAndSecondaryDecrementing *>
{
};

/* 4610 */
struct __cppobj CTypedPtrList<CPtrList,CContingency *> : CPtrList
{
};

/* 4611 */
struct __cppobj CContingencyList : CTypedPtrList<CPtrList,CContingency *>
{
};

/* 4612 */
struct __cppobj CTypedPtrList<CPtrList,CPersistantEffect *> : CPtrList
{
};

/* 4613 */
struct __cppobj CPersistantEffectListRegenerated : CTypedPtrList<CPtrList,CPersistantEffect *>
{
	unsigned int m_nCounter;
};

/* 4614 */
struct __cppobj CTypedPtrList<CPtrList,CColorRange *> : CPtrList
{
};

/* 4615 */
struct __cppobj CColorRanges : CTypedPtrList<CPtrList,CColorRange *>
{
};

/* 4616 */
struct __cppobj CTypedPtrList<CPtrList,CColorEffect *> : CPtrList
{
};

/* 4617 */
struct __cppobj CColorEffects : CTypedPtrList<CPtrList,CColorEffect *>
{
};

/* 4618 */
struct __cppobj CCreatureFileMemorizedSpellLevel
{
	unsigned __int16 m_spellLevel;
	unsigned __int16 m_baseCount;
	unsigned __int16 m_count;
	unsigned __int16 m_magicType;
	unsigned int m_memorizedStartingSpell;
	unsigned int m_memorizedCount;
};

/* 4619 */
struct __cppobj CApplyEffectList : CTypedPtrList<CPtrList,CGameEffect *>
{
};

/* 4620 */
struct __cppobj CTypedPtrList<CPtrList,CSelectiveWeaponType *> : CPtrList
{
};

/* 4621 */
struct __cppobj CSelectiveWeaponTypeList : CTypedPtrList<CPtrList,CSelectiveWeaponType *>
{
};

/* 4622 */
struct __cppobj CTypedPtrList<CPtrList,CCriticalEntry *> : CPtrList
{
};

/* 4623 */
struct __cppobj CCriticalEntryList : CTypedPtrList<CPtrList,CCriticalEntry *>
{
};

/* 4624 */
struct __cppobj CDerivedStats : CDerivedStatsTemplate
{
	CImmunitiesProjectile m_cImmunitiesProjectile;
	CImmunitiesEffect m_cImmunitiesEffect;
	CImmunitiesAIType m_cImmunitiesAIType;
	CImmunitiesSpellLevel m_cImmunitiesSpellLevel;
	CImmunitiesWeapon m_cImmunitiesWeapon;
	CSelectiveBonusList m_cToHitBonusList;
	CSelectiveBonusList m_cDamageBonusList;
	CImmunitiesItemEquipList m_cImmunitiesItemEquip;
	CImmunitiesItemTypeEquipList m_cImmunitiesItemTypeEquip;
	CImmunitiesProjectile m_cBounceProjectile;
	CImmunitiesEffect m_cBounceEffect;
	CImmunitiesSpellLevel m_cBounceSpellLevel;
	CImmunitiesSpellLevelDecrementing m_cBounceProjectileLevelDec;
	CImmunitiesSpellLevelDecrementing m_cImmunitiesProjectileLevelDec;
	CImmunitiesSchoolAndSecondary m_cImmunitiesSchool;
	CImmunitiesSchoolAndSecondary m_cImmunitiesSecondaryType;
	CImmunitiesSchoolAndSecondary m_cBounceSchool;
	CImmunitiesSchoolAndSecondary m_cBounceSecondaryType;
	CImmunitiesItemEquipList m_cImmunitiesItemUse;
	CImmunitiesItemTypeEquipList m_cImmunitiesItemTypeUse;
	CImmunitiesSpellList m_cImmunitiesSpell;
	CImmunitiesSpellList m_cBounceSpell;
	CImmunitiesSchoolAndSecondaryDecrementing m_cImmunitiesSchoolLevelDec;
	CImmunitiesSchoolAndSecondaryDecrementing m_cImmunitiesSecondaryTypeLevelDec;
	CImmunitiesSchoolAndSecondaryDecrementing m_cBounceSchoolLevelDec;
	CImmunitiesSchoolAndSecondaryDecrementing m_cBounceSecondaryTypeLevelDec;
	CContingencyList m_cContingencyList;
	CPersistantEffectListRegenerated m_cRegeneratedPersistantEffectList;
	CImmunitiesSpellLevelDecrementing m_cSpellTrapLevelDec;
	CContingencyList m_cSequencerList;
	CColorRanges m_appliedColorRanges;
	CColorEffects m_appliedColorEffects;
	CCreatureFileMemorizedSpellLevel m_memorizedSpellsLevelMage[9];
	CCreatureFileMemorizedSpellLevel m_memorizedSpellsLevelPriest[7];
	int m_disabledButtons[16];
	int m_disabledSpellTypes[3];
	int m_disableSpells;
	CApplyEffectList m_cExtraMeleeEffects;
	CApplyEffectList m_cExtraRangedEffects;
	CSelectiveBonusList m_cProtectionList;
	CSelectiveWeaponTypeList m_cSelectiveWeaponTypeList;
	CCriticalEntryList m_cCriticalEntryList;
	unsigned int m_spellStates[8];
};

/* 4625 */
struct __cppobj CScreenCharacter : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	CPtrList m_lPopupStack;
	char m_nDualClass;
	CStringList *m_pScripts;
	int m_nScriptIndex;
	int m_nErrorState;
	int m_nCharacterIndex;
	CStringList *m_pCharacters;
	int m_bMultiPlayerViewable;
	int m_bMultiPlayerModifyable;
	__POSITION *m_nCurrentPortrait;
	CStringList *m_pAppearancePortraits;
	CStringList *m_pPortraits;
	int m_nCustomSoundSetIndex;
	int m_nCustomSoundIndex;
	CResRef m_cResPortraitSmall;
	CResRef m_cResPortraitLarge;
	char m_aColor[7];
	CString m_sScript;
	int m_bSmartScriptFlags[11];
	CString m_sNewScript;
	CResRef m_cResPortraitSmallTemp;
	CResRef m_cResPortraitMediumTemp;
	unsigned int m_nSpecialization;
	CStringList *m_pSounds;
	CResRef m_cResSoundSet;
	CCreatureFileHeader *m_pTempBaseStats;
	CDerivedStats *m_pTempDerivedStats;
	CTypedPtrList<CPtrList,CResRef *> m_lstMageSpells;
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	char m_bCtrlKeyDown;
	CString m_sExportName;
	int m_bAddInactiveAbilities;
	int m_OldMageSpells[9];
	int m_OldPriestSpells[7];
	int m_bPauseState;
	int m_bIsLevelingUp;
};

/* 4626 */
struct __cppobj CResGame : CRes
{
};

/* 4627 */
struct __cppobj CResHelper<CResGame,1013>
{
	CResGame *pRes;
	CResRef cResRef;
};

/* 4628 */
struct __cppobj CGameFile : CResHelper<CResGame,1013>
{
};

/* 4629 */
struct __cppobj CTypedPtrArray<CPtrArray,CSavedGamePartyCreature *> : CPtrArray
{
};

/* 4630 */
struct __cppobj CTypedPtrArray<CPtrArray,unsigned char *> : CPtrArray
{
};

/* 4631 */
struct __cppobj CImportGame
{
	char m_bDrizztDead;
	CGameFile *m_pGame;
	char m_nVersion;
	CTypedPtrArray<CPtrArray,CSavedGamePartyCreature *> m_aPartyCreatures;
	CTypedPtrArray<CPtrArray,CSavedGamePartyCreature *> m_aNonPartyCreatures;
	CTypedPtrArray<CPtrArray,unsigned char *> m_aCreatureData;
	CTypedPtrArray<CPtrArray,unsigned char *> m_aNPCData;
	int m_nGlobalVariables;
	char *m_pGlobalVariables;
	unsigned int m_nPartyGold;
	unsigned int m_nReputation;
};

/* 4632 */
struct __cppobj CTypedPtrArray<CPtrArray,char> : CPtrArray
{
};

/* 4633 */
struct __cppobj CTypedPtrArray<CPtrArray,CAbilityData *> : CPtrArray
{
};

/* 4634 */
struct __cppobj CGameAbilityList : CTypedPtrArray<CPtrArray,CAbilityData *>
{
};

/* 4635 */
struct __cppobj CScreenCreateChar : CBaldurEngine
{
	C2DArray m_kitList;
	CImportGame m_importGame;
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bCtrlKeyDown;
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	CScreenCreateCharStep m_nFirstStep;
	CScreenCreateCharStep m_nCurrentStep;
	CScreenCreateCharStep m_nNextStep;
	int m_nGameSprite;
	int m_nExtraProficiencySlots;
	int m_nExtraAbilityPoints;
	int m_nExtraSpells;
	int m_nExtraSkillPoints;
	int m_nBasePickPockets;
	int m_nBaseOpenLocks;
	int m_nBaseDetectTraps;
	int m_nBaseMoveSilently;
	int m_nBaseHideInShadows;
	int m_nBaseDetectIllusion;
	int m_nBaseSetTraps;
	char m_nMinSTR;
	char m_nMinDEX;
	char m_nMinCON;
	char m_nMinINT;
	char m_nMinWIS;
	char m_nMinCHR;
	char m_nMaxSTR;
	char m_nMaxDEX;
	char m_nMaxCON;
	char m_nMaxINT;
	char m_nMaxWIS;
	char m_nMaxCHR;
	char m_nPreviousMin;
	char m_nPreviousMax;
	int m_nMaxProficiencySlots;
	__POSITION *m_nCurrentPortrait;
	CStringList *m_pAppearancePortraits;
	CPtrList m_lPopupStack;
	int m_nEngineState;
	int m_nCharacterSlot;
	int m_nTopHatedRace;
	char m_nPickRange;
	char m_nMemorySTR;
	char m_nMemorySTRExtra;
	char m_nMemoryDEX;
	char m_nMemoryCON;
	char m_nMemoryINT;
	char m_nMemoryWIS;
	char m_nMemoryCHR;
	int m_nMemoryExtra;
	int m_nPortraitSmallIndex;
	int m_nPortraitMediumIndex;
	CStringList *m_pPortraits;
	int m_nCustomSoundSetIndex;
	int m_nCustomSoundIndex;
	int m_nCharacterIndex;
	int m_nPrerollTopIndex;
	CStringList *m_pCharacters;
	int m_bImported;
	CStringList *m_pSounds;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	CVidFont m_preLoadFontTool;
	char m_nCurrentSpellLevel;
	int m_nExtraMageSpells;
	CCreatureFileHeader *m_pOldBaseStats;
	CDerivedStats *m_pOldDerivedStats;
	int m_nOldConHPBonus;
	char m_nCurrentSpellLevelChoice;
	char m_nCurrentSpellLevelChoiceMax;
	unsigned __int16 m_nImportedCharHPs;
	unsigned __int16 m_nImportedCharConBonus;
	char m_nImportedDualClass;
	unsigned int m_nImportedDualKit;
	int m_nImportedDualReactivated;
	char m_byImportedCharVersion;
	__int16 m_nSelectedSpecialistSpells;
	__int16 m_nMemorizedSpecialistSpells;
	int m_nTotalKits;
	unsigned __int16 m_nHatedRaces;
	importStateType m_importState;
	unsigned int m_strDefaultHelpString;
	char m_bUpdatedHelp;
	unsigned int m_strCurrentHelpString;
	int m_bGaveExtraXP;
	int m_nExtraXP;
	CString m_sImportCharName;
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	int m_OldMageSpells[9];
	int m_OldPriestSpells[7];
	CTypedPtrArray<CPtrArray,char> m_aBaseProficiencySlots;
	CCreatureFileHeader *m_pTempBaseStats;
	CDerivedStats *m_pTempDerivedStats;
	int m_storedSkillPoints[7];
	int m_bAddInactiveAbilities;
	CStringList *m_szCharInfoStorage;
	int m_nSpellcasterLevel;
	int m_nNumLevelUpAbilities;
	char m_nCurrentAbilityLevelChoice;
	int m_bFinishedAbilitySelection;
	CGameAbilityList *m_lstLevelUpAbilitiesList;
	char m_lstSelectedAbility[24];
	char m_nSelectedAbilityInd;
	int m_nDualClass;
	int m_nSpecialization;
};

/* 4636 */
struct __cppobj CScreenCreateParty : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[5];
	int m_bCtrlKeyDown;
	int m_pVirtualKeysFlags[5];
	int m_nEngineState;
	int m_firstCall;
	CVidFont m_preloadFontStnSml;
	int m_nCharacterSlot;
};

/* 4637 */
struct __cppobj CScreenInventory : CBaldurEngine
{
	CItem *m_pTempItem;
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	char m_bCtrlKeyDown;
	CPoint m_cLastMousePosition;
	int m_nTopGroundItem;
	int m_nGroundPile[6];
	int m_bGroundPileQueried[6];
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	int m_nLastSwapPortrait;
	unsigned int m_dwLastSwapButton;
	int m_bMultiPlayerViewable;
	CResRef m_cCheckLearnSpellRes;
	int m_nCheckLearnSpellCountDown;
	int m_bDroppedItemInHand;
	char m_bPauseWarningDisplayed;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	CVidFont m_preLoadFontTool;
	unsigned int m_stSpellsDisabled;
	int m_bLearnSpellFailed;
	unsigned int m_strLearnSpellFailedReason;
	int m_bPauseState;
};

/* 4638 */
struct __cppobj CScreenJournal : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	char m_bCtrlKeyDown;
	CResRef m_oldMosaic;
	CResRef m_oldFont;
	unsigned int m_rgbOldText;
	unsigned int m_rgbOldBackground;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontTool;
	int m_bPauseState;
};

/* 4639 */
struct __cppobj CTypedPtrArray<CPtrArray,CSaveGameSlot *> : CPtrArray
{
};

/* 4640 */
struct __cppobj CScreenLoad : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[5];
	int m_pVirtualKeysFlags[5];
	char m_bCtrlKeyDown;
	int m_nTopGameSlot;
	int m_nNumGameSlots;
	int m_nEngineState;
	CTypedPtrArray<CPtrArray,CSaveGameSlot *> m_aGameSlots;
	int m_nCurrentGameSlot;
	unsigned int m_strErrorText;
	unsigned int m_strErrorButtonText[3];
	int m_nNumErrorButtons;
	CPtrList m_lPopupStack;
	int m_nMaxSlotNumber;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	int m_bHideSoA;
	int m_bHideToB;
};

/* 4641 */
struct MOSAICHEADERV2
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int nWidth;
	unsigned int nHeight;
	unsigned int nQuads;
	unsigned int nOffsetToQuads;
};

/* 4642 */
struct mosHeader_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nXTiles;
	unsigned __int16 nYTiles;
	unsigned __int16 nTileSize;
	char nTransparentColor;
	char nCompressed;
	unsigned int nPaletteOffset;
};

/* 4643 */
struct __cppobj CResMosaic : CRes
{
	void *pUncompressedData;
	unsigned int nUncompressedSize;
	int texture;
	MOSAICHEADERV2 *pMosaicHeaderV2;
	MOSAICQUAD *quads;
	mosHeader_st *pMosaicHeader;
	tagRGBQUAD *pPalettes;
	char *m_pData;
	unsigned int *pOffsets;
};

/* 4644 */
struct __cppobj CResHelper<CResMosaic,1004>
{
	CResMosaic *pRes;
	CResRef cResRef;
};

/* 4645 */
struct __cppobj CVidMosaic : CVidImage, CResHelper<CResMosaic,1004>
{
};

/* 4646 */
struct __cppobj MAP_CHAR_POSITIONS
{
	CPoint ptPos;
	int id;
};

/* 4647 */
struct __cppobj CScreenMap : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	CPtrList m_lPopupStack;
	__int16 m_nLastPicked;
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	char m_bSelectWorldOnUp;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontTool;
	CVidFont m_preLoadFontStnSml;
	unsigned int m_noteStrref;
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	char m_bCtrlKeyDown;
	int m_nClairvoyanceCaster;
	int m_nClairvoyanceDuration;
	char m_bClairvoyanceCastInBlack;
	int m_nScrollState;
	unsigned int m_nTimeLButtonHeld;
	CRect m_HoldArea;
	bool m_bDisplayExploredMap;
	CVidMosaic m_vmMap;
	int m_bHaveMap;
	unsigned int m_mapTint;
	CGameArea *m_pArea;
	CRect m_rViewPort;
	MAP_CHAR_POSITIONS m_charPositions[6];
	unsigned __int16 m_nCharInArea;
	int m_nCharactersChanged;
	unsigned int m_nUserNoteId;
	CRect m_rMap;
};

/* 4648 */
struct __cppobj CTypedPtrList<CPtrList,CGameOptions *> : CPtrList
{
};

/* 4649 */
struct __cppobj CScreenOptions : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bExitProgram;
	CPtrList m_lPopupStack;
	unsigned int m_dwErrorTextId;
	unsigned int m_dwErrorState;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	CTypedPtrList<CPtrList,CGameOptions *> m_lOptionsStack;
	int m_bSpriteMirror;
	char m_bCtrlKeyDown;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	char m_bFullScreenOptions;
	char m_bReQuietSound;
	int m_nTopKeymap;
	int m_nSelectedKeymap;
	int m_nNumKeymapEntries;
	int m_nKeymapEditIndex;
	char *m_cKeymapEditSection;
	char *m_cKeymapEditConflictSection;
	char *m_cKeymapEditConflictKey;
	int m_nKeymapEditConflictIndex;
	char m_cKeymapEditConflictValue;
	int m_bPauseState;
	int m_nEngineState;
};

/* 4650 */
struct __cppobj CScreenPriestSpell : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_nSpellLevel;
	CResRef m_cResCurrentSpell;
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	int m_bMultiPlayerViewable;
	int m_nMemorizedSpellIndex;
	char m_bCtrlKeyDown;
	int m_nEngineState;
	int m_bPriestPage;
	int m_bPauseState;
	int m_bControlled;
};

/* 4651 */
struct __cppobj CScreenSave : CBaldurEngine
{
	int m_bQuitGameSave;
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	int m_nTopGameSlot;
	int m_nNumGameSlots;
	int m_nEngineState;
	CTypedPtrArray<CPtrArray,CSaveGameSlot *> m_aGameSlots;
	CPtrList m_lPopupStack;
	unsigned int m_strErrorText;
	unsigned int m_strErrorButtonText[3];
	int m_nNumErrorButtons;
	int m_nCurrentGameSlot;
	int m_nMaxSlotNumber;
	char m_bCtrlKeyDown;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	int m_bPauseState;
};

/* 4652 */
struct __cppobj CScreenStart : CBaldurEngine
{
	int m_bStartMusic;
	int m_bExitProgram;
	CKeyInfo m_pVirtualKeys[5];
	int m_bCtrlKeyDown;
	int m_pVirtualKeysFlags[5];
	char m_bMovieOn;
	int m_nEngineState;
	int m_firstCall;
	CPtrList m_lPopupStack;
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[4];
	int m_bPlayEndCredits;
	int m_bSplashScreens;
	int m_bNeedCDCheck;
	int m_nCurrentDLC;
	int m_nNumDLC;
	int m_nLastImageUpdate;
	int m_nDlcState;
	CVidFont m_preloadFontStnSml;
};

/* 4653 */
struct __cppobj CTypedPtrList<CPtrList,CContingencySpell *> : CPtrList
{
};

/* 4654 */
struct __cppobj CScreenWizSpell : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_nSpellLevel;
	int m_bMultiPlayerViewable;
	int m_nMemorizedSpellIndex;
	char m_bCtrlKeyDown;
	int m_bMagePage;
	char m_nContingencyMaxLevel;
	char m_nContingencyMaxSpells;
	__int16 m_bContingencyRestrictTarget;
	CBaldurEngine *m_pOldEngine;
	char m_nContingencyCurrentLevel;
	int m_bContingencyCleric;
	unsigned __int16 m_nMaxContingencies;
	CTypedPtrList<CPtrList,CContingencySpell *> m_spellList;
	CResRef m_refContingencyResRef;
	int m_bControlled;
	int m_bPauseState;
	int m_bContingency;
};

/* 4655 */
struct SDL_CommonEvent
{
	unsigned int type;
	unsigned int timestamp;
};

/* 4656 */
struct SDL_WindowEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	char event;
	char padding1;
	char padding2;
	char padding3;
	int data1;
	int data2;
};

/* 4657 */
struct SDL_Keysym
{
	SDL_Scancode scancode;
	int sym;
	unsigned __int16 mod;
	unsigned int unused;
};

/* 4658 */
struct SDL_KeyboardEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	char state;
	char repeat;
	char padding2;
	char padding3;
	SDL_Keysym keysym;
};

/* 4659 */
struct SDL_TextEditingEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	char text[32];
	int start;
	int length;
};

/* 4660 */
struct SDL_TextInputEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	char text[32];
};

/* 4661 */
struct SDL_MouseMotionEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	unsigned int which;
	unsigned int state;
	int x;
	int y;
	int xrel;
	int yrel;
};

/* 4662 */
struct SDL_MouseButtonEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	unsigned int which;
	char button;
	char state;
	char clicks;
	char padding1;
	int x;
	int y;
};

/* 4663 */
struct SDL_MouseWheelEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	unsigned int which;
	int x;
	int y;
	unsigned int direction;
};

/* 4664 */
struct SDL_JoyAxisEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
	char axis;
	char padding1;
	char padding2;
	char padding3;
	__int16 value;
	unsigned __int16 padding4;
};

/* 4665 */
struct SDL_JoyBallEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
	char ball;
	char padding1;
	char padding2;
	char padding3;
	__int16 xrel;
	__int16 yrel;
};

/* 4666 */
struct SDL_JoyHatEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
	char hat;
	char value;
	char padding1;
	char padding2;
};

/* 4667 */
struct SDL_JoyButtonEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
	char button;
	char state;
	char padding1;
	char padding2;
};

/* 4668 */
struct SDL_JoyDeviceEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
};

/* 4669 */
struct SDL_ControllerAxisEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
	char axis;
	char padding1;
	char padding2;
	char padding3;
	__int16 value;
	unsigned __int16 padding4;
};

/* 4670 */
struct SDL_ControllerButtonEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
	char button;
	char state;
	char padding1;
	char padding2;
};

/* 4671 */
struct SDL_ControllerDeviceEvent
{
	unsigned int type;
	unsigned int timestamp;
	int which;
};

/* 4672 */
struct SDL_AudioDeviceEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int which;
	char iscapture;
	char padding1;
	char padding2;
	char padding3;
};

/* 4673 */
struct SDL_QuitEvent
{
	unsigned int type;
	unsigned int timestamp;
};

/* 4674 */
struct SDL_UserEvent
{
	unsigned int type;
	unsigned int timestamp;
	unsigned int windowID;
	int code;
	void *data1;
	void *data2;
};

/* 4675 */
struct SDL_version
{
	char major;
	char minor;
	char patch;
};

/* 4676 */
struct $35B8784F5B175CB25C726D027F0FAF05
{
	HWND__ *hwnd;
	unsigned int msg;
	unsigned int wParam;
	int lParam;
};

/* 4677 */
union $7A82A4F20925B39A17F1CA6696A345EC
{
	$35B8784F5B175CB25C726D027F0FAF05 win;
	int dummy;
};

/* 4678 */
struct SDL_SysWMmsg
{
	SDL_version version;
	SDL_SYSWM_TYPE subsystem;
	$7A82A4F20925B39A17F1CA6696A345EC msg;
};

/* 4679 */
struct SDL_SysWMEvent
{
	unsigned int type;
	unsigned int timestamp;
	SDL_SysWMmsg *msg;
};

/* 4680 */
struct __unaligned __declspec(align(4)) SDL_TouchFingerEvent
{
	unsigned int type;
	unsigned int timestamp;
	__int64 touchId;
	__int64 fingerId;
	float x;
	float y;
	float dx;
	float dy;
	float pressure;
};

/* 4681 */
struct __unaligned __declspec(align(4)) SDL_MultiGestureEvent
{
	unsigned int type;
	unsigned int timestamp;
	__int64 touchId;
	float dTheta;
	float dDist;
	float x;
	float y;
	unsigned __int16 numFingers;
	unsigned __int16 padding;
};

/* 4682 */
struct SDL_DollarGestureEvent
{
	unsigned int type;
	unsigned int timestamp;
	__int64 touchId;
	__int64 gestureId;
	unsigned int numFingers;
	float error;
	float x;
	float y;
};

/* 4683 */
struct SDL_DropEvent
{
	unsigned int type;
	unsigned int timestamp;
	char *file;
};

/* 4684 */
union SDL_Event
{
	unsigned int type;
	SDL_CommonEvent common;
	SDL_WindowEvent window;
	SDL_KeyboardEvent key;
	SDL_TextEditingEvent edit;
	SDL_TextInputEvent text;
	SDL_MouseMotionEvent motion;
	SDL_MouseButtonEvent button;
	SDL_MouseWheelEvent wheel;
	SDL_JoyAxisEvent jaxis;
	SDL_JoyBallEvent jball;
	SDL_JoyHatEvent jhat;
	SDL_JoyButtonEvent jbutton;
	SDL_JoyDeviceEvent jdevice;
	SDL_ControllerAxisEvent caxis;
	SDL_ControllerButtonEvent cbutton;
	SDL_ControllerDeviceEvent cdevice;
	SDL_AudioDeviceEvent adevice;
	SDL_QuitEvent quit;
	SDL_UserEvent user;
	SDL_SysWMEvent syswm;
	SDL_TouchFingerEvent tfinger;
	SDL_MultiGestureEvent mgesture;
	SDL_DollarGestureEvent dgesture;
	SDL_DropEvent drop;
	char padding[56];
};

/* 4685 */
struct __cppobj CTypedPtrArray<CPtrArray,CGameDialogEntry *> : CPtrArray
{
};

/* 4686 */
struct __cppobj CGameDialogSprite
{
	CResRef m_file;
	CTypedPtrArray<CPtrArray,CGameDialogEntry *> m_dialogEntries;
	CTypedPtrArray<CPtrArray,CGameDialogEntry *> m_dialogEntriesOrdered;
	int m_characterIndex;
	int m_talkerIndex;
	unsigned int m_currentEntryIndex;
	int m_waitingForResponse;
	int m_responseMarker;
	unsigned int m_playerColor;
	CString m_playerName;
	int m_dialogFreezeCounter;
	int m_dialogFreezeMultiplayer;
	unsigned int m_dWFlags;
	int m_bPlayedStartSound;
	int m_bItemDialog;
	int m_bSuppressName;
	int m_UpdateTime;
};

/* 4687 */
struct CPARTICLE_POINT
{
	int x;
	int y;
	int z;
};

/* 4688 */
struct __cppobj CParticle
{
	__int16 m_nTimeStamp;
	__int16 m_nTailLength;
	__int16 m_nRenderTime;
	unsigned int m_rgbColor;
	unsigned __int16 m_wType;
	int m_nLifeSpan;
	char m_bTag;
	CPARTICLE_POINT m_pos;
	CPARTICLE_POINT m_vel;
	int m_nGravity;
};

/* 4689 */
struct __cppobj CSnowFlake : CParticle
{
	char m_nDriftWidth;
	char m_nDriftCounter;
	unsigned __int16 m_nMeltTime;
	int m_nLastDriftVelocity;
};

/* 4690 */
struct __cppobj CSnowStorm
{
	CSnowFlake *m_pSnowFlakes;
	unsigned __int16 m_nCurrentDensity;
	CRect m_rOldWorldViewPort;
};

/* 4691 */
struct __cppobj CRainDrop : CParticle
{
};

/* 4692 */
struct __cppobj CRainStorm
{
	CRainDrop *m_pRainDrops;
	unsigned __int16 m_nCurrentDensity;
	CRect m_rOldWorldViewPort;
	__int16 m_nWindGustCounter;
	int m_nRainDrops;
};

/* 4693 */
struct __cppobj CFog
{
	float *densityLast;
	float *densityCurrent;
	float *densityNext;
	int N;
	float dt;
	float diff;
	float visc;
	float force;
	float source;
	int dvel;
	float *u;
	float *v;
	float *u_prev;
	float *v_prev;
	float *dens;
	float *dens_prev;
	bool pointEnabled;
	int pointAmount;
	int pointDuration;
	CPoint pointPos;
	float pointUForce;
	float pointVForce;
	CPoint explosionPos;
	int updateCounter;
	bool fading;
	bool initialized;
	float alpha;
	int contrast;
	unsigned int innerColor;
	unsigned int outerColor;
};

/* 4694 */
struct __cppobj __declspec(align(4)) CWeather
{
	char m_bOverCast;
	unsigned __int16 m_nLightningFreq;
	unsigned __int16 m_nCurrentWeather;
	unsigned __int16 m_nWeatherLevel;
	unsigned int m_nWeatherEndTime;
	unsigned int m_nWeatherStageEndTime;
	unsigned int m_nWeatherDuration;
	unsigned int m_nLastTimeChecked;
	unsigned __int16 m_nWindLevel;
	unsigned int m_rgbCurrentOverCastColor;
	unsigned int m_nDurationCounter;
	CSnowStorm m_snowStorm;
	CRainStorm m_rainStorm;
	CFog m_fog;
	CSound m_sndRain;
	CSound m_sndWind;
	char m_bWindOn;
	char m_bUpgrading;
	unsigned int m_nNextTimeToStartChecking;
	unsigned int m_nWindVolumeLevel;
	unsigned int m_nRainVolumeLevel;
	char m_bReInitialize;
};

/* 4695 */
struct __cppobj CTypedPtrList<CPtrList,CDeathSound *> : CPtrList
{
};

/* 4696 */
struct __cppobj CScreenWorld : CBaldurEngine
{
	int m_nStupidMovieWait;
	int m_bProtagonistInStartArea;
	int m_nProtagonistMoveMax;
	int m_bWaitToRender;
	__unaligned __declspec(align(1)) SDL_Event flickEvent;
	int m_bIgnoreDisplayTextTop;
	int nCounter;
	int m_boredCount;
	int m_bored;
	int m_playerShutdown;
	int m_bShiftKeyDown;
	int m_bMenuKeyDown;
	int m_bCtrlKeyDown;
	int m_bCapsLockKeyOn;
	char m_bPaused;
	char m_bHardPaused;
	char m_bHostOnlyPaused;
	char m_bVisualPaused;
	char m_bFirstRender;
	int m_bPausedBeforePickParty;
	int m_bCheatKeys;
	int m_bMButtonDown;
	int m_bMButtonDragged;
	int m_bSetStartViewCenter;
	CPoint m_ptStartViewCenter;
	__int16 m_sequence;
	char m_facing;
	char m_bloodLevel;
	unsigned __int16 m_castingGlow;
	char m_hitEffect;
	__int16 m_renderText;
	int m_newText;
	CVidFont m_vidFont;
	CVidFont m_vidFont2;
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	CGameDialogSprite m_internalLoadedDialog;
	CGameDialogSprite *m_pCurrentDialog;
	CPoint m_dialogStartPos;
	CResRef m_dialogStartArea;
	int m_dialogPausing;
	CRect m_newViewSize;
	int m_bForceViewSize;
	char m_waitingOnResize;
	char m_storeText;
	CString m_consoleText;
	int m_nTopContainerRow;
	int m_nTopGroupRow;
	char m_bForceDitherToggledOn;
	CWeather m_WeatherController;
	int m_scrollLockId;
	__int16 m_nResponseMarker;
	int m_bBlockStepDialog;
	int m_interactionIndex;
	int m_interactionTarget;
	CString m_interactionString;
	int m_interactionCounter;
	int m_interactionForce;
	int m_interactionTime;
	int m_lastInteractionIndex;
	char m_bSetNightOnActivate;
	char m_bSetDayOnActivate;
	int m_ambianceForce;
	unsigned int m_deltaTime;
	int m_nChatMessageCount;
	CResRef m_movie;
	char m_bInControlOfDialog;
	char m_bInControlOfStore;
	int m_bGameOverPanel;
	CResRef m_movieDelay;
	int m_autoPauseId;
	unsigned int m_autoPauseRef;
	unsigned int m_autoPauseColor;
	unsigned int m_autoPauseName;
	int m_nStoreChatMessageCount;
	int m_nPickPartyRemoveCharacterId;
	int m_aPickPartyCharacter[10];
	int m_nPickPartyNumCharacters;
	unsigned int m_strErrorText;
	unsigned int m_strErrorButtonText[3];
	unsigned int m_nDialogPanelOnStartDialog;
	char m_bDialogPressedAButton;
	char m_bEndMajorEventListenToJoin;
	char m_bEndMajorEventPauseStatus;
	char m_bChapterTransitionPending;
	int m_nChapterTransition;
	char m_szChapterTransitionResRef[8];
	char m_bTextScreenTransitionPending;
	char m_szTextScreenTransitionResRef[8];
	char m_bMoviePending;
	char m_szMovieResRef[8];
	char m_bPendingMapWorld;
	int m_idPendingMapWorldController;
	__int16 m_nPendingMapWorldDirection;
	char m_bRestPending;
	char m_bRestRenting;
	char m_bRestMovie;
	int m_nRestHP;
	int m_nRestGP;
	int m_nBattleCryTimeOut;
	CTypedPtrList<CPtrList,CDeathSound *> m_deathSoundList;
	int m_nPartySizeCheckStartDelay;
	char m_bPlayEndCredits;
	char m_bPendingReformParty;
	char m_bLeaveAreaLuaPanicPending;
	unsigned int m_ulLeaveAreaLuaPanicTimer;
	CPoint m_ptLeaveAreaLuaPanicLocation;
	__int16 m_nLeaveAreaLuaPanicDirection;
	CString m_sLeaveAreaLuaPanicAreaName;
	CString m_sLeaveAreaLuaPanicParchment;
	unsigned int m_dwPausedTickCount;
	unsigned int m_dwLastDialogTickCount;
	int m_lastAmbiance;
	int m_comingOutOfDialog;
	char m_nAutoHideInterface;
	char m_nAutoUnhideInterface;
	CRect m_rCurrViewPort;
	int m_bLeftPanel;
	int m_bRightPanel;
	char m_bCheckRestrict;
	CTypedPtrList<CPtrList,long *> m_otherTalkers;
	int m_nInteractionBlockCnt;
	int m_bInteractionBlock;
	int m_nStateOverride;
	int m_nStateOverrideCnt;
	int m_nBlackOutCountDown;
	int m_nCutSceneDeadZoneCountDown;
	int m_nContainerOutline;
	int m_tutorialWaitTimer;
	int m_bPausedBeforeStore;
	int m_nPauseMessageUpdate;
	unsigned int m_deathStrRef;
	int m_bHighlightEnabled;
	float m_fPanStorage;
	int m_bViewingContainer;
	int m_bInDialog;
	int m_bDead;
	int m_bInCommand;
	int m_bPickingParty;
	int m_bAutoZooming;
	float m_fPreviousZoom;
	float m_fTargetZoom;
	CRect m_rPreviousViewPort;
	CPoint m_ptPreviousView;
	CPoint m_ptTarget;
	int m_nZoomCurStep;
	CRect m_rOriginalViewPort;
	CPoint m_ptOriginalView;
	float m_fOriginalZoom;
	int *m_storedGroup;
	int m_nStoredGroupMembers;
};

/* 4697 */
struct __cppobj CScreenStore : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	char m_bCtrlKeyDown;
	char m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	int m_nTopGroupItem;
	CPtrList m_lGroupItems;
	int m_nTopStoreItem;
	CPtrList m_lStoreItems;
	int m_nTopSpellItem;
	CPtrList m_lSpellItems;
	int m_nTopIdentifyItem;
	CPtrList m_lIdentifyItems;
	int m_nTopDrinkItem;
	CResRef m_cResStore;
	CResRef m_cResBag;
	unsigned int m_adwButtonPanelId[4];
	CStore *m_pStore;
	CStore *m_pBag;
	int m_nStoreCost;
	int m_nGroupCost;
	unsigned int m_dwSpellCost;
	unsigned int m_dwIdentifyCost;
	unsigned int m_dwRoomType;
	CAIObjectType m_cAIProprietor;
	CAIObjectType m_cAICustomer;
	unsigned int m_dwDonationAmount;
	int m_nDrinkRumorIndex;
	int m_nDonateRumorIndex;
	CPtrList m_lPopupStack;
	CItem *m_pHistoryItem;
	int m_bHistoryUseEnabled;
	CResRef m_cResInfoSpell;
	int m_nChatMessageCount;
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	char m_nCharisma;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	CVidFont m_preLoadFontTool;
	unsigned int m_nRequesterAmount;
	int m_nRequesterButtonId;
	int m_bStoreIndex;
	int m_bStoreStarted;
	int m_nBagCount;
	float m_fPanStorage;
};

/* 4698 */
struct __cppobj CScreenMultiPlayer : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bCtrlKeyDown;
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	CPtrList m_lPopupStack;
	int m_nModifiedCharacterSlot;
	int m_nEngineState;
	int m_nChatMessageCount;
	int m_nPermissionsChatMessageCount;
	int m_nKickPlayerSlot;
	int m_nCharacterSlot;
	char m_bMultiplayerStartup;
	int m_bLastLockAllowInput;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	CVidFont m_preLoadFontTool;
	char m_bSentGameDemand;
	CString m_playerNames[6];
	CString m_characterNames[6];
	CString m_characterPortrait[6];
};

/* 4699 */
struct __cppobj CScreenConnection : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bCtrlKeyDown;
	int m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	int m_nProtocol;
	int m_nSessionIndex;
	_GUID m_guidSession;
	unsigned int m_dwLastSessionRefresh;
	int m_nEnumServiceProvidersCountDown;
	int m_bStartedCountDown;
	char m_bFirstRender;
	char m_bEliminateInitialize;
	char m_bEMSwapped;
	char m_bEMValue;
	char m_bEMWaiting;
	char m_nEMEvent;
	char m_nEMEventStage;
	int m_nErrorState;
	unsigned int m_strErrorText;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	int m_bAllowInput;
	char m_bEnumeratingAsynchronous;
	char m_bJoinWaiting;
	char m_bJoinComplete;
	char m_nJoinEvent;
	int m_nJoinErrorCode;
	char m_bJoinReturnValue;
	int m_nWaitingForProviderNumber;
	int m_nWaitingForProviderCount;
};

/* 4700 */
struct CList<unsigned long,unsigned long &>::CNode
{
	CList<unsigned long,unsigned long &>::CNode *pNext;
	CList<unsigned long,unsigned long &>::CNode *pPrev;
	unsigned int data;
};

/* 4701 */
struct __cppobj CList<unsigned long,unsigned long &> : CObject
{
	CList<unsigned long,unsigned long &>::CNode *m_pNodeHead;
	CList<unsigned long,unsigned long &>::CNode *m_pNodeTail;
	int m_nCount;
	CList<unsigned long,unsigned long &>::CNode *m_pNodeFree;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4702 */
struct __cppobj CArray<CRect,CRect &> : CObject
{
	CRect *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 4703 */
struct __cppobj CScreenWorldMap : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	char m_bCtrlKeyDown;
	char m_bShiftKeyDown;
	int m_bCapsLockKeyOn;
	CPtrList m_lPopupStack;
	CSize m_mapSize;
	int m_nEngineState;
	CPoint m_ptMapView;
	CVidMosaic m_vmMap;
	CVidCell m_vcAreas;
	CVidCell m_vcMarker;
	CVidFont m_vfLabel;
	tagRGBQUAD m_aPalette[256];
	unsigned int m_wAreaForeground;
	unsigned int m_nHighlightArea;
	unsigned int m_nSelectedArea;
	int m_bSelectedReachable;
	int m_bOverSelectedArea;
	CPoint m_ptMapStartMousePos;
	CPoint m_ptMapStartView;
	int m_bMapLeftDown;
	int m_bMapDragging;
	CGameArea *m_pCurrentArea;
	int m_nLeaderSprite;
	CList<unsigned long,unsigned long &> *m_pPath;
	int m_nLeavingEdge;
	unsigned int m_nCurrentLink;
	CResRef m_cResCurrentArea;
	CArray<CRect,CRect &> m_aAreaRect;
	CArray<CRect,CRect &> m_aAreaMarker;
	struct CUIControlTextDisplay *m_pChatDisplay;
	int m_nChatMessageCount;
	char m_bInControl;
	char m_bClickedArea;
	int m_nCurrentSong;
	unsigned int m_nToolTip;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontTool;
	char m_nScrollState;
	CResRef m_rForceRandomEncounter;
	CString m_sForcedEncounterEntry;
	int m_bFontDropShadow;
};

/* 4704 */
struct __cppobj CScreenChapter : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[5];
	int m_pVirtualKeysFlags[5];
	char m_bCtrlKeyDown;
	int m_nChapter;
	int m_nDream;
	CResRef m_cResText;
	CList<unsigned long,unsigned long &> *m_pTextList;
	CTypedPtrList<CPtrList,CResRef *> m_bmpList;
	int m_nBmpFlip;
	int m_nCurrBmp;
	int m_nParagraph;
	int m_nLine;
	CSound m_cVoiceSound;
	int m_bStartSound;
	int m_nEngineState;
	CResRef m_cResPower;
	int m_nSongCountDown;
	CVidFont m_preLoadFontRealms;
	int m_bMPRemoveTextScreen;
	int m_nCustomSong;
	int m_waitingForNetwork;
	CWarp *m_destinationEngine;
};

/* 4705 */
struct __cppobj CScreenMovies : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_nEngineState;
	CStringList *m_pMovies;
	int m_nMovieIndex;
	CString m_sSelectedMovie;
};

/* 4706 */
struct __cppobj CScreenDLC : CBaldurEngine
{
	CKeyInfo m_pVirtualKeys[98];
	int m_pVirtualKeysFlags[98];
	int m_bExitProgram;
	CPtrList m_lPopupStack;
	unsigned int m_dwErrorTextId;
	unsigned int m_dwErrorState;
	int m_nNumErrorButtons;
	unsigned int m_strErrorButtonText[3];
	CTypedPtrList<CPtrList,CGameOptions *> m_lOptionsStack;
	int m_bSpriteMirror;
	char m_bCtrlKeyDown;
	CVidFont m_preLoadFontRealms;
	CVidFont m_preLoadFontStnSml;
	int m_nNumDLC;
	int m_nCurrentDLC;
	int m_nDlcState;
};

/* 4707 */
struct __cppobj CMapStringToString::CAssoc
{
	CMapStringToString::CAssoc *pNext;
	unsigned int nHashValue;
	CString key;
	CString value;
};

/* 4708 */
struct __cppobj CMapStringToString : CObject
{
	CMapStringToString::CAssoc **m_pHashTable;
	unsigned int m_nHashTableSize;
	int m_nCount;
	CMapStringToString::CAssoc *m_pFreeList;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4709 */
struct __cppobj CTlkFileOverride
{
	int bLoaded;
	int m_UserAddedCount;
};

/* 4710 */
struct file_t
{
	int fd;
	int fm;
	int fs;
	int zo;
	int zs;
};

/* 4711 */
struct __cppobj CFileView
{
	file_t f;
	view_t v;
	int fileSize;
	int filePos;
};

/* 4712 */
struct __cppobj CTlkTable
{
	CMapStringToString m_mapTokens;
	char m_currentGender;
	CTlkFileOverride m_override;
	CFileView *m_tlkFiles[2];
	unsigned int *m_engineStrings;
	unsigned int m_nEngineStrings;
	unsigned int m_nEngineStringBase;
};

/* 4713 */
struct __cppobj CCacheStatus
{
	int m_nDrawnBars;
	int m_nScreensDrawn;
	int m_bDemandedResources;
	int m_bTravelScreen;
	int m_nProgressBarCaption;
	int m_nParchmentCaption;
	unsigned int m_dwLastUpdateTickCount;
	int m_nTimeToNewHint;
	int m_nCurrentHint;
	int m_nCurrentHintRef;
	int m_bWaiting;
	CVidFont m_vidFont;
	CVidFont m_initialsFont;
	CVidFont m_parchmentFont;
	CVidMosaic m_titleBar;
	CVidCell m_skullAnimating;
	CVidCell m_progressBar;
	int m_nAnimationFrame;
	int m_nAnimationDirection;
	int m_bActivateEngine;
};

/* 4714 */
struct __cppobj CScriptCache
{
	CAIScript **m_scriptMap;
	int m_nTableEntries;
};

/* 4715 */
struct __cppobj CTypedPtrList<CPtrList,CString *> : CPtrList
{
};

/* 4716 */
struct __cppobj CChatBuffer
{
	CTypedPtrList<CPtrList,CString *> m_lLabels;
	CTypedPtrList<CPtrList,CString *> m_lMessages;
	int m_nMessageCount;
	int m_nDisplayCount;
};

/* 4717 */
struct __cppobj __declspec(align(2)) CBaldurMessage
{
	char m_bInOnObjectAdd;
	char m_bInOnObjectDelete;
	char m_bInOnRestAnnounce;
	char m_bInOnJournalAnnounce;
	char m_bInOnAreaMapNoteAnnounce;
	char m_bInOnAnnounceBiography;
	char m_bInHandleBlockingMessages;
	char m_bPlayerShutdown;
	CChatBuffer m_cChatBuffer;
	char m_nSignalQueueSize;
	char m_nSignalQueueStart;
	char m_nSignalQueueEnd;
	char m_pnSignalFrom[24];
	char m_pnSignalType[24];
	char m_pnSignalData[24];
	char m_bDeleteAreaPolling;
	CString m_sDeleteAreaString;
	unsigned int m_dwDeleteAreaTimeout;
	char m_pnDeleteAreaVotes[6];
	int m_pnDeleteAreaVoters[6];
	char m_bCloseSessionPolling;
	unsigned int m_dwCloseSessionTimeout;
	char m_pnCloseSessionVotes[6];
	int m_pnCloseSessionVoters[6];
	int m_pRemovedPlayerID[6];
	char m_bRemovedPlayerID;
	char m_bDialogRequestPending;
	char m_bDialogReplyReturned;
	char m_bDialogReplyValue;
	int m_nDialogReplyUpdates;
	char m_bLeaveAreaLuaRequestPending;
	char m_bLeaveAreaLuaReplyReturned;
	char m_nLeaveAreaLuaReplyValue;
	char m_bLeaveAreaNameRequestPending;
	char m_bLeaveAreaNameReplyReturned;
	char m_nLeaveAreaNameReplyValue;
	char m_bMultiplayerSynchClientPending;
	char m_bMultiplayerSynchClientFinished;
	char m_bMultiplayerSynchServerPending;
	char m_bMultiplayerSynchServerFinished;
	char m_nMultiplayerSynchClientLocation;
	char m_bVersionControlShutdown;
	CString m_sVersionControlShutdownClientString;
	CString m_sVersionControlShutdownServerString;
	char m_nVersionControlShutdownReason;
	unsigned int m_dwSignalSecondsToTimeout;
	char m_bMultiplayerSessionShutdown;
	char m_bInReputationChange;
	char m_bInMessageSetDrawPoly;
};

/* 4718 */
struct __cppobj CTypedPtrList<CPtrList,CMessage *> : CPtrList
{
};

/* 4719 */
struct __cppobj __declspec(align(4)) CMessageHandler
{
	CTypedPtrList<CPtrList,CMessage *> m_messageList;
	char m_bLastArbitrationLockStatus;
};

/* 4720 */
struct __cppobj __declspec(align(8)) CBaldurChitin : CChitin
{
	CInfCursor *m_pObjectCursor;
	CInfGame *m_pObjectGame;
	CDungeonMaster *m_pEngineDM;
	CBaldurProjector *m_pEngineProjector;
	CScreenAI *m_pEngineAI;
	CScreenCharacter *m_pEngineCharacter;
	CScreenCreateChar *m_pEngineCreateChar;
	CScreenCreateParty *m_pEngineCreateParty;
	CScreenInventory *m_pEngineInventory;
	CScreenJournal *m_pEngineJournal;
	CScreenLoad *m_pEngineLoad;
	CScreenMap *m_pEngineMap;
	CScreenOptions *m_pEngineOptions;
	CScreenPriestSpell *m_pEnginePriestSpell;
	CScreenSave *m_pEngineSave;
	CScreenStart *m_pEngineStart;
	CScreenWizSpell *m_pEngineWizSpell;
	CScreenWorld *m_pEngineWorld;
	CScreenStore *m_pEngineStore;
	CScreenMultiPlayer *m_pEngineMultiPlayer;
	CScreenConnection *m_pEngineConnection;
	CScreenWorldMap *m_pEngineWorldMap;
	CScreenChapter *m_pEngineChapter;
	CScreenMovies *m_pEngineMovies;
	CScreenDLC *m_pEngineDLC;
	CTlkTable m_cTlkTable;
	CCacheStatus m_cCachingStatus;
	CScriptCache m_scriptCache;
	CBaldurMessage m_cBaldurMessage;
	CMessageHandler m_cMessageHandler;
	int m_bFontRectOutline;
	char m_bCDScanDone;
	char m_bCDFoundDrive;
	CString m_sCDDriveName;
	char m_bCDMediaInDrive;
	char m_bCDFoundBaldurCD;
	char m_bIsAutoStarting;
	int m_bDropPanels;
	int m_bDropCaps;
	int m_bDisableMovies;
	int m_bStartConfig;
	int m_bSuperSpeedAI;
	int m_bFirstRun;
	int m_nInstallType;
	int m_bUseNewGui;
	CVidFont m_preLoadedFont;
	CVidMosaic m_tiledBackground;
};

/* 4721 */
struct __cppobj CTypedPtrList<CPtrList,CGameJournalEntry *> : CPtrList
{
};

/* 4724 */
struct __cppobj CTypedPtrArray<CPtrArray,CSpawnPoint *> : CPtrArray
{
};

/* 4725 */
struct __cppobj CSpawnPointArray : CTypedPtrArray<CPtrArray,CSpawnPoint *>
{
	int mDefaultFacing;
};

/* 4726 */
struct __cppobj CSpawnPoint
{
	CSpawnPointVtbl *vfptr;
	CPoint mLocation;
	int mFacing;
};

/* 4722 */
struct __cppobj CSpawn
{
	CSpawnVtbl *vfptr;
	unsigned int Interval;
	CString SectionAlias;
	unsigned int SpawnFlags;
	int DataIsValid;
	CAIObjectType mSearchAI;
	int mSearchQty;
	int mSearchRegion[4];
	CSpawnVar *mpSearchKeyVar;
	CSpawnVar *mpSearchQtyVar;
	CStringList mCREFiles;
	int mCreateQty;
	CString *mpCreateQtyScope;
	CString *mpCreateQtyLabel;
	CString *mpScriptName;
	char mEA;
	char mGeneral;
	char mRace;
	char mClass;
	char mGender;
	char mSpecifics;
	char mFaction;
	char mTeam;
	char mAlignment;
	CString *mpOverrideScript;
	CString *mpClassScript;
	CString *mpRaceScript;
	CString *mpGeneralScript;
	CString *mpDefaultScript;
	CString *mpAreaScript;
	CString *mpSpecificsScript;
	CStringList mDialogFiles;
	int mDeathGoodModifier;
	int mDeathLawModifier;
	int mDeathLadyModifier;
	int mDeathMurderModifier;
	int Facing;
	CSpawnPointArray mSpawnPointArray;
	CSpawnPoint mSpelectedPoint;
	CSpawn::ePMode mPointSelectMode;
	CString *pPointIndexScope;
	CString *pPointIndexLabel;
	CSpawnPointVar *mpExplicitSpawnPoint;
	CString *pExplicitSpawnFacingScope;
	CString *pExplicitSpawnFacingLabel;
	CSpawnPointVar *mpSpawnPointStorage;
	CString *pSpawnFacingStorageScope;
	CString *pSpawnFacingStorageLabel;
	int mSequentialStartValue;
	unsigned int mTimeOfDay;
};

/* 4723 */
struct CSpawnVtbl
{
	void *(__thiscall *__vecDelDtor)(CSpawn *this, unsigned int);
};

/* 4727 */
struct CSpawnPointVtbl
{
	void *(__thiscall *__vecDelDtor)(CSpawnPoint *this, unsigned int);
};

/* 4728 */
struct __cppobj CSpawnPointVar : CSpawnVar
{
};

/* 4729 */
struct __cppobj CGameEffectBase
{
	CResRef m_version;
	unsigned int m_effectId;
	unsigned int m_targetType;
	unsigned int m_spellLevel;
	int m_effectAmount;
	unsigned int m_dWFlags;
	unsigned int m_durationType;
	unsigned int m_duration;
	unsigned __int16 m_probabilityUpper;
	unsigned __int16 m_probabilityLower;
	CResRef m_res;
	unsigned int m_numDice;
	unsigned int m_diceSize;
	unsigned int m_savingThrow;
	int m_saveMod;
	unsigned int m_special;
	unsigned int m_school;
	unsigned int m_JeremyIsAnIdiot;
	unsigned int m_minLevel;
	unsigned int m_maxLevel;
	unsigned int m_flags;
	int m_effectAmount2;
	int m_effectAmount3;
	int m_effectAmount4;
	int m_effectAmount5;
	CResRef m_res2;
	CResRef m_res3;
	CPoint m_source;
	CPoint m_target;
	unsigned int m_sourceType;
	CResRef m_sourceRes;
	unsigned int m_sourceFlags;
	unsigned int m_projectileType;
	int m_slotNum;
	char m_scriptName[32];
	unsigned int m_casterLevel;
	unsigned int m_firstCall;
	unsigned int m_secondaryType;
	unsigned int m_pad[15];
};

/* 4730 */
struct __cppobj CGameEffect : CGameEffectBase
{
	CGameEffectVtbl *vfptr;
	int m_sourceId;
	int m_done;
	int m_forceRepass;
	unsigned int m_durationTemp;
	int m_compareIdOnly;
	int m_compareIdAndFlagsOnly;
	int m_compareIdAndEffectAmountOnly;
	int m_compareIdAndResrefOnly;
	CSound m_sound;
	int m_sourceTarget;
};

/* 4769 */
struct CGameEffectVtbl
{
	void *(__thiscall *__vecDelDtor)(CGameEffect *this, unsigned int);
	_BYTE gap4[4];
	int (__thiscall *ApplyEffect)(CGameEffect *this, CGameSprite *);
	int (__thiscall *ResolveEffect)(CGameEffect *this, CGameSprite *);
	void (__thiscall *OnAdd)(CGameEffect *this, CGameSprite *);
	void (__thiscall *OnAddSpecific)(CGameEffect *this, CGameSprite *);
	void (__thiscall *OnLoad)(CGameEffect *this, CGameSprite *);
	int (__thiscall *CheckSave)(CGameEffect *this, CGameSprite *, char *, char *, char *, char *, char *, char *);
	int (__thiscall *UsesDice)(CGameEffect *this);
	void (__thiscall *DisplayString)(CGameEffect *this, CGameSprite *);
	void (__thiscall *OnRemove)(CGameEffect *this, CGameSprite *);
};

/* 4731 */
struct __cppobj CTypedPtrList<CPtrList,CGameTimer *> : CPtrList
{
};

/* 4732 */
struct __cppobj CAIAction
{
	__int16 m_actionID;
	CAIObjectType m_actorID;
	CAIObjectType m_acteeID;
	CAIObjectType m_acteeID2;
	int m_specificID;
	int m_specificID2;
	int m_specificID3;
	CString m_string1;
	CString m_string2;
	CPoint m_dest;
	unsigned int m_internalFlags;
	CString m_source;
};

/* 4733 */
struct __cppobj CGameAIBase : CGameObject
{
	CAIObjectType m_lAttacker;
	int m_lAttackStyle;
	CAIObjectType m_lOrderedBy;
	CAIObjectType m_protecting;
	CAIObjectType m_protector;
	CAIObjectType m_lTargeted;
	CAIObjectType m_lHitter;
	CAIObjectType m_lHelp;
	CAIObjectType m_lTrigger;
	CAIObjectType m_lSeen;
	CAIObjectType m_lTalkedTo;
	CAIObjectType m_lHeard;
	CAIObjectType m_lSummonedBy;
	CAIObjectType m_lKilled;
	CAIObjectType m_lEnteredBy;
	CAIObjectType m_lAttackerSent;
	CAIObjectType m_lOrderedBySent;
	CAIObjectType m_protectingSent;
	CAIObjectType m_protectorSent;
	CAIObjectType m_lTargetedSent;
	CAIObjectType m_lHitterSent;
	CAIObjectType m_lHelpSent;
	CAIObjectType m_lTriggerSent;
	CAIObjectType m_lSeenSent;
	CAIObjectType m_lTalkedToSent;
	CAIObjectType m_lHeardSent;
	CAIObjectType m_lSummonedBySent;
	CAIObjectType m_lKilledSent;
	CAIScript *m_overrideScript;
	CAIScript *m_areaScript;
	CAIScript *m_specificsScript;
	CAIScript *m_classScript;
	CAIScript *m_raceScript;
	CAIScript *m_generalScript;
	CAIScript *m_defaultScript;
	CAIScript *m_achievementScript;
	CTypedPtrList<CPtrList,CAIAction *> m_queuedActions;
	CTypedPtrList<CPtrList,CAITrigger *> m_pendingTriggers;
	unsigned int m_PAICallCounter;
	unsigned int m_PAICallCounterNoMod;
	CTypedPtrList<CPtrList,CGameTimer *> m_timers;
	__int16 m_curResponseNum;
	__int16 m_curResponseSetNum;
	__int16 m_curScriptNum;
	int m_interrupt;
	__int16 m_actionCount;
	int m_bJustAttacked;
	CAIAction m_curAction;
	int m_nExpectedProcessPendingTriggersCalls;
	__int16 m_nMissedProcessPendingTriggerCalls;
	__int16 m_nAlertnessPeriod;
	char m_scriptName[32];
	int m_inCutScene;
	int m_firstCall;
	int m_forceActionPick;
	int m_randValue;
	char m_reactionRoll;
	__int16 m_nLastActionReturn;
	char m_nVisualRange;
	unsigned int m_iGameText;
	int m_bInActionExecution;
	int m_bNewTrigger;
	int m_triggerSwitch;
	int m_bNoInterrupt;
	int m_bDisableAI;
	CSound m_forcePauseSound;
	int m_nServerLastObjectSynchDelay;
	CAITrigger triggerOverride;
};

/* 4734 */
struct __cppobj CTypedPtrList<CPtrList,CCreatureFileKnownSpell *> : CPtrList
{
};

/* 4735 */
struct __cppobj CTypedPtrList<CPtrList,CCreatureFileMemorizedSpell *> : CPtrList
{
};

/* 4737 */
struct __cppobj CGameSpriteEquipment
{
	CItem *m_items[39];
	char m_selectedWeapon;
	unsigned __int16 m_selectedWeaponAbility;
	CItem *m_pTempItem;
	CGameSprite *m_pSprite;
};

/* 4738 */
struct __cppobj CAbilityId
{
	__int16 m_itemType;
	__int16 m_itemNum;
	__int16 m_abilityNum;
	CResRef m_res;
	char m_targetType;
	char m_targetCount;
	unsigned int m_toolTip;
};

/* 4739 */
struct __cppobj __declspec(align(4)) CButtonData
{
	CResRef m_icon;
	unsigned int m_name;
	CResRef m_launcherIcon;
	unsigned int m_launcherName;
	__int16 m_count;
	CAbilityId m_abilityId;
	char m_bDisabled;
	char m_bDisplayCount;
};

/* 4740 */
struct __cppobj CGameSaveCharacter
{
	unsigned int m_actionMode;
	CButtonData m_quickWeapons[4];
	CButtonData m_quickSpells[3];
	CButtonData m_quickItems[3];
};

/* 4741 */
struct __cppobj __declspec(align(4)) CGameStatsRes : CObject
{
	CResRef m_cResRef;
	__int16 m_nTimesUsed;
};

/* 4742 */
struct __cppobj CGameStatsSprite
{
	unsigned int m_strStrongestKillName;
	unsigned int m_nStrongestKillXPValue;
	unsigned int m_nPreviousTimeWithParty;
	unsigned int m_nJoinPartyTime;
	int m_bWithParty;
	unsigned int m_nChapterKillsXPValue;
	unsigned int m_nChapterKillsNumber;
	unsigned int m_nGameKillsXPValue;
	unsigned int m_nGameKillsNumber;
	CGameStatsRes m_pSpellStats[4];
	CGameStatsRes m_pWeaponStats[4];
};

/* 4748 */
struct __cppobj __declspec(align(4)) CGameAnimation
{
	CGameAnimationType *m_animation;
	unsigned int m_overrides;
	__int16 m_sequenceHighLevel;
	char m_detectedByInfravision;
	char m_bloodColor;
	char m_personalSpace;
};

/* 4750 */
struct __cppobj CTypedPtrList<CPtrList,CBlood *> : CPtrList
{
};

/* 4751 */
struct __cppobj CGameEffectList : CTypedPtrList<CPtrList,CGameEffect *>
{
	__POSITION *m_posNext;
	__POSITION *m_posCurrent;
	int m_newEffect;
	int m_retry;
};

/* 4752 */
struct __cppobj CPersistantEffectList : CTypedPtrList<CPtrList,CPersistantEffect *>
{
};

/* 4759 */
struct __cppobj __declspec(align(4)) CVIDMODE_RECTICLE_DESCRIPTION
{
	CPoint ptCenter;
	__int16 xAxis;
	__int16 yAxis;
	__int16 piePiecePtXOffset;
	__int16 piePiecePtYOffset;
	__int16 piePieceXOffset;
	__int16 piePieceYOffset;
	__int16 xGap;
	__int16 yGap;
	__int16 cursor;
};

/* 4760 */
struct __cppobj __declspec(align(4)) CMarker
{
	char m_type;
	__int16 m_nRecticleCounter;
	char m_nRecticleForceRender;
	char m_nRecticleForceRenderTarget;
	unsigned int m_rgbColor;
	CVIDMODE_RECTICLE_DESCRIPTION m_recticleDesc;
	char m_bTalking;
	char m_bDoubleSize;
};

/* 4761 */
struct __cppobj CTypedPtrList<CPtrList,CPortraitIcon *> : CPtrList
{
};

/* 4762 */
struct __cppobj CTypedPtrList<CPtrList,CBounceEntry *> : CPtrList
{
};

/* 4763 */
struct __cppobj CBounceList : CTypedPtrList<CPtrList,CBounceEntry *>
{
};

/* 4766 */
struct __cppobj CTypedPtrList<CPtrList,CFeedbackEntry *> : CPtrList
{
};

/* 4767 */
struct __cppobj CGameSpriteLastUpdate
{
	int *m_pPath;
	__int16 m_nPath;
	__int16 m_currPath;
	CPoint m_ptDest;
	char m_nMoveScale;
	__int16 m_nSequence;
	CPoint m_ptPosition;
	__int16 m_nFacing;
	unsigned int m_dwState;
	__int16 m_nHitPoints;
	__int16 m_nMaxHitPoints;
	__int16 m_nArmorClass;
	__int16 m_nACCrushingMod;
	__int16 m_nACMissileMod;
	__int16 m_nACPiercingMod;
	__int16 m_nACSlashingMod;
	__int16 m_nPortraitIcons;
	int *m_pPortraitIcons;
	char m_nEnemyAlly;
	char m_nEnemyAllyLive;
	char m_bMoraleFailure;
	char m_nGeneral;
	char m_nGeneralLive;
	CString m_sAreaString;
	char m_bLevelUp;
	int m_nHPCONBonusTotalOld;
	char m_bSummonDisable;
	char m_bDoNotJump;
	char m_bSanctuary;
	char m_bDisableCircle;
	char m_bHeld;
	char m_bActiveImprisonment;
	unsigned int m_spellState[8];
	int m_bFullUpdateRequired;
};

/* 4768 */
struct __cppobj CTypedPtrList<CPtrList,CGameSprite::GroundItem *> : CPtrList
{
};

/* 4736 */
struct __cppobj CGameSprite : CGameAIBase
{
	CResRef m_resref;
	unsigned __int16 m_type;
	unsigned int m_expirationTime;
	unsigned __int16 m_huntingRange;
	unsigned __int16 m_followRange;
	CPoint m_posStart;
	unsigned int m_timeOfDayVisible;
	CCreatureFileHeader m_baseStats;
	CTypedPtrList<CPtrList,CCreatureFileKnownSpell *> m_knownSpellsPriest[7];
	CTypedPtrList<CPtrList,CCreatureFileKnownSpell *> m_knownSpellsMage[9];
	CTypedPtrList<CPtrList,CCreatureFileKnownSpell *> m_knownSpellsInnate[1];
	CCreatureFileMemorizedSpellLevel *m_memorizedSpellsLevelPriest[7];
	CCreatureFileMemorizedSpellLevel *m_memorizedSpellsLevelMage[9];
	CCreatureFileMemorizedSpellLevel *m_memorizedSpellsLevelInnate[1];
	CTypedPtrList<CPtrList,CCreatureFileMemorizedSpell *> m_memorizedSpellsPriest[7];
	CTypedPtrList<CPtrList,CCreatureFileMemorizedSpell *> m_memorizedSpellsMage[9];
	CTypedPtrList<CPtrList,CCreatureFileMemorizedSpell *> m_memorizedSpellsInnate[1];
	CGameSpriteEquipment m_equipment;
	char *m_pDialogData;
	unsigned int m_nDialogData;
	CDerivedStats m_derivedStats;
	CDerivedStats m_tempStats;
	CDerivedStats m_bonusStats;
	CGameSaveCharacter m_gameSaveData;
	CString m_sName;
	char m_lastCharacterCount;
	CGameStatsSprite m_cGameStats;
	CResRef m_currentArea;
	char m_bGlobal;
	char m_nModalState;
	CSound m_sndWalk[2];
	unsigned int m_nSndWalk;
	CSound m_sndArmor[2];
	char m_currSndWalk;
	char m_currSndArmor;
	CSound m_sndReady;
	CSound m_sndDeath;
	CSound m_sndMagic;
	CSound m_sndVoice;
	CSound m_sndSpriteEffect;
	int m_nNumberOfTimesTalkedTo;
	int m_bSeenPartyBefore;
	CResRef m_specificScriptName;
	int m_nNumberOfTimesInteractedWith[24];
	__int16 m_nHappiness;
	__int16 m_nOldHappiness;
	CAIObjectType m_interactingWith;
	int m_triggerId;
	int m_active;
	int m_activeAI;
	int m_activeImprisonment;
	int m_bSelected;
	int m_bPortraitUpdate;
	char m_bInfravisionOn;
	char m_terrainTable[16];
	char m_visibleTerrainTable[16];
	char m_flightTerrainTable[16];
	CGameAnimation m_animation;
	unsigned __int16 *m_pSpriteEffectArray;
	tagPOINT *m_pSpriteEffectArrayPosition;
	char m_nTwitches;
	char m_spriteEffectSequenceNumber;
	char m_spriteEffectDuration;
	char m_spriteEffectSequenceLength;
	char m_spriteEffectBaseIntensity;
	char m_spriteEffectRandomIntensity;
	CVidCell m_spriteEffectVidCell;
	CVidPalette m_spriteEffectPalette;
	unsigned int m_spriteEffectFlags;
	CVidCell m_spriteSplashVidCell;
	CVidPalette m_spriteSplashPalette;
	unsigned int m_spriteSplashFlags;
	CRect m_rSpriteEffectFX;
	CPoint m_ptSpriteEffectReference;
	char m_effectExtendDirection;
	char m_bEscapingArea;
	int m_animationRunning;
	int m_posZDelta;
	char m_doBounce;
	char m_nMirrorImages;
	char m_bBlur;
	char m_bInvisible;
	char m_bSanctuary;
	CVidCell m_sanctuaryVidCell;
	char m_bEntangle;
	CVidCell m_entangleVidCell;
	char m_bMinorGlobe;
	CVidCell m_minorGlobeVidCell;
	char m_bShieldGlobe;
	CVidCell m_shieldGlobeVidCell;
	char m_bGreasePool;
	CVidCell m_greasePoolVidCell;
	char m_bWebHold;
	CVidCell m_webHoldVidCell;
	long double m_fCircleChange;
	long double m_fCurrCircleChange;
	__int16 m_radius;
	char m_circleFacing;
	char m_bVisibilityUpdated;
	long double m_fDirectionOffset;
	__int16 m_nSequence;
	CPoint m_posExact;
	CPoint m_posDelta;
	CPoint m_posDest;
	CPoint m_posOld;
	CPoint m_posOldWalk;
	CPoint m_posLastVisMapEntry;
	int *m_pVisMapExploredArea;
	__int16 m_skipDeltaDirection;
	__int16 m_deltaDirection;
	__int16 m_nNewDirection;
	__int16 m_nDirection;
	int *m_pPath;
	__int16 m_nPath;
	char m_bCheckMove;
	CTypedPtrList<CPtrList,long *> m_pPathTemp;
	CTypedPtrList<CPtrList,long *> m_nPathTemp;
	__int16 m_currPath;
	int m_walkBackwards;
	int m_turningAbout;
	unsigned int m_lastRGBColor;
	int m_pathSearchInvalidDest;
	int m_pathCollision;
	CSearchRequest *m_currentSearchRequest;
	__int16 m_nBloodFlashAmount;
	__int16 m_nDamageLocatorTime;
	unsigned int m_nDamageLocatorColor;
	int m_bBloodFlashOn;
	CVidBitmap m_vbPortraitSmall;
	int m_bVisibleMonster;
	int m_bBumpable;
	char m_bBumped;
	CPoint m_ptBumpedFrom;
	int m_bInClearBumpPath;
	unsigned int m_nBlockedTick;
	int m_followLeader;
	int m_followLeaderAdditive;
	int m_followLeaderNext;
	int m_followStart;
	CTypedPtrList<CPtrList,CBlood *> m_lstBlood;
	__int16 m_castCounter;
	int m_bStartedCasting;
	int m_bInCasting;
	__int16 m_selectedSound;
	__int16 m_moveCount;
	__int16 m_moveToFrontQueue;
	__int16 m_moveToBackQueue;
	int m_moveToBack;
	int m_moveToFront;
	CGameEffectList m_equipedEffectList;
	CGameEffectList m_timedEffectList;
	CPersistantEffectList m_persistantEffects;
	CGameAbilityList m_lstSelectedLevelUpAbilities;
	CPoint m_curDest;
	int m_nGregsRetryCounter;
	int m_bWaitingForAreaLoadInLeaveAreaLUA;
	__int16 m_userCommandPause;
	__int16 m_nCommandPause;
	CPoint m_curPosition;
	int m_tookDamage;
	__POSITION *m_groupPosition;
	int m_groupMove;
	int m_firstDeadAI;
	CProjectile *m_curProjectile;
	CSpell *m_curSpell;
	CItem *m_curItem;
	__int16 m_curItemSlotNum;
	__int16 m_curItemAbilityNum;
	__int16 m_weaponProficiencyList[40];
	char m_generalWeaponList[8];
	__int16 m_speedFactor;
	__int16 m_lastActionID;
	CAIObjectType m_liveTypeAI;
	CAIObjectType m_startTypeAI;
	int m_endOfDamageSeq;
	__int16 m_playDeadCounter;
	__int16 m_turnToStoneCounter;
	__int16 m_lightningReactCounter;
	__int16 m_sleepCounter;
	__int16 m_runCounter;
	__int16 m_searchPauseCount;
	int m_doneSearch;
	__int16 m_dieCount;
	__int16 m_pauseCount;
	__int16 m_recoilFrame;
	__int16 m_attackFrame;
	int m_noActionCount;
	int m_inFormation;
	int m_newEffect;
	char m_canDamage;
	int m_leftAttack;
	char m_halfAttack;
	int m_hasColorEffects;
	int m_hasColorRangeEffects;
	int m_hasAnimationEffects;
	int m_removeFromArea;
	int m_forceAnimationReset;
	CMarker m_marker;
	CMarker m_destMarker;
	int m_targetId;
	CPoint m_targetPoint;
	__int16 m_targetAreaSize;
	char m_nTempSelectedWeapon;
	char m_nTempSelectedWeaponAbility;
	CButtonData m_currentUseButton;
	CResRef m_dialog;
	CResRef m_dialogInteraction;
	char m_sequenceTest;
	STR_RES *m_speech;
	char m_saveVSDeathRoll;
	char m_saveVSWandsRoll;
	char m_saveVSPolyRoll;
	char m_saveVSBreathRoll;
	char m_saveVSSpellRoll;
	char m_magicResistRoll;
	char m_probabilityRoll;
	char m_wildMageLevelModRoll;
	char m_wildMageSurgeRoll;
	__int16 m_wildSurgeLevel;
	__int16 m_nSelectionCountCommon;
	__int16 m_nSelectionCountCommonRareCounter;
	__int16 m_nSelectionCountRare;
	__int16 m_nSelectionCountAction;
	int m_lastCheckedHitPoints;
	int m_moraleFailure;
	int m_startedSwing;
	__int16 m_followCount;
	int m_clearAIOnRemoveFromArea;
	int m_dialogWait;
	int m_dialogWaitTarget;
	int m_talkingCounter;
	char m_talkingRenderCount;
	char m_inControlLastTime;
	char m_bSecondPass;
	CTypedPtrList<CPtrList,CPortraitIcon *> m_portraitIcons;
	CVidCell m_portraitIconVidCell;
	int m_firstActionSound;
	int m_lastRested;
	int m_berserkActive;
	__int16 m_attackSoundDeadzone;
	int m_nHPCONBonusTotalOld;
	int m_bHPCONBonusTotalUpdate;
	int m_nLastWeightCheck;
	unsigned int m_modalCounter;
	int m_bHiding;
	unsigned int m_lastRegenerationTime;
	int m_bLevelUp;
	char m_bAllowDialogInterrupt;
	char m_bHappinessChanged;
	int m_nUnselectableCounter;
	unsigned int m_nUnselectableType;
	CResRef m_secondarySounds;
	int m_nStealthGreyOut;
	int m_bMentalStateActing;
	int m_nLastLevelUpLevel[3];
	int m_nLastLevelUpHPRoll;
	int m_bForceVisualEffects;
	__int16 m_currentActionId;
	int m_bPlayedEncumberedStopped;
	int m_bPlayedEncumberedSlowed;
	int m_nPlayedEncumberedStopped;
	int m_nPlayedEncumberedSlowed;
	__int16 m_nPlayedPoisonedDamage;
	__int16 m_nEffectListCalls;
	int m_bAllowEffectListCall;
	char m_nPreCutSceneMoveScale;
	int m_bUsingCutSceneMovement;
	int m_bDeleteOnRemove;
	CVariableHash *m_pLocalVariables;
	int m_bInUnmarshal;
	CBounceList m_lBounceList;
	int m_nTransitionPointIndex;
	int m_nBounceCounter;
	int m_nMoraleAI;
	int m_nGeneratedVEFIndex;
	int m_nTrackingCounter;
	CGameButtonList *m_interalButtonList;
	CAIScript *m_dreamScript;
	CGameDialogSprite m_cDialog;
	CGameDialogSprite m_cBanter;
	char m_bForceVisRangeRedraw;
	int m_nLastExpiryCheck;
	int m_nLastContingencyCheck;
	CString m_hitBonusesLeft;
	CString m_hitBonusesRight;
	CString m_damageBonusesLeft;
	CString m_damageBonusesRight;
	__int16 m_effectMovementRate;
	unsigned int m_effectStateFlags;
	CCreatureFileMemorizedSpellLevel m_effectMemorizedSpellsLevelMage[9];
	CCreatureFileMemorizedSpellLevel m_effectMemorizedSpellsLevelPriest[7];
	int m_effectStoreInitialized;
	char m_nLevellingUp;
	int m_bHasDeathSequence;
	CTypedPtrList<CPtrList,long *> m_lstTargetIds;
	CTypedPtrList<CPtrList,CPoint *> m_lstTargetPts;
	int m_bInStoreState;
	int m_bInDialogState;
	int m_nDialogState;
	int m_nWaitingOnDialog;
	bool m_bHighlightPortrait;
	unsigned int m_nHighlightColor;
	int m_bCutSceneOverrideOfState;
	int m_bForceEffectProcessFromTimeStop;
	int m_bCopyForAdd;
	int m_nCopyParent;
	CTypedPtrList<CPtrList,CFeedbackEntry *> m_feedbackQueue;
	int m_bOnSearchMap;
	int m_bRemovedFromMap;
	CGameSpriteLastUpdate m_cLastSpriteUpdate;
	int m_bSendSpriteUpdate;
	int m_nLastDamageTaken;
	int m_nDeadVisualEffectCountDown;
	int m_bForceVisibilityCheck;
	char m_nVisualRange;
	int m_bPlayAnimationBattleCry;
	int m_bPlayAnimationSelectionSound;
	char m_aLevellupSpellsToPick[10];
	int m_nCrossAreaChaseCounter;
	int m_bDidAReequipAll;
	int m_bInEquip;
	char m_cFirstResSlot;
	int m_nNumColorRanges;
	int m_nNumColorEffects;
	int m_nNumWeaponImmunities;
	int m_bCheckedIfVisiblePause;
	int m_bCheckedSpecialAbilities;
	int m_bDroppedTempItem;
	int m_nSkippedUpdates;
	int m_bDelayUpdate;
	int m_nHalfSwingCounter;
	bool m_bInCopy;
	CTypedPtrList<CPtrList,CGameSprite::GroundItem *> m_lstVisibleGroundItems;
	int m_nGroundItemPage;
	float m_avgProcessAITime;
};

/* 4744 */
struct NECK_POINTS
{
	__int16 x;
	__int16 y;
};

/* 4746 */
struct __cppobj CTypedPtrList<CPtrList,CSequenceSound *> : CPtrList
{
};

/* 4747 */
struct __cppobj CSequenceSoundList : CTypedPtrList<CPtrList,CSequenceSound *>
{
	__POSITION *m_currentSound;
	int m_soundPlaying;
	int m_channel;
};

/* 4743 */
struct __cppobj CGameAnimationType
{
	CGameAnimationTypeVtbl *vfptr;
	unsigned __int16 m_animationID;
	char m_moveScale;
	char m_moveScaleCurrent;
	CRect m_rEllipse;
	int m_nHeightOffset;
	bool m_bUseSpriteShader;
	char m_colorBlood;
	char m_colorChunks;
	unsigned int m_nSndFreq;
	const char *m_pSndDeath;
	NECK_POINTS m_neckOffsets[8];
	CVidBitmap m_combatRounds[5];
	char m_personalSpace;
	char m_walkCount;
	unsigned __int16 m_castFrame;
	char m_bBrightest;
	char m_bBrightestDesired;
	char m_bLightSource;
	CResRef m_soundRef;
	CString m_walkRef;
	CSequenceSoundList m_sequenceRefs[20];
	int m_bNewPalette;
	CVidBitmap m_newPalette;
};

/* 4749 */
struct __cppobj CSearchRequest
{
	char m_serviceState;
	char m_collisionDelay;
	int m_collisionSearch;
	char m_sourceSide;
	char m_nPartyIds;
	char m_nTargetIds;
	char m_nTargetPoints;
	int m_removeSelf;
	char m_frontList;
	CSearchBitmap *m_searchBitmap;
	char m_terrainTable[16];
	int m_pathSmooth;
	int m_exclusiveTargetPoints;
	int m_sourceId;
	tagPOINT m_sourcePt;
	int *m_partyIds;
	int *m_targetIds;
	tagPOINT *m_targetPoints;
	int m_minNodes;
	int m_maxNodes;
	int m_minNodesBack;
	int m_maxNodesBack;
	int m_bBump;
	__int16 m_searchRc;
	__int16 m_nPath;
	int *m_pPath;
};

/* 4753 */
struct __cppobj CProjectile : CGameObject
{
	unsigned __int16 m_projectileType;
	char m_addToListType;
	__int16 m_speed;
	int m_sourceId;
	int m_targetId;
	int m_callBackProjectile;
	CGameEffectList m_effectList;
	__int16 m_nType;
	CPoint m_posExact;
	CPoint m_posDelta;
	CPoint m_startDelta;
	CPoint m_minRandomSpeed;
	CPoint m_maxRandomSpeed;
	int m_startSpeed;
	CPoint m_posDest;
	char m_terrainTable[16];
	unsigned __int16 m_decAmmount;
	int m_bSparkleTrail;
	unsigned int m_defaultRenderFlags;
	int m_bIgnoreTarget;
	CSound m_sound;
	CResRef m_fireSoundRef;
	int m_loopFireSound;
	CResRef m_arrivalSoundRef;
	int m_loopArrivalSound;
	char m_bHasHeight;
	__int16 m_nDeltaZ;
	__int16 m_nDeltaZLast;
	int m_nOrigDistance;
	CPoint m_ptBamSize;
	int m_dwFlags;
	int m_maxBounces;
	CString m_visualEffectRef;
	int m_visualEffect;
	__int16 m_maxDuration;
	__int16 m_lanceWidth;
	unsigned int m_extFlags;
	unsigned int m_strRef;
	unsigned int m_color;
	unsigned __int16 m_colorSpeed;
	unsigned __int16 m_shake;
	unsigned __int16 m_IDSValue1;
	unsigned __int16 m_IDSType1;
	unsigned __int16 m_IDSValue2;
	unsigned __int16 m_IDSType2;
	CResRef m_failureSpell;
	CResRef m_successSpell;
};

/* 4757 */
struct __cppobj CResHelper<CResSpell,1006>
{
	CResSpell *pRes;
	CResRef cResRef;
};

/* 4758 */
struct __cppobj CSpell : CResHelper<CResSpell,1006>
{
};

/* 4764 */
struct __cppobj CTypedPtrList<CPtrList,CButtonData *> : CPtrList
{
};

/* 4765 */
struct __cppobj CGameButtonList : CTypedPtrList<CPtrList,CButtonData *>
{
	int m_nFirstMageSpellIndex;
};

/* 4745 */
struct CGameAnimationTypeVtbl
{
	void *(__thiscall *__vecDelDtor)(CGameAnimationType *this, unsigned int);
	_BYTE gap4[28];
	CVidPalette *(__thiscall *GetAnimationPalette)(CGameAnimationType *this, char);
	void (__thiscall *GetAnimationResRef)(CGameAnimationType *this, CString *, char);
	char (__thiscall *CanLieDown)(CGameAnimationType *this);
	char (__thiscall *DetectedByInfravision)(CGameAnimationType *this);
	unsigned __int16 (__thiscall *GetCastFrame)(CGameAnimationType *this);
	char (__thiscall *GetColorBlood)(CGameAnimationType *this);
	char (__thiscall *GetColorChunks)(CGameAnimationType *this);
	char (__thiscall *GetListType)(CGameAnimationType *this);
	void (__thiscall *SetListType)(CGameAnimationType *this, char);
	char (__thiscall *GetMoveScale)(CGameAnimationType *this);
	void (__thiscall *SetMoveScale)(CGameAnimationType *this, char);
	void (__thiscall *ResetMoveScale)(CGameAnimationType *this);
	char (__thiscall *GetMoveScaleDefault)(CGameAnimationType *this);
	NECK_POINTS (__thiscall *GetNeckOffsets)(CGameAnimationType *this, __int16);
	CRect *(__thiscall *GetEllipseRect)(CGameAnimationType *this);
	int (__thiscall *GetPathSmooth)(CGameAnimationType *this);
	char (__thiscall *GetPersonalSpace)(CGameAnimationType *this);
	const char *(__thiscall *GetSndArmor)(CGameAnimationType *this, char *);
	const char *(__thiscall *GetSndDeath)(CGameAnimationType *this, char *);
	const char *(__thiscall *GetSndReady)(CGameAnimationType *this, char *);
	const char *(__thiscall *GetSndWalk)(CGameAnimationType *this, char *, __int16);
	unsigned int (__thiscall *GetSndWalkFreq)(CGameAnimationType *this);
	int (__thiscall *IsFalseColor)(CGameAnimationType *this);
	int (__thiscall *IsInvulnerable)(CGameAnimationType *this);
	int (__thiscall *IsMirroring)(CGameAnimationType *this);
	int (__thiscall *IsBeginningOfSequence)(CGameAnimationType *this);
	int (__thiscall *IsEndOfSequence)(CGameAnimationType *this);
	int (__thiscall *IsEndOfTwitchSequence)(CGameAnimationType *this);
	void (__thiscall *IncrementFrame)(CGameAnimationType *this);
	void (__thiscall *DecrementFrame)(CGameAnimationType *this);
	void (__thiscall *Render)(CGameAnimationType *this, CInfinity *, CVidMode *, CRect *, CPoint *, CPoint *, unsigned int, unsigned int, CRect *, int, int, int, char);
	void (__thiscall *ClearColorEffects)(CGameAnimationType *this, char);
	void (__thiscall *ClearColorEffectsAll)(CGameAnimationType *this);
	void (__thiscall *SetColorEffect)(CGameAnimationType *this, char, char, unsigned int, char);
	void (__thiscall *SetColorEffectAll)(CGameAnimationType *this, char, unsigned int, char);
	void (__thiscall *SetColorRange)(CGameAnimationType *this, char, char);
	void (__thiscall *SetColorRangeAll)(CGameAnimationType *this, char);
	__int16 (__thiscall *SetSequence)(CGameAnimationType *this, __int16);
	int (__thiscall *GetHeightOffset)(CGameAnimationType *this);
	void (__thiscall *CalculateFxRectMax)(CGameAnimationType *this, CRect *, CPoint *, int);
	void (__thiscall *CalculateEllipseRect)(CGameAnimationType *this);
	void (__thiscall *SetNeckOffsets)(CGameAnimationType *this, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16);
	char (__thiscall *GetAttackFrameType)(CGameAnimationType *this, char, char, char);
	int (__thiscall *GetAboveGround)(CGameAnimationType *this);
	__int16 (__thiscall *GetAwakePlayInReverse)(CGameAnimationType *this);
	void (__thiscall *SetBrightest)(CGameAnimationType *this, char);
	void (__thiscall *SetBrightestDesired)(CGameAnimationType *this, char);
	__int16 (__thiscall *GetCastHeight)(CGameAnimationType *this);
	void (__thiscall *GetCastingOffset)(CGameAnimationType *this, CPoint *);
	char (__thiscall *GetCurrentSequenceAndFrame)(CGameAnimationType *this, __int16 *, __int16 *);
	char (__thiscall *GetCurrentResRef)(CGameAnimationType *this, CString *, CString *, CString *, CString *);
	void (__thiscall *OverrideAnimation)(CGameAnimationType *this, CResRef, int);
	void (__thiscall *Marshal)(CGameAnimationType *this, char **, unsigned int *);
	bool (__thiscall *Unmarshal)(CGameAnimationType *this, CResRef);
};

/* 4756 */
struct __cppobj CResSpell : CRes
{
	Spell_ability_st *pAbilities;
	Item_effect_st *pEffects;
	Spell_Header_st *pHeader;
};

/* 4754 */
struct Spell_ability_st
{
	unsigned __int16 type;
	unsigned __int16 quickSlotType;
	char quickSlotIcon[8];
	char actionType;
	char actionCount;
	unsigned __int16 range;
	unsigned __int16 minCasterLevel;
	unsigned __int16 speedFactor;
	unsigned __int16 timesPerDay;
	unsigned __int16 damageDice;
	unsigned __int16 damageDiceCount;
	unsigned __int16 damageDiceBonus;
	unsigned __int16 damageType;
	unsigned __int16 effectCount;
	unsigned __int16 startingEffect;
	unsigned __int16 maxUsageCount;
	unsigned __int16 usageFlags;
	unsigned __int16 missileType;
};

/* 4755 */
struct __unaligned __declspec(align(2)) Spell_Header_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int genericName;
	unsigned int identifiedName;
	char usedUpItemID[8];
	unsigned int itemFlags;
	unsigned __int16 itemType;
	unsigned int notUsableBy;
	unsigned __int16 castingAnimationType;
	char minLevelRequired;
	char school;
	char minSTRRequired;
	char secondaryType;
	char minSTRBonusRequired;
	char notUsableBy2a;
	char minINTRequired;
	char notUsableBy2b;
	char minDEXRequired;
	char notUsableBy2c;
	char minWISRequired;
	char notUsableBy2d;
	unsigned __int16 minCONRequired;
	unsigned __int16 minCHRRequired;
	unsigned int spellLevel;
	unsigned __int16 maxStackable;
	char itemIcon[8];
	unsigned __int16 loreValue;
	char groundIcon[8];
	unsigned int baseWeight;
	unsigned int genericDescription;
	unsigned int identifiedDescription;
	char descriptionPicture[8];
	unsigned int attributes;
	unsigned int abilityOffset;
	unsigned __int16 abilityCount;
	unsigned int effectsOffset;
	unsigned __int16 castingStartingEffect;
	unsigned __int16 castingEffectCount;
};

/* 4770 */
struct __cppobj CGameEffectHoldCreatureSpell : CGameEffect
{
};

/* 4771 */
struct __cppobj CGameEffectSaveVsSpell : CGameEffect
{
};

/* 4772 */
struct __cppobj CGameEffectDisableSpellType : CGameEffect
{
};

/* 4773 */
struct __cppobj CGameEffectRevealMagic : CGameEffect
{
};

/* 4774 */
struct __cppobj CGameEffectBerserkStage2 : CGameEffect
{
};

/* 4775 */
struct __cppobj CProjectileFileFormat
{
	unsigned __int16 m_wFileType;
	__int16 m_speed;
	unsigned int m_dwFlags;
	CResRef m_fireSoundRef;
	CResRef m_arrivalSoundRef;
	CResRef m_visualEffectRef;
	__int16 m_sparkleColor;
	__int16 m_lanceWidth;
	unsigned int m_extFlags;
	unsigned int m_strRef;
	unsigned int m_color;
	unsigned __int16 m_colorSpeed;
	unsigned __int16 m_shake;
	unsigned __int16 m_IDSValue1;
	unsigned __int16 m_IDSType1;
	unsigned __int16 m_IDSValue2;
	unsigned __int16 m_IDSType2;
	CResRef m_failureSpell;
	CResRef m_successSpell;
	int m_maxBounces;
	unsigned int reservedSpace[42];
};

/* 4776 */
struct __cppobj CProjectileBAMFileFormat : CProjectileFileFormat
{
	unsigned int m_dwBAMFlags;
	CResRef m_vidCell;
	CResRef m_shadowVidCell;
	char m_seqVidCell;
	char m_seqShadowVidCell;
	__int16 m_glowIntensity;
	__int16 m_glowSizeX;
	__int16 m_glowSizeY;
	CResRef m_paletteResRef;
	char m_colors[7];
	char m_smokePeriod;
	char m_smokeColors[7];
	char m_numDirections;
	unsigned __int16 m_smokeAnimationCode;
	CResRef m_cPuffEffect1;
	CResRef m_cPuffEffect2;
	CResRef m_cPuffEffect3;
	unsigned __int16 m_nPuff1Spacing;
	unsigned __int16 m_nPuff2Spacing;
	unsigned __int16 m_nPuff3Spacing;
	unsigned int m_dwPuffFlags;
	unsigned int reservedSpace[42];
};

/* 4777 */
struct __cppobj CProjectileAreaFileFormat : CProjectileBAMFileFormat
{
	unsigned int m_dwAreaFlags;
	unsigned __int16 m_triggerRange;
	unsigned __int16 m_explosionRange;
	CResRef m_explodeSound;
	unsigned __int16 m_nDelay;
	unsigned __int16 m_explodeId;
	unsigned __int16 m_sparkleExplosionProjectile;
	char m_nRepetitionCount;
	char m_fireBallType;
	char m_ringColor;
	char padding1;
	unsigned __int16 m_secondaryProjectile;
	CResRef m_centerVVC;
	unsigned __int16 m_coneSize;
	unsigned __int16 padding2;
	CResRef m_fireBallArea;
	CResRef m_fireBallRing;
	CResRef m_fireBallSound;
	unsigned int m_fireBallFlags;
	unsigned __int16 m_targetDiceCount;
	unsigned __int16 m_targetDiceSize;
	unsigned __int16 m_granularity;
	unsigned __int16 m_granDivider;
	unsigned int reservedSpace[45];
};

/* 4778 */
struct __cppobj CTypedPtrArray<CPtrArray,CGameDialogReply *> : CPtrArray
{
};

/* 4779 */
struct __cppobj __declspec(align(4)) CGameDialogEntry : CTypedPtrArray<CPtrArray,CGameDialogReply *>
{
	unsigned int m_dialogText;
	CAICondition m_startCondition;
	int m_picked;
	unsigned int m_conditionPriority;
	unsigned int m_dialogIndex;
	char m_bDisplayButton;
};

/* 4780 */
struct __cppobj CCreatureFileMemorizedSpell
{
	char m_spellId[8];
	unsigned __int16 m_flags;
	char structureAlignment1[2];
};

/* 4781 */
struct __cppobj CGameEffectResistanceToMagic : CGameEffect
{
};

/* 4782 */
struct POLYCOLOR
{
	float fRed;
	float fGreen;
	float fBlue;
	float fAlpha;
};

/* 4783 */
struct CVIDPALETTE_COLOR
{
	int rgbRed;
	int rgbGreen;
	int rgbBlue;
};

/* 4784 */
struct __cppobj CAreaFileProjectileObject
{
	char m_resref[8];
	unsigned int m_effectListOffset;
	unsigned __int16 m_effectListCount;
	unsigned __int16 m_projectileID;
	__int16 m_nDelayCount;
	__int16 m_nRepetitionCount;
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	unsigned __int16 m_posZ;
	char m_targetType;
	char m_portraitNum;
};

/* 4785 */
struct __cppobj SProjectileWrapper
{
	CAreaFileProjectileObject *pProjectileObject;
	char *pEffectList;
};

/* 4786 */
struct __cppobj CBounceEntry
{
	int m_levelDecrement;
	unsigned int m_effectId;
	CProjectile *m_pProjectile;
	int m_decrementOnly;
	unsigned int m_string;
	int m_stringOnly;
	int m_recoverSpellLevels;
};

/* 4787 */
struct __cppobj SteamCallback_t
{
};

/* 4788 */
struct __cppobj HTML_JSAlert_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchMessage;
};

/* 4789 */
struct __cppobj CGameEffectDeath : CGameEffect
{
};

/* 4790 */
struct __cppobj CAreaFileDoorObject
{
	char m_scriptName[32];
	char m_doorID[8];
	unsigned int m_dwFlags;
	unsigned int m_openSelectionPointStart;
	unsigned __int16 m_openSelectionPointCount;
	unsigned __int16 m_closedSelectionPointCount;
	unsigned int m_closedSelectionPointStart;
	unsigned __int16 m_openBoundingRectLeft;
	unsigned __int16 m_openBoundingRectTop;
	unsigned __int16 m_openBoundingRectRight;
	unsigned __int16 m_openBoundingRectBottom;
	unsigned __int16 m_closedBoundingRectLeft;
	unsigned __int16 m_closedBoundingRectTop;
	unsigned __int16 m_closedBoundingRectRight;
	unsigned __int16 m_closedBoundingRectBottom;
	unsigned int m_openSearchSquaresStart;
	unsigned __int16 m_openSearchSquaresCount;
	unsigned __int16 m_closedSearchSquaresCount;
	unsigned int m_closedSearchSquaresStart;
	__int16 m_hitPoints;
	__int16 m_armourClass;
	char m_openSound[8];
	char m_closeSound[8];
	unsigned int m_cursorType;
	unsigned __int16 m_trapDetectionDifficulty;
	unsigned __int16 m_trapDisarmingDifficulty;
	unsigned __int16 m_trapActivated;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_posXTrapOrigin;
	unsigned __int16 m_posYTrapOrigin;
	char m_keyType[8];
	char m_script[8];
	unsigned int m_detectionDifficulty;
	unsigned int m_lockDifficulty;
	unsigned __int16 m_posXWalkTo1;
	unsigned __int16 m_posYWalkTo1;
	unsigned __int16 m_posXWalkTo2;
	unsigned __int16 m_posYWalkTo2;
	unsigned int m_strNotPickable;
	char m_triggerName[32];
	unsigned int m_notUsed[3];
};

/* 4791 */
struct CAreaPoint
{
	unsigned __int16 m_xPos;
	unsigned __int16 m_yPos;
};

/* 4792 */
struct __cppobj SAreaFileDoorWrapper
{
	CAreaFileDoorObject *pDoorObject;
	CAreaPoint *pClosedSearchSquaresStart;
	CAreaPoint *pOpenSearchSquaresStart;
	CAreaPoint *pClosedSelectionPointStart;
	CAreaPoint *pOpenSelectionPointStart;
};

/* 4793 */
struct __cppobj CException : CObject
{
	int m_bAutoDelete;
	int m_bReadyForDelete;
};

/* 4794 */
struct __cppobj CFileException : CException
{
	int m_cause;
	int m_lOsError;
	CString m_strFileName;
};

/* 4795 */
struct __cppobj CTypedPtrList<CPtrList,CParticle *> : CPtrList
{
};

/* 4796 */
struct __cppobj __declspec(align(4)) CBlood
{
	CGameArea *m_pArea;
	CTypedPtrList<CPtrList,CParticle *> m_particleList;
	CTypedPtrList<CPtrList,CParticle *> m_lstSplashParticles;
	CPoint m_refPoint;
	CPoint m_pos;
	int m_posZ;
	__int16 m_nTimeStamp;
	unsigned int m_aColors[3];
	CRect m_rBounding;
	__int16 m_nDirection;
	unsigned __int16 m_particleType;
	unsigned __int16 m_bloodType;
	int m_nCharHeight;
	char m_bLeavePool;
};

/* 4797 */
struct __cppobj CMessage
{
	CMessageVtbl *vfptr;
	int m_targetId;
	int m_sourceId;
};

/* 4798 */
struct CMessageVtbl
{
	void *(__thiscall *__vecDelDtor)(CMessage *this, unsigned int);
	__int16 (__thiscall *GetCommType)(CMessage *this);
	char (__thiscall *GetMsgType)(CMessage *this);
	char (__thiscall *GetMsgSubType)(CMessage *this);
	void (__thiscall *MarshalMessage)(CMessage *this, char **, unsigned int *);
	int (__thiscall *UnmarshalMessage)(CMessage *this, char *, unsigned int);
	void (__thiscall *Run)(CMessage *this);
};

/* 4799 */
struct __cppobj CMessageEnterDialogMode : CMessage
{
};

/* 4800 */
struct __cppobj CGameEffectUsability : CGameEffect
{
};

/* 4801 */
struct __cppobj CTime
{
	__int64 m_time;
};

/* 4802 */
struct __cppobj CTimeSpan
{
	__int64 m_timeSpan;
};

/* 4803 */
struct __cppobj CGameEffectSevenEyes : CGameEffect
{
};

/* 4804 */
struct __cppobj CSavedGamePartyCreature
{
	unsigned __int16 m_wFlags;
	unsigned __int16 m_portraitId;
	unsigned int m_creatureOffset;
	unsigned int m_creatureSize;
	char m_creatureResRef[8];
	unsigned int m_creatureFacing;
	char m_areaName[8];
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	unsigned __int16 m_posViewX;
	unsigned __int16 m_posViewY;
	unsigned __int16 m_nModalState;
	__int16 m_nHappiness;
	int m_nNumberOfTimesInteractedWith[24];
	__int16 m_quickWeaponsItemNum[4];
	__int16 m_quickWeaponsAbilityNum[4];
	char m_quickSpellsSpellId[3][8];
	__int16 m_quickItemsItemNum[3];
	__int16 m_quickItemsAbilityNum[3];
	char m_name[32];
	unsigned int m_numberTimesTalkedTo;
	unsigned int m_strStrongestKillName;
	unsigned int m_nStrongestKillXPValue;
	unsigned int m_nPreviousTimeWithParty;
	unsigned int m_nJoinPartyTime;
	char m_bWithParty;
	char m_pad1[2];
	char m_cFirstResSlot;
	unsigned int m_nChapterKillsXPValue;
	unsigned int m_nChapterKillsNumber;
	unsigned int m_nGameKillsXPValue;
	unsigned int m_nGameKillsNumber;
	char m_lSpellStatsName[4][8];
	__int16 m_lSpellStatsCount[4];
	char m_lWeaponStatsName[4][8];
	__int16 m_lWeaponStatsCount[4];
	char m_secondarySounds[8];
};

/* 4805 */
struct __cppobj CGameEffectName : CGameEffect
{
};

/* 4806 */
struct __cppobj CGameEffectSpecificDamageMod : CGameEffect
{
};

/* 4807 */
struct __cppobj CGameEffectSecondaryCastList : CGameEffect
{
};

/* 4808 */
struct __cppobj __declspec(align(4)) CMessageSpritePetrify : CMessage
{
	char m_bPetrify;
};

/* 4809 */
struct __cppobj CContingency
{
	CAITrigger m_cTrigger;
	CResRef m_cSpellRes;
	CResRef m_cSpellRes2;
	CResRef m_cSpellRes3;
	CAIObjectType m_cTarget;
	unsigned int m_dwFlags;
	CGameEffect m_parentEffect;
	unsigned int m_dwTarget;
	unsigned int m_dwCondition;
	unsigned int m_nLastCheck;
};

/* 4810 */
struct __cppobj CGameEffectLuck : CGameEffect
{
};

/* 4811 */
struct __cppobj CMessageSetNumTimesTalkedTo : CMessage
{
	int m_nNumTimesTalkedTo;
};

/* 4812 */
struct __cppobj CGameEffectResistMissile : CGameEffect
{
};

/* 4813 */
struct CWeaponIdentification
{
	unsigned __int16 m_itemType;
	unsigned int m_itemFlags;
	unsigned int m_itemFlagMask;
	unsigned int m_attributes;
};

/* 4814 */
struct __cppobj CMessageWeaponImmumityUpdate : CMessage
{
	CImmunitiesWeapon m_weaponImmunities;
};

/* 4815 */
struct __cppobj CGameEffectSetLocalVariable : CGameEffect
{
};

/* 4816 */
struct __cppobj CMessageStopFollow : CMessage
{
};

/* 4817 */
struct __cppobj __declspec(align(4)) CMessageCutSceneLite : CMessage
{
	char m_cutSceneMode;
};

/* 4818 */
struct __cppobj CResINI : CRes
{
	int bLoaded;
};

/* 4819 */
struct __cppobj CResHelper<CResINI,2050>
{
	CResINI *pRes;
	CResRef cResRef;
};

/* 4820 */
struct __cppobj HTML_BrowserReady_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
};

/* 4821 */
struct __cppobj CGameEffectLearnSpell : CGameEffect
{
};

/* 4822 */
struct __cppobj CResBIO : CRes
{
};

/* 4823 */
struct __cppobj CResHelper<CResBIO,1022>
{
	CResBIO *pRes;
	CResRef cResRef;
};

/* 4824 */
struct __cppobj CBiographyFile : CResHelper<CResBIO,1022>
{
};

/* 4825 */
struct __cppobj CGameEffectSwapHitpoints : CGameEffect
{
};

/* 4826 */
struct __cppobj CGameEffectBackStabMod : CGameEffect
{
};

/* 4827 */
struct __cppobj __declspec(align(4)) CMessageAnimationChange : CMessage
{
	unsigned __int16 m_animationId;
};

/* 4828 */
struct __cppobj CGameEffectSpellMemorizationMage : CGameEffect
{
};

/* 4829 */
struct __cppobj CGameEffectSaveVsDeath : CGameEffect
{
};

/* 4830 */
struct __cppobj CGameEffectImmunitySpell : CGameEffect
{
};

/* 4831 */
struct __cppobj CMessageInsertAction : CMessage
{
	CAIAction m_action;
};

/* 4832 */
struct __cppobj CGameEffectSequencerStart : CGameEffect
{
};

/* 4833 */
struct __cppobj CGameEffectOverrideWeaponType : CGameEffect
{
};

/* 4834 */
struct __cppobj CGameEffectForceVisible : CGameEffect
{
};

/* 4835 */
struct __cppobj __declspec(align(8)) CFileStatus
{
	CTime m_ctime;
	CTime m_mtime;
	CTime m_atime;
	int m_size;
	char m_attribute;
	char _m_padding;
	CString m_sFullName;
};

/* 4836 */
struct __cppobj CGameEffectImmunityToProjectile : CGameEffect
{
};

/* 4837 */
struct __cppobj MusicPlayerWantsVolume_t : SteamCallback_t
{
	float m_flNewVolume;
};

/* 4838 */
struct __cppobj CGameEffectNon_CumulativeBless : CGameEffect
{
};

/* 4839 */
struct __cppobj HTML_OpenLinkInNewTab_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchURL;
};

/* 4840 */
struct __cppobj CGameEffectChangeWeather : CGameEffect
{
};

/* 4841 */
struct __cppobj CGameEffectShieldGlobe : CGameEffect
{
};

/* 4842 */
struct __cppobj CLightning : CGameObject
{
	__int16 m_nType;
	CPoint m_posDest;
	CPoint m_posSrc;
	__int16 m_nConjureDuration;
	__int16 m_nSpellDuration;
	int m_destId;
	int m_srcId;
	CAIAction *m_pTargetAction;
};

/* 4843 */
struct __cppobj CAreaFileContainer
{
	char m_scriptName[32];
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	unsigned __int16 m_containerType;
	unsigned __int16 m_lockDifficulty;
	unsigned int m_dwFlags;
	unsigned __int16 m_trapDetectionDifficulty;
	unsigned __int16 m_trapRemovalDifficulty;
	unsigned __int16 m_trapActivated;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_posXTrapOrigin;
	unsigned __int16 m_posYTrapOrigin;
	unsigned __int16 m_boundingRectLeft;
	unsigned __int16 m_boundingRectTop;
	unsigned __int16 m_boundingRectRight;
	unsigned __int16 m_boundingRectBottom;
	unsigned int m_startingItem;
	unsigned int m_itemCount;
	char m_script[8];
	unsigned int m_pickPointStart;
	unsigned __int16 m_pickPointCount;
	unsigned __int16 m_triggerRange;
	char m_ownedBy[32];
	char m_keyType[8];
	unsigned int m_breakDifficulty;
	unsigned int m_strNotPickable;
	unsigned int m_notUsed[14];
};

/* 4844 */
struct __cppobj CCreatureFileItem
{
	char m_itemId[8];
	unsigned __int16 m_wear;
	unsigned __int16 m_usageCount[3];
	unsigned int m_dynamicFlags;
};

/* 4845 */
struct __cppobj SAreaFileWrapper
{
	CAreaFileContainer *pContainer;
	CCreatureFileItem *pStartingItem;
	CAreaPoint *pPickPointStart;
};

/* 4846 */
struct __cppobj CSaveGameSlot
{
	CString m_sFileName;
	CString m_sSlotName;
	CResBitmap m_cResScreenShot;
	CResBitmap m_cBmpResPortrait0;
	CResBitmap m_cBmpResPortrait1;
	CResBitmap m_cBmpResPortrait2;
	CResBitmap m_cBmpResPortrait3;
	CResBitmap m_cBmpResPortrait4;
	CResBitmap m_cBmpResPortrait5;
	CResRef m_cResPortrait;
	CString m_sCharacterName;
	unsigned int m_nTime;
	int m_nChapter;
	CString m_sChapter;
};

/* 4847 */
struct CStringData
{
	int nRefs;
	int nDataLength;
	int nAllocLength;
};

/* 4848 */
struct __cppobj CLUACheats
{
};

/* 4849 */
struct __cppobj std::_Allocator_base<DP_Packet * *>
{
};

/* 4850 */
struct __cppobj std::allocator<DP_Packet * *> : std::_Allocator_base<DP_Packet * *>
{
};

/* 4851 */
struct __cppobj std::allocator_traits<std::allocator<DP_Packet * *> >
{
};

/* 4852 */
struct __cppobj std::_Allocator_base<DP_Packet *>
{
};

/* 4853 */
struct __cppobj std::allocator<DP_Packet *> : std::_Allocator_base<DP_Packet *>
{
};

/* 4854 */
struct __cppobj std::allocator_traits<std::allocator<DP_Packet *> >
{
};

/* 4855 */
struct __cppobj std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<DP_Packet *> > > : std::_Iterator_base12
{
	unsigned int _Myoff;
};

/* 4856 */
struct __cppobj std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<DP_Packet *> > > : std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<DP_Packet *> > >
{
};

/* 4857 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Packet *> > : std::allocator<DP_Packet *>
{
};

/* 4858 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Packet * *> > : std::allocator<DP_Packet * *>
{
};

/* 4859 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Packet *> >::rebind<DP_Packet *>
{
};

/* 4860 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Packet *> >::rebind<DP_Packet * *>
{
};

/* 4861 */
struct __cppobj std::_Allocator_base<DP_Player *>
{
};

/* 4862 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,DP_Player *,int,DP_Player * const *,DP_Player * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 4863 */
struct __cppobj std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DP_Player *> > > : std::_Iterator012<std::random_access_iterator_tag,DP_Player *,int,DP_Player * const *,DP_Player * const &,std::_Iterator_base0>
{
	DP_Player **_Ptr;
};

/* 4864 */
struct __cppobj std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DP_Player *> > > : std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DP_Player *> > >
{
};

/* 4865 */
struct __cppobj std::allocator<DP_Player *> : std::_Allocator_base<DP_Player *>
{
};

/* 4866 */
struct __cppobj std::allocator_traits<std::allocator<DP_Player *> >
{
};

/* 4867 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Player *> > : std::allocator<DP_Player *>
{
};

/* 4868 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Player *> >::rebind<DP_Player *>
{
};

/* 4869 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Player *> >::rebind<DP_Player * *>
{
};

/* 4870 */
struct __cppobj std::initializer_list<DP_Player *>
{
	DP_Player *const *_First;
	DP_Player *const *_Last;
};

/* 4871 */
struct __cppobj CGameEffectDispelSecondaryTypeOne : CGameEffect
{
};

/* 4872 */
struct __cppobj CGameEffectStaticCharge : CGameEffect
{
};

/* 4873 */
struct __cppobj __declspec(align(4)) HTML_StartRequest_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchURL;
	const char *pchTarget;
	const char *pchPostData;
	bool bIsRedirect;
};

/* 4874 */
struct __cppobj CStoreFileItem
{
	char m_itemId[8];
	unsigned __int16 m_wear;
	unsigned __int16 m_usageCount[3];
	unsigned int m_dynamicFlags;
	unsigned int m_nInStock;
	unsigned int m_nStoreFlags;
};

/* 4875 */
struct __cppobj CResArea : CRes
{
};

/* 4876 */
struct __cppobj CGameEffectImmunityToTurnUndead : CGameEffect
{
};

/* 4877 */
struct __cppobj CGameEffectRemoveIntoxication : CGameEffect
{
};

/* 4878 */
struct __cppobj CPortraitIcon
{
	int icon;
	int frame;
	CVidCell bam;
};

/* 4879 */
struct __cppobj __declspec(align(4)) CMessagePlaySound : CMessage
{
	int m_showText;
	int m_showCircle;
	char m_soundId;
};

/* 4880 */
struct __cppobj CGameEffectDamageVisualEffect : CGameEffect
{
};

/* 4881 */
struct __cppobj CGameChunk : CGameObject
{
	char m_visibleTerrainTable[16];
	CGameAnimation m_animation;
	int m_animationRunning;
	CPoint m_posDelta;
	int m_posZDelta;
	char m_doBounce;
	char m_duration;
	char m_durationFade;
	CSound m_sound;
};

/* 4882 */
struct __cppobj CGameEffectFistDamageBonus : CGameEffect
{
};

/* 4883 */
struct __cppobj CGameEffectBounceProjectile : CGameEffect
{
};

/* 4884 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeAmbientStatic : CGameAnimationType
{
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	int m_bInvulnerable;
	char m_extendDirectionTest;
};

/* 4885 */
struct __cppobj CGameEffectExistanceDelayOverride : CGameEffect
{
};

/* 4886 */
struct __cppobj __declspec(align(4)) CMessageRemoveItem : CMessage
{
	__int16 m_slotNum;
};

/* 4887 */
struct __cppobj __declspec(align(4)) CMessageRemoveVVCInternal : CMessage
{
	CResRef m_res;
	char m_level;
};

/* 4888 */
struct __cppobj CGameEffectColorGlowSolid : CGameEffect
{
};

/* 4889 */
struct __cppobj CCmdTarget : CObject
{
};

/* 4890 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeTownStatic : CGameAnimationType
{
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell m_g1VidCellBase;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	char m_bCanLieDown;
};

/* 4891 */
struct __cppobj __declspec(align(4)) CMessageFamiliarAdd : CMessage
{
	char m_bFamiliarAdd;
};

/* 4892 */
struct __cppobj CAreaFileStaticObject
{
	char m_scriptName[32];
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	unsigned int m_timeOfDayVisible;
	char m_resref[8];
	unsigned int m_nSequence;
	unsigned int m_dwFlags;
	__int16 m_height;
	unsigned __int16 m_translucency;
	unsigned __int16 m_startFrameRange;
	char m_probability;
	char m_period;
	char m_paletteResref[8];
	unsigned __int16 m_sizeX;
	unsigned __int16 m_sizeY;
};

/* 4893 */
struct __cppobj CContingencySpell
{
	char m_spellId[8];
	char m_origId[8];
	unsigned __int16 m_flags;
};

/* 4894 */
struct __cppobj __declspec(align(4)) CMessageSetLastObject : CMessage
{
	CAIObjectType m_lAttacker;
	unsigned __int16 m_type;
};

/* 4895 */
struct __cppobj CCriticalEntry
{
	CResRef m_res;
	int m_hitOrMiss;
	int m_slot;
	int m_attackType;
	int m_itemType;
	int m_bonus;
};

/* 4896 */
struct __cppobj CGameEffectCannotSaveOrRest : CGameEffect
{
};

/* 4897 */
struct __cppobj CGameEffectSequencerInstance : CGameEffect
{
};

/* 4898 */
struct __cppobj CGameDialogReply
{
	unsigned int m_flags;
	unsigned int m_replyText;
	unsigned int m_journalEntry;
	CAICondition m_condition;
	CAIResponse m_response;
	CResRef m_nextDialog;
	unsigned int m_nextEntryIndex;
	__POSITION *m_displayPosition;
	int m_removeIfPicked;
	char m_displayListId;
	CString m_conditionString;
	int m_needToParseCondition;
	CString m_responseString;
	int m_needToParseResponse;
	int m_bracketedActions;
};

/* 4899 */
struct __cppobj CGameDialogIdentifier
{
	CResRef m_dialog;
	unsigned int m_index;
};

/* 4900 */
struct __cppobj CMessageSetDirection : CMessage
{
	CPoint m_face;
};

/* 4901 */
struct __cppobj CMessageAddVVCInternal : CMessage
{
	CResRef m_res;
};

/* 4902 */
struct __cppobj __declspec(align(4)) CMessageClearGroupSlot : CMessage
{
	__int16 m_slotNum;
};

/* 4903 */
struct __cppobj CMessageClearTriggers : CMessage
{
};

/* 4904 */
struct __cppobj CMemINIValue
{
	CMemINIValueVtbl *vfptr;
	CString mName;
	CString mValue;
};

/* 4905 */
struct CMemINIValueVtbl
{
	void *(__thiscall *__vecDelDtor)(CMemINIValue *this, unsigned int);
};

/* 4906 */
struct __cppobj CGameEffectStoneSkinsGolem : CGameEffect
{
};

/* 4907 */
struct __cppobj CSchoolAndSecondaryDecrementing
{
	unsigned int m_nType;
	int m_nLevels;
};

/* 4908 */
struct __cppobj CPersistantEffect
{
	CPersistantEffectVtbl *vfptr;
	int m_done;
	int m_deleted;
	__int16 m_numDamage;
	__int16 m_persistantType;
	int m_sourceID;
	__int16 m_period;
	__int16 m_periodCounter;
	int m_counter;
};

/* 4909 */
struct CPersistantEffectVtbl
{
	void *(__thiscall *__vecDelDtor)(CPersistantEffect *this, unsigned int);
	void (__thiscall *AIUpdate)(CPersistantEffect *this, CGameSprite *, int);
	CPersistantEffect *(__thiscall *Copy)(CPersistantEffect *this);
};

/* 4910 */
struct __cppobj CPersistantEffectDamage : CPersistantEffect
{
	__int16 m_type;
	__int16 m_maxDamage;
	__int16 m_damage;
	int m_duration;
};

/* 4911 */
struct __cppobj CPersistantEffectDisease : CPersistantEffectDamage
{
	CResRef m_res;
};

/* 4912 */
struct __declspec(align(4)) CGameTimer
{
	int m_time;
	char m_id;
};

/* 4913 */
struct __cppobj CMessageUpdateImmunities : CMessage
{
	CImmunitiesAIType m_cImmunitiesAIType;
};

/* 4914 */
struct __cppobj CMessageSetInDialog : CMessage
{
	char m_bState;
	__int16 m_nType;
};

/* 4915 */
struct __cppobj CMessageAddAction : CMessage
{
	CAIAction m_action;
};

/* 4916 */
struct __cppobj MusicPlayerWantsLooped_t : SteamCallback_t
{
	bool m_bLooped;
};

/* 4917 */
struct __cppobj CCreatureFileKnownSpell
{
	char m_knownSpellId[8];
	unsigned __int16 m_spellLevel;
	unsigned __int16 m_magicType;
};

/* 4918 */
struct __cppobj __declspec(align(4)) CMessageSetVariable : CMessage
{
	CString m_sAreaName;
	CString m_sGlobalName;
	int m_nValue;
	char m_bIncrement;
};

/* 4919 */
struct __cppobj CGameAnimationTypeEffect : CGameAnimationType
{
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellShadow;
	CVidCell m_g1VidCell;
	CVidCell m_g1VidCellShadow;
	CVidPalette m_charPalette;
	char m_translucent;
	char m_bRender;
	unsigned __int16 m_posZ;
	unsigned __int16 m_deltaZ;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	char m_extendDirectionTest;
	char m_listType;
};

/* 4920 */
struct __cppobj CResCHR : CRes
{
};

/* 4921 */
struct __cppobj CResWorldMap : CRes
{
};

/* 4922 */
struct __cppobj __declspec(align(4)) CProjectileSpellHit : CProjectile
{
	CVidCell m_animation;
	CVidBitmap m_newPalette;
	unsigned int m_dwRenderFlags;
	char m_bNewPalette;
	char m_transparency;
};

/* 4923 */
struct __cppobj CProjectileAmbiant : CProjectileSpellHit
{
};

/* 4924 */
struct __cppobj CGameEffectRemoveEffectOfResource : CGameEffect
{
};

/* 4925 */
struct __cppobj CImmunitiesItemTypeEquip
{
	unsigned int m_type;
	unsigned int m_error;
	CGameEffect *m_pEffect;
};

/* 4926 */
struct __cppobj CAOEEntry
{
	CAOEEntry::AOEType m_type;
	CPoint m_center;
	CPoint m_radius;
	unsigned int m_color;
};

/* 4927 */
struct __cppobj CScreenStoreItem
{
	CResRef m_cResSpell;
	CItem *m_pItem;
	int m_bSelected;
	int m_bEnabled;
	int m_nSlot;
	int m_nValue;
	int m_nSingleValue;
	unsigned int m_nCount;
	unsigned int m_nMaxCount;
	unsigned int m_nStoreCount;
};

/* 4928 */
struct __cppobj CGameEffectApplyEffectEquipItemType : CGameEffect
{
};

/* 4929 */
struct __cppobj CDialogFile_Dialog
{
	unsigned int m_DialogText;
	unsigned int m_StartingReply;
	unsigned int m_ReplyCount;
	unsigned int m_StartingConditionalScript;
};

/* 4930 */
struct __cppobj CGameEffectAlignmentReversal : CGameEffect
{
};

/* 4931 */
struct __cppobj __declspec(align(4)) CMessageSetStateOverrideFlag : CMessage
{
	char m_cutSceneMode;
};

/* 4932 */
struct __cppobj CMessageSetFamiliarSummoner : CMessage
{
	int m_bDone;
	int m_nSummoner;
};

/* 4933 */
struct __cppobj __declspec(align(4)) CMessageFamiliarRemoveResRef : CMessage
{
	CResRef m_resRef;
	char m_nAlignment;
	char m_nLevel;
};

/* 4934 */
struct __cppobj CGameEffectSelectiveToHitBonus : CGameEffect
{
};

/* 4935 */
struct tolua_Error
{
	int index;
	int array;
	const char *type;
};

/* 4936 */
struct __cppobj CUtil
{
};

/* 4937 */
struct VERTEX_DESC
{
	float fX;
	float fY;
	POLYCOLOR color;
};

/* 4938 */
struct __cppobj CGameEffectWebHold : CGameEffect
{
};

/* 4939 */
struct __cppobj CGameEffectVisualSpellHit : CGameEffect
{
};

/* 4940 */
struct __cppobj VolumeHasChanged_t : SteamCallback_t
{
	float m_flNewVolume;
};

/* 4941 */
struct __cppobj CAreaFileCreature
{
	char m_scriptName[32];
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	unsigned __int16 m_startingPosX;
	unsigned __int16 m_startingPosY;
	unsigned int m_dwFlags;
	unsigned __int16 m_type;
	char m_cFirstResSlot;
	char structureAlignment1[1];
	unsigned int m_animationType;
	unsigned __int16 m_facing;
	char structureAlignment2[2];
	unsigned int m_expirationTime;
	unsigned __int16 m_huntingRange;
	unsigned __int16 m_followRange;
	unsigned int m_timeOfDayVisible;
	unsigned int m_numberTimesTalkedTo;
	char m_dialogOverride[8];
	char m_overrideScriptOverride[8];
	char m_generalScriptOverride[8];
	char m_classScriptOverride[8];
	char m_raceScriptOverride[8];
	char m_defaultScriptOverride[8];
	char m_specificScriptOverride[8];
	char m_creatureData[8];
	unsigned int m_creatureOffset;
	unsigned int m_creatureSize;
	char m_sName[32];
	unsigned int m_notUsed[24];
};

/* 4942 */
struct WED_TileData_st
{
	unsigned __int16 nStartingTile;
	unsigned __int16 nNumTiles;
	__int16 nSecondary;
	char bFlags;
	char bAnimSpeed;
	unsigned __int16 wFlags;
};

/* 4943 */
struct CMapWordToPtr::CAssoc
{
	CMapWordToPtr::CAssoc *pNext;
	unsigned __int16 key;
	void *value;
};

/* 4944 */
struct __cppobj CMapWordToPtr : CObject
{
	CMapWordToPtr::CAssoc **m_pHashTable;
	unsigned int m_nHashTableSize;
	int m_nCount;
	CMapWordToPtr::CAssoc *m_pFreeList;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 4945 */
struct __cppobj HTML_HidePopup_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
};

/* 4946 */
struct __cppobj __declspec(align(4)) CPersistantEffectFadeEffect : CPersistantEffect
{
	__int16 m_fade;
	__int16 m_type;
	__int16 m_increment;
};

/* 4947 */
struct __cppobj SteamAppUninstalled_t : SteamCallback_t
{
	unsigned int m_nAppID;
};

/* 4948 */
struct __cppobj CGameEffectSpellMemorizationCleric : CGameEffect
{
};

/* 4949 */
struct __cppobj CSavedGameStoredLocation
{
	char m_areaName[8];
	unsigned __int16 m_xPos;
	unsigned __int16 m_yPos;
};

/* 4950 */
struct __cppobj CGameEffectImmuneToTracking : CGameEffect
{
};

/* 4951 */
struct __cppobj CAIUtil
{
};

/* 4952 */
struct __cppobj CGameEffectResistSlashing : CGameEffect
{
};

/* 4953 */
struct __cppobj CMessageSpriteDeath : CMessage
{
	unsigned int m_nDeathType;
};

/* 4954 */
struct __cppobj CMessageDropPath : CMessage
{
};

/* 4955 */
struct __cppobj CMessageUnlock : CMessage
{
	unsigned int m_dwFlags;
};

/* 4956 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeCharacterOld : CGameAnimationType
{
	CString m_resref;
	CString m_resrefShadow;
	CString m_heightCode;
	CString m_heightCodeHelmet;
	char m_armorCode;
	char m_armorMaxCode;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_w2VidCellBase;
	CVidCell m_w2VidCellExtend;
	CVidCell m_caVidCellBase;
	CVidCell m_caVidCellExtend;
	CVidCell m_a1VidCellBase;
	CVidCell m_a1VidCellExtend;
	CVidCell m_a2VidCellBase;
	CVidCell m_a2VidCellExtend;
	CVidCell m_a3VidCellBase;
	CVidCell m_a3VidCellExtend;
	CVidPalette m_charPalette;
	CString m_resrefWeapon;
	CVidCell *m_currentVidCellWeapon;
	CVidCell *m_currentVidCellWeaponBase;
	CVidCell *m_currentVidCellWeaponExtend;
	CVidCell m_g1VidCellWeaponBase;
	CVidCell m_g1VidCellWeaponExtend;
	CVidCell m_w2VidCellWeaponBase;
	CVidCell m_w2VidCellWeaponExtend;
	CVidCell m_a1VidCellWeaponBase;
	CVidCell m_a1VidCellWeaponExtend;
	CVidCell m_a2VidCellWeaponBase;
	CVidCell m_a2VidCellWeaponExtend;
	CVidCell m_a3VidCellWeaponBase;
	CVidCell m_a3VidCellWeaponExtend;
	CVidPalette m_weaponPalette;
	CString m_resrefShield;
	CVidCell *m_currentVidCellShield;
	CVidCell *m_currentVidCellShieldBase;
	CVidCell *m_currentVidCellShieldExtend;
	CVidCell m_g1VidCellShieldBase;
	CVidCell m_g1VidCellShieldExtend;
	CVidCell m_w2VidCellShieldBase;
	CVidCell m_w2VidCellShieldExtend;
	CVidCell m_a1VidCellShieldBase;
	CVidCell m_a1VidCellShieldExtend;
	CVidCell m_a2VidCellShieldBase;
	CVidCell m_a2VidCellShieldExtend;
	CVidCell m_a3VidCellShieldBase;
	CVidCell m_a3VidCellShieldExtend;
	CVidPalette m_shieldPalette;
	CString m_resrefHelmet;
	CVidCell *m_currentVidCellHelmet;
	CVidCell *m_currentVidCellHelmetBase;
	CVidCell *m_currentVidCellHelmetExtend;
	CVidCell m_g1VidCellHelmetBase;
	CVidCell m_g1VidCellHelmetExtend;
	CVidCell m_w2VidCellHelmetBase;
	CVidCell m_w2VidCellHelmetExtend;
	CVidCell m_caVidCellHelmetBase;
	CVidCell m_caVidCellHelmetExtend;
	CVidCell m_a1VidCellHelmetBase;
	CVidCell m_a1VidCellHelmetExtend;
	CVidCell m_a2VidCellHelmetBase;
	CVidCell m_a2VidCellHelmetExtend;
	CVidCell m_a3VidCellHelmetBase;
	CVidCell m_a3VidCellHelmetExtend;
	CVidPalette m_helmetPalette;
	CVidCell *m_currentVidCellShadow;
	CVidCell *m_currentVidCellShadowBase;
	CVidCell *m_currentVidCellShadowExtend;
	CVidCell m_g1VidCellShadowBase;
	CVidCell m_g1VidCellShadowExtend;
	CVidCell m_w2VidCellShadowBase;
	CVidCell m_w2VidCellShadowExtend;
	CVidCell m_caVidCellShadowBase;
	CVidCell m_caVidCellShadowExtend;
	CVidCell m_a1VidCellShadowBase;
	CVidCell m_a1VidCellShadowExtend;
	CVidCell m_a2VidCellShadowBase;
	CVidCell m_a2VidCellShadowExtend;
	CVidCell m_a3VidCellShadowBase;
	CVidCell m_a3VidCellShadowExtend;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_renderWeapons;
	int m_bHideWeapons;
	int m_renderHelmet;
	int m_bEquipHelmet;
	int m_weaponLeftHand;
	int m_falseColor;
	char m_weaponCode;
	char m_extendDirectionTest;
	char m_bDetectedByInfravision;
	char m_bInvulnerable;
	char m_bCanLieDown;
};

/* 4957 */
struct __cppobj CGameEffectINT : CGameEffect
{
};

/* 4958 */
struct __cppobj CGameEffectDispelEffects : CGameEffect
{
};

/* 4959 */
struct __cppobj __declspec(align(4)) CMessageSpriteUpdate : CMessage
{
	int *m_pPath;
	__int16 m_nPath;
	__int16 m_currPath;
	CPoint m_ptDest;
	CString m_sAreaString;
	__int16 m_nSequence;
	CPoint m_ptPosition;
	__int16 m_nFacing;
	unsigned int m_dwState;
	__int16 m_nHitPoints;
	__int16 m_nMaxHitPoints;
	__int16 m_nArmorClass;
	__int16 m_nACCrushingMod;
	__int16 m_nACMissileMod;
	__int16 m_nACPiercingMod;
	__int16 m_nACSlashingMod;
	__int16 m_nPortraitIcons;
	int *m_pPortraitIcons;
	char m_nEnemyAlly;
	char m_nEnemyAllyLive;
	char m_nGeneral;
	char m_nGeneralLive;
	char m_bMoraleFailure;
	char m_nMoveScale;
	int m_nHPCONBonusTotalOld;
	char m_bLevelUp;
	char m_bSummonDisable;
	char m_bDoNotJump;
	char m_bSanctuary;
	char m_bDisableCircle;
	char m_bHeld;
	char m_bActiveImprisonment;
	__int16 m_nTranslucency;
	char m_bImmuneToBackstabs;
	unsigned int m_spellState[8];
	unsigned __int16 m_nBitsRequired;
};

/* 4960 */
struct __cppobj CSelectiveBonus
{
	CAIObjectType m_type;
	int m_bonus;
};

/* 4961 */
struct __cppobj CMessageSetWorldmap : CMessage
{
	CResRef m_worldmap;
};

/* 4962 */
struct __cppobj CGameRemoveMapNote : CGameEffect
{
};

/* 4963 */
struct __cppobj CMessageStoreReplaceItem : CMessage
{
	CResRef m_store;
	CResRef m_oldItem;
	CResRef m_newItem;
};

/* 4964 */
struct __cppobj HTML_FinishedRequest_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchURL;
	const char *pchPageTitle;
};

/* 4965 */
struct __cppobj CGameEffectBardSong : CGameEffect
{
};

/* 4966 */
struct __cppobj CMessageSetPath : CMessage
{
	__int16 m_nPath;
	int *m_pPath;
	__int16 m_currPath;
	CPoint m_currDest;
	int m_position;
	CString m_sAreaString;
};

/* 4967 */
struct __cppobj CGameEffectDisableButton : CGameEffect
{
};

/* 4968 */
struct __cppobj CGameEffectLevel : CGameEffect
{
};

/* 4969 */
struct __cppobj __declspec(align(4)) CProjectileSkyStrike : CProjectile
{
	CVidCell m_animation;
	CVidPalette m_palette;
	int m_bGlow;
	unsigned __int16 m_duration;
};

/* 4970 */
struct __cppobj CGameEffectResistMagicFire : CGameEffect
{
};

/* 4971 */
struct __cppobj CGameEffectPlaySound : CGameEffect
{
};

/* 4972 */
struct __cppobj CGameEffectSetSpellState : CGameEffect
{
};

/* 4973 */
struct __cppobj CGameObjectArrayEntry
{
	__int16 m_objectId;
	CGameObject *m_objectPtr;
};

/* 4974 */
struct __cppobj CGameEffectResistCold : CGameEffect
{
};

/* 4975 */
struct __cppobj __declspec(align(4)) CFileFind : CObject
{
	CString m_strRoot;
	void *m_pFoundInfo;
	void *m_pNextInfo;
	void *m_hContext;
	int m_bGotLast;
	char m_chDirSeparator;
};

/* 4976 */
struct __cppobj CMessageNonControlledDialogStart : CMessage
{
	CString m_dialogRes;
	int m_NPCId;
};

/* 4977 */
struct __cppobj CGameEffectSaveVsSchoolMod : CGameEffect
{
};

/* 4978 */
struct __cppobj CGameEffectImprisonment : CGameEffect
{
};

/* 4979 */
struct __cppobj CMessageExploreArea : CMessage
{
	CString m_sAreaString;
};

/* 4980 */
struct __cppobj CGameEffectCastingLevelBonus : CGameEffect
{
};

/* 4981 */
struct __cppobj CGameEffectStoneSkins : CGameEffect
{
};

/* 4982 */
struct __cppobj CGameEffectCriticalHitSpell : CGameEffect
{
};

/* 4983 */
struct __cppobj CDialogFile_ReplyConditional
{
	unsigned int m_ScriptOffset;
	unsigned int m_ScriptSize;
};

/* 4984 */
struct __cppobj CGameEffectClairvoyance : CGameEffect
{
};

/* 4985 */
struct __cppobj CMessageContainerStatus : CMessage
{
	unsigned int m_dwFlags;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_trapActivated;
};

/* 4986 */
struct __cppobj CSavedGameFamiliars
{
	char m_resrefDefault[9][8];
	unsigned int m_resrefOffset;
	unsigned int m_resrefCount[9][9];
};

/* 4987 */
struct __cppobj StatRating
{
	CString name;
	float value;
	float rating;
};

/* 4988 */
struct __cppobj CArray<StatRating,StatRating &> : CObject
{
	StatRating *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 4989 */
struct __cppobj CGameEffectSetGlobal : CGameEffect
{
};

/* 4990 */
struct __cppobj CImmunitySpell
{
	CResRef m_res;
	unsigned int m_error;
	int m_item;
};

/* 4991 */
struct __cppobj CGameEffectImmunityToPortraitIcon : CGameEffect
{
};

/* 4992 */
struct __cppobj CMessageEnterDialog : CMessage
{
	unsigned int m_entryNum;
	char m_newDialog;
	int m_bItemDialog;
	int m_bSuppressName;
};

/* 4993 */
struct __cppobj CGameEffectCopySelf : CGameEffect
{
};

/* 4994 */
struct __cppobj CGameEffectPhysicalSpeed : CGameEffect
{
};

/* 4995 */
struct __cppobj CGameEffectCharm : CGameEffect
{
};

/* 4996 */
struct __cppobj HTML_VerticalScroll_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	unsigned int unScrollMax;
	unsigned int unScrollCurrent;
	float flPageScale;
	bool bVisible;
	unsigned int unPageSize;
};

/* 4997 */
struct __cppobj CGameEffectColorTintSolid : CGameEffect
{
};

/* 4998 */
struct __cppobj CGameEffectRememorizeSpell : CGameEffect
{
};

/* 4999 */
struct __cppobj CGameEffectThac0Left : CGameEffect
{
};

/* 5000 */
struct __cppobj CGameEffectApplyEffectEquipItem : CGameEffect
{
};

/* 5001 */
struct __cppobj __declspec(align(4)) CMessageNonControlledDialogReturn : CMessage
{
	char m_return;
};

/* 5002 */
struct __cppobj CGameEffectSTRExtra : CGameEffect
{
};

/* 5003 */
struct __cppobj CGameEffectCreateWeapon : CGameEffect
{
};

/* 5004 */
struct __cppobj CMessageTransformItem : CMessage
{
	CItem m_item;
	CResRef m_cRes;
};

/* 5005 */
struct __cppobj CGameEffectProtectionFromCreature : CGameEffect
{
};

/* 5006 */
struct __cppobj CGameEffectDither : CGameEffect
{
};

/* 5007 */
struct __cppobj CGameEffectBerserk : CGameEffect
{
};

/* 5008 */
struct __cppobj CGameEffectInfravisionOff : CGameEffect
{
};

/* 5009 */
struct __cppobj CGameEffectImmunityToEffect : CGameEffect
{
};

/* 5010 */
struct __cppobj CMemINIFile
{
	CMemINIFileVtbl *vfptr;
	CString mFileName;
	int mMode;
	CFile mFile;
	int mFileOpen;
};

/* 5011 */
struct CMemINIFileVtbl
{
	void *(__thiscall *__vecDelDtor)(CMemINIFile *this, unsigned int);
};

/* 5012 */
struct __cppobj HTML_SizePopup_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	unsigned int unX;
	unsigned int unY;
	unsigned int unWide;
	unsigned int unTall;
};

/* 5013 */
struct __cppobj CGameEffectHaste : CGameEffect
{
};

/* 5014 */
struct __cppobj CAIConditionResponse
{
	CAICondition m_condition;
	CAIResponseSet m_responseSet;
};

/* 5015 */
struct __cppobj CGameEffectDamage : CGameEffect
{
};

/* 5016 */
struct __cppobj CMessageDisableAI : CMessage
{
	int m_bDisable;
};

/* 5017 */
struct __cppobj CAreaFileTiledObject
{
	char m_scriptName[32];
	char m_tileID[8];
	unsigned int m_dwFlags;
	unsigned int m_primarySearchSquaresStart;
	unsigned __int16 m_primarySearchSquaresCount;
	unsigned __int16 m_secondarySearchSquaresCount;
	unsigned int m_secondarySearchSquaresStart;
	unsigned int m_notUsed[12];
};

/* 5018 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeCharacter : CGameAnimationType
{
	CString m_resrefPaperDoll;
	CString m_resref;
	CString m_heightCode;
	CString m_heightCodeHelmet;
	CString m_heightCodeShieldPaperDoll;
	char m_armorCode;
	char m_armorMaxCode;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell m_g1VidCellBase;
	CVidCell m_caVidCellBase;
	CVidCell m_a1VidCellBase;
	CVidCell m_a2VidCellBase;
	CVidCell m_a3VidCellBase;
	CVidPalette m_charPalette;
	CString m_resrefWeapon;
	CVidCell *m_currentVidCellWeapon;
	CVidCell *m_currentVidCellWeaponBase;
	CVidCell m_g1VidCellWeaponBase;
	CVidCell m_a1VidCellWeaponBase;
	CVidCell m_a2VidCellWeaponBase;
	CVidCell m_a3VidCellWeaponBase;
	CVidPalette m_weaponPalette;
	CString m_resrefShield;
	CVidCell *m_currentVidCellShield;
	CVidCell *m_currentVidCellShieldBase;
	CVidCell m_g1VidCellShieldBase;
	CVidCell m_a1VidCellShieldBase;
	CVidCell m_a2VidCellShieldBase;
	CVidCell m_a3VidCellShieldBase;
	CVidPalette m_shieldPalette;
	CString m_resrefHelmet;
	CVidCell *m_currentVidCellHelmet;
	CVidCell *m_currentVidCellHelmetBase;
	CVidCell m_g1VidCellHelmetBase;
	CVidCell m_caVidCellHelmetBase;
	CVidCell m_a1VidCellHelmetBase;
	CVidCell m_a2VidCellHelmetBase;
	CVidCell m_a3VidCellHelmetBase;
	CVidPalette m_helmetPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_renderWeapons;
	int m_bHideWeapons;
	int m_renderHelmet;
	int m_bEquipHelmet;
	int m_weaponLeftHand;
	int m_falseColor;
	char m_weaponCode;
	char m_extendDirectionTest;
	char m_bDetectedByInfravision;
	char m_bInvulnerable;
	char m_bCanLieDown;
	char m_resrefArmorBase;
	char m_resrefArmorSpecific;
	int m_bDoubleBlit;
	int m_bSplitBams;
	char m_splitBamChar;
};

/* 5019 */
struct __cppobj CGameEffectRemovePortraitIcon : CGameEffect
{
};

/* 5020 */
struct __cppobj CGameEffectRandomDrop : CGameEffect
{
};

/* 5021 */
struct __cppobj CGameEffectResistMagic : CGameEffect
{
};

/* 5022 */
struct __cppobj CGameEffectCON : CGameEffect
{
};

/* 5023 */
struct __cppobj CGameEffectDispelSecondaryType : CGameEffect
{
};

/* 5024 */
struct __cppobj CGameEffectDestroyWeapon : CGameEffect
{
};

/* 5025 */
struct __cppobj CMemINIRes : CResHelper<CResINI,2050>
{
	char *mpData;
	int mDataLength;
	CResRef ResRef;
	int mFilePosition;
	int mEOF;
};

/* 5026 */
struct __cppobj CGameEffectRestoreMovementRate : CGameEffect
{
};

/* 5027 */
struct __cppobj CMessageSetBanterBlockTime : CMessage
{
	int m_time;
};

/* 5028 */
struct __cppobj CGameEffectImmuneToWeapon : CGameEffect
{
};

/* 5029 */
struct __cppobj CMessageStoreRelease : CMessage
{
	CResRef m_store;
};

/* 5030 */
struct __cppobj __declspec(align(4)) CMessageSetInStore : CMessage
{
	char m_bState;
};

/* 5031 */
struct __cppobj CGameEffectPlayMovie : CGameEffect
{
};

/* 5032 */
struct __cppobj CResStore : CRes
{
};

/* 5033 */
struct __cppobj CResHelper<CResStore,1014>
{
	CResStore *pRes;
	CResRef cResRef;
};

/* 5034 */
struct __cppobj CStoreFile : CResHelper<CResStore,1014>
{
};

/* 5035 */
struct __cppobj MatchMakingKeyValuePair_t
{
	char m_szKey[256];
	char m_szValue[256];
};

/* 5036 */
struct __cppobj CGameEffectPoison : CGameEffect
{
};

/* 5037 */
struct __cppobj CGameEffectAuraCleansing : CGameEffect
{
};

/* 5038 */
struct __cppobj CGameEffectImmunitySpellIWD : CGameEffect
{
};

/* 5039 */
struct __cppobj CGameEffectMirrorImage : CGameEffect
{
};

/* 5040 */
struct __cppobj CMessageStoreDemand : CMessage
{
	CResRef m_store;
};

/* 5041 */
struct __cppobj CGameEffectImmunityToDisplayString : CGameEffect
{
};

/* 5042 */
struct __cppobj CTiledObject
{
	int m_nWedIndex;
	CResWED *m_pResWed;
	unsigned __int16 m_wAIState;
	unsigned __int16 m_wRenderState;
	__POSITION *m_posAreaList;
	CResRef m_resId;
};

/* 5043 */
struct __cppobj CGameTiledObject : CGameAIBase
{
	CResRef m_resID;
	unsigned int m_dwFlags;
	CPoint *m_pPrimarySearch;
	unsigned __int16 m_nPrimarySearch;
	CPoint *m_pSecondarySearch;
	unsigned __int16 m_nSecondarySearch;
	CTiledObject m_tiledObject;
	char m_scriptName[32];
};

/* 5044 */
struct __cppobj CGameTrigger : CGameAIBase
{
	unsigned __int16 m_triggerType;
	CRect m_rBounding;
	unsigned int m_cursorType;
	char m_newArea[8];
	char m_newEntryPoint[32];
	unsigned int m_dwFlags;
	unsigned int m_description;
	CPoint *m_pPolygon;
	unsigned __int16 m_nPolygon;
	unsigned __int16 m_boundingRange;
	char m_scriptRes[8];
	char m_scriptName[32];
	unsigned __int16 m_trapDetectionDifficulty;
	unsigned __int16 m_trapDisarmingDifficulty;
	unsigned __int16 m_trapActivated;
	unsigned __int16 m_trapDetected;
	CPoint m_posTrapOrigin;
	CResRef m_keyType;
	__int16 m_drawPoly;
	unsigned int m_iGameText;
	CPoint m_ptWalkTo;
};

/* 5045 */
struct __cppobj CGameDoor : CGameAIBase
{
	CResRef m_resID;
	CRect m_rOpenBounding;
	CRect m_rClosedBounding;
	unsigned int m_cursorType;
	unsigned int m_dwFlags;
	CPoint *m_pOpenPolygon;
	unsigned __int16 m_nOpenPolygon;
	CPoint *m_pClosedPolygon;
	unsigned __int16 m_nClosedPolygon;
	CPoint *m_pOpenSearch;
	unsigned __int16 m_nOpenSearch;
	CPoint *m_pClosedSearch;
	unsigned __int16 m_nClosedSearch;
	CPoint m_ptDest1;
	CPoint m_ptDest2;
	char m_scriptRes[8];
	CTiledObject m_tiledObject;
	char m_scriptName[32];
	char m_triggerName[32];
	__int16 m_hitPoints;
	__int16 m_armourClass;
	CResRef m_openSound;
	CResRef m_closeSound;
	unsigned __int16 m_trapDetectionDifficulty;
	unsigned __int16 m_trapDisarmingDifficulty;
	unsigned __int16 m_trapActivated;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_posXTrapOrigin;
	unsigned __int16 m_posYTrapOrigin;
	CResRef m_keyType;
	unsigned int m_detectionDifficulty;
	unsigned int m_lockDifficulty;
	__int16 m_drawPoly;
	CPoint m_ptOpenDest;
	CPoint m_ptClosedDest;
	CSound m_sndDoor;
	unsigned int m_strNotPickable;
	int m_usedDelay;
};

/* 5046 */
struct __cppobj CAreaFileRandomMonsterSpawningPoint
{
	char m_scriptName[32];
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	char m_randomCreature[10][8];
	unsigned __int16 m_randomCreatureNum;
	unsigned __int16 m_difficulty;
	unsigned __int16 m_spawningRate;
	unsigned __int16 m_wFlags;
	unsigned int m_lifeSpan;
	unsigned __int16 m_huntingRange;
	unsigned __int16 m_followRange;
	unsigned __int16 m_maxTypeNum;
	unsigned __int16 m_activated;
	unsigned int m_timeOfDayVisible;
	unsigned __int16 m_probDay;
	unsigned __int16 m_probNight;
	unsigned int m_frequency;
	unsigned int m_countdown;
	char m_weights[10];
	unsigned __int16 m_notUsed[19];
};

/* 5047 */
struct __cppobj CGameSpawning : CGameObject
{
	CAreaFileRandomMonsterSpawningPoint m_spawningObject;
	char m_terrainTable[16];
	char m_visibleTerrainTable[16];
	int m_nTrackingCounter;
	unsigned int m_weightSum;
};

/* 5048 */
struct __cppobj CTypedPtrList<CPtrList,CVidCell *> : CPtrList
{
};

/* 5049 */
struct __cppobj CGameStatic : CGameObject
{
	CAreaFileStaticObject m_header;
	CVidCell m_vidCell;
	CResWebm *m_pMovie;
	CResPVR *m_pImage;
	int m_bRender;
	CSize m_size;
	CTypedPtrList<CPtrList,CVidCell *> m_secondaryVidCellList;
	int m_bNewPalette;
	CVidBitmap m_newPalette;
};

/* 5050 */
struct __cppobj CTypedPtrList<CPtrList,CItem *> : CPtrList
{
};

/* 5051 */
struct __cppobj CGameContainer : CGameAIBase
{
	CRect m_rBounding;
	CPoint *m_pPolygon;
	unsigned __int16 m_nPolygon;
	CTypedPtrList<CPtrList,CItem *> m_lstItems;
	unsigned __int16 m_containerType;
	CPoint m_ptWalkToUse;
	CVidCell m_pileVidCell[3];
	char m_nPileVidCell;
	char m_bDeleteMe;
	char m_scriptRes[8];
	unsigned __int16 m_lockDifficulty;
	unsigned int m_dwFlags;
	unsigned __int16 m_trapDetectionDifficulty;
	unsigned __int16 m_trapRemovalDifficulty;
	unsigned __int16 m_trapActivated;
	unsigned __int16 m_trapDetected;
	CPoint m_posTrapOrigin;
	unsigned __int16 m_triggerRange;
	char m_ownedBy[32];
	CResRef m_keyType;
	unsigned int m_breakDifficulty;
	__int16 m_drawPoly;
	unsigned int m_strNotPickable;
	int m_bJustCreated;
	int m_bNeedUpdate;
};

/* 5052 */
struct __cppobj CWildSurge
{
	unsigned __int16 m_projectileOverride;
	unsigned int m_projectileSpeedMod;
	unsigned int m_durationMod;
	unsigned int m_levelMod;
	unsigned int m_bApplyEffects;
	int m_saveMod;
	int m_bClearTargetRestriction;
	int m_bClearSelfRestriction;
};

/* 5053 */
struct CColorRange
{
	char m_range;
	char m_color;
};

/* 5054 */
struct __cppobj CGameEffectThac0Right : CGameEffect
{
};

/* 5055 */
struct __cppobj CGameEffectHitMod : CGameEffect
{
};

/* 5056 */
struct __cppobj CGameEffectSlow : CGameEffect
{
};

/* 5057 */
struct __cppobj CMessageStartTextScreen : CMessage
{
	CResRef m_screen;
};

/* 5058 */
struct __cppobj __declspec(align(4)) CMessageVerbalConstant : CMessage
{
	int m_verbalConstant;
	char m_overHead;
};

/* 5059 */
struct __cppobj CGameEffectSlay : CGameEffect
{
};

/* 5060 */
struct __cppobj CAreaFileOffsets
{
	unsigned int m_creatureTableOffset;
	unsigned __int16 m_creatureTableCount;
	unsigned __int16 m_triggerObjectListCount;
	unsigned int m_triggerObjectListOffset;
	unsigned int m_randomMonsterSpawningPointTableOffset;
	unsigned int m_randomMonsterSpawningPointTableCount;
	unsigned int m_characterEntryPointTableOffset;
	unsigned int m_characterEntryPointTableCount;
	unsigned int m_containerListOffset;
	unsigned __int16 m_containerListCount;
	unsigned __int16 m_itemObjectsCount;
	unsigned int m_itemObjectsOffset;
	unsigned int m_pointsOffset;
	unsigned __int16 m_pointsCount;
	unsigned __int16 m_soundObjectCount;
	unsigned int m_soundObjectOffset;
	unsigned int m_areaScriptVariablesOffset;
	unsigned __int16 m_areaScriptVariablesCount;
	unsigned __int16 m_tiledObjectFlagsCount;
	unsigned int m_tiledObjectFlagsOffset;
	char m_script[8];
	unsigned int m_visibilityMapCount;
	unsigned int m_visibilityMapOffset;
	unsigned int m_doorObjectListCount;
	unsigned int m_doorObjectListOffset;
	unsigned int m_staticObjectListCount;
	unsigned int m_staticObjectListOffset;
	unsigned int m_tiledObjectListCount;
	unsigned int m_tiledObjectListOffset;
	unsigned int m_areaSoundsAndMusicOffset;
	unsigned int m_restingEncounterOffset;
	unsigned int m_userMapNotesOffset;
	unsigned int m_userMapNotesCount;
	unsigned int m_projectileTableOffset;
	unsigned int m_projectileTableCount;
	char m_restMovieDay[8];
	char m_restMovieNight[8];
	unsigned int m_notUsed[14];
};

/* 5061 */
struct __cppobj CGameEffectImmunityToVisualEffect : CGameEffect
{
};

/* 5062 */
struct __cppobj CGameEffectIdentify : CGameEffect
{
};

/* 5063 */
struct __cppobj CMessageStopEscapeArea : CMessage
{
};

/* 5064 */
struct __cppobj CMessageLoadDialog : CMessage
{
	CString m_dialogRes;
	int m_NPCId;
	int m_bItemDialog;
};

/* 5065 */
struct __cppobj CResEffect : CRes
{
};

/* 5066 */
struct __cppobj CResHelper<CResEffect,1016>
{
	CResEffect *pRes;
	CResRef cResRef;
};

/* 5067 */
struct __cppobj CGameEffectMorale : CGameEffect
{
};

/* 5068 */
struct __cppobj CGameEffectDisintegrate : CGameEffect
{
};

/* 5069 */
struct __cppobj CGameAddMapNote : CGameEffect
{
};

/* 5070 */
struct __cppobj CGameEffectSequencerFirePoint : CGameEffect
{
};

/* 5071 */
struct __cppobj CGameEffectImmunityLevelDecrement : CGameEffect
{
};

/* 5072 */
struct __cppobj CGameEffectNoPermanentDeath : CGameEffect
{
};

/* 5073 */
struct __cppobj CGameEffectNPCBump : CGameEffect
{
};

/* 5074 */
struct __cppobj __declspec(align(4)) CMessageVisualEffect : CMessage
{
	char m_nEffectType;
	char m_nEffectProperty;
};

/* 5075 */
struct __cppobj CGameEffectMirrorImageRun : CGameEffect
{
};

/* 5076 */
struct __cppobj CGameEffectImmunityToSequester : CGameEffect
{
};

/* 5077 */
struct __cppobj CGameEffectSkillStealth : CGameEffect
{
};

/* 5078 */
struct __cppobj CGameEffectBerserkStage1 : CGameEffect
{
};

/* 5079 */
struct __cppobj CMessageSetTrigger : CMessage
{
	CAITrigger m_trigger;
};

/* 5080 */
struct __cppobj CDialogFile_Header
{
	unsigned int m_DialogEntryCount;
	unsigned int m_DialogEntriesOffset;
	unsigned int m_ReplyEntryCount;
	unsigned int m_ReplyEntriesOffset;
	unsigned int m_StartingConditionsOffset;
	unsigned int m_StartingConditionsCount;
	unsigned int m_ReplyConditionsOffset;
	unsigned int m_ReplyConditionsCount;
	unsigned int m_ActionsOffset;
	unsigned int m_ActionCount;
	unsigned int m_Flags;
};

/* 5081 */
struct __cppobj __declspec(align(4)) CMessageSetDialogPausing : CMessage
{
	char m_bOpenDoor;
};

/* 5082 */
struct __cppobj CGameEffectCreateItem : CGameEffect
{
};

/* 5083 */
struct __cppobj CGameEffectColorGlowDissipate : CGameEffect
{
};

/* 5084 */
struct __cppobj __declspec(align(4)) CColorEffect
{
	char m_effectType;
	char m_range;
	unsigned int m_tintColor;
	char m_periodLength;
};

/* 5085 */
struct __cppobj CMessageClearDialogOnMachine : CMessage
{
};

/* 5086 */
struct __cppobj CGameEffectColorGlowPulse : CGameEffect
{
};

/* 5087 */
struct __cppobj __declspec(align(4)) CMessageDisplayTextRefSend : CMessage
{
	unsigned int m_name;
	unsigned int m_text;
	unsigned int m_nameColor;
	unsigned int m_textColor;
	int m_marker;
	char m_moveToTop;
	char m_overHead;
};

/* 5088 */
struct __cppobj __declspec(align(4)) HTML_CanGoBackAndForward_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	bool bCanGoBack;
	bool bCanGoForward;
};

/* 5089 */
struct __cppobj CGameEffectCureDisease : CGameEffect
{
};

/* 5090 */
struct __cppobj CGameEffectEnableButton : CGameEffect
{
};

/* 5091 */
struct __cppobj HTML_SetCursor_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	unsigned int eMouseCursor;
};

/* 5092 */
struct __cppobj CMessageColorChange : CMessage
{
	char m_colors[7];
	char m_bApply;
};

/* 5093 */
struct __cppobj CGameEffectRegeneration : CGameEffect
{
};

/* 5094 */
struct __cppobj CProjectileBAM : CProjectile
{
	CVidCell *m_currentVidCell;
	CVidCell *m_shadowVidCell;
	CVidPalette m_palette;
	int m_tint;
	int m_height;
	int m_glow;
	CSize m_glowSize;
	__int16 m_glowIntensity;
	int m_shadow;
	__int16 m_numDirections;
	__int16 m_direction;
	__int16 m_newDirection;
	int m_render;
	CVidBitmap m_newPalette;
	char m_bNewPalette;
	char m_bDuration;
	int m_bSmoke;
	char m_smokePeriod;
	char m_smokeColorRange[7];
	char m_smokeCount;
	unsigned __int16 m_smokeAnimationCode;
	CResRef m_cPuffEffect1;
	CResRef m_cPuffEffect2;
	CResRef m_cPuffEffect3;
	unsigned __int16 m_nPuff1Spacing;
	unsigned __int16 m_nPuff2Spacing;
	unsigned __int16 m_nPuff3Spacing;
	unsigned int m_dwPuffFlags;
	int m_puffCounter;
};

/* 5095 */
struct __cppobj CGameEffectClassStringOverride : CGameEffect
{
};

/* 5096 */
struct __cppobj CGameEffectReputation : CGameEffect
{
};

/* 5097 */
struct WED_TILE
{
	int texture;
	int x;
	int y;
};

/* 5098 */
struct __cppobj CGameEffectShowCreatures : CGameEffect
{
};

/* 5099 */
struct __cppobj CMessageEscapeArea : CMessage
{
};

/* 5100 */
struct __cppobj CGameEffectCriticalMissModifier : CGameEffect
{
};

/* 5101 */
struct __cppobj CSparkle : CGameObject
{
	__int16 m_nType;
	CPoint m_posExact;
	CPoint m_posDelta;
	CPoint m_posDest;
	char m_moveScale;
	char m_terrainTable[16];
	__int16 m_nConjureDuration;
	int m_nTimer;
	int m_destId;
	int m_srcId;
	CAIAction *m_pTargetAction;
};

/* 5102 */
struct __cppobj CMessageSetPortraitLarge : CMessage
{
	CResRef m_cResRefDialog;
};

/* 5103 */
struct __cppobj CPersistantEffectRegeneration : CPersistantEffectDamage
{
};

/* 5104 */
struct __cppobj CGameAIGame : CGameAIBase
{
};

/* 5105 */
struct __unaligned __declspec(align(2)) WED_TiledObject_st
{
	char resID[8];
	unsigned __int16 bType;
	unsigned __int16 nStartingTile;
	unsigned __int16 nNumTiles;
	unsigned __int16 nNumPrimaryPolys;
	unsigned __int16 nNumSecondaryPolys;
	unsigned int nOffsetToPrimaryPolys;
	unsigned int nOffsetToSecondaryPolys;
};

/* 5106 */
struct __cppobj __declspec(align(4)) CMessageSetCurrentActionId : CMessage
{
	__int16 m_face;
};

/* 5107 */
struct __cppobj CGameEffectVocalize : CGameEffect
{
};

/* 5108 */
struct __cppobj CGameEffectApplyEffect : CGameEffect
{
};

/* 5109 */
struct __cppobj CMessageResetMorale : CMessage
{
	int m_bMoraleFailure;
	int m_iMoraleLevel;
};

/* 5110 */
struct __cppobj CSequenceSound
{
	CResRef m_sound;
	int m_offset;
};

/* 5111 */
struct __cppobj CMessageStartFollow : CMessage
{
};

/* 5112 */
struct __cppobj CGameEffectPetrification : CGameEffect
{
};

/* 5113 */
struct __cppobj CGameEffectRemoveInnateAbility : CGameEffect
{
};

/* 5114 */
struct __cppobj CGameEffectChaosShield : CGameEffect
{
};

/* 5115 */
struct __cppobj CMessageSetInCutScene : CMessage
{
	int m_status;
};

/* 5116 */
struct __cppobj __declspec(align(4)) CPersistantEffectColorEffect : CPersistantEffect
{
	int m_undo;
	char m_effectFinalRed;
	char m_effectDegreeRed;
	char m_effectIncrementRed;
	char m_effectFinalGreen;
	char m_effectDegreeGreen;
	char m_effectIncrementGreen;
	char m_effectFinalBlue;
	char m_effectDegreeBlue;
	char m_effectIncrementBlue;
	char m_colorEffect;
};

/* 5117 */
struct __cppobj CMusicPosition
{
	int m_nSong;
	int m_nSection;
	int m_nPosition;
};

/* 5118 */
struct __cppobj __declspec(align(4)) CMessageDoorStatus : CMessage
{
	unsigned int m_dwFlags;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_trapActivated;
	char m_bOpen;
};

/* 5119 */
struct __cppobj CGameEffectColorChange : CGameEffect
{
};

/* 5120 */
struct __cppobj CGameEffectRemoveSpellImmunity : CGameEffect
{
};

/* 5121 */
struct __cppobj CGameEffectAttackNo : CGameEffect
{
};

/* 5122 */
struct __cppobj CGameEffectBounceSecondaryType : CGameEffect
{
};

/* 5123 */
struct __cppobj CGameEffectCureFeebleMindedness : CGameEffect
{
};

/* 5124 */
struct __cppobj CGameEffectFistTHAC0Bonus : CGameEffect
{
};

/* 5125 */
struct __cppobj CGameEffectFreedom : CGameEffect
{
};

/* 5126 */
struct __cppobj CGameEffectVisualRange : CGameEffect
{
};

/* 5127 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeAmbient : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	int m_bInvulnerable;
	int m_pathSmooth;
	char m_listType;
	char m_extendDirectionTest;
};

/* 5128 */
struct __cppobj CGameEffectSetLocalExternal : CGameEffect
{
};

/* 5129 */
struct __cppobj CGameEffectCleanAir : CGameEffect
{
};

/* 5130 */
struct __cppobj __declspec(align(4)) CMessageSetHappiness : CMessage
{
	__int16 m_happiness;
};

/* 5131 */
struct __cppobj CGameEffectSequencerFire : CGameEffect
{
};

/* 5132 */
struct __cppobj CSparkleCluster : CGameObject
{
	CVidMode *m_pVidMode;
	CTypedPtrList<CPtrList,CParticle *> m_particleList;
	unsigned int m_colorStart;
	unsigned int m_colorFade1;
	unsigned int m_colorFade2;
	unsigned int m_colorFade3;
	unsigned int m_colorFade4;
	char m_fade1Height;
	char m_fade2Height;
	char m_fade3Height;
	char m_fade4Height;
	CRect m_rBounding;
	unsigned __int16 m_wType;
	unsigned int m_nTimer;
	unsigned __int16 m_nConjureDuration;
	CPoint m_explosionDir;
	int m_nGravity;
};

/* 5133 */
struct __cppobj __declspec(align(4)) CMessageSaveGame : CMessage
{
	char m_nSlot;
};

/* 5134 */
struct __cppobj CGameEffectFloatText : CGameEffect
{
};

/* 5135 */
struct __cppobj CBloodPool : CGameObject
{
	CTypedPtrList<CPtrList,CParticle *> m_particleList;
	unsigned __int16 m_nDensity;
	unsigned __int16 m_nNumParticles;
	unsigned __int16 m_nLifeTime;
	unsigned int m_rgbColor;
	CPoint m_refPoint;
	CRect m_rBounding;
};

/* 5136 */
struct __cppobj __declspec(align(4)) CMessageSetAreaScript : CMessage
{
	CResRef m_script;
	__int16 m_nSlot;
};

/* 5137 */
struct __cppobj CMessageTakeCreatureItems : CMessage
{
	unsigned int m_itemType;
};

/* 5138 */
struct __cppobj CGameEffectBounceLevelDecrement : CGameEffect
{
};

/* 5139 */
struct __cppobj __declspec(align(4)) CMessageSetTarget : CMessage
{
	CPoint m_dest;
	CSearchRequest *m_request;
	char m_frontList;
};

/* 5140 */
struct __cppobj CGameEffectHoldCreature : CGameEffect
{
};

/* 5141 */
struct __cppobj CGameEffectEntangle : CGameEffect
{
};

/* 5142 */
struct __cppobj CMessageSetPortraitSmall : CMessage
{
	CResRef m_cResRefDialog;
};

/* 5143 */
struct __cppobj MusicPlayerWillQuit_t : SteamCallback_t
{
};

/* 5144 */
struct __cppobj CSoundChannel : CObject
{
	CObList lQueue;
	int m_nVolumeInit;
	int nVolume;
	int nType;
	bool bDucked;
	int m_nDuckingAmount;
};

/* 5145 */
struct __cppobj CGameEffectSparkle : CGameEffect
{
};

/* 5146 */
struct __cppobj CGameEffectEquipWeapon : CGameEffect
{
};

/* 5147 */
struct __cppobj CSelectiveWeaponType
{
	int m_slot;
	CAIObjectType m_type;
	CWeaponIdentification m_weapon;
};

/* 5148 */
struct __cppobj __declspec(align(4)) CMessageDoorOpen : CMessage
{
	char m_bOpenDoor;
};

/* 5149 */
struct __cppobj CGameEffectDEX : CGameEffect
{
};

/* 5150 */
struct __cppobj CGameEffectDestroyItem : CGameEffect
{
};

/* 5151 */
struct __cppobj CAbilityData
{
	CResRef m_icon;
	unsigned int m_name;
	CString m_effect;
	int m_nMinLevel;
	int m_nMaxLevel;
	int m_nNumAllowed;
	CString m_sPrereq;
	CString m_sExcludedBy;
	CString m_sAlignmentRestriction;
};

/* 5152 */
struct __cppobj CGameEffectJumpToPocketPlane : CGameEffect
{
};

/* 5153 */
struct __cppobj CGameEffectRemoveAllOfType : CGameEffect
{
};

/* 5154 */
struct __cppobj CGameEffectResurrectParty : CGameEffect
{
};

/* 5155 */
struct __cppobj HTML_ComboNeedsPaint_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pBGRA;
	unsigned int unWide;
	unsigned int unTall;
};

/* 5156 */
struct __cppobj CGameEffectRemoveCurse : CGameEffect
{
};

/* 5157 */
struct __cppobj CGameEffectWIS : CGameEffect
{
};

/* 5158 */
struct __cppobj CGameEffectVisualSpellHitIWD : CGameEffect
{
};

/* 5159 */
struct __cppobj CGameEffectAnimationChange : CGameEffect
{
};

/* 5160 */
struct __cppobj CGameEffectSilence : CGameEffect
{
};

/* 5161 */
struct __cppobj CGameEffectDamageMod : CGameEffect
{
};

/* 5162 */
struct __cppobj CMessageSetCampaign : CMessage
{
	CResRef m_campaign;
};

/* 5163 */
struct __cppobj CGameEffectSkillTraps : CGameEffect
{
};

/* 5164 */
struct __cppobj CGameEffectInfravision : CGameEffect
{
};

/* 5165 */
struct __cppobj CGameEffectSanctuary : CGameEffect
{
};

/* 5166 */
struct __cppobj CResBinary : CRes
{
	char m_resVersion[4];
};

/* 5167 */
struct __cppobj CResPng : CRes
{
	CSize sz;
	int texture;
};

/* 5168 */
struct __cppobj CGameEffectSummon : CGameEffect
{
};

/* 5169 */
struct __cppobj CGameEffectScreenShake : CGameEffect
{
};

/* 5170 */
struct __cppobj CGameEffectRemoveConfusion : CGameEffect
{
};

/* 5171 */
struct __cppobj CGameEffectBounceSpell : CGameEffect
{
};

/* 5172 */
struct __cppobj CMessageForceRandomEncounter : CMessage
{
	CResRef m_cRes;
	CString m_sEntryPoint;
};

/* 5173 */
struct __cppobj CLUAConsole
{
};

/* 5174 */
struct __cppobj __declspec(align(4)) CMessageSetAISpeed : CMessage
{
	char m_nAISpeed;
};

/* 5175 */
struct __cppobj CMessageStopActions : CMessage
{
};

/* 5176 */
struct __cppobj CMessageMakeGlobal : CMessage
{
};

/* 5177 */
struct __cppobj CGameEffectImmunitySchoolDecrement : CGameEffect
{
};

/* 5178 */
struct __cppobj CMessageSpriteEquipment : CMessage
{
	CGameSpriteEquipment m_equipment;
};

/* 5179 */
struct __cppobj CGameEffectTurnUndeadModifier : CGameEffect
{
};

/* 5180 */
struct __cppobj CGameEffectEvadeAreaOfEffect : CGameEffect
{
};

/* 5181 */
struct __cppobj HTML_UpdateToolTip_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchMsg;
};

/* 5182 */
struct __cppobj CGameEffectTracking : CGameEffect
{
};

/* 5183 */
struct __cppobj __declspec(align(4)) CMessageStaticStart : CMessage
{
	char m_bStart;
};

/* 5184 */
struct __cppobj CGameAnimationTypeMonsterAnkheg : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_g2VidCellBase;
	CVidCell m_g2VidCellExtend;
	CVidCell m_g3VidCellBase;
	CVidCell m_g3VidCellExtend;
	CVidCell *m_currentVidCellHole;
	CVidCell *m_currentVidCellHoleBase;
	CVidCell *m_currentVidCellHoleExtend;
	CVidCell m_g1VidCellHoleBase;
	CVidCell m_g1VidCellHoleExtend;
	CVidCell m_g2VidCellHoleBase;
	CVidCell m_g2VidCellHoleExtend;
	CVidCell m_g3VidCellHoleBase;
	CVidCell m_g3VidCellHoleExtend;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_bAboveGround;
	char m_extendDirectionTest;
	int m_bMirrorBam;
};

/* 5185 */
struct __cppobj CGameEffectRandomPhase : CGameEffect
{
};

/* 5186 */
struct __cppobj PlaybackStatusHasChanged_t : SteamCallback_t
{
};

/* 5187 */
struct __cppobj __declspec(align(4)) CMessageUseItemCharges : CMessage
{
	__int16 m_slotNum;
	__int16 m_nCharges;
	__int16 m_nAbilityNum;
};

/* 5188 */
struct __cppobj __declspec(align(4)) CMessageAddEffect : CMessage
{
	CGameEffect *m_effect;
	char m_noSave;
};

/* 5189 */
struct __cppobj __declspec(align(4)) CMessageStartVEF : CMessage
{
	CResRef m_res;
	CString m_sAreaString;
	CPoint m_start;
	CPoint m_target;
	__int16 m_height;
};

/* 5190 */
struct __cppobj CMessageEnterStoreMode : CMessage
{
	CAIObjectType m_cAIProprietor;
	CAIObjectType m_cAICustomer;
	CResRef m_cResStore;
};

/* 5191 */
struct __cppobj MusicPlayerWantsPause_t : SteamCallback_t
{
};

/* 5192 */
struct __cppobj HTML_HideToolTip_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
};

/* 5193 */
struct __cppobj CGameEffectPolymorph : CGameEffect
{
};

/* 5194 */
struct __cppobj CProjectileFall : CProjectileBAM
{
	int m_sideMove;
	int m_nSideSpeed;
	int m_bAreaEffect;
	__int16 m_nAreaRange;
	CAIObjectType m_targetType;
};

/* 5195 */
struct __cppobj CGameEffectMakeUnselectable : CGameEffect
{
};

/* 5196 */
struct __cppobj CGameEffectVisible : CGameEffect
{
};

/* 5197 */
struct __cppobj CMessageFakeExpireCheck : CMessage
{
	int m_nTime;
};

/* 5198 */
struct __cppobj __declspec(align(4)) CMessageExitDialogMode : CMessage
{
	char m_bButtonPushed;
};

/* 5199 */
struct __cppobj CGameEffectCriticalHitBonus : CGameEffect
{
};

/* 5200 */
struct __cppobj CGameEffectPortraitIcon : CGameEffect
{
};

/* 5201 */
struct __cppobj CProjectileInstant : CProjectile
{
};

/* 5202 */
struct __cppobj CProjectileCallLightning : CProjectileInstant
{
};

/* 5203 */
struct __cppobj CGameEffectHighLevelAbility : CGameEffect
{
};

/* 5204 */
struct __cppobj CGameEffectSetSnare : CGameEffect
{
};

/* 5205 */
struct __cppobj CGameEffectIgnoreReputationBreak : CGameEffect
{
};

/* 5206 */
struct __cppobj CGameEffectCalm : CGameEffect
{
};

/* 5207 */
struct __cppobj CGameEffectMoraleBreak : CGameEffect
{
};

/* 5208 */
struct __cppobj CGameEffectTeleport : CGameEffect
{
};

/* 5209 */
struct __cppobj CGameEffectDispelSanctuary : CGameEffect
{
};

/* 5210 */
struct __cppobj CGameEffectDoNotDraw : CGameEffect
{
};

/* 5211 */
struct __cppobj CDialogFile_StartingConditional
{
	unsigned int m_ScriptOffset;
	unsigned int m_ScriptSize;
};

/* 5212 */
struct __cppobj CGameEffectSaveVsWands : CGameEffect
{
};

/* 5213 */
struct __cppobj CGameEffectPushPull : CGameEffect
{
};

/* 5214 */
struct __cppobj CMessageChangeStoreMarkup : CMessage
{
	CResRef m_sStore;
	unsigned int m_buy;
	unsigned int m_sell;
};

/* 5215 */
struct __cppobj CResHelper<CResWorldMap,1015>
{
	CResWorldMap *pRes;
	CResRef cResRef;
};

/* 5216 */
struct __cppobj CWorldMapFile : CResHelper<CResWorldMap,1015>
{
};

/* 5217 */
struct __cppobj CGameEffectImmunitySecondaryType : CGameEffect
{
};

/* 5218 */
struct __cppobj CGameEffectSetSequence : CGameEffect
{
};

/* 5219 */
struct __cppobj CMessageSetDialogResRef : CMessage
{
	CResRef m_cResRefDialog;
};

/* 5220 */
struct __cppobj CMessageStoreRemoveItem : CMessage
{
	CResRef m_store;
	CResRef m_itemId;
	unsigned int m_flags;
};

/* 5221 */
struct __cppobj CGameAnimationTypeMonster : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell m_g1VidCellBase;
	CVidCell m_g2VidCellBase;
	CVidPalette m_charPalette;
	CVidCell *m_currentVidCellWeapon;
	CVidCell *m_currentVidCellWeaponBase;
	CVidCell m_g1VidCellWeaponBase;
	CVidCell m_g2VidCellWeaponBase;
	CVidPalette m_weaponPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	__int16 m_currentShootSequence;
	int m_falseColor;
	int m_translucent;
	int m_bTwoPalettes;
	CResRef m_cResRefPalette1;
	CResRef m_cResRefPalette2;
	int m_renderWeapons;
	int m_bHideWeapons;
	int m_weaponLeftHand;
	char m_bDetectedByInfravision;
	char m_extendDirectionTest;
	int m_bCanLieDown;
	int m_bPathSmooth;
	int m_bSplitBams;
	char m_splitBamChar;
	char m_currentShootSplit;
	int m_bGlowLayer;
	CString m_glowResref;
	CVidCell *m_glowCurrentVidCell;
	CVidCell *m_glowCurrentVidCellBase;
	CVidCell m_glowG1VidCellBase;
	CVidCell m_glowG2VidCellBase;
};

/* 5222 */
struct __cppobj MusicPlayerRemoteWillActivate_t : SteamCallback_t
{
};

/* 5223 */
struct __cppobj CGameEffectNon_CumulativeChantBad : CGameEffect
{
};

/* 5224 */
struct __cppobj __declspec(align(2)) CMessageContainerAddItem : CMessage
{
	CItem m_item;
	__int16 m_slotNum;
	char m_bCompressContainer;
};

/* 5225 */
struct __cppobj CMessageRemoveReplies : CMessage
{
	CString m_name;
	int m_entryIndex;
	int m_marker;
	unsigned int m_nameColor;
};

/* 5226 */
struct __cppobj CMessageColorUpdate : CMessage
{
	CColorRanges m_appliedColorRanges;
	CColorEffects m_appliedColorEffects;
};

/* 5227 */
struct __cppobj CGameEffectOverrideAnimation : CGameEffect
{
};

/* 5228 */
struct __cppobj CGameEffectGold : CGameEffect
{
};

/* 5229 */
struct __cppobj CGameEffectUnsummon : CGameEffect
{
};

/* 5230 */
struct __cppobj CGameEffectRemovePanic : CGameEffect
{
};

/* 5231 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterLarge : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_g2VidCellBase;
	CVidCell m_g2VidCellExtend;
	CVidCell m_g3VidCellBase;
	CVidCell m_g3VidCellExtend;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	char m_extendDirectionTest;
};

/* 5232 */
struct __cppobj __declspec(align(4)) CMessageScreenShake : CMessage
{
	unsigned __int16 m_duration;
	char m_magnitudeX;
	char m_magnitudeY;
	char m_bOverride;
};

/* 5233 */
struct __cppobj CGameEffectImmunityToBackstab : CGameEffect
{
};

/* 5234 */
struct __cppobj CGameEffectCureBlindness : CGameEffect
{
};

/* 5235 */
struct __cppobj CMessageContainerItems : CMessage
{
	unsigned __int16 m_nItems;
	CItem **m_pItems;
};

/* 5236 */
struct __cppobj CGameEffectPuppetMaster : CGameEffect
{
};

/* 5237 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterMultiNew : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_pCurrentVidCell;
	CVidCell *m_pCurrentVidCellBase;
	CVidCell *m_pg1VidCellBase;
	CVidCell *m_pg2VidCellBase;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	__int16 m_currentShootSequence;
	int m_falseColor;
	char m_extendDirectionTest;
	char m_nQuadrants;
	int m_bSplitBams;
	char m_splitBamChar;
	int m_translucent;
	int m_renderWeapons;
	int m_weaponLeftHand;
	char m_bDetectedByInfravision;
	int m_bCanLieDown;
	int m_bPathSmooth;
	char m_currentShootSplit;
};

/* 5238 */
struct __cppobj CGameEffectContingencyInstance : CGameEffect
{
};

/* 5239 */
struct __cppobj __declspec(align(4)) CMessageUpdateScript : CMessage
{
	CResRef m_resref;
	__int16 m_level;
};

/* 5240 */
struct __cppobj CGameEffectSevenEyesRun : CGameEffect
{
};

/* 5241 */
struct __cppobj CGameEffectStun : CGameEffect
{
};

/* 5242 */
struct __cppobj __declspec(align(4)) CMessageSetForceActionPick : CMessage
{
	char m_bOpenDoor;
};

/* 5243 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterIcewind : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_a1VidCellBase;
	CVidCell m_a1VidCellExtend;
	CVidCell m_a2VidCellBase;
	CVidCell m_a2VidCellExtend;
	CVidCell m_a3VidCellBase;
	CVidCell m_a3VidCellExtend;
	CVidCell m_shVidCellBase;
	CVidCell m_shVidCellExtend;
	CVidCell m_awVidCellBase;
	CVidCell m_awVidCellExtend;
	CVidCell m_slVidCellBase;
	CVidCell m_slVidCellExtend;
	CVidCell m_deVidCellBase;
	CVidCell m_deVidCellExtend;
	CVidCell m_daVidCellBase;
	CVidCell m_daVidCellExtend;
	CVidCell m_paVidCellBase;
	CVidCell m_paVidCellExtend;
	CVidCell m_reVidCellBase;
	CVidCell m_reVidCellExtend;
	CVidCell m_coVidCellBase;
	CVidCell m_coVidCellExtend;
	CVidCell m_caVidCellBase;
	CVidCell m_caVidCellExtend;
	CVidCell m_twVidCellBase;
	CVidCell m_twVidCellExtend;
	CVidCell m_waVidCellBase;
	CVidCell m_waVidCellExtend;
	CVidCell *m_currentVidCellWeapon;
	CVidCell *m_currentVidCellWeaponBase;
	CVidCell *m_currentVidCellWeaponExtend;
	CVidCell m_a1VidCellWeaponBase;
	CVidCell m_a1VidCellWeaponExtend;
	CVidCell m_a2VidCellWeaponBase;
	CVidCell m_a2VidCellWeaponExtend;
	CVidCell m_a3VidCellWeaponBase;
	CVidCell m_a3VidCellWeaponExtend;
	CVidCell m_shVidCellWeaponBase;
	CVidCell m_shVidCellWeaponExtend;
	CVidCell m_awVidCellWeaponBase;
	CVidCell m_awVidCellWeaponExtend;
	CVidCell m_slVidCellWeaponBase;
	CVidCell m_slVidCellWeaponExtend;
	CVidCell m_daVidCellWeaponBase;
	CVidCell m_daVidCellWeaponExtend;
	CVidCell m_paVidCellWeaponBase;
	CVidCell m_paVidCellWeaponExtend;
	CVidCell m_reVidCellWeaponBase;
	CVidCell m_reVidCellWeaponExtend;
	CVidCell m_coVidCellWeaponBase;
	CVidCell m_coVidCellWeaponExtend;
	CVidCell m_caVidCellWeaponBase;
	CVidCell m_caVidCellWeaponExtend;
	CVidCell m_waVidCellWeaponBase;
	CVidCell m_waVidCellWeaponExtend;
	__int16 m_currentBamDirection;
	int m_bRenderWeapons;
	int m_bHideWeapons;
	int m_weaponLeftHand;
	char m_bDetectedByInfravision;
	char m_extendDirectionTest;
};

/* 5244 */
struct __cppobj CGameEffectImmunitySecondaryTypeDecrement : CGameEffect
{
};

/* 5245 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeFlying : CGameAnimationType
{
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell m_g1VidCellBase;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	char m_extendDirectionTest;
};

/* 5246 */
struct __cppobj CGameEffectShowArea : CGameEffect
{
};

/* 5247 */
struct __cppobj CGameEffectSkillTracking : CGameEffect
{
};

/* 5248 */
struct __cppobj __declspec(align(4)) HTML_LinkAtPosition_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	unsigned int x;
	unsigned int y;
	const char *pchURL;
	bool bInput;
	bool bLiveLink;
};

/* 5249 */
struct __cppobj CGameEffectFatigue : CGameEffect
{
};

/* 5250 */
struct servernetadr_t
{
	unsigned __int16 m_usConnectionPort;
	unsigned __int16 m_usQueryPort;
	unsigned int m_unIP;
};

/* 5251 */
struct __cppobj CGameEffectResistElectricity : CGameEffect
{
};

/* 5252 */
struct __cppobj __declspec(align(4)) CMessageVisibilityMapMove : CMessage
{
	char m_moveOntoList;
};

/* 5253 */
struct __cppobj CGameEffectTranslucent : CGameEffect
{
};

/* 5254 */
struct __cppobj CGameEffectFindFamiliar : CGameEffect
{
};

/* 5255 */
struct __cppobj CGameEffectCastSpell : CGameEffect
{
};

/* 5256 */
struct __cppobj CGameEffectBounceSecondaryTypeDecrement : CGameEffect
{
};

/* 5257 */
struct __cppobj CGameEffectMeleeDamageBonus : CGameEffect
{
};

/* 5258 */
struct __cppobj CGameEffectMovementRate : CGameEffect
{
};

/* 5259 */
struct __cppobj CGameEffectEndNonDetection : CGameEffect
{
};

/* 5260 */
struct __cppobj CGameEffectAC : CGameEffect
{
};

/* 5261 */
struct __cppobj CCreatureFileEquipment
{
	unsigned __int16 m_helmetItem;
	unsigned __int16 m_armorItem;
	unsigned __int16 m_shieldItem;
	unsigned __int16 m_gauntletsItem;
	unsigned __int16 m_ringLeftItem;
	unsigned __int16 m_ringRightItem;
	unsigned __int16 m_amuletItem;
	unsigned __int16 m_beltItem;
	unsigned __int16 m_bootsItem;
	unsigned __int16 m_weaponItem[4];
	unsigned __int16 m_ammoItem[4];
	unsigned __int16 m_cloakItem;
	unsigned __int16 m_miscItem[20];
	unsigned __int16 m_selectedWeapon;
	unsigned __int16 m_selectedWeaponAbility;
};

/* 5262 */
struct __cppobj CGameEffectScriptingState : CGameEffect
{
};

/* 5263 */
struct __cppobj CGameEffectSpellTrapLevelDecrement : CGameEffect
{
};

/* 5264 */
struct __cppobj CGameEffectCurseApplyEffect : CGameEffect
{
};

/* 5265 */
struct __cppobj CGameEffectMissileDamageBonus : CGameEffect
{
};

/* 5266 */
struct __cppobj CCreatureFileOffsets
{
	char m_enemyAlly;
	char m_general;
	char m_race;
	char m_class;
	char m_specifics;
	char m_gender;
	char m_specialCase[5];
	char m_alignment;
	int m_instance;
	char m_name[32];
	unsigned int m_knownSpellListOffset;
	unsigned int m_knownSpellListCount;
	unsigned int m_memorizationLevelListOffset;
	unsigned int m_memorizationLevelListCount;
	unsigned int m_memorizationSpellListOffset;
	unsigned int m_memorizationSpellListCount;
	unsigned int m_equipmentListOffset;
	unsigned int m_itemListOffset;
	unsigned int m_itemListCount;
	unsigned int m_effectListOffset;
	unsigned int m_effectListCount;
	char m_dialog[8];
};

/* 5267 */
struct __cppobj CGameEffectLore : CGameEffect
{
};

/* 5268 */
struct __cppobj CGameEffectPowerWordStun : CGameEffect
{
};

/* 5269 */
struct __cppobj CGameEffectImmunityToTimeStop : CGameEffect
{
};

/* 5270 */
struct __cppobj CPlatform
{
};

/* 5271 */
struct __cppobj CPlatform::WStringAdapter
{
	wchar_t buf[260];
	wchar_t *exBuf;
};

/* 5272 */
struct __cppobj CMessageSetLastAttacker : CMessage
{
	CAIObjectType m_lAttacker;
};

/* 5273 */
struct __cppobj CGameEffectMeleeTHAC0Bonus : CGameEffect
{
};

/* 5274 */
struct __cppobj HTML_JSConfirm_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchMessage;
};

/* 5275 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterOld : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_g2VidCellBase;
	CVidCell m_g2VidCellExtend;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	int m_translucent;
	char m_bDetectedByInfravision;
	char m_extendDirectionTest;
};

/* 5276 */
struct __cppobj __declspec(align(4)) CMessageChangeDirection : CMessage
{
	__int16 m_face;
};

/* 5277 */
struct __cppobj CGameEffectChangeStatic : CGameEffect
{
};

/* 5278 */
struct __cppobj CGameEffectNonDetection : CGameEffect
{
};

/* 5279 */
struct __cppobj CGameEffectForceSurge : CGameEffect
{
};

/* 5280 */
struct __cppobj CGameEffectSelectiveEnchantmentBonus : CGameEffect
{
};

/* 5281 */
struct __cppobj CMessageSetAreaFlag : CMessage
{
	unsigned int m_dFlag;
	int m_bSet;
};

/* 5282 */
struct __cppobj CGameJournalEntry
{
	unsigned int m_strText;
	int m_nTime;
	CGameJournalEntryFlag m_Flag;
	unsigned __int16 m_wType;
	char m_bCharacter;
	char m_nCharacterHasNotRead;
};

/* 5283 */
struct __cppobj CMessageStaticPalette : CMessage
{
	CResRef m_res;
};

/* 5284 */
struct __cppobj CMessageUpdateReaction : CMessage
{
	int m_nReaction;
};

/* 5285 */
struct __cppobj CGameEffectCheckForBerserk : CGameEffect
{
};

/* 5286 */
struct __cppobj CGameEffectRemoveHold : CGameEffect
{
};

/* 5287 */
struct __cppobj MusicPlayerRemoteToFront_t : SteamCallback_t
{
};

/* 5288 */
struct __cppobj HTML_NeedsPaint_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pBGRA;
	unsigned int unWide;
	unsigned int unTall;
	unsigned int unUpdateX;
	unsigned int unUpdateY;
	unsigned int unUpdateWide;
	unsigned int unUpdateTall;
	unsigned int unScrollX;
	unsigned int unScrollY;
	float flPageScale;
	unsigned int unPageSerial;
};

/* 5289 */
struct __cppobj HTML_ShowPopup_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
};

/* 5290 */
struct __cppobj __declspec(align(4)) CGameTemporal : CGameObject
{
	char m_visibleTerrainTable[16];
	CGameAnimation m_animation;
	int m_animationRunning;
	CPoint m_posExact;
	CPoint m_posDelta;
	__int16 m_duration;
	char m_durationFade;
	char m_collision;
	CSound m_sound;
	int m_bPermanent;
	int m_bAllowSave;
	unsigned __int16 m_projectileType;
};

/* 5291 */
struct __cppobj CGameEffectResurrect : CGameEffect
{
};

/* 5292 */
struct __cppobj HTML_FileOpenDialog_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchTitle;
	const char *pchInitialFile;
};

/* 5293 */
struct __cppobj CGameEffectExplore : CGameEffect
{
};

/* 5294 */
struct __cppobj CAreaFileCharacterEntryPoint
{
	char m_entryName[32];
	unsigned __int16 m_startX;
	unsigned __int16 m_startY;
	unsigned int m_facing;
	unsigned int m_notUsed[16];
};

/* 5295 */
struct __cppobj CGameEffectBounceSchoolDecrement : CGameEffect
{
};

/* 5296 */
struct __cppobj CGameEffectSurgeMod : CGameEffect
{
};

/* 5297 */
struct __cppobj CMessageHeartbeat : CMessage
{
};

/* 5298 */
struct __cppobj CMessageSetVariableAll : CMessage
{
	CString m_sAreaName;
	CVariable m_variable;
};

/* 5299 */
struct __cppobj CGameEffectRepeatingApplyEffect : CGameEffect
{
};

/* 5300 */
struct __cppobj __declspec(align(4)) CMessageCheckForForcedDialogEnd : CMessage
{
	char m_bOverrideAction;
};

/* 5301 */
struct __cppobj CGameEffectSummonDisable : CGameEffect
{
};

/* 5302 */
struct __cppobj CSavedGameJournalEntry
{
	unsigned int m_strEntry;
	unsigned int m_time;
	char m_chapter;
	char m_read;
	char m_type;
	char m_character;
};

/* 5303 */
struct __cppobj CGameEffectSkillPickPocket : CGameEffect
{
};

/* 5304 */
struct __cppobj CGameEffectDetectIllusion : CGameEffect
{
};

/* 5305 */
struct __cppobj CProjectileLightningBounce : CProjectileBAM
{
	int m_lifeSpan;
};

/* 5306 */
struct __cppobj CGameEffectHitPointsOnDeath : CGameEffect
{
};

/* 5307 */
struct __cppobj CGameEffectDispelSchool : CGameEffect
{
};

/* 5308 */
struct __cppobj CGameEffectIgnoreDrainDeath : CGameEffect
{
};

/* 5309 */
struct __cppobj CGameEffectDisease : CGameEffect
{
};

/* 5310 */
struct __cppobj __declspec(align(4)) CMessageSetMusic : CMessage
{
	CResRef m_sArea;
	unsigned int m_music;
	char m_slot;
};

/* 5311 */
struct __cppobj CGameEffectRetreatFrom : CGameEffect
{
};

/* 5312 */
struct __cppobj __declspec(align(4)) CMessageStartScroll : CMessage
{
	CString m_sAreaString;
	CPoint m_src;
	CPoint m_dest;
	char m_speed;
};

/* 5313 */
struct __cppobj CGameEffectSexChange : CGameEffect
{
};

/* 5314 */
struct __cppobj CGameEffectSlowPoison : CGameEffect
{
};

/* 5315 */
struct __cppobj CGameEffectContingencyStart : CGameEffect
{
};

/* 5316 */
struct __cppobj __declspec(align(4)) CProjectileChain : CProjectileBAM
{
	__int16 m_numProjectile;
	__int16 m_nDelay;
	int m_bOriginCaster;
	unsigned __int16 m_secondaryProjectileType;
	CProjectile *m_carrierProjectile;
	int m_carrierArrived;
	CAIObjectType m_targetType;
	int m_nHeight;
	__int16 m_nType;
	int m_bUseLineOfSight;
	__int16 m_nDelayCount;
};

/* 5317 */
struct __cppobj MusicPlayerWantsShuffled_t : SteamCallback_t
{
	bool m_bShuffled;
};

/* 5318 */
struct __cppobj CGameEffectMinHitPoints : CGameEffect
{
};

/* 5319 */
struct __cppobj CGameEffectProtectionCircle : CGameEffect
{
};

/* 5320 */
struct __cppobj CSavedGameHeader
{
	unsigned int m_worldTime;
	__int16 m_curFormation;
	__int16 m_quickFormations[5];
	unsigned int m_nPartyGold;
	unsigned __int16 m_nPCAreaViewed;
	unsigned __int16 m_wWeatherFlags;
	unsigned int m_partyCreatureTableOffset;
	unsigned int m_partyCreatureTableCount;
	unsigned int m_partyInventoryTableOffset;
	unsigned int m_partyInventoryTableCount;
	unsigned int m_globalCreatureTableOffset;
	unsigned int m_globalCreatureTableCount;
	unsigned int m_globalVariablesOffset;
	unsigned int m_globalVariablesCount;
	char m_currentWorldArea[8];
	unsigned int m_currentLink;
	unsigned int m_journalEntriesCount;
	unsigned int m_journalEntriesOffset;
	int m_reputation;
	char m_masterArea[8];
	unsigned int m_dwFlags;
	unsigned int m_versionNumber;
	unsigned int m_familiarsOffset;
	unsigned int m_storedLocationsOffset;
	unsigned int m_storedLocationsCount;
	unsigned int m_gameTime;
	unsigned int m_storedLocationsOffsetPocketPlane;
	unsigned int m_storedLocationsCountPocketPlane;
	unsigned int m_zoomLevel;
	char m_encounterArea[8];
	char m_worldMap[8];
	char m_campaign[8];
	unsigned int m_nFamiliarSummoner;
	char m_encounterEntry[20];
};

/* 5321 */
struct __cppobj CDialogFile_ActionScript
{
	unsigned int m_ScriptOffset;
	unsigned int m_ScriptSize;
};

/* 5322 */
struct __cppobj CGameEffectMinorGlobe : CGameEffect
{
};

/* 5323 */
struct __cppobj CPersistantEffectMove : CPersistantEffect
{
	__int16 m_type;
	int m_speed;
	CPoint m_dest;
	int m_target;
};

/* 5324 */
struct __cppobj CGameEffectRemoveRandomSpell : CGameEffect
{
};

/* 5325 */
struct __cppobj CGameEffectHitPoints : CGameEffect
{
	int m_firstCall;
};

/* 5326 */
struct __cppobj CMessageFadeColor : CMessage
{
	char m_bFadeTo;
	char m_redFade;
	char m_greenFade;
	char m_blueFade;
};

/* 5327 */
struct __cppobj CGameEffectSetTrap : CGameEffect
{
};

/* 5328 */
struct __cppobj CMessageAddClairvoyance : CMessage
{
	CPoint m_ptPosition;
	int m_nDuration;
};

/* 5329 */
struct __cppobj HTML_HorizontalScroll_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	unsigned int unScrollMax;
	unsigned int unScrollCurrent;
	float flPageScale;
	bool bVisible;
	unsigned int unPageSize;
};

/* 5330 */
struct __cppobj CMoveListEntry
{
	int m_nSpiteIndex;
	CResRef m_rAreaRes;
	CPoint m_ptDest;
	CPoint m_ptSource;
	char m_nFacing;
	int m_nDelay;
};

/* 5331 */
struct __cppobj CMessageExitStoreMode : CMessage
{
};

/* 5332 */
struct __cppobj CMessageDisplayTextRefPoint : CMessage
{
	unsigned int m_text;
	unsigned int m_textColor;
	CPoint m_point;
};

/* 5333 */
struct __cppobj CGameEffectDamageLuck : CGameEffect
{
};

/* 5334 */
struct __cppobj CGameEffectReplaceSelf : CGameEffect
{
};

/* 5335 */
struct __cppobj CDialogFile_Reply
{
	unsigned int m_Flags;
	unsigned int m_ReplyText;
	unsigned int m_JournalEntry;
	unsigned int m_ReplyConditional;
	unsigned int m_ActionScript;
	char m_LinkedObject[8];
	unsigned int m_LinkedObjectDialogEntry;
};

/* 5336 */
struct __cppobj CGameEffectCastSpellPoint : CGameEffect
{
};

/* 5337 */
struct __cppobj CGameEffectSelectiveDamageBonus : CGameEffect
{
};

/* 5338 */
struct __cppobj MusicPlayerSelectsQueueEntry_t : SteamCallback_t
{
	int nID;
};

/* 5339 */
struct __cppobj CGameEffectJumpToArea : CGameEffect
{
};

/* 5340 */
struct __cppobj CResHelper<CResArea,1010>
{
	CResArea *pRes;
	CResRef cResRef;
};

/* 5341 */
struct __cppobj CGameEffectRangeEffect : CGameEffect
{
};

/* 5342 */
struct __cppobj CMessageSetStateOverrideTime : CMessage
{
	int m_time;
};

/* 5343 */
struct __cppobj CGameEffectBounceLevel : CGameEffect
{
};

/* 5344 */
struct __cppobj CGameEffectCurePoison : CGameEffect
{
};

/* 5345 */
struct __cppobj CGameEffectMeleeEffect : CGameEffect
{
};

/* 5346 */
struct __cppobj CDeathSound
{
	int m_soundLength;
	int m_characterId;
	__int16 m_soundNum;
	int m_started;
	CAITrigger *m_pTrigger;
};

/* 5347 */
struct __cppobj CGameEffectDetectTraps : CGameEffect
{
};

/* 5348 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterLayeredSpell : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_g2VidCellBase;
	CVidCell m_g2VidCellExtend;
	CVidPalette m_charPalette;
	CVidCell *m_currentVidCellWeapon;
	CVidCell *m_currentVidCellWeaponBase;
	CVidCell *m_currentVidCellWeaponExtend;
	CVidCell m_g1VidCellWeaponBase;
	CVidCell m_g1VidCellWeaponExtend;
	CVidCell m_g2VidCellWeaponBase;
	CVidCell m_g2VidCellWeaponExtend;
	CVidPalette m_weaponPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_renderWeapons;
	int m_bHideWeapons;
	int m_weaponLeftHand;
	int m_falseColor;
	CString m_resrefWeapon[2];
	char m_bInvulnerable;
	int m_bDualAttack;
	char m_extendDirectionTest;
};

/* 5349 */
struct __cppobj CMessageAddItem : CMessage
{
	CItem m_item;
};

/* 5350 */
struct __cppobj CGameEffectRestrictEquipItemType : CGameEffect
{
};

/* 5351 */
struct __cppobj CGameAnimationTypeMonsterLayered : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_g2VidCellBase;
	CVidCell m_g2VidCellExtend;
	CVidPalette m_charPalette;
	CVidCell *m_currentVidCellWeapon;
	CVidCell *m_currentVidCellWeaponBase;
	CVidCell *m_currentVidCellWeaponExtend;
	CVidCell m_g1VidCellWeaponBase;
	CVidCell m_g1VidCellWeaponExtend;
	CVidCell m_g2VidCellWeaponBase;
	CVidCell m_g2VidCellWeaponExtend;
	CVidPalette m_weaponPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_renderWeapons;
	int m_bHideWeapons;
	int m_weaponLeftHand;
	char m_nMeleeWeaponReady;
	char m_extendDirectionTest;
	CString m_resrefWeapon[2];
};

/* 5352 */
struct __cppobj __declspec(align(4)) CMessageSetDrawPoly : CMessage
{
	__int16 m_time;
};

/* 5353 */
struct __cppobj CGameEffectResistFire : CGameEffect
{
};

/* 5354 */
struct __cppobj MusicPlayerWantsPlayPrevious_t : SteamCallback_t
{
};

/* 5355 */
struct __cppobj CGameEffectPortrait : CGameEffect
{
};

/* 5356 */
struct __cppobj CGameEffectDispelSchoolOne : CGameEffect
{
};

/* 5357 */
struct __cppobj CGameEffectIntoxication : CGameEffect
{
};

/* 5358 */
struct __cppobj __declspec(align(4)) CMessageSpawnPtActivate : CMessage
{
	char m_bActivate;
};

/* 5359 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterMulti : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_g1VidCellBase;
	CVidCell *m_g2VidCellBase;
	CVidCell *m_g3VidCellBase;
	CVidCell *m_g4VidCellBase;
	CVidCell *m_g5VidCellBase;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	CVidBitmap *m_currentNewPalette;
	int m_falseColor;
	CVidBitmap m_g1NewPalette;
	CVidBitmap m_g2NewPalette;
	CVidBitmap m_g3NewPalette;
	CVidBitmap m_g4NewPalette;
	CVidBitmap m_g5NewPalette;
	char m_extendDirectionTest;
	char m_nQuadrants;
	int m_bDoubleBlit;
	int m_bSplitBams;
	char m_splitBamChar;
	char m_splitDirectionBamChar;
};

/* 5360 */
struct __cppobj CGameAIArea : CGameAIBase
{
};

/* 5361 */
struct __cppobj CMessageStoreAddItem : CMessage
{
	CResRef m_store;
	CCreatureFileItem m_item;
	unsigned int m_storeFlags;
};

/* 5362 */
struct __cppobj CGameEffectDrainChargeFromAllItems : CGameEffect
{
};

/* 5363 */
struct __cppobj __declspec(align(2)) CMessageDisplayText : CMessage
{
	CString m_name;
	CString m_text;
	unsigned int m_nameColor;
	unsigned int m_textColor;
	int m_marker;
	char m_moveToTop;
	char m_overHead;
	char m_overrideDialogMode;
};

/* 5364 */
struct __cppobj CMessageDreamScriptResRef : CMessage
{
	CResRef m_cResRefDialog;
};

/* 5365 */
struct __cppobj CGameEffectNon_CumulativeChant : CGameEffect
{
};

/* 5366 */
struct __cppobj HTML_SearchResults_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	unsigned int unResults;
	unsigned int unCurrentMatch;
};

/* 5367 */
struct CGameID::GameID_t
{
	unsigned __int32 m_nAppID : 24;
	unsigned __int32 m_nType : 8;
	unsigned __int32 m_nModID : 32;
};

/* 5368 */
union $8B3FB55D5A78BA0608C7AB42801A9A9D
{
	unsigned __int64 m_ulGameID;
	CGameID::GameID_t m_gameID;
};

/* 5369 */
struct __cppobj CGameID
{
	$8B3FB55D5A78BA0608C7AB42801A9A9D ___u0;
};

/* 5370 */
struct __cppobj CMessageSetCurrentArea : CMessage
{
	CResRef m_cResRefDialog;
};

/* 5371 */
struct __cppobj CGameEffectApplySpell : CGameEffect
{
};

/* 5372 */
struct __cppobj CMessageMoveGlobal : CMessage
{
	CString m_sArea;
	CPoint m_ptStart;
};

/* 5373 */
struct __cppobj CGameEffectHaste2 : CGameEffect
{
};

/* 5374 */
struct __cppobj CAreaFileSoundObject
{
	char m_scriptName[32];
	unsigned __int16 m_posX;
	unsigned __int16 m_posY;
	unsigned __int16 m_range;
	char structureAlignment1[2];
	unsigned int m_pitchVariance;
	unsigned __int16 m_volumeVariance;
	unsigned __int16 m_volume;
	char m_soundObject[10][8];
	unsigned __int16 m_soundObjectNum;
	char structureAlignment2[2];
	unsigned int m_period;
	unsigned int m_periodVariance;
	unsigned int m_timeOfDayActive;
	unsigned int m_dwFlags;
	unsigned int m_notUsed[16];
};

/* 5375 */
struct __cppobj CGameEffectMissileTHAC0Bonus : CGameEffect
{
};

/* 5376 */
struct __cppobj CGameEffectNon_CumulativeAid : CGameEffect
{
};

/* 5377 */
struct __cppobj CGameEffectCastingFailure : CGameEffect
{
};

/* 5378 */
struct __cppobj CGameEffectMaze : CGameEffect
{
};

/* 5379 */
struct __cppobj CGameAreaClairvoyanceEntry
{
	CPoint m_position;
	int m_id;
	int m_timeKill;
	char *m_pVisibleTerrainTable;
	int m_charId;
	__int16 m_visRange;
	int *m_pVisMapExploredArea;
};

/* 5380 */
struct __cppobj CResHelper<CResCHR,1018>
{
	CResCHR *pRes;
	CResRef cResRef;
};

/* 5381 */
struct __cppobj CExportCharacterHeader
{
	char m_name[32];
	unsigned int m_characterOffset;
	unsigned int m_characterSize;
	__int16 m_quickWeaponsItemNum[4];
	__int16 m_quickWeaponsAbilityNum[4];
	char m_quickSpellsSpellId[3][8];
	__int16 m_quickItemsItemNum[3];
	__int16 m_quickItemsAbilityNum[3];
};

/* 5382 */
struct __cppobj __declspec(align(4)) CMessageStaticSequence : CMessage
{
	unsigned __int16 m_bSequence;
};

/* 5383 */
struct __cppobj CGameEffectSkillLockPicking : CGameEffect
{
};

/* 5384 */
struct __cppobj CAreaFileTriggerObject
{
	char m_scriptName[32];
	unsigned __int16 m_triggerType;
	unsigned __int16 m_boundingRectLeft;
	unsigned __int16 m_boundingRectTop;
	unsigned __int16 m_boundingRectRight;
	unsigned __int16 m_boundingRectBottom;
	unsigned __int16 m_pickPointCount;
	unsigned int m_pickPointStart;
	unsigned int m_triggerValue;
	unsigned int m_cursorType;
	char m_newArea[8];
	char m_newEntryPoint[32];
	unsigned int m_dwFlags;
	unsigned int m_description;
	unsigned __int16 m_trapDetectionDifficulty;
	unsigned __int16 m_trapDisarmingDifficulty;
	unsigned __int16 m_trapActivated;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_posXTrapOrigin;
	unsigned __int16 m_posYTrapOrigin;
	char m_keyType[8];
	char m_script[8];
	unsigned __int16 m_transitionWalkToX;
	unsigned __int16 m_transitionWalkToY;
	unsigned int m_notUsed[15];
};

/* 5385 */
struct __cppobj CMessageSetTimeStop : CMessage
{
	int m_time;
};

/* 5386 */
struct __cppobj CGameEffectAssassination : CGameEffect
{
};

/* 5387 */
struct __cppobj CGameEffectCureDeafness : CGameEffect
{
};

/* 5388 */
struct __cppobj CGameEffectDeafness : CGameEffect
{
};

/* 5389 */
struct __cppobj CGameEffectAddInnateAbility : CGameEffect
{
};

/* 5390 */
struct __cppobj CMessageFireProjectile : CMessage
{
	unsigned __int16 m_projectileType;
	int m_projectileTargetId;
	CPoint m_projectileTarget;
	int m_height;
};

/* 5391 */
struct __cppobj CMessageClearDialogActions : CMessage
{
};

/* 5392 */
struct __cppobj __declspec(align(4)) CMessageCutSceneModeStatus : CMessage
{
	char m_cutSceneMode;
};

/* 5393 */
struct __cppobj CGameEffectSetAIScript : CGameEffect
{
};

/* 5394 */
struct __cppobj CPersistantEffectPoison : CPersistantEffectDamage
{
};

/* 5395 */
struct __cppobj MusicPlayerWantsPlayNext_t : SteamCallback_t
{
};

/* 5396 */
struct __cppobj CGameEffectHideInShadows : CGameEffect
{
};

/* 5397 */
struct __cppobj CImmunitiesItemEquip
{
	CResRef m_res;
	unsigned int m_error;
	CGameEffect *m_pEffect;
};

/* 5398 */
struct __cppobj CAreaFile : CResHelper<CResArea,1010>
{
};

/* 5399 */
struct __cppobj CGameEffectBounceEffect : CGameEffect
{
};

/* 5400 */
struct __cppobj __declspec(align(4)) CMessageAllowDialogInterrupt : CMessage
{
	char m_cutSceneMode;
};

/* 5401 */
struct __cppobj CGameEffectResistPiercing : CGameEffect
{
};

/* 5402 */
struct __cppobj CGameEffectXP : CGameEffect
{
};

/* 5403 */
struct __cppobj CGameEffectApplySpellOnMove : CGameEffect
{
};

/* 5404 */
struct __cppobj CMessageInsertResponse : CMessage
{
	CAIResponse m_response;
	int m_checkCurrentResponse;
	int m_clearActions;
};

/* 5405 */
struct __cppobj CGameEffectTurnUndead : CGameEffect
{
};

/* 5406 */
struct __cppobj CGameEffectColorLightSolid : CGameEffect
{
};

/* 5407 */
struct __cppobj HTML_CloseBrowser_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
};

/* 5408 */
struct __cppobj CGameEffectAlignmentChange : CGameEffect
{
};

/* 5409 */
struct __cppobj CGameEffectRandomSummon : CGameEffect
{
};

/* 5410 */
struct __cppobj CGameEffectCHR : CGameEffect
{
};

/* 5411 */
struct __cppobj CGameEffectSaveVsBreath : CGameEffect
{
};

/* 5412 */
struct __cppobj CMessagePlaySoundRef : CMessage
{
	CResRef m_cResSound;
	char m_nChannel;
	char m_bPositioned;
	int m_bSendToMe;
};

/* 5413 */
struct __cppobj __declspec(align(4)) CMessageSetBanterBlockFlag : CMessage
{
	char m_cutSceneMode;
};

/* 5414 */
struct __cppobj SSavedGamePartyCreatureReferenceWrapper
{
	CSavedGamePartyCreature creature;
	char *pCreatureOffset;
};

/* 5415 */
struct __cppobj __declspec(align(4)) CMessageDisplayTextRef : CMessage
{
	unsigned int m_name;
	unsigned int m_text;
	unsigned int m_nameColor;
	unsigned int m_textColor;
	int m_marker;
	char m_moveToTop;
	unsigned int m_overHead;
	char m_overrideDialogMode;
	char m_bPlaySound;
};

/* 5416 */
struct __cppobj CGameEffectStoneToFlesh : CGameEffect
{
};

/* 5417 */
struct __cppobj CGameEffectSeeInvisible : CGameEffect
{
};

/* 5418 */
struct __cppobj CGameEffectImmunityToSpellLevel : CGameEffect
{
};

/* 5419 */
struct __cppobj CResHelper<CResBinary,1021>
{
	CResBinary *pRes;
	CResRef cResRef;
};

/* 5420 */
struct __cppobj CMessageCleanAir : CMessage
{
	CResRef m_resref;
	CResRef m_table;
};

/* 5421 */
struct __cppobj CGameEffectResistanceToPoison : CGameEffect
{
};

/* 5422 */
struct __cppobj CGameEffectLevelDrain : CGameEffect
{
};

/* 5423 */
struct __cppobj __declspec(align(4)) CMessagePartyGold : CMessage
{
	int m_gold;
	char m_bAdjustment;
	char m_bFeedback;
};

/* 5424 */
struct __cppobj CGameEffectTimeStop : CGameEffect
{
};

/* 5425 */
struct __cppobj CMessageTriggerStatus : CMessage
{
	unsigned int m_dwFlags;
	unsigned __int16 m_trapDetected;
	unsigned __int16 m_trapActivated;
};

/* 5426 */
struct __cppobj CMessageSpawnPtSpawn : CMessage
{
	CPoint m_ptFacingTowards;
};

/* 5427 */
struct __cppobj MusicPlayerRemoteWillDeactivate_t : SteamCallback_t
{
};

/* 5428 */
struct __cppobj CGameEffectDisplayString : CGameEffect
{
};

/* 5429 */
struct __cppobj CMessageStartCombatMusic : CMessage
{
};

/* 5430 */
struct __cppobj CGameAnimationTypeMonsterQuadrant : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_g1VidCellBase;
	CVidCell *m_g2VidCellBase;
	CVidCell *m_g3VidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell *m_g1VidCellExtend;
	CVidCell *m_g2VidCellExtend;
	CVidCell *m_g3VidCellExtend;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	char m_extendDirectionTest;
	char m_nQuadrants;
	int m_bCaster;
	int m_bExtendDir;
	int m_pathSmooth;
};

/* 5431 */
struct __cppobj __declspec(align(4)) CPersistantEffectBurningDeath : CPersistantEffect
{
	char m_charredDegree;
	char m_charredIncrement;
};

/* 5432 */
struct __cppobj CGameEffectDurationCasting : CGameEffect
{
};

/* 5433 */
struct __cppobj CGameEffectFeebleMindedness : CGameEffect
{
};

/* 5434 */
struct __cppobj CGameEffectPauseCaster : CGameEffect
{
};

/* 5435 */
struct __cppobj CMessageSetDialogWait : CMessage
{
	int m_wait;
	int m_waitTarget;
};

/* 5436 */
struct __cppobj CGameEffectCriticalMissSpell : CGameEffect
{
};

/* 5437 */
struct __cppobj HTML_ChangedTitle_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchTitle;
};

/* 5438 */
struct __cppobj CGameEffectGreasePool : CGameEffect
{
};

/* 5439 */
struct __cppobj CGameEffectNon_CumulativeDrawUponHolyMight : CGameEffect
{
};

/* 5440 */
struct __cppobj CGameEffectMentalSpeed : CGameEffect
{
};

/* 5441 */
struct __cppobj CGameEffectWish : CGameEffect
{
};

/* 5442 */
struct __cppobj CMessageUpdateMachineState : CMessage
{
	unsigned int m_dwFlags;
};

/* 5443 */
struct __cppobj MusicPlayerSelectsPlaylistEntry_t : SteamCallback_t
{
	int nID;
};

/* 5444 */
struct __cppobj CGameEffectPreventAISlowDown : CGameEffect
{
};

/* 5445 */
struct __cppobj CMessageUpdateStoredPartyLocations : CMessage
{
	char m_bPocketPlane;
	CTypedPtrList<CPtrList,CSavedGameStoredLocation *> m_storedLocations;
};

/* 5446 */
struct __cppobj CGameEffectFile : CResHelper<CResEffect,1016>
{
};

/* 5447 */
struct __cppobj CGameEffectNon_CumulativeLuck : CGameEffect
{
};

/* 5448 */
struct __cppobj CGameEffectVisualEffect : CGameEffect
{
};

/* 5449 */
struct __cppobj CGameEffectResistMagicCold : CGameEffect
{
};

/* 5450 */
struct __cppobj ISteamHTMLSurface
{
	ISteamHTMLSurfaceVtbl *vfptr;
};

/* 5451 */
struct ISteamHTMLSurfaceVtbl
{
	void *(__thiscall *__vecDelDtor)(ISteamHTMLSurface *this, unsigned int);
	_BYTE gap4[16];
	void (__thiscall *LoadURL)(ISteamHTMLSurface *this, unsigned int, const char *, const char *);
	void (__thiscall *SetSize)(ISteamHTMLSurface *this, unsigned int, unsigned int, unsigned int);
	void (__thiscall *StopLoad)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *Reload)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *GoBack)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *GoForward)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *AddHeader)(ISteamHTMLSurface *this, unsigned int, const char *, const char *);
	void (__thiscall *ExecuteJavascript)(ISteamHTMLSurface *this, unsigned int, const char *);
	void (__thiscall *MouseUp)(ISteamHTMLSurface *this, unsigned int, ISteamHTMLSurface::EHTMLMouseButton);
	void (__thiscall *MouseDown)(ISteamHTMLSurface *this, unsigned int, ISteamHTMLSurface::EHTMLMouseButton);
	void (__thiscall *MouseDoubleClick)(ISteamHTMLSurface *this, unsigned int, ISteamHTMLSurface::EHTMLMouseButton);
	void (__thiscall *MouseMove)(ISteamHTMLSurface *this, unsigned int, int, int);
	void (__thiscall *MouseWheel)(ISteamHTMLSurface *this, unsigned int, int);
	void (__thiscall *KeyDown)(ISteamHTMLSurface *this, unsigned int, unsigned int, ISteamHTMLSurface::EHTMLKeyModifiers);
	void (__thiscall *KeyUp)(ISteamHTMLSurface *this, unsigned int, unsigned int, ISteamHTMLSurface::EHTMLKeyModifiers);
	void (__thiscall *KeyChar)(ISteamHTMLSurface *this, unsigned int, unsigned int, ISteamHTMLSurface::EHTMLKeyModifiers);
	void (__thiscall *SetHorizontalScroll)(ISteamHTMLSurface *this, unsigned int, unsigned int);
	void (__thiscall *SetVerticalScroll)(ISteamHTMLSurface *this, unsigned int, unsigned int);
	void (__thiscall *SetKeyFocus)(ISteamHTMLSurface *this, unsigned int, bool);
	void (__thiscall *ViewSource)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *CopyToClipboard)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *PasteFromClipboard)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *Find)(ISteamHTMLSurface *this, unsigned int, const char *, bool, bool);
	void (__thiscall *StopFind)(ISteamHTMLSurface *this, unsigned int);
	void (__thiscall *GetLinkAtPosition)(ISteamHTMLSurface *this, unsigned int, int, int);
	void (__thiscall *SetCookie)(ISteamHTMLSurface *this, const char *, const char *, const char *, const char *, unsigned int, bool, bool);
	void (__thiscall *SetPageScaleFactor)(ISteamHTMLSurface *this, unsigned int, float, int, int);
	void (__thiscall *AllowStartRequest)(ISteamHTMLSurface *this, unsigned int, bool);
	void (__thiscall *JSDialogResponse)(ISteamHTMLSurface *this, unsigned int, bool);
	void (__thiscall *FileLoadDialogResponse)(ISteamHTMLSurface *this, unsigned int, const char **);
};

/* 5452 */
struct __cppobj CGameEffectSleep : CGameEffect
{
};

/* 5453 */
struct __cppobj CGameEffectIgnoreDialogPause : CGameEffect
{
};

/* 5454 */
struct __cppobj CMessageClearActions : CMessage
{
};

/* 5455 */
struct __cppobj CGameEffectPreventSpellProtectionEffects : CGameEffect
{
};

/* 5456 */
struct __cppobj CGameEffectVisualAnimationEffect : CGameEffect
{
};

/* 5457 */
struct __cppobj __declspec(align(4)) CMessageStartSong : CMessage
{
	unsigned int m_music;
	char m_slot;
};

/* 5458 */
struct __cppobj CGameEffectMovementRateModal : CGameEffect
{
};

/* 5459 */
struct __cppobj CProjectileFile : CResHelper<CResBinary,1021>
{
};

/* 5460 */
struct __cppobj CGameEffectThac0 : CGameEffect
{
};

/* 5461 */
struct __cppobj CGameEffectRest : CGameEffect
{
};

/* 5462 */
struct __cppobj CGameEffectRandomTeleport : CGameEffect
{
};

/* 5463 */
struct __cppobj CProjectileArea : CProjectileBAM
{
	CResRef m_resref;
	__int16 m_explosionRange;
	__int16 m_triggerRange;
	unsigned __int16 m_secondaryProjectile;
	__int16 m_nRepetitionCount;
	int m_bReachedDestination;
	__int16 m_nDelay;
	__int16 m_nDelayCount;
	int m_bDetonateOnlyIfTargets;
	CAIObjectType m_targetType;
	char m_fireBallType;
	int m_bSparkleExplosion;
	unsigned __int16 m_sparkleExplosionProjectile;
	int m_bDelayedTrigger;
	int m_bChunksExplosion;
	int m_checkForNonSprites;
	int m_centerBam;
	unsigned __int16 m_explodeId;
	CResRef m_explosionSound;
	char m_ringColor;
	int m_bVVCAtCenter;
	CResRef m_centerVVC;
	int m_bConeFromCaster;
	unsigned __int16 m_coneSize;
	int m_bIgnoreLOS;
	char m_portraitNum;
	int m_bResolvePortraitNum;
	int m_centerBamWait;
	int m_forceInitialWait;
	int m_oneTargetOnly;
	unsigned int m_targetCount;
	unsigned int m_hpLimit;
	unsigned int m_animationID;
	unsigned int m_animationIDStatic;
	CResRef m_fireBallSound;
	CResRef m_fireBallArea;
	CResRef m_fireBallRing;
	unsigned int m_fireBallFlags;
	unsigned __int16 m_granularity;
	unsigned __int16 m_granDivider;
	unsigned __int16 m_childCount;
	int m_bPointsInited;
	CPoint m_points[4];
};

/* 5464 */
struct __cppobj CMessageSetWorldmapAreaFlag : CMessage
{
	CResRef m_area;
	int m_value;
	int m_setreset;
};

/* 5465 */
struct __cppobj CGameEffectFamiliarBlock : CGameEffect
{
};

/* 5466 */
struct __cppobj CGameEffectUnpauseCaster : CGameEffect
{
};

/* 5467 */
struct __cppobj SteamAppInstalled_t : SteamCallback_t
{
	unsigned int m_nAppID;
};

/* 5468 */
struct __cppobj CGameEffectResistCrushing : CGameEffect
{
};

/* 5469 */
struct __cppobj CGameEffectPanic : CGameEffect
{
};

/* 5470 */
struct __cppobj CGameEffectBounceSchool : CGameEffect
{
};

/* 5471 */
struct __cppobj CGameEffectBlur : CGameEffect
{
};

/* 5472 */
struct __cppobj __declspec(align(4)) HTML_URLChanged_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchURL;
	const char *pchPostData;
	bool bIsRedirect;
	const char *pchPageTitle;
	bool bNewNavigation;
};

/* 5473 */
struct __cppobj CGameEffectSetDoNotJump : CGameEffect
{
};

/* 5474 */
struct __cppobj CBmpFile : CResHelper<CResBitmap,1>
{
};

/* 5475 */
struct __cppobj CGameSprite::GroundItem
{
	int containerID;
	int itemSlot;
	CResRef item;
	CResRef itemIcon;
	unsigned __int16 count;
	unsigned int itemFlags;
};

/* 5476 */
struct __cppobj CGameEffectLevelRestoration : CGameEffect
{
};

/* 5477 */
struct __cppobj CMessageColorReset : CMessage
{
};

/* 5478 */
struct __cppobj CWnd : CCmdTarget
{
	HWND__ *m_hWnd;
};

/* 5479 */
struct __cppobj __declspec(align(4)) CMessageReputationChange : CMessage
{
	__int16 m_deltaRep;
};

/* 5480 */
struct __cppobj CGameEffectInvisible : CGameEffect
{
};

/* 5481 */
struct __cppobj __unaligned __declspec(align(4)) gameserveritem_t
{
	servernetadr_t m_NetAdr;
	int m_nPing;
	bool m_bHadSuccessfulResponse;
	bool m_bDoNotRefresh;
	char m_szGameDir[32];
	char m_szMap[32];
	char m_szGameDescription[64];
	__declspec(align(4)) unsigned int m_nAppID;
	int m_nPlayers;
	int m_nMaxPlayers;
	int m_nBotPlayers;
	bool m_bPassword;
	bool m_bSecure;
	__declspec(align(4)) unsigned int m_ulTimeLastPlayed;
	int m_nServerVersion;
	char m_szServerName[64];
	char m_szGameTags[128];
	CSteamID m_steamID;
};

/* 5482 */
struct __cppobj CPersistantEffectApplyEffect : CPersistantEffectDamage
{
	CResRef m_res;
	CGameEffect *m_pSourceEffect;
};

/* 5483 */
struct __cppobj __declspec(align(4)) CMessageSetSound : CMessage
{
	unsigned int m_strref;
	char m_soundId;
};

/* 5484 */
struct __cppobj HTML_ShowToolTip_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchMsg;
};

/* 5485 */
struct __cppobj CGameEffectAIChange : CGameEffect
{
};

/* 5486 */
struct __cppobj CMessageSetActiveImprisonment : CMessage
{
	int m_active;
};

/* 5487 */
struct __cppobj CGameEffectKnock : CGameEffect
{
};

/* 5488 */
struct __cppobj CGameEffectProficiency : CGameEffect
{
};

/* 5489 */
struct __cppobj CGameEffectRestrictEquipItem : CGameEffect
{
};

/* 5490 */
struct __cppobj CGameEffectPowerWordSleep : CGameEffect
{
};

/* 5491 */
struct __cppobj CGameEffectBackStabSpell : CGameEffect
{
};

/* 5492 */
struct __cppobj CGameEffectConfusion : CGameEffect
{
};

/* 5493 */
struct __cppobj CGameEffectImmunitySchool : CGameEffect
{
};

/* 5494 */
struct __cppobj CGameEffectPowerWordKill : CGameEffect
{
};

/* 5495 */
struct __cppobj CMessageSetActive : CMessage
{
	int m_active;
};

/* 5496 */
struct __cppobj CGameEffectDispelInvisible : CGameEffect
{
};

/* 5497 */
struct __cppobj CMessageFireSpell : CMessage
{
	CString m_dialogRes;
	int m_NPCId;
};

/* 5498 */
struct __cppobj MusicPlayerWantsPlay_t : SteamCallback_t
{
};

/* 5499 */
struct __cppobj __declspec(align(4)) CMessageSetRestEncounterProbability : CMessage
{
	CResRef m_sArea;
	char m_prob;
	char m_bDayProb;
};

/* 5500 */
struct __cppobj CGameEffectDetectAlignment : CGameEffect
{
};

/* 5501 */
struct __cppobj CGameEffectDestroySelf : CGameEffect
{
};

/* 5502 */
struct __cppobj CGameEffectResistAcid : CGameEffect
{
};

/* 5503 */
struct __cppobj CGameEffectCastingGlow : CGameEffect
{
};

/* 5504 */
struct __cppobj CVidDrawable
{
	int texType;
	void *tex;
};

/* 5505 */
struct __cppobj CGameEffectSingleColorPulseAll : CGameEffect
{
};

/* 5506 */
struct __cppobj CMessageReplaceItem : CMessage
{
	CItem m_item;
	CResRef m_cRes;
};

/* 5507 */
struct __cppobj SAreaFileCreatureWrapper
{
	CAreaFileCreature *creature;
	char *pCreatureOffset;
};

/* 5508 */
struct __cppobj CGameEffectSavingThrowChange : CGameEffect
{
};

/* 5509 */
struct __cppobj CGameEffectBlindness : CGameEffect
{
};

/* 5510 */
struct __cppobj CGameEffectAwaken : CGameEffect
{
};

/* 5511 */
struct __cppobj CFeedbackEntry
{
	unsigned __int16 feedBackId;
	int int1;
	int int2;
	int int3;
	unsigned int ref1;
	int int4;
	CString stringIn;
};

/* 5512 */
struct __cppobj __declspec(align(4)) CGameAnimationTypeMonsterLarge16 : CGameAnimationType
{
	CString m_resref;
	CVidCell *m_currentVidCell;
	CVidCell *m_currentVidCellBase;
	CVidCell *m_currentVidCellExtend;
	CVidCell m_g1VidCellBase;
	CVidCell m_g1VidCellExtend;
	CVidCell m_g2VidCellBase;
	CVidCell m_g2VidCellExtend;
	CVidCell m_g3VidCellBase;
	CVidCell m_g3VidCellExtend;
	CVidPalette m_charPalette;
	__int16 m_currentBamSequence;
	__int16 m_currentBamDirection;
	int m_falseColor;
	char m_extendDirectionTest;
};

/* 5513 */
struct __cppobj CGameEffectUnstun : CGameEffect
{
};

/* 5514 */
struct __cppobj CGameEffectReplaceItem : CGameEffect
{
};

/* 5515 */
struct __cppobj __declspec(align(4)) CMessageSetCommandPause : CMessage
{
	__int16 m_commandPause;
};

/* 5516 */
struct __cppobj CGameEffectHeal : CGameEffect
{
};

/* 5517 */
struct __cppobj CGameEffectUseAnyItem : CGameEffect
{
};

/* 5518 */
struct __cppobj CMessageForcePosition : CMessage
{
	CPoint m_face;
};

/* 5519 */
struct __cppobj HTML_StatusText_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchMsg;
};

/* 5520 */
struct __cppobj CGameEffectDisableCircle : CGameEffect
{
};

/* 5521 */
struct __cppobj __declspec(align(4)) CMessageSetSequence : CMessage
{
	char m_sequence;
};

/* 5522 */
struct __cppobj CGameEffectDefrost : CGameEffect
{
};

/* 5523 */
struct __cppobj CGameEffectSaveVsPoly : CGameEffect
{
};

/* 5524 */
struct __cppobj CCharacterFile : CResHelper<CResCHR,1018>
{
};

/* 5525 */
struct __cppobj CGameEffectSTR : CGameEffect
{
};

/* 5526 */
struct __cppobj CMessageLeaveParty : CMessage
{
};

/* 5527 */
struct __cppobj HTML_NewWindow_t : SteamCallback_t
{
	unsigned int unBrowserHandle;
	const char *pchURL;
	unsigned int unX;
	unsigned int unY;
	unsigned int unWide;
	unsigned int unTall;
};

/* 5528 */
struct Marker
{
	const char *src;
	int start;
	int count;
	int line;
};

/* 5529 */
struct uiMenu
{
	Marker menuSrc;
	const char *name;
	int panel;
	int state;
	uiItem *items;
	uiVariant *modal;
	uiVariant *opacity;
	uiVariant *greyscale;
	int onOpen;
	int onClose;
	SDL_Point offset;
	int ha;
	int va;
	int width;
	int height;
	int enabled;
	int ignoreEsc;
};

/* 5532 */
struct $689E23378C7FE1EB19B7DBBFF875D801
{
	const char *originalText;
	uiVariant *text;
	const char *font;
	int point;
	int useFontZoom;
	uiVariant *color;
	int upper;
	int lower;
	uiVariant *shadow;
	uiVariant *showhighlight;
};

/* 5534 */
struct $4360276BAF59D70CA20351856724A8D0
{
	uiItem *item;
};

/* 5535 */
struct $D56D43AD1D8719C2B71876F6CB0C9760
{
	uiVariant *resref;
	uiVariant *sequence;
	uiVariant *sequenceonce;
	uiVariant *frame;
	uiVariant *greyscale;
	uiVariant *usealpha;
	int scaletoclip;
};

/* 5536 */
struct $149950653D3AB4F210FF288653FC966E
{
	int resname;
	uiVariant *resref;
	SDL_Rect area;
};

/* 5538 */
struct $FD27F9DE68EFE8767691377C2402DC29
{
	int table;
	int printrow;
	int rowheight;
	int rowwidth;
	uiVariant *rowbackground;
	int dynamicHeight;
	uiColumn *columns;
	int category;
	int showHighlight;
	int seperator;
	int selected;
	int height;
	uiVariant *color;
	int currentRow;
};

/* 5539 */
struct $B822BBE49BAB87FC4BA72BA52476BC21
{
	const char *bam;
	const char *function;
	uiVariant *hide;
	int top;
	int held;
	int dragging;
	int contentHeight;
	int respectConstraints;
	int clunkyScroll;
	int skipReset;
};

/* 5540 */
struct $307A016A638ED803D686099E1B8191DF
{
	const char *position;
	uiVariant *settings;
	int palette;
	const char *background;
	int right;
};

/* 5541 */
struct $B8CB0B951EA8B4F6F0964D5AE145003A
{
	const char *var;
	int maxlines;
	int maxchars;
	uiVariant *placeholder;
	int cursor;
	int selectStart;
	int selectEnd;
};

/* 5542 */
struct $B190CC1A7FB49843DC77BE3ADCAC32FE
{
	uiVariant *resref;
	int respectClipping;
};

/* 5543 */
struct $407C79F9564941C3B10F04C2EACB7C9F
{
	void *res;
	SDL_Rect subtitle;
	int transparent;
	unsigned int background;
	int loop;
	uiVariant *queuedMovie;
};

/* 5544 */
struct $CAB8D413330E04B0DBCD14694193FC4C
{
	uiVariant *portrait;
	uiVariant *paperdoll;
	int encumbrance;
	int colorDisplay;
	int frameTimes;
	const char *toggle;
	const char *on;
	const char *highlightGroup;
	uiVariant *clickable;
	uiVariant *actionBar;
	const char *sound;
};

/* 5545 */
struct $4C203C387716D01082498DACB41399B7
{
	int type;
};

/* 5546 */
struct $340A6FFA0D99E07423749829FA689E79
{
	uiVariant *percent;
	uiVariant *color;
	uiVariant *fullColor;
};

/* 5547 */
struct $B9E2FE30F69378FE331D4807F7571EDD
{
	uiVariant *icon;
	uiVariant *count;
	uiVariant *usages;
	uiVariant *highlight;
	uiVariant *tint;
};

/* 5548 */
struct $F32365863468566D6BAE41976A62E4E6
{
	int number;
	uiVariant *opacity;
};

/* 5549 */
struct $3780B4BA9C321AA2DFA13544C66CD0D3
{
	const char *originalText;
	uiVariant *text;
	uiVariant *force;
	int position;
	int forceTop;
};

/* 5533 */
struct uiItem
{
	uiItemType type;
	uiMenu *menu;
	const char *name;
	int instanceId;
	const char *templateName;
	Marker areaSrc;
	SDL_Rect area;
	SDL_Rect pad;
	int enabled;
	int ignoreEvents;
	int ha;
	int va;
	uiVariant *alpha;
	uiVariant *fill;
	int useOverlayTint;
	int overlayTint[3];
	$689E23378C7FE1EB19B7DBBFF875D801 text;
	$4360276BAF59D70CA20351856724A8D0 uiTemplate;
	$D56D43AD1D8719C2B71876F6CB0C9760 bam;
	$149950653D3AB4F210FF288653FC966E bmp;
	$FD27F9DE68EFE8767691377C2402DC29 list;
	$B822BBE49BAB87FC4BA72BA52476BC21 scrollbar;
	$307A016A638ED803D686099E1B8191DF slider;
	$B8CB0B951EA8B4F6F0964D5AE145003A edit;
	$B190CC1A7FB49843DC77BE3ADCAC32FE mosaic;
	$407C79F9564941C3B10F04C2EACB7C9F movie;
	$CAB8D413330E04B0DBCD14694193FC4C button;
	$4C203C387716D01082498DACB41399B7 map;
	$340A6FFA0D99E07423749829FA689E79 progressBar;
	$B9E2FE30F69378FE331D4807F7571EDD slot;
	$F32365863468566D6BAE41976A62E4E6 rectangle;
	int action;
	int actionDbl;
	int actionAlt;
	int actionDrag;
	int actionEnter;
	int actionExit;
	int actionUpdate;
	int actionSimpleDrag;
	int actionSimpleDrop;
	int actionHold;
	int actionScroll;
	int framesHeld;
	$3780B4BA9C321AA2DFA13544C66CD0D3 tooltip;
	uiVariant *glow;
	uiVariant *pulse;
	uiItem *next;
};

/* 5530 */
union $3115DAD0F2F06644FD216D21C529EEF1
{
	int intVal;
	const char *strVal;
	float floatVal;
	int luaFunc;
};

/* 5531 */
struct uiVariant
{
	uiVariantType type;
	$3115DAD0F2F06644FD216D21C529EEF1 value;
};

/* 5537 */
struct uiColumn
{
	uiVariant *width;
	uiItem *items;
	uiColumn *next;
};

/* 5550 */
struct $CC14BA8CF34E8D2DB95126E5968587AC
{
	bool (__cdecl *f)(uiMenu *, SDL_Rect *, SDL_Event *);
	SDL_Point start;
	uiItem *item;
	uiMenu *m;
	bool exited;
	char icon[8];
	SDL_Rect dragPos;
	int count;
	int usages;
};

/* 5551 */
struct __declspec(align(4)) $60A0793F980B56FE66638109D9C3D308
{
	SDL_Point pt;
	bool on;
	const char *text;
	SDL_Rect r;
	int count;
	const char *lastText;
	bool playedSound;
};

/* 5552 */
struct $FF54BB2ABC8D49B86A9F3C1823D07F42
{
	int state;
	int opacity;
	uiMenu *prevMenu;
	uiMenu *newMenu;
};

/* 5553 */
struct forcedTooltip
{
	uiItem *current;
	SDL_Rect r;
	forcedTooltip *next;
	int alpha;
};

/* 5554 */
struct slicedRect
{
	SDL_Rect tl;
	SDL_Rect t;
	SDL_Rect tr;
	SDL_Rect r;
	SDL_Rect br;
	SDL_Rect b;
	SDL_Rect bl;
	SDL_Rect l;
	SDL_Rect c;
	SDL_Point d;
	const char *name;
	int flags;
};

/* 5555 */
struct keyword
{
	const char *name;
	int tt;
};

/* 5556 */
struct $6B279AA1C7A281E7C97E085DB9F2DFBB
{
	__int32 move : 1;
	__int32 left : 1;
	__int32 right : 1;
	__int32 top : 1;
	__int32 bottom : 1;
};

/* 5557 */
union $1488B22D77CBBFE9F6851F1FAB25FF19
{
	$6B279AA1C7A281E7C97E085DB9F2DFBB __s0;
	int all;
};

/* 5558 */
struct $001E37076AB68268DDDA79A6C8E37B28
{
	$1488B22D77CBBFE9F6851F1FAB25FF19 selected;
	SDL_Rect mouseOver;
};

/* 5559 */
struct $7A6C2B7BC9C7BD01D358EAEA448300EF
{
	bool (__cdecl *f)(uiMenu *, SDL_Rect *, SDL_Event *);
	SDL_Point start;
	uiItem *item;
	uiMenu *m;
	$001E37076AB68268DDDA79A6C8E37B28 editor;
};

/* 5560 */
struct ParserContext
{
	int lineNumber;
	const char *src;
};

/* 5561 */
struct FindListRowCallbackData
{
	int yCurrent;
	int yTarget;
	int index;
};

/* 5562 */
struct RenderListCallbackData
{
	int rowNum;
	int y;
	int x;
	int alpha;
	uiItem *item;
	SDL_Rect r;
	int border;
	SDL_Rect rClip;
	void *f;
	int contentHeight;
	uiMenu *m;
};

/* 5563 */
struct __cppobj CIcon
{
};

/* 5564 */
struct __cppobj CDLC
{
	CString name;
	CString image;
	int title;
	int description;
	CString ios_name;
	int purchased;
	CString android_name;
};

/* 5565 */
struct __cppobj CDLC_Content
{
	CString name;
	int dlc_id;
};

/* 5566 */
struct __cppobj DisplaySubtitlesCallbackData
{
	CResWebm *pMovie;
	CVidFont *vidFont;
	CString movie;
	int frame;
	CRect *rect;
};

/* 5567 */
struct __cppobj COverridePath
{
	CString path;
	int priority;
};

/* 5568 */
struct $EE2C3FDDDEEB0B62108FE0A2E9EB4062
{
	char lhs;
	char nrhs;
};

/* 5569 */
const struct $7199811F1DD33E752821FFAFA59AE781
{
	char lhs;
	char nrhs;
};

/* 5570 */
union YYMINORTYPE
{
	int yyinit;
	Token *yy0;
	int yy132;
	uiItem *yy176;
	uiMenu *yy182;
	uiVariant *yy230;
	uiColumn *yy239;
};

/* 5571 */
struct yyStackEntry
{
	unsigned __int16 stateno;
	char major;
	YYMINORTYPE minor;
};

/* 5572 */
struct yyParser
{
	int yyidx;
	int yyerrcnt;
	ParserContext *ctx;
	yyStackEntry yystack[100];
};

/* 5573 */
struct tagEMR
{
	unsigned int iType;
	unsigned int nSize;
};

/* 5574 */
struct _RECTL
{
	int left;
	int top;
	int right;
	int bottom;
};

/* 5575 */
struct _POINTL
{
	int x;
	int y;
};

/* 5576 */
struct tagEMRPOLYLINE
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cptl;
	_POINTL aptl[1];
};

/* 5577 */
struct tagXFORM
{
	float eM11;
	float eM12;
	float eM21;
	float eM22;
	float eDx;
	float eDy;
};

/* 5578 */
struct tagEMRTRANSPARENTBLT
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int cxDest;
	int cyDest;
	unsigned int dwRop;
	int xSrc;
	int ySrc;
	tagXFORM xformSrc;
	unsigned int crBkColorSrc;
	unsigned int iUsageSrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	int cxSrc;
	int cySrc;
};

/* 5579 */
struct _SERVICE_PRESHUTDOWN_INFO
{
	unsigned int dwPreshutdownTimeout;
};

/* 5580 */
struct _TAPE_SET_DRIVE_PARAMETERS
{
	char ECC;
	char Compression;
	char DataPadding;
	char ReportSetmarks;
	unsigned int EOTWarningZoneSize;
};

/* 5581 */
struct tagCBTACTIVATESTRUCT
{
	int fMouse;
	HWND__ *hWndActive;
};

/* 5582 */
struct _NETRESOURCEW
{
	unsigned int dwScope;
	unsigned int dwType;
	unsigned int dwDisplayType;
	unsigned int dwUsage;
	wchar_t *lpLocalName;
	wchar_t *lpRemoteName;
	wchar_t *lpComment;
	wchar_t *lpProvider;
};

/* 5583 */
struct _QUERY_SERVICE_CONFIGA
{
	unsigned int dwServiceType;
	unsigned int dwStartType;
	unsigned int dwErrorControl;
	char *lpBinaryPathName;
	char *lpLoadOrderGroup;
	unsigned int dwTagId;
	char *lpDependencies;
	char *lpServiceStartName;
	char *lpDisplayName;
};

/* 5584 */
struct _TOKEN_PRIMARY_GROUP
{
	void *PrimaryGroup;
};

/* 5585 */
struct PPM_IDLE_STATE_ACCOUNTING
{
	unsigned int IdleTransitions;
	unsigned int FailedTransitions;
	unsigned int InvalidBucketIndex;
	unsigned __int64 TotalTime;
	unsigned int IdleTimeBuckets[6];
};

/* 5586 */
struct $2ACC251678A70CC660B42C50BE23747A
{
	void *hMem;
	unsigned int dwReserved[3];
};

/* 5587 */
struct $03A236B16FC15461493BD6ADF5082600
{
	unsigned int dwCommittedSize;
	unsigned int dwUnCommittedSize;
	void *lpFirstBlock;
	void *lpLastBlock;
};

/* 5588 */
union $2D511BF594404D6A3FA44A47C1116980
{
	$2ACC251678A70CC660B42C50BE23747A Block;
	$03A236B16FC15461493BD6ADF5082600 Region;
};

/* 5589 */
struct _PROCESS_HEAP_ENTRY
{
	void *lpData;
	unsigned int cbData;
	char cbOverhead;
	char iRegionIndex;
	unsigned __int16 wFlags;
	$2D511BF594404D6A3FA44A47C1116980 ___u5;
};

/* 5590 */
struct tagEMREOF
{
	tagEMR emr;
	unsigned int nPalEntries;
	unsigned int offPalEntries;
	unsigned int nSizeLast;
};

/* 5591 */
struct _MEMORY_BASIC_INFORMATION64
{
	unsigned __int64 BaseAddress;
	unsigned __int64 AllocationBase;
	unsigned int AllocationProtect;
	unsigned int __alignment1;
	unsigned __int64 RegionSize;
	unsigned int State;
	unsigned int Protect;
	unsigned int Type;
	unsigned int __alignment2;
};

/* 5592 */
struct _ACCESS_REASONS
{
	unsigned int Data[32];
};

/* 5593 */
struct _LUID
{
	unsigned int LowPart;
	int HighPart;
};

/* 5594 */
struct _LUID_AND_ATTRIBUTES
{
	_LUID Luid;
	unsigned int Attributes;
};

/* 5595 */
struct _PRIVILEGE_SET
{
	unsigned int PrivilegeCount;
	unsigned int Control;
	_LUID_AND_ATTRIBUTES Privilege[1];
};

/* 5596 */
struct _SE_ACCESS_REPLY
{
	unsigned int Size;
	unsigned int ResultListCount;
	unsigned int *GrantedAccess;
	unsigned int *AccessStatus;
	_ACCESS_REASONS *AccessReason;
	_PRIVILEGE_SET **Privileges;
};

/* 5597 */
struct PPM_PERFSTATE_EVENT
{
	unsigned int State;
	unsigned int Status;
	unsigned int Latency;
	unsigned int Speed;
	unsigned int Processor;
};

/* 5598 */
struct _PROCESSOR_POWER_POLICY_INFO
{
	unsigned int TimeCheck;
	unsigned int DemoteLimit;
	unsigned int PromoteLimit;
	char DemotePercent;
	char PromotePercent;
	char Spare[2];
	unsigned __int32 AllowDemotion : 1;
	unsigned __int32 AllowPromotion : 1;
	unsigned __int32 Reserved : 30;
};

/* 5599 */
struct _PROCESSOR_POWER_POLICY
{
	unsigned int Revision;
	char DynamicThrottle;
	char Spare[3];
	unsigned __int32 DisableCStates : 1;
	unsigned __int32 Reserved : 31;
	unsigned int PolicyCount;
	_PROCESSOR_POWER_POLICY_INFO Policy[3];
};

/* 5600 */
struct _RTL_SRWLOCK
{
	void *Ptr;
};

/* 5601 */
struct tagTOGGLEKEYS
{
	unsigned int cbSize;
	unsigned int dwFlags;
};

/* 5602 */
struct _EXCEPTION_RECORD
{
	unsigned int ExceptionCode;
	unsigned int ExceptionFlags;
	_EXCEPTION_RECORD *ExceptionRecord;
	void *ExceptionAddress;
	unsigned int NumberParameters;
	unsigned int ExceptionInformation[15];
};

/* 5603 */
struct DISPLAYCONFIG_SOURCE_MODE
{
	unsigned int width;
	unsigned int height;
	DISPLAYCONFIG_PIXELFORMAT pixelFormat;
	_POINTL position;
};

/* 5604 */
struct __cppobj _Real_type<long double>
{
};

/* 5605 */
struct tagEMRARC
{
	tagEMR emr;
	_RECTL rclBox;
	_POINTL ptlStart;
	_POINTL ptlEnd;
};

/* 5606 */
struct tagNMHDR
{
	HWND__ *hwndFrom;
	unsigned int idFrom;
	unsigned int code;
};

/* 5607 */
struct tagLOGFONTW
{
	int lfHeight;
	int lfWidth;
	int lfEscapement;
	int lfOrientation;
	int lfWeight;
	char lfItalic;
	char lfUnderline;
	char lfStrikeOut;
	char lfCharSet;
	char lfOutPrecision;
	char lfClipPrecision;
	char lfQuality;
	char lfPitchAndFamily;
	wchar_t lfFaceName[32];
};

/* 5608 */
struct tagICONMETRICSW
{
	unsigned int cbSize;
	int iHorzSpacing;
	int iVertSpacing;
	int iTitleWrap;
	tagLOGFONTW lfFont;
};

/* 5609 */
struct _currencyfmtA
{
	unsigned int NumDigits;
	unsigned int LeadingZero;
	unsigned int Grouping;
	char *lpDecimalSep;
	char *lpThousandSep;
	unsigned int NegativeOrder;
	unsigned int PositiveOrder;
	char *lpCurrencySymbol;
};

/* 5610 */
struct val_context
{
	int valuelen;
	void *value_context;
	void *val_buff_ptr;
};

/* 5611 */
struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
	unsigned int ulAssemblyIndex;
	unsigned int ulFileIndexInAssembly;
};

/* 5612 */
struct __cppobj CGameJournalAlphabetizer
{
	CGameJournalEntry *pEntry;
	CString stText;
};

/* 5613 */
struct SDL_MessageBoxButtonData
{
	unsigned int flags;
	int buttonid;
	const char *text;
};

/* 5614 */
struct SDL_MessageBoxColor
{
	char r;
	char g;
	char b;
};

/* 5615 */
struct SDL_MessageBoxColorScheme
{
	SDL_MessageBoxColor colors[5];
};

/* 5616 */
struct SDL_MessageBoxData
{
	unsigned int flags;
	SDL_Window *window;
	const char *title;
	const char *message;
	int numbuttons;
	SDL_MessageBoxButtonData *buttons;
	SDL_MessageBoxColorScheme *colorScheme;
};

/* 5617 */
struct __declspec(align(4)) tagRAWHID
{
	unsigned int dwSizeHid;
	unsigned int dwCount;
	char bRawData[1];
};

/* 5618 */
struct _OSVERSIONINFOEXW
{
	unsigned int dwOSVersionInfoSize;
	unsigned int dwMajorVersion;
	unsigned int dwMinorVersion;
	unsigned int dwBuildNumber;
	unsigned int dwPlatformId;
	wchar_t szCSDVersion[128];
	unsigned __int16 wServicePackMajor;
	unsigned __int16 wServicePackMinor;
	unsigned __int16 wSuiteMask;
	char wProductType;
	char wReserved;
};

/* 5619 */
struct _DCB
{
	unsigned int DCBlength;
	unsigned int BaudRate;
	unsigned __int32 fBinary : 1;
	unsigned __int32 fParity : 1;
	unsigned __int32 fOutxCtsFlow : 1;
	unsigned __int32 fOutxDsrFlow : 1;
	unsigned __int32 fDtrControl : 2;
	unsigned __int32 fDsrSensitivity : 1;
	unsigned __int32 fTXContinueOnXoff : 1;
	unsigned __int32 fOutX : 1;
	unsigned __int32 fInX : 1;
	unsigned __int32 fErrorChar : 1;
	unsigned __int32 fNull : 1;
	unsigned __int32 fRtsControl : 2;
	unsigned __int32 fAbortOnError : 1;
	unsigned __int32 fDummy2 : 17;
	unsigned __int16 wReserved;
	unsigned __int16 XonLim;
	unsigned __int16 XoffLim;
	char ByteSize;
	char Parity;
	char StopBits;
	char XonChar;
	char XoffChar;
	char ErrorChar;
	char EofChar;
	char EvtChar;
	unsigned __int16 wReserved1;
};

/* 5620 */
struct __declspec(align(4)) _COMMCONFIG
{
	unsigned int dwSize;
	unsigned __int16 wVersion;
	unsigned __int16 wReserved;
	_DCB dcb;
	unsigned int dwProviderSubType;
	unsigned int dwProviderOffset;
	unsigned int dwProviderSize;
	wchar_t wcProviderData[1];
};

/* 5621 */
struct tagPALETTEENTRY
{
	char peRed;
	char peGreen;
	char peBlue;
	char peFlags;
};

/* 5622 */
struct tagPANOSE
{
	char bFamilyType;
	char bSerifStyle;
	char bWeight;
	char bProportion;
	char bContrast;
	char bStrokeVariation;
	char bArmStyle;
	char bLetterform;
	char bMidline;
	char bXHeight;
};

/* 5623 */
struct __declspec(align(4)) tagEXTLOGFONTW
{
	tagLOGFONTW elfLogFont;
	wchar_t elfFullName[64];
	wchar_t elfStyle[32];
	unsigned int elfVersion;
	unsigned int elfStyleSize;
	unsigned int elfMatch;
	unsigned int elfReserved;
	char elfVendorId[4];
	unsigned int elfCulture;
	tagPANOSE elfPanose;
};

/* 5624 */
struct tagEMREXTCREATEFONTINDIRECTW
{
	tagEMR emr;
	unsigned int ihFont;
	tagEXTLOGFONTW elfw;
};

/* 5625 */
struct _SID_IDENTIFIER_AUTHORITY
{
	char Value[6];
};

/* 5626 */
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
	unsigned int TimeDateStamp;
	unsigned __int16 OffsetModuleName;
	unsigned __int16 NumberOfModuleForwarderRefs;
};

/* 5627 */
struct tagEMROFFSETCLIPRGN
{
	tagEMR emr;
	_POINTL ptlOffset;
};

/* 5628 */
struct tagSCROLLINFO
{
	unsigned int cbSize;
	unsigned int fMask;
	int nMin;
	int nMax;
	unsigned int nPage;
	int nPos;
	int nTrackPos;
};

/* 5629 */
struct tagREGISTERWORDW
{
	wchar_t *lpReading;
	wchar_t *lpWord;
};

/* 5630 */
struct _KCRM_MARSHAL_HEADER
{
	unsigned int VersionMajor;
	unsigned int VersionMinor;
	unsigned int NumProtocols;
	unsigned int Unused;
};

/* 5631 */
struct tagPOLYTEXTA
{
	int x;
	int y;
	unsigned int n;
	const char *lpstr;
	unsigned int uiFlags;
	tagRECT rcl;
	int *pdx;
};

/* 5632 */
struct tagEMRSELECTOBJECT
{
	tagEMR emr;
	unsigned int ihObject;
};

/* 5633 */
struct __declspec(align(4)) tagEMRPOLYDRAW
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cptl;
	_POINTL aptl[1];
	char abTypes[1];
};

/* 5634 */
struct tagCOPYDATASTRUCT
{
	unsigned int dwData;
	unsigned int cbData;
	void *lpData;
};

/* 5635 */
struct tagREGISTERWORDA
{
	char *lpReading;
	char *lpWord;
};

/* 5636 */
struct _IMAGE_BOUND_FORWARDER_REF
{
	unsigned int TimeDateStamp;
	unsigned __int16 OffsetModuleName;
	unsigned __int16 Reserved;
};

/* 5637 */
struct tagMINMAXINFO
{
	tagPOINT ptReserved;
	tagPOINT ptMaxSize;
	tagPOINT ptMaxPosition;
	tagPOINT ptMinTrackSize;
	tagPOINT ptMaxTrackSize;
};

/* 5638 */
struct _SERVICE_TABLE_ENTRYW
{
	wchar_t *lpServiceName;
	void (__stdcall *lpServiceProc)(unsigned int, wchar_t **);
};

/* 5639 */
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
	unsigned int EndOfJobTimeAction;
};

/* 5640 */
struct tagDEBUGHOOKINFO
{
	unsigned int idThread;
	unsigned int idThreadInstaller;
	int lParam;
	unsigned int wParam;
	int code;
};

/* 5641 */
struct HRAWINPUT__
{
	int unused;
};

/* 5642 */
struct SDL_OSEvent
{
	unsigned int type;
	unsigned int timestamp;
};

/* 5643 */
struct tagWINDOWINFO
{
	unsigned int cbSize;
	tagRECT rcWindow;
	tagRECT rcClient;
	unsigned int dwStyle;
	unsigned int dwExStyle;
	unsigned int dwWindowStatus;
	unsigned int cxWindowBorders;
	unsigned int cyWindowBorders;
	unsigned __int16 atomWindowType;
	unsigned __int16 wCreatorVersion;
};

/* 5644 */
struct tagRGBTRIPLE
{
	char rgbtBlue;
	char rgbtGreen;
	char rgbtRed;
};

/* 5645 */
struct tagEMRSELECTCLIPPATH
{
	tagEMR emr;
	unsigned int iMode;
};

/* 5646 */
struct _COMSTAT
{
	unsigned __int32 fCtsHold : 1;
	unsigned __int32 fDsrHold : 1;
	unsigned __int32 fRlsdHold : 1;
	unsigned __int32 fXoffHold : 1;
	unsigned __int32 fXoffSent : 1;
	unsigned __int32 fEof : 1;
	unsigned __int32 fTxim : 1;
	unsigned __int32 fReserved : 25;
	unsigned int cbInQue;
	unsigned int cbOutQue;
};

/* 5647 */
struct __unaligned __declspec(align(2)) DLGITEMTEMPLATE
{
	unsigned int style;
	unsigned int dwExtendedStyle;
	__int16 x;
	__int16 y;
	__int16 cx;
	__int16 cy;
	unsigned __int16 id;
};

/* 5648 */
struct _TOKEN_SOURCE
{
	char SourceName[8];
	_LUID SourceIdentifier;
};

/* 5649 */
struct _TOKEN_CONTROL
{
	_LUID TokenId;
	_LUID AuthenticationId;
	_LUID ModifiedId;
	_TOKEN_SOURCE TokenSource;
};

/* 5650 */
struct _DISPLAY_DEVICEW
{
	unsigned int cb;
	wchar_t DeviceName[32];
	wchar_t DeviceString[128];
	unsigned int StateFlags;
	wchar_t DeviceID[128];
	wchar_t DeviceKey[128];
};

/* 5651 */
struct tagABORTPATH
{
	tagEMR emr;
};

/* 5652 */
struct _COORD
{
	__int16 X;
	__int16 Y;
};

/* 5653 */
struct _SMALL_RECT
{
	__int16 Left;
	__int16 Top;
	__int16 Right;
	__int16 Bottom;
};

/* 5654 */
struct _CONSOLE_SCREEN_BUFFER_INFO
{
	_COORD dwSize;
	_COORD dwCursorPosition;
	unsigned __int16 wAttributes;
	_SMALL_RECT srWindow;
	_COORD dwMaximumWindowSize;
};

/* 5655 */
struct tagCOLORCORRECTPALETTE
{
	tagEMR emr;
	unsigned int ihPalette;
	unsigned int nFirstEntry;
	unsigned int nPalEntries;
	unsigned int nReserved;
};

/* 5656 */
struct HMENU__
{
	int unused;
};

/* 5657 */
struct tagCREATESTRUCTA
{
	void *lpCreateParams;
	HINSTANCE__ *hInstance;
	HMENU__ *hMenu;
	HWND__ *hwndParent;
	int cy;
	int cx;
	int y;
	int x;
	int style;
	const char *lpszName;
	const char *lpszClass;
	unsigned int dwExStyle;
};

/* 5658 */
struct tagMINIMIZEDMETRICS
{
	unsigned int cbSize;
	int iWidth;
	int iHorzGap;
	int iVertGap;
	int iArrange;
};

/* 5659 */
struct LeaderboardUGCSet_t
{
	EResult m_eResult;
	unsigned __int64 m_hSteamLeaderboard;
};

/* 5660 */
struct tagCIEXYZ
{
	int ciexyzX;
	int ciexyzY;
	int ciexyzZ;
};

/* 5661 */
struct tagICEXYZTRIPLE
{
	tagCIEXYZ ciexyzRed;
	tagCIEXYZ ciexyzGreen;
	tagCIEXYZ ciexyzBlue;
};

/* 5662 */
struct tagLOGCOLORSPACEW
{
	unsigned int lcsSignature;
	unsigned int lcsVersion;
	unsigned int lcsSize;
	int lcsCSType;
	int lcsIntent;
	tagICEXYZTRIPLE lcsEndpoints;
	unsigned int lcsGammaRed;
	unsigned int lcsGammaGreen;
	unsigned int lcsGammaBlue;
	wchar_t lcsFilename[260];
};

/* 5663 */
struct __declspec(align(4)) tagEMRCREATECOLORSPACEW
{
	tagEMR emr;
	unsigned int ihCS;
	tagLOGCOLORSPACEW lcs;
	unsigned int dwFlags;
	unsigned int cbData;
	char Data[1];
};

/* 5664 */
struct _FLOATING_SAVE_AREA
{
	unsigned int ControlWord;
	unsigned int StatusWord;
	unsigned int TagWord;
	unsigned int ErrorOffset;
	unsigned int ErrorSelector;
	unsigned int DataOffset;
	unsigned int DataSelector;
	char RegisterArea[80];
	unsigned int Spare0;
};

/* 5665 */
struct _CONTEXT
{
	unsigned int ContextFlags;
	unsigned int Dr0;
	unsigned int Dr1;
	unsigned int Dr2;
	unsigned int Dr3;
	unsigned int Dr6;
	unsigned int Dr7;
	_FLOATING_SAVE_AREA FloatSave;
	unsigned int SegGs;
	unsigned int SegFs;
	unsigned int SegEs;
	unsigned int SegDs;
	unsigned int Edi;
	unsigned int Esi;
	unsigned int Ebx;
	unsigned int Edx;
	unsigned int Ecx;
	unsigned int Eax;
	unsigned int Ebp;
	unsigned int Eip;
	unsigned int SegCs;
	unsigned int EFlags;
	unsigned int Esp;
	unsigned int SegSs;
	char ExtendedRegisters[512];
};

/* 5666 */
struct __declspec(align(4)) tagEMRFILLRGN
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cbRgnData;
	unsigned int ihBrush;
	char RgnData[1];
};

/* 5667 */
struct tagMULTIKEYHELPW
{
	unsigned int mkSize;
	wchar_t mkKeylist;
	wchar_t szKeyphrase[1];
};

/* 5668 */
struct __declspec(align(4)) tagHELPWININFOA
{
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	char rgchMember[2];
};

/* 5669 */
struct __declspec(align(4)) _TIME_DYNAMIC_ZONE_INFORMATION
{
	int Bias;
	wchar_t StandardName[32];
	_SYSTEMTIME StandardDate;
	int StandardBias;
	wchar_t DaylightName[32];
	_SYSTEMTIME DaylightDate;
	int DaylightBias;
	wchar_t TimeZoneKeyName[128];
	char DynamicDaylightTimeDisabled;
};

/* 5670 */
struct __declspec(align(4)) tagEMRFRAMERGN
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cbRgnData;
	unsigned int ihBrush;
	tagSIZE szlStroke;
	char RgnData[1];
};

/* 5671 */
struct tagMEASUREITEMSTRUCT
{
	unsigned int CtlType;
	unsigned int CtlID;
	unsigned int itemID;
	unsigned int itemWidth;
	unsigned int itemHeight;
	unsigned int itemData;
};

/* 5672 */
struct _TRANSACTION_ENLISTMENT_PAIR
{
	_GUID EnlistmentId;
	_GUID ResourceManagerId;
};

/* 5673 */
struct _TRANSACTION_ENLISTMENTS_INFORMATION
{
	unsigned int NumberOfEnlistments;
	_TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
};

/* 5674 */
struct __declspec(align(4)) _CREATE_PROCESS_DEBUG_INFO
{
	void *hFile;
	void *hProcess;
	void *hThread;
	void *lpBaseOfImage;
	unsigned int dwDebugInfoFileOffset;
	unsigned int nDebugInfoSize;
	void *lpThreadLocalBase;
	unsigned int (__stdcall *lpStartAddress)(void *);
	void *lpImageName;
	unsigned __int16 fUnicode;
};

/* 5675 */
struct __declspec(align(8)) _wfinddata64i32_t
{
	unsigned int attrib;
	__int64 time_create;
	__int64 time_access;
	__int64 time_write;
	unsigned int size;
	wchar_t name[260];
};

/* 5676 */
struct _ACE_HEADER
{
	char AceType;
	char AceFlags;
	unsigned __int16 AceSize;
};

/* 5677 */
struct HGLRC__
{
	int unused;
};

/* 5678 */
struct tagEMREXCLUDECLIPRECT
{
	tagEMR emr;
	_RECTL rclClip;
};

/* 5679 */
struct tagEMRPOLYPOLYLINE
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int nPolys;
	unsigned int cptl;
	unsigned int aPolyCounts[1];
	_POINTL aptl[1];
};

/* 5680 */
struct tagUSEROBJECTFLAGS
{
	int fInherit;
	int fReserved;
	unsigned int dwFlags;
};

/* 5681 */
struct _NON_PAGED_DEBUG_INFO
{
	unsigned __int16 Signature;
	unsigned __int16 Flags;
	unsigned int Size;
	unsigned __int16 Machine;
	unsigned __int16 Characteristics;
	unsigned int TimeDateStamp;
	unsigned int CheckSum;
	unsigned int SizeOfImage;
	unsigned __int64 ImageBase;
};

/* 5682 */
struct HRGN__
{
	int unused;
};

/* 5683 */
struct tagCHANGEFILTERSTRUCT
{
	unsigned int cbSize;
	unsigned int ExtStatus;
};

/* 5684 */
struct _JOBOBJECT_JOBSET_INFORMATION
{
	unsigned int MemberLevel;
};

/* 5685 */
struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
	_LUID adapterId;
	unsigned int id;
	unsigned int modeInfoIdx;
	unsigned int statusFlags;
};

/* 5686 */
struct tagRAWINPUTHEADER
{
	unsigned int dwType;
	unsigned int dwSize;
	void *hDevice;
	unsigned int wParam;
};

/* 5687 */
struct $0BEE17049826DA8EAC4E51F5C14BEE1D
{
	unsigned __int16 usButtonFlags;
	unsigned __int16 usButtonData;
};

/* 5688 */
union $291669EBBAD1BD4521E19CE269E11FC6
{
	unsigned int ulButtons;
	$0BEE17049826DA8EAC4E51F5C14BEE1D __s1;
};

/* 5689 */
struct tagRAWMOUSE
{
	unsigned __int16 usFlags;
	$291669EBBAD1BD4521E19CE269E11FC6 ___u1;
	unsigned int ulRawButtons;
	int lLastX;
	int lLastY;
	unsigned int ulExtraInformation;
};

/* 5690 */
struct tagRAWKEYBOARD
{
	unsigned __int16 MakeCode;
	unsigned __int16 Flags;
	unsigned __int16 Reserved;
	unsigned __int16 VKey;
	unsigned int Message;
	unsigned int ExtraInformation;
};

/* 5691 */
union $70BFF20734389F8C51200BB822D4803D
{
	tagRAWMOUSE mouse;
	tagRAWKEYBOARD keyboard;
	tagRAWHID hid;
};

/* 5692 */
struct tagRAWINPUT
{
	tagRAWINPUTHEADER header;
	$70BFF20734389F8C51200BB822D4803D data;
};

/* 5693 */
struct RemoteStorageUnsubscribePublishedFileResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
};

/* 11248 */
enum _DEVICE_POWER_STATE
{
	PowerDeviceUnspecified = 0x0,
	PowerDeviceD0 = 0x1,
	PowerDeviceD1 = 0x2,
	PowerDeviceD2 = 0x3,
	PowerDeviceD3 = 0x4,
	PowerDeviceMaximum = 0x5,
};

/* 11249 */
enum _SYSTEM_POWER_STATE
{
	PowerSystemUnspecified = 0x0,
	PowerSystemWorking = 0x1,
	PowerSystemSleeping1 = 0x2,
	PowerSystemSleeping2 = 0x3,
	PowerSystemSleeping3 = 0x4,
	PowerSystemHibernate = 0x5,
	PowerSystemShutdown = 0x6,
	PowerSystemMaximum = 0x7,
};

/* 5694 */
struct CM_Power_Data_s
{
	unsigned int PD_Size;
	_DEVICE_POWER_STATE PD_MostRecentPowerState;
	unsigned int PD_Capabilities;
	unsigned int PD_D1Latency;
	unsigned int PD_D2Latency;
	unsigned int PD_D3Latency;
	_DEVICE_POWER_STATE PD_PowerStateMapping[7];
	_SYSTEM_POWER_STATE PD_DeepestSystemWake;
};

/* 5695 */
struct BITMAPV5HEADER
{
	unsigned int bV5Size;
	int bV5Width;
	int bV5Height;
	unsigned __int16 bV5Planes;
	unsigned __int16 bV5BitCount;
	unsigned int bV5Compression;
	unsigned int bV5SizeImage;
	int bV5XPelsPerMeter;
	int bV5YPelsPerMeter;
	unsigned int bV5ClrUsed;
	unsigned int bV5ClrImportant;
	unsigned int bV5RedMask;
	unsigned int bV5GreenMask;
	unsigned int bV5BlueMask;
	unsigned int bV5AlphaMask;
	unsigned int bV5CSType;
	tagICEXYZTRIPLE bV5Endpoints;
	unsigned int bV5GammaRed;
	unsigned int bV5GammaGreen;
	unsigned int bV5GammaBlue;
	unsigned int bV5Intent;
	unsigned int bV5ProfileData;
	unsigned int bV5ProfileSize;
	unsigned int bV5Reserved;
};

/* 5696 */
struct tagANIMATIONINFO
{
	unsigned int cbSize;
	int iMinAnimate;
};

/* 5697 */
struct _VIDEOPARAMETERS
{
	_GUID Guid;
	unsigned int dwOffset;
	unsigned int dwCommand;
	unsigned int dwFlags;
	unsigned int dwMode;
	unsigned int dwTVStandard;
	unsigned int dwAvailableModes;
	unsigned int dwAvailableTVStandard;
	unsigned int dwFlickerFilter;
	unsigned int dwOverScanX;
	unsigned int dwOverScanY;
	unsigned int dwMaxUnscaledX;
	unsigned int dwMaxUnscaledY;
	unsigned int dwPositionX;
	unsigned int dwPositionY;
	unsigned int dwBrightness;
	unsigned int dwContrast;
	unsigned int dwCPType;
	unsigned int dwCPCommand;
	unsigned int dwCPStandard;
	unsigned int dwCPKey;
	unsigned int bCP_APSTriggerBits;
	char bOEMCopyProtection[256];
};

/* 5698 */
struct SDL_HapticDirection
{
	char type;
	int dir[3];
};

/* 5699 */
struct __declspec(align(4)) SDL_HapticRamp
{
	unsigned __int16 type;
	SDL_HapticDirection direction;
	unsigned int length;
	unsigned __int16 delay;
	unsigned __int16 button;
	unsigned __int16 interval;
	__int16 start;
	__int16 end;
	unsigned __int16 attack_length;
	unsigned __int16 attack_level;
	unsigned __int16 fade_length;
	unsigned __int16 fade_level;
};

/* 5700 */
struct _PROCESSOR_GROUP_INFO
{
	char MaximumProcessorCount;
	char ActiveProcessorCount;
	char Reserved[38];
	unsigned int ActiveProcessorMask;
};

/* 5701 */
struct _GROUP_RELATIONSHIP
{
	unsigned __int16 MaximumGroupCount;
	unsigned __int16 ActiveGroupCount;
	char Reserved[20];
	_PROCESSOR_GROUP_INFO GroupInfo[1];
};

/* 5702 */
struct tagBITMAPCOREHEADER
{
	unsigned int bcSize;
	unsigned __int16 bcWidth;
	unsigned __int16 bcHeight;
	unsigned __int16 bcPlanes;
	unsigned __int16 bcBitCount;
};

/* 5703 */
struct __declspec(align(2)) tagBITMAPCOREINFO
{
	tagBITMAPCOREHEADER bmciHeader;
	tagRGBTRIPLE bmciColors[1];
};

/* 5704 */
struct tagPIXELFORMATDESCRIPTOR
{
	unsigned __int16 nSize;
	unsigned __int16 nVersion;
	unsigned int dwFlags;
	char iPixelType;
	char cColorBits;
	char cRedBits;
	char cRedShift;
	char cGreenBits;
	char cGreenShift;
	char cBlueBits;
	char cBlueShift;
	char cAlphaBits;
	char cAlphaShift;
	char cAccumBits;
	char cAccumRedBits;
	char cAccumGreenBits;
	char cAccumBlueBits;
	char cAccumAlphaBits;
	char cDepthBits;
	char cStencilBits;
	char cAuxBuffers;
	char iLayerType;
	char bReserved;
	unsigned int dwLayerMask;
	unsigned int dwVisibleMask;
	unsigned int dwDamageMask;
};

/* 5705 */
struct tagEMRFILLPATH
{
	tagEMR emr;
	_RECTL rclBounds;
};

/* 5706 */
struct _FLOAT128
{
	__int64 LowPart;
	__int64 HighPart;
};

/* 5707 */
struct $5D1C4EAAE7086A2FC0593357DF78FB95
{
	char BaseMid;
	char Flags1;
	char Flags2;
	char BaseHi;
};

/* 5708 */
struct $A3BAC9569453E46653D4C53B8339026E
{
	unsigned __int32 BaseMid : 8;
	unsigned __int32 Type : 5;
	unsigned __int32 Dpl : 2;
	unsigned __int32 Pres : 1;
	unsigned __int32 LimitHi : 4;
	unsigned __int32 Sys : 1;
	unsigned __int32 Reserved_0 : 1;
	unsigned __int32 Default_Big : 1;
	unsigned __int32 Granularity : 1;
	unsigned __int32 BaseHi : 8;
};

/* 5709 */
union $F0B2C92AC73C9B6567840E22AC07DBF2
{
	$5D1C4EAAE7086A2FC0593357DF78FB95 Bytes;
	$A3BAC9569453E46653D4C53B8339026E Bits;
};

/* 5710 */
struct _LDT_ENTRY
{
	unsigned __int16 LimitLow;
	unsigned __int16 BaseLow;
	$F0B2C92AC73C9B6567840E22AC07DBF2 HighWord;
};

/* 5711 */
struct __declspec(align(8)) _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
	_LARGE_INTEGER PerProcessUserTimeLimit;
	_LARGE_INTEGER PerJobUserTimeLimit;
	unsigned int LimitFlags;
	unsigned int MinimumWorkingSetSize;
	unsigned int MaximumWorkingSetSize;
	unsigned int ActiveProcessLimit;
	unsigned int Affinity;
	unsigned int PriorityClass;
	unsigned int SchedulingClass;
};

/* 5712 */
struct __unaligned __declspec(align(2)) tagMETAHEADER
{
	unsigned __int16 mtType;
	unsigned __int16 mtHeaderSize;
	unsigned __int16 mtVersion;
	unsigned int mtSize;
	unsigned __int16 mtNoObjects;
	unsigned int mtMaxRecord;
	unsigned __int16 mtNoParameters;
};

/* 5713 */
struct HICON__
{
	int unused;
};

/* 5714 */
struct HBRUSH__
{
	int unused;
};

/* 5715 */
struct tagWNDCLASSEXA
{
	unsigned int cbSize;
	unsigned int style;
	int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE__ *hInstance;
	HICON__ *hIcon;
	HICON__ *hCursor;
	HBRUSH__ *hbrBackground;
	const char *lpszMenuName;
	const char *lpszClassName;
	HICON__ *hIconSm;
};

/* 5716 */
struct __unaligned __declspec(align(2)) UI_Control_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
};

/* 5717 */
struct HKL__
{
	int unused;
};

/* 5718 */
struct tagLOGFONTA
{
	int lfHeight;
	int lfWidth;
	int lfEscapement;
	int lfOrientation;
	int lfWeight;
	char lfItalic;
	char lfUnderline;
	char lfStrikeOut;
	char lfCharSet;
	char lfOutPrecision;
	char lfClipPrecision;
	char lfQuality;
	char lfPitchAndFamily;
	char lfFaceName[32];
};

/* 5719 */
struct tagCWPRETSTRUCT
{
	int lResult;
	int lParam;
	unsigned int wParam;
	unsigned int message;
	HWND__ *hwnd;
};

/* 5720 */
struct _SERVICE_STATUS_PROCESS
{
	unsigned int dwServiceType;
	unsigned int dwCurrentState;
	unsigned int dwControlsAccepted;
	unsigned int dwWin32ExitCode;
	unsigned int dwServiceSpecificExitCode;
	unsigned int dwCheckPoint;
	unsigned int dwWaitHint;
	unsigned int dwProcessId;
	unsigned int dwServiceFlags;
};

/* 5721 */
struct _SERVICE_NOTIFY_2A
{
	unsigned int dwVersion;
	void (__stdcall *pfnNotifyCallback)(void *);
	void *pContext;
	unsigned int dwNotificationStatus;
	_SERVICE_STATUS_PROCESS ServiceStatus;
	unsigned int dwNotificationTriggered;
	char *pszServiceNames;
};

/* 5722 */
struct HIMCC__
{
	int unused;
};

/* 5723 */
struct _MEMORY_BASIC_INFORMATION32
{
	unsigned int BaseAddress;
	unsigned int AllocationBase;
	unsigned int AllocationProtect;
	unsigned int RegionSize;
	unsigned int State;
	unsigned int Protect;
	unsigned int Type;
};

/* 5724 */
struct tagENHMETARECORD
{
	unsigned int iType;
	unsigned int nSize;
	unsigned int dParm[1];
};

/* 5725 */
struct __declspec(align(4)) tagTEXTMETRICA
{
	int tmHeight;
	int tmAscent;
	int tmDescent;
	int tmInternalLeading;
	int tmExternalLeading;
	int tmAveCharWidth;
	int tmMaxCharWidth;
	int tmWeight;
	int tmOverhang;
	int tmDigitizedAspectX;
	int tmDigitizedAspectY;
	char tmFirstChar;
	char tmLastChar;
	char tmDefaultChar;
	char tmBreakChar;
	char tmItalic;
	char tmUnderlined;
	char tmStruckOut;
	char tmPitchAndFamily;
	char tmCharSet;
};

/* 5726 */
struct _FILE_ATTRIBUTE_TAG_INFO
{
	unsigned int FileAttributes;
	unsigned int ReparseTag;
};

/* 5727 */
struct HWINSTA__
{
	int unused;
};

/* 5728 */
struct _OFSTRUCT
{
	char cBytes;
	char fFixedDisk;
	unsigned __int16 nErrCode;
	unsigned __int16 Reserved1;
	unsigned __int16 Reserved2;
	char szPathName[128];
};

/* 5729 */
struct DISPLAYCONFIG_RATIONAL
{
	unsigned int Numerator;
	unsigned int Denominator;
};

/* 5730 */
struct _FIXED
{
	unsigned __int16 fract;
	__int16 value;
};

/* 5731 */
struct _MAT2
{
	_FIXED eM11;
	_FIXED eM12;
	_FIXED eM21;
	_FIXED eM22;
};

/* 5732 */
struct __declspec(align(4)) tagEMRNAMEDESCAPE
{
	tagEMR emr;
	int iEscape;
	int cbDriver;
	int cbEscData;
	char EscData[1];
};

/* 5733 */
struct tagHELPINFO
{
	unsigned int cbSize;
	int iContextType;
	int iCtrlId;
	void *hItemHandle;
	unsigned int dwContextId;
	tagPOINT MousePos;
};

/* 5734 */
struct tagMSGBOXPARAMSA
{
	unsigned int cbSize;
	HWND__ *hwndOwner;
	HINSTANCE__ *hInstance;
	const char *lpszText;
	const char *lpszCaption;
	unsigned int dwStyle;
	const char *lpszIcon;
	unsigned int dwContextHelpId;
	void (__stdcall *lpfnMsgBoxCallback)(tagHELPINFO *);
	unsigned int dwLanguageId;
};

/* 5735 */
struct tagCLIENTCREATESTRUCT
{
	void *hWindowMenu;
	unsigned int idFirstChild;
};

/* 5736 */
struct _OUTPUT_DEBUG_STRING_INFO
{
	char *lpDebugStringData;
	unsigned __int16 fUnicode;
	unsigned __int16 nDebugStringLength;
};

/* 5737 */
struct _FILE_COMPRESSION_INFO
{
	_LARGE_INTEGER CompressedFileSize;
	unsigned __int16 CompressionFormat;
	char CompressionUnitShift;
	char ChunkShift;
	char ClusterShift;
	char Reserved[3];
};

/* 5738 */
struct tagEVENTMSG
{
	unsigned int message;
	unsigned int paramL;
	unsigned int paramH;
	unsigned int time;
	HWND__ *hwnd;
};

/* 5739 */
struct _UNIVERSAL_NAME_INFOA
{
	char *lpUniversalName;
};

/* 5740 */
struct _IMAGE_DATA_DIRECTORY
{
	unsigned int VirtualAddress;
	unsigned int Size;
};

/* 5741 */
struct _IMAGE_OPTIONAL_HEADER64
{
	unsigned __int16 Magic;
	char MajorLinkerVersion;
	char MinorLinkerVersion;
	unsigned int SizeOfCode;
	unsigned int SizeOfInitializedData;
	unsigned int SizeOfUninitializedData;
	unsigned int AddressOfEntryPoint;
	unsigned int BaseOfCode;
	unsigned __int64 ImageBase;
	unsigned int SectionAlignment;
	unsigned int FileAlignment;
	unsigned __int16 MajorOperatingSystemVersion;
	unsigned __int16 MinorOperatingSystemVersion;
	unsigned __int16 MajorImageVersion;
	unsigned __int16 MinorImageVersion;
	unsigned __int16 MajorSubsystemVersion;
	unsigned __int16 MinorSubsystemVersion;
	unsigned int Win32VersionValue;
	unsigned int SizeOfImage;
	unsigned int SizeOfHeaders;
	unsigned int CheckSum;
	unsigned __int16 Subsystem;
	unsigned __int16 DllCharacteristics;
	unsigned __int64 SizeOfStackReserve;
	unsigned __int64 SizeOfStackCommit;
	unsigned __int64 SizeOfHeapReserve;
	unsigned __int64 SizeOfHeapCommit;
	unsigned int LoaderFlags;
	unsigned int NumberOfRvaAndSizes;
	_IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 5742 */
struct tagEMRSETVIEWPORTEXTEX
{
	tagEMR emr;
	tagSIZE szlExtent;
};

/* 5743 */
struct tagTRACKMOUSEEVENT
{
	unsigned int cbSize;
	unsigned int dwFlags;
	HWND__ *hwndTrack;
	unsigned int dwHoverTime;
};

/* 5744 */
struct tagCOMBOBOXINFO
{
	unsigned int cbSize;
	tagRECT rcItem;
	tagRECT rcButton;
	unsigned int stateButton;
	HWND__ *hwndCombo;
	HWND__ *hwndItem;
	HWND__ *hwndList;
};

/* 5745 */
struct __cppobj __unaligned __declspec(align(4)) FriendsEnumerateFollowingList_t
{
	EResult m_eResult;
	CSteamID m_rgSteamID[50];
	int m_nResultsReturned;
	int m_nTotalResultCount;
};

/* 5746 */
struct _s__RTTIClassHierarchyDescriptor
{
	unsigned int signature;
	unsigned int attributes;
	unsigned int numBaseClasses;
	_s__RTTIBaseClassArray *pBaseClassArray;
};

/* 5748 */
const struct __unaligned __declspec(align(1)) _s__RTTIBaseClassArray
{
	_s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
};

/* 5747 */
const struct _s__RTTIBaseClassDescriptor2
{
	_TypeDescriptor *pTypeDescriptor;
	unsigned int numContainedBases;
	_PMD where;
	unsigned int attributes;
	_s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 5749 */
struct _s__RTTICompleteObjectLocator
{
	unsigned int signature;
	unsigned int offset;
	unsigned int cdOffset;
	_TypeDescriptor *pTypeDescriptor;
	_s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 5750 */
struct $9F5F1B3B62BF9BBBAE65D06E22EF4EC0
{
	unsigned __int16 Linenumber;
	unsigned __int16 Size;
};

/* 5751 */
union $974012AD9C19DEF3F82F85C75364FD79
{
	$9F5F1B3B62BF9BBBAE65D06E22EF4EC0 LnSz;
	unsigned int TotalSize;
};

/* 5752 */
struct $0267EABC91DDCC621C08D74192F36445
{
	unsigned int PointerToLinenumber;
	unsigned int PointerToNextFunction;
};

/* 5753 */
struct $72A87AE534D1DC1A4B7CCA877B33F564
{
	unsigned __int16 Dimension[4];
};

/* 5754 */
union $D973DF8411B91E3332701231416EE972
{
	$0267EABC91DDCC621C08D74192F36445 Function;
	$72A87AE534D1DC1A4B7CCA877B33F564 Array;
};

/* 5755 */
struct __unaligned __declspec(align(2)) $A474D330A8862D5772925DB2EF26D0BD
{
	unsigned int TagIndex;
	$974012AD9C19DEF3F82F85C75364FD79 Misc;
	$D973DF8411B91E3332701231416EE972 FcnAry;
	unsigned __int16 TvIndex;
};

/* 5756 */
struct $66EA94121FC5BA9E8F572A953AB6FE87
{
	char Name[18];
};

/* 5757 */
struct __unaligned __declspec(align(2)) $6BC8BB93DCE6F8CAF31D23A54AB6DD1F
{
	unsigned int Length;
	unsigned __int16 NumberOfRelocations;
	unsigned __int16 NumberOfLinenumbers;
	unsigned int CheckSum;
	__int16 Number;
	char Selection;
	char bReserved;
	__int16 HighNumber;
};

/* 5758 */
struct __unaligned __declspec(align(2)) IMAGE_AUX_SYMBOL_TOKEN_DEF
{
	char bAuxType;
	char bReserved;
	unsigned int SymbolTableIndex;
	char rgbReserved[12];
};

/* 5759 */
struct __unaligned __declspec(align(2)) $F6F421F1EF697500A866C638CFA1FC7E
{
	unsigned int crc;
	char rgbReserved[14];
};

/* 5760 */
union _IMAGE_AUX_SYMBOL
{
	$A474D330A8862D5772925DB2EF26D0BD Sym;
	$66EA94121FC5BA9E8F572A953AB6FE87 File;
	$6BC8BB93DCE6F8CAF31D23A54AB6DD1F Section;
	IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	$F6F421F1EF697500A866C638CFA1FC7E CRC;
};

/* 5761 */
struct _BY_HANDLE_FILE_INFORMATION
{
	unsigned int dwFileAttributes;
	_FILETIME ftCreationTime;
	_FILETIME ftLastAccessTime;
	_FILETIME ftLastWriteTime;
	unsigned int dwVolumeSerialNumber;
	unsigned int nFileSizeHigh;
	unsigned int nFileSizeLow;
	unsigned int nNumberOfLinks;
	unsigned int nFileIndexHigh;
	unsigned int nFileIndexLow;
};

/* 5762 */
struct _STARTUPINFOA
{
	unsigned int cb;
	char *lpReserved;
	char *lpDesktop;
	char *lpTitle;
	unsigned int dwX;
	unsigned int dwY;
	unsigned int dwXSize;
	unsigned int dwYSize;
	unsigned int dwXCountChars;
	unsigned int dwYCountChars;
	unsigned int dwFillAttribute;
	unsigned int dwFlags;
	unsigned __int16 wShowWindow;
	unsigned __int16 cbReserved2;
	char *lpReserved2;
	void *hStdInput;
	void *hStdOutput;
	void *hStdError;
};

/* 5763 */
struct __cppobj CProjectileInvisibleTravelling : CProjectileBAM
{
};

/* 5764 */
struct __cppobj __declspec(align(4)) CProjectileConeOfCold : CProjectileBAM
{
	__int16 m_counter;
};

/* 5765 */
struct _EVENTLOGRECORD
{
	unsigned int Length;
	unsigned int Reserved;
	unsigned int RecordNumber;
	unsigned int TimeGenerated;
	unsigned int TimeWritten;
	unsigned int EventID;
	unsigned __int16 EventType;
	unsigned __int16 NumStrings;
	unsigned __int16 EventCategory;
	unsigned __int16 ReservedFlags;
	unsigned int ClosingRecordNumber;
	unsigned int StringOffset;
	unsigned int UserSidLength;
	unsigned int UserSidOffset;
	unsigned int DataLength;
	unsigned int DataOffset;
};

/* 5766 */
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
	unsigned int PropagationCookie;
	_GUID UOW;
	_GUID TmIdentity;
	unsigned int BufferLength;
};

/* 5767 */
struct tagSTYLESTRUCT
{
	unsigned int styleOld;
	unsigned int styleNew;
};

/* 5768 */
struct _cpinfoexA
{
	unsigned int MaxCharSize;
	char DefaultChar[2];
	char LeadByte[12];
	wchar_t UnicodeDefaultChar;
	unsigned int CodePage;
	char CodePageName[260];
};

/* 5769 */
struct HMONITOR__
{
	int unused;
};

/* 5770 */
struct tagEMRMODIFYWORLDTRANSFORM
{
	tagEMR emr;
	tagXFORM xform;
	unsigned int iMode;
};

/* 5771 */
struct __declspec(align(4)) tagEXTLOGFONTA
{
	tagLOGFONTA elfLogFont;
	char elfFullName[64];
	char elfStyle[32];
	unsigned int elfVersion;
	unsigned int elfStyleSize;
	unsigned int elfMatch;
	unsigned int elfReserved;
	char elfVendorId[4];
	unsigned int elfCulture;
	tagPANOSE elfPanose;
};

/* 5772 */
struct UI_Control_Button_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	char refBam[8];
	char nSequence;
	char bFlags;
	char nFrameUp;
	char refPtXLower;
	char nFrameDown;
	char refPtXHigher;
	char nFrameFocus;
	char refPtYLower;
	char nFrameDisabled;
	char refPtYHigher;
};

/* 5773 */
struct HBITMAP__
{
	int unused;
};

/* 5774 */
struct tagMENUITEMINFOA
{
	unsigned int cbSize;
	unsigned int fMask;
	unsigned int fType;
	unsigned int fState;
	unsigned int wID;
	HMENU__ *hSubMenu;
	HBITMAP__ *hbmpChecked;
	HBITMAP__ *hbmpUnchecked;
	unsigned int dwItemData;
	char *dwTypeData;
	unsigned int cch;
	HBITMAP__ *hbmpItem;
};

/* 5775 */
struct __declspec(align(4)) _ICONINFOEXW
{
	unsigned int cbSize;
	int fIcon;
	unsigned int xHotspot;
	unsigned int yHotspot;
	HBITMAP__ *hbmMask;
	HBITMAP__ *hbmColor;
	unsigned __int16 wResID;
	wchar_t szModName[260];
	wchar_t szResName[260];
};

/* 5776 */
struct __cppobj CPersistantEffectElectricDeath : CPersistantEffectBurningDeath
{
};

/* 5777 */
struct _XSAVE_AREA_HEADER
{
	unsigned __int64 Mask;
	unsigned __int64 Reserved[7];
};

/* 5778 */
struct _currencyfmtW
{
	unsigned int NumDigits;
	unsigned int LeadingZero;
	unsigned int Grouping;
	wchar_t *lpDecimalSep;
	wchar_t *lpThousandSep;
	unsigned int NegativeOrder;
	unsigned int PositiveOrder;
	wchar_t *lpCurrencySymbol;
};

/* 5779 */
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW
{
	wchar_t *pmszRequiredPrivileges;
};

/* 5780 */
struct __cppobj ISteamUser
{
	ISteamUserVtbl *vfptr;
};

/* 5781 */
struct ISteamUserVtbl
{
	int (__thiscall *GetHSteamUser)(ISteamUser *this);
	_BYTE gap4[8];
	int (__thiscall *InitiateGameConnection)(ISteamUser *this, void *, int, CSteamID, unsigned int, unsigned __int16, bool);
	void (__thiscall *TerminateGameConnection)(ISteamUser *this, unsigned int, unsigned __int16);
	void (__thiscall *TrackAppUsageEvent)(ISteamUser *this, CGameID, int, const char *);
	bool (__thiscall *GetUserDataFolder)(ISteamUser *this, char *, int);
	void (__thiscall *StartVoiceRecording)(ISteamUser *this);
	void (__thiscall *StopVoiceRecording)(ISteamUser *this);
	EVoiceResult (__thiscall *GetAvailableVoice)(ISteamUser *this, unsigned int *, unsigned int *, unsigned int);
	EVoiceResult (__thiscall *GetVoice)(ISteamUser *this, bool, void *, unsigned int, unsigned int *, bool, void *, unsigned int, unsigned int *, unsigned int);
	EVoiceResult (__thiscall *DecompressVoice)(ISteamUser *this, const void *, unsigned int, void *, unsigned int, unsigned int *, unsigned int);
	unsigned int (__thiscall *GetVoiceOptimalSampleRate)(ISteamUser *this);
	unsigned int (__thiscall *GetAuthSessionTicket)(ISteamUser *this, void *, int, unsigned int *);
	EBeginAuthSessionResult (__thiscall *BeginAuthSession)(ISteamUser *this, const void *, int, CSteamID);
	void (__thiscall *EndAuthSession)(ISteamUser *this, CSteamID);
	void (__thiscall *CancelAuthTicket)(ISteamUser *this, unsigned int);
	EUserHasLicenseForAppResult (__thiscall *UserHasLicenseForApp)(ISteamUser *this, CSteamID, unsigned int);
	bool (__thiscall *BIsBehindNAT)(ISteamUser *this);
	void (__thiscall *AdvertiseGame)(ISteamUser *this, CSteamID, unsigned int, unsigned __int16);
	unsigned __int64 (__thiscall *RequestEncryptedAppTicket)(ISteamUser *this, void *, int);
	bool (__thiscall *GetEncryptedAppTicket)(ISteamUser *this, void *, int, unsigned int *);
	int (__thiscall *GetGameBadgeLevel)(ISteamUser *this, int, bool);
	int (__thiscall *GetPlayerSteamLevel)(ISteamUser *this);
};

/* 5782 */
struct RemoteStorageSubscribePublishedFileResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
};

/* 5783 */
struct _ACL
{
	char AclRevision;
	char Sbz1;
	unsigned __int16 AclSize;
	unsigned __int16 AceCount;
	unsigned __int16 Sbz2;
};

/* 5784 */
struct _TOKEN_DEFAULT_DACL
{
	_ACL *DefaultDacl;
};

/* 5785 */
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
	_TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
};

/* 5786 */
struct $5ACE225D4D14CE0550A9F5A217E306C5
{
	__int16 dmOrientation;
	__int16 dmPaperSize;
	__int16 dmPaperLength;
	__int16 dmPaperWidth;
};

/* 5787 */
union $76AE2FEC9DA5F9E77066675463311D8D
{
	$5ACE225D4D14CE0550A9F5A217E306C5 __s0;
	_POINTL dmPosition;
};

/* 5788 */
struct $84BDF2D0EF3E6D92B6C33770B276E406
{
	__int16 dmScale;
	__int16 dmCopies;
};

/* 5789 */
union $B7918B71186120D91EE6B0695F00B012
{
	$84BDF2D0EF3E6D92B6C33770B276E406 __s0;
	unsigned int dmDisplayOrientation;
};

/* 5790 */
struct $319163E49F0A6F35652FDFBFBA0FF503
{
	__int16 dmDefaultSource;
	__int16 dmPrintQuality;
};

/* 5791 */
union $DADF6C68D01F632A2008C72A3F5E68F4
{
	$319163E49F0A6F35652FDFBFBA0FF503 __s0;
	unsigned int dmDisplayFixedOutput;
};

/* 5792 */
union $309666D137CBB19809FA597AD348B415
{
	unsigned int dmDisplayFlags;
	unsigned int dmNup;
};

/* 5793 */
struct _devicemodeA
{
	char dmDeviceName[32];
	unsigned __int16 dmSpecVersion;
	unsigned __int16 dmDriverVersion;
	unsigned __int16 dmSize;
	unsigned __int16 dmDriverExtra;
	unsigned int dmFields;
	$76AE2FEC9DA5F9E77066675463311D8D ___u6;
	$B7918B71186120D91EE6B0695F00B012 ___u7;
	$DADF6C68D01F632A2008C72A3F5E68F4 ___u8;
	__int16 dmColor;
	__int16 dmDuplex;
	__int16 dmYResolution;
	__int16 dmTTOption;
	__int16 dmCollate;
	char dmFormName[32];
	unsigned __int16 dmLogPixels;
	unsigned int dmBitsPerPel;
	unsigned int dmPelsWidth;
	unsigned int dmPelsHeight;
	$309666D137CBB19809FA597AD348B415 ___u19;
	unsigned int dmDisplayFrequency;
	unsigned int dmICMMethod;
	unsigned int dmICMIntent;
	unsigned int dmMediaType;
	unsigned int dmDitherType;
	unsigned int dmReserved1;
	unsigned int dmReserved2;
	unsigned int dmPanningWidth;
	unsigned int dmPanningHeight;
};

/* 5794 */
struct tagEMRLINETO
{
	tagEMR emr;
	_POINTL ptl;
};

/* 5795 */
struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
	unsigned int dwDataType;
	unsigned int cbData;
	char *pData;
};

/* 5796 */
struct $6E35CCFC02D81E31BD4C6BEDD77CB20A
{
	unsigned __int32 NameOffset : 31;
	unsigned __int32 NameIsString : 1;
};

/* 5797 */
union $6E6B973D4E3F5A04808F0FE32B8CE02D
{
	$6E35CCFC02D81E31BD4C6BEDD77CB20A __s0;
	unsigned int Name;
	unsigned __int16 Id;
};

/* 5798 */
struct $B2E03ED94C06E2E681F8D03FF7FF5CB3
{
	unsigned __int32 OffsetToDirectory : 31;
	unsigned __int32 DataIsDirectory : 1;
};

/* 5799 */
union $6D87196FF2065C76F9F865B044F6E2D0
{
	unsigned int OffsetToData;
	$B2E03ED94C06E2E681F8D03FF7FF5CB3 __s1;
};

/* 5800 */
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
	$6E6B973D4E3F5A04808F0FE32B8CE02D ___u0;
	$6D87196FF2065C76F9F865B044F6E2D0 ___u1;
};

/* 5801 */
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
	unsigned int ulFlags;
	ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
	unsigned int UiAccess;
};

/* 5802 */
struct _GRADIENT_TRIANGLE
{
	unsigned int Vertex1;
	unsigned int Vertex2;
	unsigned int Vertex3;
};

/* 5803 */
struct tagEMRROUNDRECT
{
	tagEMR emr;
	_RECTL rclBox;
	tagSIZE szlCorner;
};

/* 5804 */
struct _ADMINISTRATOR_POWER_POLICY
{
	_SYSTEM_POWER_STATE MinSleep;
	_SYSTEM_POWER_STATE MaxSleep;
	unsigned int MinVideoTimeout;
	unsigned int MaxVideoTimeout;
	unsigned int MinSpindownTimeout;
	unsigned int MaxSpindownTimeout;
};

/* 5805 */
struct _IMAGE_FILE_HEADER
{
	unsigned __int16 Machine;
	unsigned __int16 NumberOfSections;
	unsigned int TimeDateStamp;
	unsigned int PointerToSymbolTable;
	unsigned int NumberOfSymbols;
	unsigned __int16 SizeOfOptionalHeader;
	unsigned __int16 Characteristics;
};

/* 5806 */
struct _IMAGE_OPTIONAL_HEADER
{
	unsigned __int16 Magic;
	char MajorLinkerVersion;
	char MinorLinkerVersion;
	unsigned int SizeOfCode;
	unsigned int SizeOfInitializedData;
	unsigned int SizeOfUninitializedData;
	unsigned int AddressOfEntryPoint;
	unsigned int BaseOfCode;
	unsigned int BaseOfData;
	unsigned int ImageBase;
	unsigned int SectionAlignment;
	unsigned int FileAlignment;
	unsigned __int16 MajorOperatingSystemVersion;
	unsigned __int16 MinorOperatingSystemVersion;
	unsigned __int16 MajorImageVersion;
	unsigned __int16 MinorImageVersion;
	unsigned __int16 MajorSubsystemVersion;
	unsigned __int16 MinorSubsystemVersion;
	unsigned int Win32VersionValue;
	unsigned int SizeOfImage;
	unsigned int SizeOfHeaders;
	unsigned int CheckSum;
	unsigned __int16 Subsystem;
	unsigned __int16 DllCharacteristics;
	unsigned int SizeOfStackReserve;
	unsigned int SizeOfStackCommit;
	unsigned int SizeOfHeapReserve;
	unsigned int SizeOfHeapCommit;
	unsigned int LoaderFlags;
	unsigned int NumberOfRvaAndSizes;
	_IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 5807 */
struct _IMAGE_NT_HEADERS
{
	unsigned int Signature;
	_IMAGE_FILE_HEADER FileHeader;
	_IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 5808 */
struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
	unsigned int ulFlags;
	unsigned int ulFilenameLength;
	unsigned int ulPathLength;
	const wchar_t *lpFileName;
	const wchar_t *lpFilePath;
};

/* 5809 */
struct _UNLOAD_DLL_DEBUG_INFO
{
	void *lpBaseOfDll;
};

/* 5810 */
struct tagLOGPEN
{
	unsigned int lopnStyle;
	tagPOINT lopnWidth;
	unsigned int lopnColor;
};

/* 5811 */
struct _REMOTE_NAME_INFOW
{
	wchar_t *lpUniversalName;
	wchar_t *lpConnectionName;
	wchar_t *lpRemainingPath;
};

/* 5812 */
struct __declspec(align(8)) PersonaStateChange_t
{
	unsigned __int64 m_ulSteamID;
	int m_nChangeFlags;
};

/* 5813 */
struct _CONSOLE_READCONSOLE_CONTROL
{
	unsigned int nLength;
	unsigned int nInitialChars;
	unsigned int dwCtrlWakeupMask;
	unsigned int dwControlKeyState;
};

/* 5814 */
struct SteamUnifiedMessagesSendMethodResult_t
{
	unsigned __int64 m_hHandle;
	unsigned __int64 m_unContext;
	EResult m_eResult;
	unsigned int m_unResponseSize;
};

/* 5815 */
struct SDL_semaphore
{
	void *id;
	int count;
};

/* 5816 */
struct __declspec(align(4)) SET_POWER_SETTING_VALUE
{
	unsigned int Version;
	_GUID Guid;
	SYSTEM_POWER_CONDITION PowerCondition;
	unsigned int DataLength;
	char Data[1];
};

/* 5817 */
struct _RIP_INFO
{
	unsigned int dwError;
	unsigned int dwType;
};

/* 5818 */
struct tagLOGBRUSH32
{
	unsigned int lbStyle;
	unsigned int lbColor;
	unsigned int lbHatch;
};

/* 5819 */
struct tagKBDLLHOOKSTRUCT
{
	unsigned int vkCode;
	unsigned int scanCode;
	unsigned int flags;
	unsigned int time;
	unsigned int dwExtraInfo;
};

/* 5820 */
struct tagLOGBRUSH
{
	unsigned int lbStyle;
	unsigned int lbColor;
	unsigned int lbHatch;
};

/* 5821 */
struct _M128A
{
	unsigned __int64 Low;
	__int64 High;
};

/* 5822 */
struct _XSAVE_FORMAT
{
	unsigned __int16 ControlWord;
	unsigned __int16 StatusWord;
	char TagWord;
	char Reserved1;
	unsigned __int16 ErrorOpcode;
	unsigned int ErrorOffset;
	unsigned __int16 ErrorSelector;
	unsigned __int16 Reserved2;
	unsigned int DataOffset;
	unsigned __int16 DataSelector;
	unsigned __int16 Reserved3;
	unsigned int MxCsr;
	unsigned int MxCsr_Mask;
	_M128A FloatRegisters[8];
	_M128A XmmRegisters[8];
	char Reserved4[192];
	unsigned int StackControl[7];
	unsigned int Cr0NpxState;
};

/* 5823 */
struct _XSAVE_AREA
{
	_XSAVE_FORMAT LegacyState;
	_XSAVE_AREA_HEADER Header;
};

/* 5824 */
struct _XSTATE_CONTEXT
{
	unsigned __int64 Mask;
	unsigned int Length;
	unsigned int Reserved1;
	_XSAVE_AREA *Area;
	unsigned int Reserved2;
	void *Buffer;
	unsigned int Reserved3;
};

/* 5825 */
struct __declspec(align(4)) tagCOLORMATCHTOTARGET
{
	tagEMR emr;
	unsigned int dwAction;
	unsigned int dwFlags;
	unsigned int cbName;
	unsigned int cbData;
	char Data[1];
};

/* 5826 */
struct __declspec(align(4)) _FILE_RENAME_INFO
{
	char ReplaceIfExists;
	void *RootDirectory;
	unsigned int FileNameLength;
	wchar_t FileName[1];
};

/* 5827 */
struct _ABC
{
	int abcA;
	unsigned int abcB;
	int abcC;
};

/* 5828 */
struct _NETINFOSTRUCT
{
	unsigned int cbStructure;
	unsigned int dwProviderVersion;
	unsigned int dwStatus;
	unsigned int dwCharacteristics;
	unsigned int dwHandle;
	unsigned __int16 wNetType;
	unsigned int dwPrinters;
	unsigned int dwDrives;
};

/* 5829 */
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 5830 */
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
	_GUID TmIdentity;
	unsigned int Flags;
};

/* 5831 */
struct HKEY__
{
	int unused;
};

/* 5832 */
struct _OVERLAPPED_ENTRY
{
	unsigned int lpCompletionKey;
	_OVERLAPPED *lpOverlapped;
	unsigned int Internal;
	unsigned int dwNumberOfBytesTransferred;
};

/* 5833 */
struct tagEMRSELECTPALETTE
{
	tagEMR emr;
	unsigned int ihPal;
};

/* 5834 */
struct _WOW64_FLOATING_SAVE_AREA
{
	unsigned int ControlWord;
	unsigned int StatusWord;
	unsigned int TagWord;
	unsigned int ErrorOffset;
	unsigned int ErrorSelector;
	unsigned int DataOffset;
	unsigned int DataSelector;
	char RegisterArea[80];
	unsigned int Cr0NpxState;
};

/* 5835 */
struct _WOW64_CONTEXT
{
	unsigned int ContextFlags;
	unsigned int Dr0;
	unsigned int Dr1;
	unsigned int Dr2;
	unsigned int Dr3;
	unsigned int Dr6;
	unsigned int Dr7;
	_WOW64_FLOATING_SAVE_AREA FloatSave;
	unsigned int SegGs;
	unsigned int SegFs;
	unsigned int SegEs;
	unsigned int SegDs;
	unsigned int Edi;
	unsigned int Esi;
	unsigned int Ebx;
	unsigned int Edx;
	unsigned int Ecx;
	unsigned int Eax;
	unsigned int Ebp;
	unsigned int Eip;
	unsigned int SegCs;
	unsigned int EFlags;
	unsigned int Esp;
	unsigned int SegSs;
	char ExtendedRegisters[512];
};

/* 5836 */
struct tagENUMLOGFONTEXA
{
	tagLOGFONTA elfLogFont;
	char elfFullName[64];
	char elfStyle[32];
	char elfScript[32];
};

/* 5837 */
struct tagDESIGNVECTOR
{
	unsigned int dvReserved;
	unsigned int dvNumAxes;
	int dvValues[16];
};

/* 5838 */
struct tagENUMLOGFONTEXDVA
{
	tagENUMLOGFONTEXA elfEnumLogfontEx;
	tagDESIGNVECTOR elfDesignVector;
};

/* 5839 */
struct tagDRAWTEXTPARAMS
{
	unsigned int cbSize;
	int iTabLength;
	int iLeftMargin;
	int iRightMargin;
	unsigned int uiLengthDrawn;
};

/* 5840 */
struct _TOKEN_ORIGIN
{
	_LUID OriginatingLogonSession;
};

/* 11250 */
enum _HARDWARE_COUNTER_TYPE
{
	PMCCounter = 0x0,
	MaxHardwareCounterType = 0x1,
};

/* 5841 */
struct _HARDWARE_COUNTER_DATA
{
	_HARDWARE_COUNTER_TYPE Type;
	unsigned int Reserved;
	unsigned __int64 Value;
};

/* 5842 */
struct __declspec(align(4)) tagPELARRAY
{
	int paXCount;
	int paYCount;
	int paXExt;
	int paYExt;
	char paRGBs;
};

/* 5843 */
struct tagMDICREATESTRUCTA
{
	const char *szClass;
	const char *szTitle;
	void *hOwner;
	int x;
	int y;
	int cx;
	int cy;
	unsigned int style;
	int lParam;
};

/* 5844 */
struct tagSTYLEBUFW
{
	unsigned int dwStyle;
	wchar_t szDescription[32];
};

/* 5845 */
struct _GROUP_AFFINITY
{
	unsigned int Mask;
	unsigned __int16 Group;
	unsigned __int16 Reserved[3];
};

/* 5846 */
struct _PROCESSOR_RELATIONSHIP
{
	char Flags;
	char Reserved[21];
	unsigned __int16 GroupCount;
	_GROUP_AFFINITY GroupMask[1];
};

/* 5847 */
struct _POINTFLOAT
{
	float x;
	float y;
};

/* 5848 */
struct _GLYPHMETRICSFLOAT
{
	float gmfBlackBoxX;
	float gmfBlackBoxY;
	_POINTFLOAT gmfptGlyphOrigin;
	float gmfCellIncX;
	float gmfCellIncY;
};

/* 5849 */
struct _SYSTEM_ALARM_CALLBACK_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 5850 */
struct _IMAGE_FUNCTION_ENTRY
{
	unsigned int StartingAddress;
	unsigned int EndingAddress;
	unsigned int EndOfPrologue;
};

/* 5851 */
struct tagFONTSIGNATURE
{
	unsigned int fsUsb[4];
	unsigned int fsCsb[2];
};

/* 5852 */
struct _SERVICE_NOTIFY_2W
{
	unsigned int dwVersion;
	void (__stdcall *pfnNotifyCallback)(void *);
	void *pContext;
	unsigned int dwNotificationStatus;
	_SERVICE_STATUS_PROCESS ServiceStatus;
	unsigned int dwNotificationTriggered;
	wchar_t *pszServiceNames;
};

/* 5853 */
struct POWER_ACTION_POLICY
{
	POWER_ACTION Action;
	unsigned int Flags;
	unsigned int EventCode;
};

/* 5854 */
struct SYSTEM_POWER_LEVEL
{
	char Enable;
	char Spare[3];
	unsigned int BatteryLevel;
	POWER_ACTION_POLICY PowerPolicy;
	_SYSTEM_POWER_STATE MinSystemState;
};

/* 5855 */
struct _IMAGE_OS2_HEADER
{
	unsigned __int16 ne_magic;
	char ne_ver;
	char ne_rev;
	unsigned __int16 ne_enttab;
	unsigned __int16 ne_cbenttab;
	int ne_crc;
	unsigned __int16 ne_flags;
	unsigned __int16 ne_autodata;
	unsigned __int16 ne_heap;
	unsigned __int16 ne_stack;
	int ne_csip;
	int ne_sssp;
	unsigned __int16 ne_cseg;
	unsigned __int16 ne_cmod;
	unsigned __int16 ne_cbnrestab;
	unsigned __int16 ne_segtab;
	unsigned __int16 ne_rsrctab;
	unsigned __int16 ne_restab;
	unsigned __int16 ne_modtab;
	unsigned __int16 ne_imptab;
	int ne_nrestab;
	unsigned __int16 ne_cmovent;
	unsigned __int16 ne_align;
	unsigned __int16 ne_cres;
	char ne_exetyp;
	char ne_flagsothers;
	unsigned __int16 ne_pretthunks;
	unsigned __int16 ne_psegrefbytes;
	unsigned __int16 ne_swaparea;
	unsigned __int16 ne_expver;
};

/* 5856 */
struct _MESSAGE_RESOURCE_BLOCK
{
	unsigned int LowId;
	unsigned int HighId;
	unsigned int OffsetToEntries;
};

/* 5857 */
struct tagACTCTXA
{
	unsigned int cbSize;
	unsigned int dwFlags;
	const char *lpSource;
	unsigned __int16 wProcessorArchitecture;
	unsigned __int16 wLangId;
	const char *lpAssemblyDirectory;
	const char *lpResourceName;
	const char *lpApplicationName;
	HINSTANCE__ *hModule;
};

/* 5858 */
struct _ENLISTMENT_CRM_INFORMATION
{
	_GUID CrmTransactionManagerId;
	_GUID CrmResourceManagerId;
	_GUID CrmEnlistmentId;
};

/* 5859 */
struct tagEMRSETDIBITSTODEVICE
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int xSrc;
	int ySrc;
	int cxSrc;
	int cySrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	unsigned int iUsageSrc;
	unsigned int iStartScan;
	unsigned int cScans;
};

/* 5860 */
struct _SERVICE_DELAYED_AUTO_START_INFO
{
	int fDelayedAutostart;
};

/* 5861 */
struct $409DFF2A380C4FFE2B587D0390AC124E
{
	unsigned __int16 wProcessorArchitecture;
	unsigned __int16 wReserved;
};

/* 5862 */
union $275932E66BE044AB0516F81D497B40C0
{
	unsigned int dwOemId;
	$409DFF2A380C4FFE2B587D0390AC124E __s1;
};

/* 5863 */
struct _SYSTEM_INFO
{
	$275932E66BE044AB0516F81D497B40C0 ___u0;
	unsigned int dwPageSize;
	void *lpMinimumApplicationAddress;
	void *lpMaximumApplicationAddress;
	unsigned int dwActiveProcessorMask;
	unsigned int dwNumberOfProcessors;
	unsigned int dwProcessorType;
	unsigned int dwAllocationGranularity;
	unsigned __int16 wProcessorLevel;
	unsigned __int16 wProcessorRevision;
};

/* 5864 */
struct tagACTCTXW
{
	unsigned int cbSize;
	unsigned int dwFlags;
	const wchar_t *lpSource;
	unsigned __int16 wProcessorArchitecture;
	unsigned __int16 wLangId;
	const wchar_t *lpAssemblyDirectory;
	const wchar_t *lpResourceName;
	const wchar_t *lpApplicationName;
	HINSTANCE__ *hModule;
};

/* 5865 */
struct _FILE_ALLOCATION_INFO
{
	_LARGE_INTEGER AllocationSize;
};

/* 5866 */
struct __cppobj std::_Is_integral<bool> : std::integral_constant<bool,1>
{
};

/* 5867 */
struct __cppobj std::add_reference<void const >
{
};

/* 5868 */
struct __cppobj std::_Cat_base<1> : std::integral_constant<bool,1>
{
};

/* 5869 */
struct __cppobj std::is_empty<std::allocator<DP_Player *> > : std::_Cat_base<1>
{
};

/* 5870 */
struct __cppobj std::_Is_floating_point<double> : std::integral_constant<bool,1>
{
};

/* 5871 */
struct __cppobj std::unary_function<unsigned short,unsigned int>
{
};

/* 5872 */
struct __cppobj std::unary_function<unsigned int,unsigned int>
{
};

/* 5873 */
struct __cppobj std::_Bitwise_hash<unsigned int> : std::unary_function<unsigned int,unsigned int>
{
};

/* 5874 */
struct __cppobj std::hash<unsigned int> : std::_Bitwise_hash<unsigned int>
{
};

/* 5875 */
struct __cppobj std::remove_cv<DP_Packet * const>
{
};

/* 5876 */
struct __cppobj std::is_same<DP_Packet * *,DP_Packet * *> : std::integral_constant<bool,1>
{
};

/* 5877 */
struct __cppobj std::remove_cv<DP_Player *>
{
};

/* 5878 */
struct __cppobj std::_Is_floating_point<float> : std::integral_constant<bool,1>
{
};

/* 5879 */
struct __cppobj std::_Init_locks
{
};

/* 5880 */
struct __cppobj std::unary_function<bool,unsigned int>
{
};

/* 5881 */
struct __cppobj std::remove_const<DP_Packet * * const>
{
};

/* 5882 */
struct __cppobj std::equal_to<void>
{
};

/* 5883 */
struct __cppobj std::unary_function<signed char,unsigned int>
{
};

/* 5884 */
struct __cppobj std::remove_const<DP_Player *>
{
};

/* 5885 */
struct __cppobj std::_Get_align<short>
{
	__int16 _Elt0;
	char _Elt1;
	__int16 _Elt2;
};

/* 5886 */
struct __cppobj std::_Is_void<DP_Packet * *> : std::integral_constant<bool,0>
{
};

/* 5887 */
struct __cppobj std::is_void<DP_Packet * *> : std::_Is_void<DP_Packet * *>
{
};

/* 5888 */
struct __cppobj std::_If<0,int,DP_Packet *>
{
};

/* 5889 */
struct __cppobj std::_Get_align<char>
{
	char _Elt0;
	char _Elt1;
	char _Elt2;
};

/* 5890 */
struct __cppobj std::_Alloc_allocate
{
};

/* 5891 */
struct __cppobj std::_Vec_base_types<DP_Player *,std::allocator<DP_Player *> >
{
};

/* 5892 */
struct __cppobj std::_Simple_types<DP_Player *>
{
};

/* 5893 */
struct __cppobj std::is_same<DP_Player * const &,DP_Player * const &> : std::integral_constant<bool,1>
{
};

/* 5894 */
struct __cppobj std::_If<0,int,char>
{
};

/* 5895 */
struct __cppobj std::_Is_integral<signed char> : std::integral_constant<bool,1>
{
};

/* 5896 */
struct __cppobj std::unary_function<char,unsigned int>
{
};

/* 5897 */
struct __cppobj std::unary_function<long,unsigned int>
{
};

/* 5898 */
struct __cppobj std::_Bitwise_hash<long> : std::unary_function<long,unsigned int>
{
};

/* 5899 */
struct __cppobj std::enable_if<0,double>
{
};

/* 5900 */
struct __cppobj std::unary_function<__int64,unsigned int>
{
};

/* 5901 */
struct __cppobj std::_Bitwise_hash<__int64> : std::unary_function<__int64,unsigned int>
{
};

/* 5902 */
struct __cppobj std::_Is_integral<unsigned int> : std::integral_constant<bool,1>
{
};

/* 5903 */
struct __cppobj std::_Bitwise_hash<signed char> : std::unary_function<signed char,unsigned int>
{
};

/* 5904 */
struct __cppobj std::hash<signed char> : std::_Bitwise_hash<signed char>
{
};

/* 5905 */
struct __cppobj std::is_void<DP_Packet * * const> : std::_Is_void<DP_Packet * *>
{
};

/* 5906 */
struct __cppobj std::unary_function<short,unsigned int>
{
};

/* 5907 */
struct __cppobj std::_Bitwise_hash<short> : std::unary_function<short,unsigned int>
{
};

/* 5908 */
struct __cppobj std::hash<short> : std::_Bitwise_hash<short>
{
};

/* 5909 */
struct __cppobj std::_Is_integral<unsigned __int64> : std::integral_constant<bool,1>
{
};

/* 5910 */
struct __cppobj std::unary_function<unsigned __int64,unsigned int>
{
};

/* 5911 */
struct __cppobj std::integral_constant<unsigned int,0>
{
};

/* 5912 */
struct __cppobj std::_Is_simple_alloc<std::_Wrap_alloc<std::allocator<DP_Packet *> > > : std::_Cat_base<1>
{
};

/* 5913 */
struct __cppobj std::hash<__int64> : std::_Bitwise_hash<__int64>
{
};

/* 5914 */
struct __cppobj std::enable_if<1,double>
{
};

/* 5915 */
struct __cppobj std::remove_volatile<DP_Packet * *>
{
};

/* 5916 */
struct __cppobj std::_Simple_types<DP_Packet *>
{
};

/* 5917 */
struct __cppobj std::_Deque_simple_types<DP_Packet *> : std::_Simple_types<DP_Packet *>
{
};

/* 5918 */
struct __cppobj std::_If<1,std::_Deque_simple_types<DP_Packet *>,std::_Deque_iter_types<DP_Packet *,unsigned int,int,DP_Packet * *,DP_Packet * const *,DP_Packet * &,DP_Packet * const &,DP_Packet * * *> >
{
};

/* 5919 */
struct __cppobj std::_Deque_base_types<DP_Packet *,std::allocator<DP_Packet *> >
{
};

/* 5920 */
struct __cppobj std::less<void>
{
};

/* 5921 */
struct __cppobj std::_Is_void<void> : std::integral_constant<bool,1>
{
};

/* 5922 */
struct __cppobj std::_Alloc_destroy
{
};

/* 5923 */
struct __cppobj std::is_same<char &,char &> : std::integral_constant<bool,1>
{
};

/* 5924 */
struct __cppobj std::remove_reference<double>
{
};

/* 5925 */
struct __cppobj std::remove_cv<char>
{
};

/* 5926 */
struct __cppobj std::remove_volatile<long>
{
};

/* 5927 */
struct __cppobj std::remove_const<DP_Player * const>
{
};

/* 5928 */
struct __cppobj std::add_rvalue_reference<void>
{
};

/* 5929 */
struct __cppobj std::unary_function<unsigned long,unsigned int>
{
};

/* 5930 */
struct __cppobj std::_Bitwise_hash<unsigned long> : std::unary_function<unsigned long,unsigned int>
{
};

/* 5931 */
struct __cppobj std::_Is_void<char> : std::integral_constant<bool,0>
{
};

/* 5932 */
struct __cppobj std::_If<0,int const ,DP_Packet * * const>
{
};

/* 5933 */
struct __cppobj std::_String_base_types<char,std::allocator<char> >
{
};

/* 5934 */
struct __cppobj std::_Simple_types<char>
{
};

/* 5935 */
struct __cppobj std::_Is_integral<float> : std::integral_constant<bool,0>
{
};

/* 5936 */
struct __cppobj std::is_integral<float> : std::_Is_integral<float>
{
};

/* 5937 */
struct __cppobj std::remove_cv<DP_Packet *>
{
};

/* 5938 */
struct __cppobj std::remove_const<DP_Packet *>
{
};

/* 5939 */
struct __cppobj std::_Bitwise_hash<unsigned short> : std::unary_function<unsigned short,unsigned int>
{
};

/* 5940 */
struct __cppobj std::hash<unsigned short> : std::_Bitwise_hash<unsigned short>
{
};

/* 5941 */
struct __cppobj std::_Is_void<DP_Packet *> : std::integral_constant<bool,0>
{
};

/* 5942 */
struct __cppobj std::hash<long> : std::_Bitwise_hash<long>
{
};

/* 5943 */
struct __cppobj std::remove_volatile<DP_Player *>
{
};

/* 5944 */
struct __cppobj std::is_void<char const > : std::_Is_void<char>
{
};

/* 5945 */
struct __cppobj std::remove_cv<char const >
{
};

/* 5946 */
struct __cppobj std::is_same<DP_Packet * const *,DP_Packet * const *> : std::integral_constant<bool,1>
{
};

/* 5947 */
struct __cppobj std::unary_function<unsigned char,unsigned int>
{
};

/* 5948 */
struct __cppobj std::_If<1,std::_Simple_types<char>,std::_String_iter_types<char,unsigned int,int,char *,char const *,char &,char const &> >
{
};

/* 5949 */
struct __cppobj std::integral_constant<unsigned int,2>
{
};

/* 5950 */
struct __cppobj std::alignment_of<short> : std::integral_constant<unsigned int,2>
{
};

/* 5951 */
struct __cppobj std::_Is_void<DP_Player *> : std::integral_constant<bool,0>
{
};

/* 5952 */
struct __cppobj std::is_void<DP_Player *> : std::_Is_void<DP_Player *>
{
};

/* 5953 */
struct __cppobj std::remove_const<char>
{
};

/* 5954 */
struct __cppobj std::_Is_integral<char> : std::integral_constant<bool,1>
{
};

/* 5955 */
struct __cppobj std::remove_cv<long>
{
};

/* 5956 */
struct __cppobj std::remove_reference<char>
{
};

/* 5957 */
struct __cppobj std::remove_cv<float>
{
};

/* 5958 */
struct __cppobj std::is_void<char> : std::_Is_void<char>
{
};

/* 5959 */
struct __cppobj std::is_void<DP_Packet *> : std::_Is_void<DP_Packet *>
{
};

/* 5960 */
struct __cppobj std::_Is_integral<unsigned short> : std::integral_constant<bool,1>
{
};

/* 5961 */
union std::_String_val<std::_Simple_types<unsigned short> >::_Bxty
{
	unsigned __int16 _Buf[8];
	unsigned __int16 *_Ptr;
	char _Alias[8];
};

/* 5962 */
struct __cppobj std::_String_val<std::_Simple_types<unsigned short> > : std::_Container_base0
{
	std::_String_val<std::_Simple_types<unsigned short> >::_Bxty _Bx;
	unsigned int _Mysize;
	unsigned int _Myres;
};

/* 5963 */
struct __cppobj std::_String_alloc<0,std::_String_base_types<unsigned short,std::allocator<unsigned short> > > : std::_String_val<std::_Simple_types<unsigned short> >
{
};

/* 5964 */
struct __cppobj std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > : std::_String_alloc<0,std::_String_base_types<unsigned short,std::allocator<unsigned short> > >
{
};

/* 5965 */
struct __cppobj std::add_rvalue_reference<void const >
{
};

/* 5966 */
struct __cppobj std::is_same<DP_Packet * const &,DP_Packet * const &> : std::integral_constant<bool,1>
{
};

/* 5967 */
struct __cppobj std::_Is_integral<long> : std::integral_constant<bool,1>
{
};

/* 5968 */
struct __cppobj std::is_empty<std::allocator<DP_Packet *> > : std::_Cat_base<1>
{
};

/* 5969 */
struct __cppobj std::is_empty<std::allocator<char> > : std::_Cat_base<1>
{
};

/* 5970 */
struct __cppobj std::unary_function<wchar_t,unsigned int>
{
};

/* 5971 */
struct __cppobj std::_Bitwise_hash<wchar_t> : std::unary_function<wchar_t,unsigned int>
{
};

/* 5972 */
struct __cppobj std::hash<wchar_t> : std::_Bitwise_hash<wchar_t>
{
};

/* 5973 */
struct __cppobj std::_Is_integral<int> : std::integral_constant<bool,1>
{
};

/* 5974 */
struct __cppobj std::remove_reference<int>
{
};

/* 5975 */
struct __cppobj std::_Is_simple_alloc<std::_Wrap_alloc<std::allocator<char> > > : std::_Cat_base<1>
{
};

/* 5976 */
struct __cppobj std::remove_const<float>
{
};

/* 5977 */
struct __cppobj std::_Get_align<double>
{
	long double _Elt0;
	char _Elt1;
	long double _Elt2;
};

/* 5978 */
struct __cppobj std::integral_constant<unsigned int,1>
{
};

/* 5979 */
struct __cppobj std::_Bitwise_hash<bool> : std::unary_function<bool,unsigned int>
{
};

/* 5980 */
struct __cppobj std::add_rvalue_reference<void const volatile >
{
};

/* 5981 */
struct __cppobj std::integral_constant<unsigned int,4>
{
};

/* 5982 */
struct __cppobj std::_If<0,int const ,char const >
{
};

/* 5983 */
struct __cppobj std::integral_constant<unsigned int,8>
{
};

/* 5984 */
struct __cppobj std::alignment_of<double> : std::integral_constant<unsigned int,8>
{
};

/* 5985 */
struct __cppobj std::hash<unsigned long> : std::_Bitwise_hash<unsigned long>
{
};

/* 5986 */
struct __cppobj std::add_reference<void const volatile >
{
};

/* 5987 */
struct __cppobj std::remove_const<DP_Packet * const>
{
};

/* 5988 */
struct __cppobj std::is_same<DP_Player * const *,DP_Player * const *> : std::integral_constant<bool,1>
{
};

/* 5989 */
struct __cppobj std::remove_volatile<DP_Packet *>
{
};

/* 5990 */
struct __cppobj std::_Maximum<>
{
};

/* 5991 */
struct __cppobj std::minus<void>
{
};

/* 5992 */
struct __cppobj std::remove_const<DP_Packet * *>
{
};

/* 5993 */
struct __cppobj std::_Alloc_max_size
{
};

/* 5994 */
struct __cppobj std::_Alloc_select
{
};

/* 5995 */
struct __cppobj std::is_same<unsigned int,unsigned int> : std::integral_constant<bool,1>
{
};

/* 5996 */
struct __cppobj std::_Is_integral<__int64> : std::integral_constant<bool,1>
{
};

/* 5997 */
struct __cppobj std::remove_cv<DP_Packet * *>
{
};

/* 5998 */
struct __cppobj std::_If<0,int const ,DP_Packet * const>
{
};

/* 5999 */
struct __cppobj std::alignment_of<int> : std::integral_constant<unsigned int,4>
{
};

/* 6000 */
struct __cppobj std::remove_const<char const >
{
};

/* 6001 */
struct __cppobj std::is_same<char const *,char const *> : std::integral_constant<bool,1>
{
};

/* 6002 */
struct __cppobj std::_Bitwise_hash<unsigned char> : std::unary_function<unsigned char,unsigned int>
{
};

/* 6003 */
struct __cppobj std::_Bitwise_hash<char> : std::unary_function<char,unsigned int>
{
};

/* 6004 */
struct __cppobj std::hash<char> : std::_Bitwise_hash<char>
{
};

/* 6005 */
struct __cppobj std::_Alloc_construct
{
};

/* 6006 */
struct __cppobj std::_Bitwise_hash<unsigned __int64> : std::unary_function<unsigned __int64,unsigned int>
{
};

/* 6007 */
struct __cppobj std::hash<unsigned __int64> : std::_Bitwise_hash<unsigned __int64>
{
};

/* 6008 */
struct __cppobj std::_If<0,int,DP_Player *>
{
};

/* 6009 */
struct __cppobj std::remove_cv<DP_Player * const>
{
};

/* 6010 */
struct __cppobj std::remove_volatile<DP_Packet * const>
{
};

/* 6011 */
struct __cppobj std::is_void<DP_Player * const> : std::_Is_void<DP_Player *>
{
};

/* 6012 */
struct __cppobj std::_If<1,std::_Simple_types<DP_Player *>,std::_Vec_iter_types<DP_Player *,unsigned int,int,DP_Player * *,DP_Player * const *,DP_Player * &,DP_Player * const &> >
{
};

/* 6013 */
struct __cppobj std::hash<bool> : std::_Bitwise_hash<bool>
{
};

/* 6014 */
struct __cppobj std::is_same<char *,char *> : std::integral_constant<bool,1>
{
};

/* 6015 */
struct __cppobj std::remove_volatile<DP_Packet * * const>
{
};

/* 6016 */
struct __cppobj std::add_reference<void>
{
};

/* 6017 */
struct __cppobj std::is_integral<long> : std::_Is_integral<long>
{
};

/* 6018 */
struct __cppobj std::_Get_align<int>
{
	int _Elt0;
	char _Elt1;
	int _Elt2;
};

/* 6019 */
struct __cppobj std::_Is_integral<unsigned long> : std::integral_constant<bool,1>
{
};

/* 6020 */
struct __cppobj std::is_same<DP_Packet * &,DP_Packet * &> : std::integral_constant<bool,1>
{
};

/* 6021 */
struct __cppobj std::plus<void>
{
};

/* 6022 */
struct __cppobj std::add_reference<void volatile >
{
};

/* 6023 */
struct __cppobj std::remove_volatile<char const >
{
};

/* 6024 */
struct __cppobj std::remove_cv<DP_Packet * * const>
{
};

/* 6025 */
struct __cppobj std::is_void<DP_Packet * const> : std::_Is_void<DP_Packet *>
{
};

/* 6026 */
struct __cppobj std::_If<0,int,DP_Packet * *>
{
};

/* 6027 */
struct __cppobj std::hash<unsigned char> : std::_Bitwise_hash<unsigned char>
{
};

/* 6028 */
struct __cppobj std::remove_volatile<char>
{
};

/* 6029 */
struct __cppobj std::is_same<int,int> : std::integral_constant<bool,1>
{
};

/* 6030 */
struct __cppobj std::_If<0,int const ,DP_Player * const>
{
};

/* 6031 */
struct __cppobj std::_Is_integral<unsigned char> : std::integral_constant<bool,1>
{
};

/* 6032 */
struct __cppobj std::_Is_simple_alloc<std::_Wrap_alloc<std::allocator<DP_Player *> > > : std::_Cat_base<1>
{
};

/* 6033 */
struct __cppobj std::is_same<DP_Player * *,DP_Player * *> : std::integral_constant<bool,1>
{
};

/* 6034 */
struct __cppobj std::remove_volatile<float>
{
};

/* 6035 */
struct __cppobj std::add_rvalue_reference<void volatile >
{
};

/* 6036 */
struct __cppobj std::_Tuple_enable<std::tuple<>,std::tuple<> >
{
};

/* 6037 */
struct __cppobj std::_Is_integral<short> : std::integral_constant<bool,1>
{
};

/* 6038 */
struct __cppobj std::multiplies<void>
{
};

/* 6039 */
struct __cppobj std::remove_reference<short>
{
};

/* 6040 */
struct __cppobj std::_Is_floating_point<long double> : std::integral_constant<bool,1>
{
};

/* 6041 */
struct __cppobj std::_Is_integral<wchar_t> : std::integral_constant<bool,1>
{
};

/* 6042 */
struct __cppobj std::alignment_of<char> : std::integral_constant<unsigned int,1>
{
};

/* 6043 */
struct __cppobj std::is_same<char const &,char const &> : std::integral_constant<bool,1>
{
};

/* 6044 */
struct __cppobj std::is_same<DP_Player * &,DP_Player * &> : std::integral_constant<bool,1>
{
};

/* 6045 */
struct __cppobj std::remove_const<long>
{
};

/* 6046 */
struct __cppobj std::remove_volatile<DP_Player * const>
{
};

/* 6047 */
struct _ACCESS_ALLOWED_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6048 */
struct _NUMA_NODE_RELATIONSHIP
{
	unsigned int NodeNumber;
	char Reserved[20];
	_GROUP_AFFINITY GroupMask;
};

/* 11251 */
enum _PROCESSOR_CACHE_TYPE
{
	CacheUnified = 0x0,
	CacheInstruction = 0x1,
	CacheData = 0x2,
	CacheTrace = 0x3,
};

/* 6049 */
struct _CACHE_RELATIONSHIP
{
	char Level;
	char Associativity;
	unsigned __int16 LineSize;
	unsigned int CacheSize;
	_PROCESSOR_CACHE_TYPE Type;
	char Reserved[20];
	_GROUP_AFFINITY GroupMask;
};

/* 6050 */
union $282D34405AA9E460652DFA53DF02A5A7
{
	_PROCESSOR_RELATIONSHIP Processor;
	_NUMA_NODE_RELATIONSHIP NumaNode;
	_CACHE_RELATIONSHIP Cache;
	_GROUP_RELATIONSHIP Group;
};

/* 11252 */
enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
	RelationProcessorCore = 0x0,
	RelationNumaNode = 0x1,
	RelationCache = 0x2,
	RelationProcessorPackage = 0x3,
	RelationGroup = 0x4,
	RelationAll = 0xFFFF,
};

/* 6051 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
	_LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	unsigned int Size;
	$282D34405AA9E460652DFA53DF02A5A7 ___u2;
};

/* 6052 */
struct LIST_ENTRY32
{
	unsigned int Flink;
	unsigned int Blink;
};

/* 6053 */
struct PROCESSOR_IDLESTATE_INFO
{
	unsigned int TimeCheck;
	char DemotePercent;
	char PromotePercent;
	char Spare[2];
};

/* 6054 */
union $E0927F6BE2F1645595F211B37EFD8766
{
	unsigned __int64 EndOfPrologue;
	unsigned __int64 UnwindInfoAddress;
};

/* 6055 */
struct _IMAGE_FUNCTION_ENTRY64
{
	unsigned __int64 StartingAddress;
	unsigned __int64 EndingAddress;
	$E0927F6BE2F1645595F211B37EFD8766 ___u2;
};

/* 6056 */
struct _EXIT_THREAD_DEBUG_INFO
{
	unsigned int dwExitCode;
};

/* 6057 */
struct _ENUM_SERVICE_STATUS_PROCESSA
{
	char *lpServiceName;
	char *lpDisplayName;
	_SERVICE_STATUS_PROCESS ServiceStatusProcess;
};

/* 6058 */
struct tagACCEL
{
	char fVirt;
	unsigned __int16 key;
	unsigned __int16 cmd;
};

/* 6059 */
struct RemoteStorageDeletePublishedFileResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
};

/* 6060 */
struct _QUOTA_LIMITS
{
	unsigned int PagedPoolLimit;
	unsigned int NonPagedPoolLimit;
	unsigned int MinimumWorkingSetSize;
	unsigned int MaximumWorkingSetSize;
	unsigned int PagefileLimit;
	_LARGE_INTEGER TimeLimit;
};

/* 6061 */
union _RTL_RUN_ONCE
{
	void *Ptr;
};

/* 6062 */
struct tagSERIALKEYSW
{
	unsigned int cbSize;
	unsigned int dwFlags;
	wchar_t *lpszActivePort;
	wchar_t *lpszPort;
	unsigned int iBaudRate;
	unsigned int iPortState;
	unsigned int iActive;
};

/* 6063 */
struct __cppobj FriendGameInfo_t
{
	CGameID m_gameID;
	unsigned int m_unGameIP;
	unsigned __int16 m_usGamePort;
	unsigned __int16 m_usQueryPort;
	CSteamID m_steamIDLobby;
};

/* 6064 */
struct _TOKEN_LINKED_TOKEN
{
	void *LinkedToken;
};

/* 6065 */
struct _NETCONNECTINFOSTRUCT
{
	unsigned int cbStructure;
	unsigned int dwFlags;
	unsigned int dwSpeed;
	unsigned int dwDelay;
	unsigned int dwOptDataSize;
};

/* 6066 */
struct _SERVICE_TRIGGER
{
	unsigned int dwTriggerType;
	unsigned int dwAction;
	_GUID *pTriggerSubtype;
	unsigned int cDataItems;
	_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM *pDataItems;
};

/* 6067 */
struct $507ECED6EFA5CFD5AC2C04C0BCDE222D
{
	unsigned int Short;
	unsigned int Long;
};

/* 6068 */
union $0B06C3261E7556B467E416F023BECA89
{
	char ShortName[8];
	$507ECED6EFA5CFD5AC2C04C0BCDE222D Name;
	unsigned int LongName[2];
};

/* 6069 */
struct __unaligned __declspec(align(2)) _IMAGE_SYMBOL
{
	$0B06C3261E7556B467E416F023BECA89 N;
	unsigned int Value;
	__int16 SectionNumber;
	unsigned __int16 Type;
	char StorageClass;
	char NumberOfAuxSymbols;
};

/* 6070 */
struct __declspec(align(8)) _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
	unsigned int ulFlags;
	unsigned int ulEncodedAssemblyIdentityLength;
	unsigned int ulManifestPathType;
	unsigned int ulManifestPathLength;
	_LARGE_INTEGER liManifestLastWriteTime;
	unsigned int ulPolicyPathType;
	unsigned int ulPolicyPathLength;
	_LARGE_INTEGER liPolicyLastWriteTime;
	unsigned int ulMetadataSatelliteRosterIndex;
	unsigned int ulManifestVersionMajor;
	unsigned int ulManifestVersionMinor;
	unsigned int ulPolicyVersionMajor;
	unsigned int ulPolicyVersionMinor;
	unsigned int ulAssemblyDirectoryNameLength;
	const wchar_t *lpAssemblyEncodedAssemblyIdentity;
	const wchar_t *lpAssemblyManifestPath;
	const wchar_t *lpAssemblyPolicyPath;
	const wchar_t *lpAssemblyDirectoryName;
	unsigned int ulFileCount;
};

/* 6071 */
struct tagDROPSTRUCT
{
	HWND__ *hwndSource;
	HWND__ *hwndSink;
	unsigned int wFmt;
	unsigned int dwData;
	tagPOINT ptDrop;
	unsigned int dwControlData;
};

/* 6072 */
struct _TOKEN_GROUPS_AND_PRIVILEGES
{
	unsigned int SidCount;
	unsigned int SidLength;
	_SID_AND_ATTRIBUTES *Sids;
	unsigned int RestrictedSidCount;
	unsigned int RestrictedSidLength;
	_SID_AND_ATTRIBUTES *RestrictedSids;
	unsigned int PrivilegeCount;
	unsigned int PrivilegeLength;
	_LUID_AND_ATTRIBUTES *Privileges;
	_LUID AuthenticationId;
};

/* 6073 */
struct tagMSLLHOOKSTRUCT
{
	tagPOINT pt;
	unsigned int mouseData;
	unsigned int flags;
	unsigned int time;
	unsigned int dwExtraInfo;
};

/* 6074 */
struct tagIMEMENUITEMINFOA
{
	unsigned int cbSize;
	unsigned int fType;
	unsigned int fState;
	unsigned int wID;
	HBITMAP__ *hbmpChecked;
	HBITMAP__ *hbmpUnchecked;
	unsigned int dwItemData;
	char szString[80];
	HBITMAP__ *hbmpItem;
};

/* 6075 */
struct UI_Control_ScrollBar_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	char refBam[8];
	unsigned __int16 nSequence;
	unsigned __int16 nTopFrameUp;
	unsigned __int16 nTopFrameDown;
	unsigned __int16 nBottomFrameUp;
	unsigned __int16 nBottomFrameDown;
	unsigned __int16 nBarFrame;
	unsigned __int16 nThumbFrame;
	unsigned int nControlWindowId;
};

/* 6076 */
struct tagEXTLOGPEN
{
	unsigned int elpPenStyle;
	unsigned int elpWidth;
	unsigned int elpBrushStyle;
	unsigned int elpColor;
	unsigned int elpHatch;
	unsigned int elpNumEntries;
	unsigned int elpStyleEntry[1];
};

/* 6077 */
struct _OUTLINETEXTMETRICA
{
	unsigned int otmSize;
	tagTEXTMETRICA otmTextMetrics;
	char otmFiller;
	tagPANOSE otmPanoseNumber;
	unsigned int otmfsSelection;
	unsigned int otmfsType;
	int otmsCharSlopeRise;
	int otmsCharSlopeRun;
	int otmItalicAngle;
	unsigned int otmEMSquare;
	int otmAscent;
	int otmDescent;
	unsigned int otmLineGap;
	unsigned int otmsCapEmHeight;
	unsigned int otmsXHeight;
	tagRECT otmrcFontBox;
	int otmMacAscent;
	int otmMacDescent;
	unsigned int otmMacLineGap;
	unsigned int otmusMinimumPPEM;
	tagPOINT otmptSubscriptSize;
	tagPOINT otmptSubscriptOffset;
	tagPOINT otmptSuperscriptSize;
	tagPOINT otmptSuperscriptOffset;
	unsigned int otmsStrikeoutSize;
	int otmsStrikeoutPosition;
	int otmsUnderscoreSize;
	int otmsUnderscorePosition;
	char *otmpFamilyName;
	char *otmpFaceName;
	char *otmpStyleName;
	char *otmpFullName;
};

/* 6078 */
struct __declspec(align(8)) RemoteStorageUserVoteDetails_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
	EWorkshopVote m_eVote;
};

/* 6079 */
struct GetAuthSessionTicketResponse_t
{
	unsigned int m_hAuthTicket;
	EResult m_eResult;
};

/* 6080 */
struct _RASTERIZER_STATUS
{
	__int16 nSize;
	__int16 wFlags;
	__int16 nLanguageID;
};

/* 6081 */
struct _WIN32_FIND_DATAW
{
	unsigned int dwFileAttributes;
	_FILETIME ftCreationTime;
	_FILETIME ftLastAccessTime;
	_FILETIME ftLastWriteTime;
	unsigned int nFileSizeHigh;
	unsigned int nFileSizeLow;
	unsigned int dwReserved0;
	unsigned int dwReserved1;
	wchar_t cFileName[260];
	wchar_t cAlternateFileName[14];
};

/* 6082 */
struct biffHeader_st
{
	unsigned int dwFileType;
	unsigned int dwVersion;
	unsigned int nVarRes;
	unsigned int nFixedRes;
	unsigned int nTableOffset;
};

/* 6083 */
struct ValvePackingSentinel_t
{
	unsigned int m_u32;
	unsigned __int64 m_u64;
	unsigned __int16 m_u16;
	long double m_d;
};

/* 6084 */
struct tagEMRTEXT
{
	_POINTL ptlReference;
	unsigned int nChars;
	unsigned int offString;
	unsigned int fOptions;
	_RECTL rcl;
	unsigned int offDx;
};

/* 6085 */
struct tagEMRPOLYTEXTOUTA
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int iGraphicsMode;
	float exScale;
	float eyScale;
	int cStrings;
	tagEMRTEXT aemrtext[1];
};

/* 6086 */
struct __declspec(align(4)) _ICONINFOEXA
{
	unsigned int cbSize;
	int fIcon;
	unsigned int xHotspot;
	unsigned int yHotspot;
	HBITMAP__ *hbmMask;
	HBITMAP__ *hbmColor;
	unsigned __int16 wResID;
	char szModName[260];
	char szResName[260];
};

/* 6087 */
struct RemoteStorageAppSyncedClient_t
{
	unsigned int m_nAppID;
	EResult m_eResult;
	int m_unNumDownloads;
};

/* 6088 */
struct HLSURF__
{
	int unused;
};

/* 6089 */
struct __declspec(align(4)) _WIN32_FIND_DATAA
{
	unsigned int dwFileAttributes;
	_FILETIME ftCreationTime;
	_FILETIME ftLastAccessTime;
	_FILETIME ftLastWriteTime;
	unsigned int nFileSizeHigh;
	unsigned int nFileSizeLow;
	unsigned int dwReserved0;
	unsigned int dwReserved1;
	char cFileName[260];
	char cAlternateFileName[14];
};

/* 6090 */
struct tagNEWTEXTMETRICA
{
	int tmHeight;
	int tmAscent;
	int tmDescent;
	int tmInternalLeading;
	int tmExternalLeading;
	int tmAveCharWidth;
	int tmMaxCharWidth;
	int tmWeight;
	int tmOverhang;
	int tmDigitizedAspectX;
	int tmDigitizedAspectY;
	char tmFirstChar;
	char tmLastChar;
	char tmDefaultChar;
	char tmBreakChar;
	char tmItalic;
	char tmUnderlined;
	char tmStruckOut;
	char tmPitchAndFamily;
	char tmCharSet;
	unsigned int ntmFlags;
	unsigned int ntmSizeEM;
	unsigned int ntmCellHeight;
	unsigned int ntmAvgWidth;
};

/* 6091 */
struct tagNEWTEXTMETRICEXA
{
	tagNEWTEXTMETRICA ntmTm;
	tagFONTSIGNATURE ntmFontSig;
};

/* 6092 */
struct tagAXISINFOA
{
	int axMinValue;
	int axMaxValue;
	char axAxisName[16];
};

/* 6093 */
struct tagAXESLISTA
{
	unsigned int axlReserved;
	unsigned int axlNumAxes;
	tagAXISINFOA axlAxisInfo[16];
};

/* 6094 */
struct tagENUMTEXTMETRICA
{
	tagNEWTEXTMETRICEXA etmNewTextMetricEx;
	tagAXESLISTA etmAxesList;
};

/* 6095 */
struct tagEMRSTRETCHDIBITS
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int xSrc;
	int ySrc;
	int cxSrc;
	int cySrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	unsigned int iUsageSrc;
	unsigned int dwRop;
	int cxDest;
	int cyDest;
};

/* 6096 */
struct _TP_POOL_STACK_INFORMATION
{
	unsigned int StackReserve;
	unsigned int StackCommit;
};

/* 6097 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32
{
	unsigned int Size;
	unsigned int TimeDateStamp;
	unsigned __int16 MajorVersion;
	unsigned __int16 MinorVersion;
	unsigned int GlobalFlagsClear;
	unsigned int GlobalFlagsSet;
	unsigned int CriticalSectionDefaultTimeout;
	unsigned int DeCommitFreeBlockThreshold;
	unsigned int DeCommitTotalFreeThreshold;
	unsigned int LockPrefixTable;
	unsigned int MaximumAllocationSize;
	unsigned int VirtualMemoryThreshold;
	unsigned int ProcessHeapFlags;
	unsigned int ProcessAffinityMask;
	unsigned __int16 CSDVersion;
	unsigned __int16 Reserved1;
	unsigned int EditList;
	unsigned int SecurityCookie;
	unsigned int SEHandlerTable;
	unsigned int SEHandlerCount;
};

/* 6098 */
struct _TRIVERTEX
{
	int x;
	int y;
	unsigned __int16 Red;
	unsigned __int16 Green;
	unsigned __int16 Blue;
	unsigned __int16 Alpha;
};

/* 6099 */
struct _ACCESS_DENIED_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6100 */
struct _MEMORY_BASIC_INFORMATION
{
	void *BaseAddress;
	void *AllocationBase;
	unsigned int AllocationProtect;
	unsigned int RegionSize;
	unsigned int State;
	unsigned int Protect;
	unsigned int Type;
};

/* 6101 */
struct $63D8AC276564BEA69DF63EBD86FDB811
{
	unsigned __int32 friendlyNameFromEdid : 1;
	unsigned __int32 friendlyNameForced : 1;
	unsigned __int32 edidIdsValid : 1;
	unsigned __int32 reserved : 29;
};

/* 6102 */
union $D9352AEC0B1B61FAAF6F95757AADEFB5
{
	$63D8AC276564BEA69DF63EBD86FDB811 __s0;
	unsigned int value;
};

/* 6103 */
struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
	$D9352AEC0B1B61FAAF6F95757AADEFB5 ___u0;
};

/* 6104 */
struct __declspec(align(4)) tagTEXTMETRICW
{
	int tmHeight;
	int tmAscent;
	int tmDescent;
	int tmInternalLeading;
	int tmExternalLeading;
	int tmAveCharWidth;
	int tmMaxCharWidth;
	int tmWeight;
	int tmOverhang;
	int tmDigitizedAspectX;
	int tmDigitizedAspectY;
	wchar_t tmFirstChar;
	wchar_t tmLastChar;
	wchar_t tmDefaultChar;
	wchar_t tmBreakChar;
	char tmItalic;
	char tmUnderlined;
	char tmStruckOut;
	char tmPitchAndFamily;
	char tmCharSet;
};

/* 6105 */
struct _OUTLINETEXTMETRICW
{
	unsigned int otmSize;
	tagTEXTMETRICW otmTextMetrics;
	char otmFiller;
	tagPANOSE otmPanoseNumber;
	unsigned int otmfsSelection;
	unsigned int otmfsType;
	int otmsCharSlopeRise;
	int otmsCharSlopeRun;
	int otmItalicAngle;
	unsigned int otmEMSquare;
	int otmAscent;
	int otmDescent;
	unsigned int otmLineGap;
	unsigned int otmsCapEmHeight;
	unsigned int otmsXHeight;
	tagRECT otmrcFontBox;
	int otmMacAscent;
	int otmMacDescent;
	unsigned int otmMacLineGap;
	unsigned int otmusMinimumPPEM;
	tagPOINT otmptSubscriptSize;
	tagPOINT otmptSubscriptOffset;
	tagPOINT otmptSuperscriptSize;
	tagPOINT otmptSuperscriptOffset;
	unsigned int otmsStrikeoutSize;
	int otmsStrikeoutPosition;
	int otmsUnderscoreSize;
	int otmsUnderscorePosition;
	char *otmpFamilyName;
	char *otmpFaceName;
	char *otmpStyleName;
	char *otmpFullName;
};

/* 6106 */
struct _DOCINFOA
{
	int cbSize;
	const char *lpszDocName;
	const char *lpszOutput;
	const char *lpszDatatype;
	unsigned int fwType;
};

/* 6107 */
struct MENUITEMTEMPLATEHEADER
{
	unsigned __int16 versionNumber;
	unsigned __int16 offset;
};

/* 6108 */
struct _SYSTEM_AUDIT_CALLBACK_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6109 */
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
	void *hActCtx;
	unsigned int dwFlags;
};

/* 6110 */
struct HTOUCHINPUT__
{
	int unused;
};

/* 6111 */
struct tagWNDCLASSA
{
	unsigned int style;
	int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE__ *hInstance;
	HICON__ *hIcon;
	HICON__ *hCursor;
	HBRUSH__ *hbrBackground;
	const char *lpszMenuName;
	const char *lpszClassName;
};

/* 6112 */
struct BITMAPV4HEADER
{
	unsigned int bV4Size;
	int bV4Width;
	int bV4Height;
	unsigned __int16 bV4Planes;
	unsigned __int16 bV4BitCount;
	unsigned int bV4V4Compression;
	unsigned int bV4SizeImage;
	int bV4XPelsPerMeter;
	int bV4YPelsPerMeter;
	unsigned int bV4ClrUsed;
	unsigned int bV4ClrImportant;
	unsigned int bV4RedMask;
	unsigned int bV4GreenMask;
	unsigned int bV4BlueMask;
	unsigned int bV4AlphaMask;
	unsigned int bV4CSType;
	tagICEXYZTRIPLE bV4Endpoints;
	unsigned int bV4GammaRed;
	unsigned int bV4GammaGreen;
	unsigned int bV4GammaBlue;
};

/* 6113 */
struct _BLENDFUNCTION
{
	char BlendOp;
	char BlendFlags;
	char SourceConstantAlpha;
	char AlphaFormat;
};

/* 6114 */
struct tagGESTURECONFIG
{
	unsigned int dwID;
	unsigned int dwWant;
	unsigned int dwBlock;
};

/* 6115 */
struct _FILEMUIINFO
{
	unsigned int dwSize;
	unsigned int dwVersion;
	unsigned int dwFileType;
	char pChecksum[16];
	char pServiceChecksum[16];
	unsigned int dwLanguageNameOffset;
	unsigned int dwTypeIDMainSize;
	unsigned int dwTypeIDMainOffset;
	unsigned int dwTypeNameMainOffset;
	unsigned int dwTypeIDMUISize;
	unsigned int dwTypeIDMUIOffset;
	unsigned int dwTypeNameMUIOffset;
	char abBuffer[8];
};

/* 6116 */
struct __cppobj ISteamNetworking
{
	ISteamNetworkingVtbl *vfptr;
};

/* 6118 */
struct ISteamNetworkingVtbl
{
	bool (__thiscall *SendP2PPacket)(ISteamNetworking *this, CSteamID, const void *, unsigned int, EP2PSend, int);
	_BYTE gap4[8];
	bool (__thiscall *AcceptP2PSessionWithUser)(ISteamNetworking *this, CSteamID);
	bool (__thiscall *CloseP2PSessionWithUser)(ISteamNetworking *this, CSteamID);
	bool (__thiscall *CloseP2PChannelWithUser)(ISteamNetworking *this, CSteamID, int);
	bool (__thiscall *GetP2PSessionState)(ISteamNetworking *this, CSteamID, P2PSessionState_t *);
	bool (__thiscall *AllowP2PPacketRelay)(ISteamNetworking *this, bool);
	unsigned int (__thiscall *CreateListenSocket)(ISteamNetworking *this, int, unsigned int, unsigned __int16, bool);
	unsigned int (__thiscall *CreateP2PConnectionSocket)(ISteamNetworking *this, CSteamID, int, int, bool);
	unsigned int (__thiscall *CreateConnectionSocket)(ISteamNetworking *this, unsigned int, unsigned __int16, int);
	bool (__thiscall *DestroySocket)(ISteamNetworking *this, unsigned int, bool);
	bool (__thiscall *DestroyListenSocket)(ISteamNetworking *this, unsigned int, bool);
	bool (__thiscall *SendDataOnSocket)(ISteamNetworking *this, unsigned int, void *, unsigned int, bool);
	bool (__thiscall *IsDataAvailableOnSocket)(ISteamNetworking *this, unsigned int, unsigned int *);
	bool (__thiscall *RetrieveDataFromSocket)(ISteamNetworking *this, unsigned int, void *, unsigned int, unsigned int *);
	bool (__thiscall *IsDataAvailable)(ISteamNetworking *this, unsigned int, unsigned int *, unsigned int *);
	bool (__thiscall *RetrieveData)(ISteamNetworking *this, unsigned int, void *, unsigned int, unsigned int *, unsigned int *);
	bool (__thiscall *GetSocketInfo)(ISteamNetworking *this, unsigned int, CSteamID *, int *, unsigned int *, unsigned __int16 *);
	bool (__thiscall *GetListenSocketInfo)(ISteamNetworking *this, unsigned int, unsigned int *, unsigned __int16 *);
	ESNetSocketConnectionType (__thiscall *GetSocketConnectionType)(ISteamNetworking *this, unsigned int);
	int (__thiscall *GetMaxPacketSize)(ISteamNetworking *this, unsigned int);
};

/* 6117 */
struct __declspec(align(4)) P2PSessionState_t
{
	char m_bConnectionActive;
	char m_bConnecting;
	char m_eP2PSessionError;
	char m_bUsingRelay;
	int m_nBytesQueuedForSend;
	int m_nPacketsQueuedForSend;
	unsigned int m_nRemoteIP;
	unsigned __int16 m_nRemotePort;
};

/* 6119 */
struct _TRANSACTION_BIND_INFORMATION
{
	void *TmHandle;
};

/* 6120 */
struct HUMPD__
{
	int unused;
};

/* 6121 */
struct _NETRESOURCEA
{
	unsigned int dwScope;
	unsigned int dwType;
	unsigned int dwDisplayType;
	unsigned int dwUsage;
	char *lpLocalName;
	char *lpRemoteName;
	char *lpComment;
	char *lpProvider;
};

/* 6122 */
struct __cppobj __unaligned __declspec(align(1)) PSNGameBootInviteResult_t
{
	bool m_bGameBootInviteExists;
	CSteamID m_steamIDLobby;
};

/* 6123 */
struct UI_Control_Label_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	__unaligned __declspec(align(1)) unsigned int textStrRef;
	char refTextFont[8];
	__unaligned __declspec(align(1)) unsigned int rgbTextForeground;
	__unaligned __declspec(align(1)) unsigned int rgbBackground;
	unsigned __int16 nLabelType;
};

/* 6124 */
struct _STARTUPINFOW
{
	unsigned int cb;
	unsigned __int16 *lpReserved;
	unsigned __int16 *lpDesktop;
	unsigned __int16 *lpTitle;
	unsigned int dwX;
	unsigned int dwY;
	unsigned int dwXSize;
	unsigned int dwYSize;
	unsigned int dwXCountChars;
	unsigned int dwYCountChars;
	unsigned int dwFillAttribute;
	unsigned int dwFlags;
	unsigned __int16 wShowWindow;
	unsigned __int16 cbReserved2;
	char *lpReserved2;
	void *hStdInput;
	void *hStdOutput;
	void *hStdError;
};

/* 6125 */
struct _STARTUPINFOEXW
{
	_STARTUPINFOW StartupInfo;
	_PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
};

/* 6126 */
struct tagEMRCREATEDIBPATTERNBRUSHPT
{
	tagEMR emr;
	unsigned int ihBrush;
	unsigned int iUsage;
	unsigned int offBmi;
	unsigned int cbBmi;
	unsigned int offBits;
	unsigned int cbBits;
};

/* 6127 */
struct SC_HANDLE__
{
	int unused;
};

/* 6128 */
struct _KTMOBJECT_CURSOR
{
	_GUID LastQuery;
	unsigned int ObjectIdCount;
	_GUID ObjectIds[1];
};

/* 6129 */
struct tagPOINTS
{
	__int16 x;
	__int16 y;
};

/* 6130 */
struct tagMOUSEINPUT
{
	int dx;
	int dy;
	unsigned int mouseData;
	unsigned int dwFlags;
	unsigned int time;
	unsigned int dwExtraInfo;
};

/* 6131 */
struct tagKEYBDINPUT
{
	unsigned __int16 wVk;
	unsigned __int16 wScan;
	unsigned int dwFlags;
	unsigned int time;
	unsigned int dwExtraInfo;
};

/* 6132 */
struct tagHARDWAREINPUT
{
	unsigned int uMsg;
	unsigned __int16 wParamL;
	unsigned __int16 wParamH;
};

/* 6133 */
union $5DACE837AD2F2AF6C3DA154F811286C3
{
	tagMOUSEINPUT mi;
	tagKEYBDINPUT ki;
	tagHARDWAREINPUT hi;
};

/* 6134 */
struct tagINPUT
{
	unsigned int type;
	$5DACE837AD2F2AF6C3DA154F811286C3 ___u1;
};

/* 6135 */
struct _KCRM_PROTOCOL_BLOB
{
	_GUID ProtocolId;
	unsigned int StaticInfoLength;
	unsigned int TransactionIdInfoLength;
	unsigned int Unused1;
	unsigned int Unused2;
};

/* 6136 */
struct tagPOINTFX
{
	_FIXED x;
	_FIXED y;
};

/* 6137 */
struct __cppobj CTypedPtrList<CPtrList,CProjectile *> : CPtrList
{
};

/* 6138 */
struct __cppobj CProjectileMulti : CProjectileBAM
{
	CTypedPtrList<CPtrList,CProjectile *> m_projectiles;
};

/* 6139 */
struct PPM_WMI_PERF_STATE
{
	unsigned int Frequency;
	unsigned int Power;
	char PercentFrequency;
	char IncreaseLevel;
	char DecreaseLevel;
	char Type;
	unsigned int IncreaseTime;
	unsigned int DecreaseTime;
	unsigned __int64 Control;
	unsigned __int64 Status;
	unsigned int HitCount;
	unsigned int Reserved1;
	unsigned __int64 Reserved2;
	unsigned __int64 Reserved3;
};

/* 6140 */
struct PPM_WMI_PERF_STATES_EX
{
	unsigned int Count;
	unsigned int MaxFrequency;
	unsigned int CurrentState;
	unsigned int MaxPerfState;
	unsigned int MinPerfState;
	unsigned int LowestPerfState;
	unsigned int ThermalConstraint;
	char BusyAdjThreshold;
	char PolicyType;
	char Type;
	char Reserved;
	unsigned int TimerInterval;
	void *TargetProcessors;
	unsigned int PStateHandler;
	unsigned int PStateContext;
	unsigned int TStateHandler;
	unsigned int TStateContext;
	unsigned int FeedbackHandler;
	unsigned int Reserved1;
	unsigned __int64 Reserved2;
	PPM_WMI_PERF_STATE State[1];
};

/* 6141 */
struct __declspec(align(4)) _COMMPROP
{
	unsigned __int16 wPacketLength;
	unsigned __int16 wPacketVersion;
	unsigned int dwServiceMask;
	unsigned int dwReserved1;
	unsigned int dwMaxTxQueue;
	unsigned int dwMaxRxQueue;
	unsigned int dwMaxBaud;
	unsigned int dwProvSubType;
	unsigned int dwProvCapabilities;
	unsigned int dwSettableParams;
	unsigned int dwSettableBaud;
	unsigned __int16 wSettableData;
	unsigned __int16 wSettableStopParity;
	unsigned int dwCurrentTxQueue;
	unsigned int dwCurrentRxQueue;
	unsigned int dwProvSpec1;
	unsigned int dwProvSpec2;
	wchar_t wcProvChar[1];
};

/* 6142 */
struct tagGUITHREADINFO
{
	unsigned int cbSize;
	unsigned int flags;
	HWND__ *hwndActive;
	HWND__ *hwndFocus;
	HWND__ *hwndCapture;
	HWND__ *hwndMenuOwner;
	HWND__ *hwndMoveSize;
	HWND__ *hwndCaret;
	tagRECT rcCaret;
};

/* 6143 */
struct _KCRM_TRANSACTION_BLOB
{
	_GUID UOW;
	_GUID TmIdentity;
	unsigned int IsolationLevel;
	unsigned int IsolationFlags;
	unsigned int Timeout;
	wchar_t Description[64];
};

/* 6144 */
struct tagEXTLOGPEN32
{
	unsigned int elpPenStyle;
	unsigned int elpWidth;
	unsigned int elpBrushStyle;
	unsigned int elpColor;
	unsigned int elpHatch;
	unsigned int elpNumEntries;
	unsigned int elpStyleEntry[1];
};

/* 6145 */
struct HDC__
{
	int unused;
};

/* 6146 */
struct tagPAINTSTRUCT
{
	HDC__ *hdc;
	int fErase;
	tagRECT rcPaint;
	int fRestore;
	int fIncUpdate;
	char rgbReserved[32];
};

/* 6147 */
struct _DISCDLGSTRUCTA
{
	unsigned int cbStructure;
	HWND__ *hwndOwner;
	char *lpLocalName;
	char *lpRemoteName;
	unsigned int dwFlags;
};

/* 6148 */
struct _QUERY_SERVICE_CONFIGW
{
	unsigned int dwServiceType;
	unsigned int dwStartType;
	unsigned int dwErrorControl;
	wchar_t *lpBinaryPathName;
	wchar_t *lpLoadOrderGroup;
	unsigned int dwTagId;
	wchar_t *lpDependencies;
	wchar_t *lpServiceStartName;
	wchar_t *lpDisplayName;
};

/* 6149 */
struct HPALETTE__
{
	int unused;
};

/* 6150 */
struct _SINGLE_LIST_ENTRY
{
	_SINGLE_LIST_ENTRY *Next;
};

/* 6151 */
struct _SYSTEM_ALARM_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6152 */
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6153 */
struct tagWNDCLASSEXW
{
	unsigned int cbSize;
	unsigned int style;
	int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE__ *hInstance;
	HICON__ *hIcon;
	HICON__ *hCursor;
	HBRUSH__ *hbrBackground;
	const wchar_t *lpszMenuName;
	const wchar_t *lpszClassName;
	HICON__ *hIconSm;
};

/* 6154 */
struct tagMONITORINFO
{
	unsigned int cbSize;
	tagRECT rcMonitor;
	tagRECT rcWork;
	unsigned int dwFlags;
};

/* 6155 */
struct __cppobj tagMONITORINFOEXA : tagMONITORINFO
{
	char szDevice[32];
};

/* 6156 */
struct __cppobj __unaligned __declspec(align(2)) GameConnectedChatLeave_t
{
	CSteamID m_steamIDClanChat;
	CSteamID m_steamIDUser;
	bool m_bKicked;
	bool m_bDropped;
};

/* 6157 */
struct __declspec(align(4)) LobbyGameCreated_t
{
	unsigned __int64 m_ulSteamIDLobby;
	unsigned __int64 m_ulSteamIDGameServer;
	unsigned int m_unIP;
	unsigned __int16 m_usPort;
};

/* 6158 */
struct _STARTUPINFOEXA
{
	_STARTUPINFOA StartupInfo;
	_PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
};

/* 6159 */
struct __cppobj __unaligned __declspec(align(4)) ValidateAuthTicketResponse_t
{
	CSteamID m_SteamID;
	EAuthSessionResponse m_eAuthSessionResponse;
	CSteamID m_OwnerSteamID;
};

/* 6160 */
struct __declspec(align(4)) tagEMRINVERTRGN
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cbRgnData;
	char RgnData[1];
};

/* 6161 */
struct __declspec(align(4)) _MODEMSETTINGS
{
	unsigned int dwActualSize;
	unsigned int dwRequiredSize;
	unsigned int dwDevSpecificOffset;
	unsigned int dwDevSpecificSize;
	unsigned int dwCallSetupFailTimer;
	unsigned int dwInactivityTimeout;
	unsigned int dwSpeakerVolume;
	unsigned int dwSpeakerMode;
	unsigned int dwPreferredModemOptions;
	unsigned int dwNegotiatedModemOptions;
	unsigned int dwNegotiatedDCERate;
	char abVariablePortion[1];
};

/* 6162 */
struct tagBITMAPINFO
{
	tagBITMAPINFOHEADER bmiHeader;
	tagRGBQUAD bmiColors[1];
};

/* 6163 */
union _float_val
{
	unsigned __int16 _Sh[8];
	float _Val;
};

/* 6164 */
struct _IMAGE_ROM_OPTIONAL_HEADER
{
	unsigned __int16 Magic;
	char MajorLinkerVersion;
	char MinorLinkerVersion;
	unsigned int SizeOfCode;
	unsigned int SizeOfInitializedData;
	unsigned int SizeOfUninitializedData;
	unsigned int AddressOfEntryPoint;
	unsigned int BaseOfCode;
	unsigned int BaseOfData;
	unsigned int BaseOfBss;
	unsigned int GprMask;
	unsigned int CprMask[4];
	unsigned int GpValue;
};

/* 6165 */
struct _IMAGE_ROM_HEADERS
{
	_IMAGE_FILE_HEADER FileHeader;
	_IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
};

/* 6166 */
struct tagSCROLLBARINFO
{
	unsigned int cbSize;
	tagRECT rcScrollBar;
	int dxyLineButton;
	int xyThumbTop;
	int xyThumbBottom;
	int reserved;
	unsigned int rgstate[6];
};

/* 6167 */
struct _IMAGE_DEBUG_DIRECTORY
{
	unsigned int Characteristics;
	unsigned int TimeDateStamp;
	unsigned __int16 MajorVersion;
	unsigned __int16 MinorVersion;
	unsigned int Type;
	unsigned int SizeOfData;
	unsigned int AddressOfRawData;
	unsigned int PointerToRawData;
};

/* 6168 */
struct pvalueA
{
	char *pv_valuename;
	int pv_valuelen;
	void *pv_value_context;
	unsigned int pv_type;
};

/* 6169 */
struct _TOKEN_USER
{
	_SID_AND_ATTRIBUTES User;
};

/* 6170 */
struct tagEMREXTTEXTOUTA
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int iGraphicsMode;
	float exScale;
	float eyScale;
	tagEMRTEXT emrtext;
};

/* 6171 */
struct tagEMRANGLEARC
{
	tagEMR emr;
	_POINTL ptlCenter;
	unsigned int nRadius;
	float eStartAngle;
	float eSweepAngle;
};

/* 6172 */
struct tagCANDIDATEFORM
{
	unsigned int dwIndex;
	unsigned int dwStyle;
	tagPOINT ptCurrentPos;
	tagRECT rcArea;
};

/* 6173 */
struct tagEMRSETARCDIRECTION
{
	tagEMR emr;
	unsigned int iArcDirection;
};

/* 6174 */
struct tagLAYERPLANEDESCRIPTOR
{
	unsigned __int16 nSize;
	unsigned __int16 nVersion;
	unsigned int dwFlags;
	char iPixelType;
	char cColorBits;
	char cRedBits;
	char cRedShift;
	char cGreenBits;
	char cGreenShift;
	char cBlueBits;
	char cBlueShift;
	char cAlphaBits;
	char cAlphaShift;
	char cAccumBits;
	char cAccumRedBits;
	char cAccumGreenBits;
	char cAccumBlueBits;
	char cAccumAlphaBits;
	char cDepthBits;
	char cStencilBits;
	char cAuxBuffers;
	char iLayerPlane;
	char bReserved;
	unsigned int crTransparent;
};

/* 6175 */
struct __declspec(align(8)) _TAPE_SET_POSITION
{
	unsigned int Method;
	unsigned int Partition;
	_LARGE_INTEGER Offset;
	char Immediate;
};

/* 6176 */
struct _numberfmtW
{
	unsigned int NumDigits;
	unsigned int LeadingZero;
	unsigned int Grouping;
	wchar_t *lpDecimalSep;
	wchar_t *lpThousandSep;
	unsigned int NegativeOrder;
};

/* 6177 */
struct _CONNECTDLGSTRUCTA
{
	unsigned int cbStructure;
	HWND__ *hwndOwner;
	_NETRESOURCEA *lpConnRes;
	unsigned int dwFlags;
	unsigned int dwDevNum;
};

/* 6178 */
struct tagRID_DEVICE_INFO_MOUSE
{
	unsigned int dwId;
	unsigned int dwNumberOfButtons;
	unsigned int dwSampleRate;
	int fHasHorizontalWheel;
};

/* 6179 */
struct tagRID_DEVICE_INFO_KEYBOARD
{
	unsigned int dwType;
	unsigned int dwSubType;
	unsigned int dwKeyboardMode;
	unsigned int dwNumberOfFunctionKeys;
	unsigned int dwNumberOfIndicators;
	unsigned int dwNumberOfKeysTotal;
};

/* 6180 */
struct tagRID_DEVICE_INFO_HID
{
	unsigned int dwVendorId;
	unsigned int dwProductId;
	unsigned int dwVersionNumber;
	unsigned __int16 usUsagePage;
	unsigned __int16 usUsage;
};

/* 6181 */
union $E64637FD2CC735687E9CB94EBBC31950
{
	tagRID_DEVICE_INFO_MOUSE mouse;
	tagRID_DEVICE_INFO_KEYBOARD keyboard;
	tagRID_DEVICE_INFO_HID hid;
};

/* 6182 */
struct tagRID_DEVICE_INFO
{
	unsigned int cbSize;
	unsigned int dwType;
	$E64637FD2CC735687E9CB94EBBC31950 ___u2;
};

/* 6183 */
union $024A9AD87DA22F97CCD4130050D7BF17
{
	unsigned int SymbolTableIndex;
	unsigned int VirtualAddress;
};

/* 6184 */
struct __unaligned __declspec(align(2)) _IMAGE_LINENUMBER
{
	$024A9AD87DA22F97CCD4130050D7BF17 Type;
	unsigned __int16 Linenumber;
};

/* 6185 */
struct _EXCEPTION_DEBUG_INFO
{
	_EXCEPTION_RECORD ExceptionRecord;
	unsigned int dwFirstChance;
};

/* 6186 */
struct SDL_JoystickGUID
{
	char data[16];
};

/* 6187 */
struct _DISPLAY_DEVICEA
{
	unsigned int cb;
	char DeviceName[32];
	char DeviceString[128];
	unsigned int StateFlags;
	char DeviceID[128];
	char DeviceKey[128];
};

/* 6188 */
struct tagWCRANGE
{
	wchar_t wcLow;
	unsigned __int16 cGlyphs;
};

/* 6189 */
struct __declspec(align(4)) _IMAGE_DEBUG_MISC
{
	unsigned int DataType;
	unsigned int Length;
	char Unicode;
	char Reserved[3];
	char Data[1];
};

/* 6190 */
struct _TRANSACTION_LIST_ENTRY
{
	_GUID UOW;
};

/* 6191 */
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA
{
	char *pmszRequiredPrivileges;
};

/* 6192 */
struct SteamServerConnectFailure_t
{
	EResult m_eResult;
};

/* 6193 */
struct HENHMETAFILE__
{
	int unused;
};

/* 6194 */
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
	unsigned int BeginAddress;
	unsigned int EndAddress;
	unsigned int ExceptionHandler;
	unsigned int HandlerData;
	unsigned int PrologEndAddress;
};

/* 6195 */
struct __declspec(align(4)) _RESOURCEMANAGER_BASIC_INFORMATION
{
	_GUID ResourceManagerId;
	unsigned int DescriptionLength;
	wchar_t Description[1];
};

/* 6196 */
struct _COMPATIBILITY_CONTEXT_ELEMENT
{
	_GUID Id;
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
};

/* 6197 */
struct $081CB3FCB553006ADFF4E67950646883
{
	int hat;
	int hat_mask;
};

/* 6198 */
union $FBB936FF18C7DA0B29D44C5644BABC45
{
	int button;
	int axis;
	$081CB3FCB553006ADFF4E67950646883 hat;
};

/* 6199 */
struct SDL_GameControllerButtonBind
{
	SDL_GameControllerBindType bindType;
	$FBB936FF18C7DA0B29D44C5644BABC45 value;
};

/* 6200 */
struct tagRECONVERTSTRING
{
	unsigned int dwSize;
	unsigned int dwVersion;
	unsigned int dwStrLen;
	unsigned int dwStrOffset;
	unsigned int dwCompStrLen;
	unsigned int dwCompStrOffset;
	unsigned int dwTargetStrLen;
	unsigned int dwTargetStrOffset;
};

/* 6201 */
struct _EXCEPTION_RECORD32
{
	unsigned int ExceptionCode;
	unsigned int ExceptionFlags;
	unsigned int ExceptionRecord;
	unsigned int ExceptionAddress;
	unsigned int NumberParameters;
	unsigned int ExceptionInformation[15];
};

/* 6202 */
struct _EXCEPTION_POINTERS
{
	_EXCEPTION_RECORD *ExceptionRecord;
	_CONTEXT *ContextRecord;
};

/* 6203 */
struct _IMAGE_SYMBOL_EX
{
	$0B06C3261E7556B467E416F023BECA89 N;
	unsigned int Value;
	int SectionNumber;
	unsigned __int16 Type;
	char StorageClass;
	char NumberOfAuxSymbols;
};

/* 6204 */
struct __declspec(align(4)) tagEMREXTSELECTCLIPRGN
{
	tagEMR emr;
	unsigned int cbRgnData;
	unsigned int iMode;
	char RgnData[1];
};

/* 6205 */
struct tagSTICKYKEYS
{
	unsigned int cbSize;
	unsigned int dwFlags;
};

/* 6206 */
struct tagTITLEBARINFO
{
	unsigned int cbSize;
	tagRECT rcTitleBar;
	unsigned int rgstate[6];
};

/* 6207 */
struct __cppobj ISteamAppList
{
	ISteamAppListVtbl *vfptr;
};

/* 6208 */
struct ISteamAppListVtbl
{
	unsigned int (__thiscall *GetNumInstalledApps)(ISteamAppList *this);
	unsigned int (__thiscall *GetInstalledApps)(ISteamAppList *this, unsigned int *, unsigned int);
	int (__thiscall *GetAppName)(ISteamAppList *this, unsigned int, char *, int);
	int (__thiscall *GetAppInstallDir)(ISteamAppList *this, unsigned int, char *, int);
	int (__thiscall *GetAppBuildId)(ISteamAppList *this, unsigned int);
};

/* 6209 */
struct _TRANSACTION_BASIC_INFORMATION
{
	_GUID TransactionId;
	unsigned int State;
	unsigned int Outcome;
};

/* 6210 */
struct __cppobj ISteamMusicRemote
{
	ISteamMusicRemoteVtbl *vfptr;
};

/* 6211 */
struct ISteamMusicRemoteVtbl
{
	bool (__thiscall *RegisterSteamMusicRemote)(ISteamMusicRemote *this, const char *);
	bool (__thiscall *SetDisplayName)(ISteamMusicRemote *this, const char *) __declspec(align(16));
	bool (__thiscall *SetPNGIcon_64x64)(ISteamMusicRemote *this, void *, unsigned int);
	bool (__thiscall *EnablePlayPrevious)(ISteamMusicRemote *this, bool);
	bool (__thiscall *EnablePlayNext)(ISteamMusicRemote *this, bool);
	bool (__thiscall *EnableShuffled)(ISteamMusicRemote *this, bool);
	bool (__thiscall *EnableLooped)(ISteamMusicRemote *this, bool);
	bool (__thiscall *EnableQueue)(ISteamMusicRemote *this, bool);
	bool (__thiscall *EnablePlaylists)(ISteamMusicRemote *this, bool);
	bool (__thiscall *UpdatePlaybackStatus)(ISteamMusicRemote *this, AudioPlayback_Status);
	bool (__thiscall *UpdateShuffled)(ISteamMusicRemote *this, bool);
	bool (__thiscall *UpdateLooped)(ISteamMusicRemote *this, bool);
	bool (__thiscall *UpdateVolume)(ISteamMusicRemote *this, float);
	bool (__thiscall *CurrentEntryWillChange)(ISteamMusicRemote *this);
	bool (__thiscall *CurrentEntryIsAvailable)(ISteamMusicRemote *this, bool);
	bool (__thiscall *UpdateCurrentEntryText)(ISteamMusicRemote *this, const char *);
	bool (__thiscall *UpdateCurrentEntryElapsedSeconds)(ISteamMusicRemote *this, int);
	bool (__thiscall *UpdateCurrentEntryCoverArt)(ISteamMusicRemote *this, void *, unsigned int);
	bool (__thiscall *CurrentEntryDidChange)(ISteamMusicRemote *this);
	bool (__thiscall *QueueWillChange)(ISteamMusicRemote *this);
	bool (__thiscall *ResetQueueEntries)(ISteamMusicRemote *this);
	bool (__thiscall *SetQueueEntry)(ISteamMusicRemote *this, int, int, const char *);
	bool (__thiscall *SetCurrentQueueEntry)(ISteamMusicRemote *this, int);
	bool (__thiscall *QueueDidChange)(ISteamMusicRemote *this);
	bool (__thiscall *PlaylistWillChange)(ISteamMusicRemote *this);
	bool (__thiscall *ResetPlaylistEntries)(ISteamMusicRemote *this);
	bool (__thiscall *SetPlaylistEntry)(ISteamMusicRemote *this, int, int, const char *);
	bool (__thiscall *SetCurrentPlaylistEntry)(ISteamMusicRemote *this, int);
	bool (__thiscall *PlaylistDidChange)(ISteamMusicRemote *this);
};

/* 6212 */
struct tagAXISINFOW
{
	int axMinValue;
	int axMaxValue;
	wchar_t axAxisName[16];
};

/* 6213 */
struct tagENUMLOGFONTA
{
	tagLOGFONTA elfLogFont;
	char elfFullName[64];
	char elfStyle[32];
};

/* 6214 */
struct tagEMRALPHABLEND
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int cxDest;
	int cyDest;
	unsigned int dwRop;
	int xSrc;
	int ySrc;
	tagXFORM xformSrc;
	unsigned int crBkColorSrc;
	unsigned int iUsageSrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	int cxSrc;
	int cySrc;
};

/* 6215 */
struct tagMOUSEHOOKSTRUCT
{
	tagPOINT pt;
	HWND__ *hwnd;
	unsigned int wHitTestCode;
	unsigned int dwExtraInfo;
};

/* 6216 */
struct tagUPDATELAYEREDWINDOWINFO
{
	unsigned int cbSize;
	HDC__ *hdcDst;
	tagPOINT *pptDst;
	tagSIZE *psize;
	HDC__ *hdcSrc;
	tagPOINT *pptSrc;
	unsigned int crKey;
	_BLENDFUNCTION *pblend;
	unsigned int dwFlags;
	tagRECT *prcDirty;
};

/* 6217 */
struct __declspec(align(4)) tagEMRGLSRECORD
{
	tagEMR emr;
	unsigned int cbData;
	char Data[1];
};

/* 6218 */
struct tagMOUSEKEYS
{
	unsigned int cbSize;
	unsigned int dwFlags;
	unsigned int iMaxSpeed;
	unsigned int iTimeToMaxSpeed;
	unsigned int iCtrlSpeed;
	unsigned int dwReserved1;
	unsigned int dwReserved2;
};

/* 6219 */
struct HACCEL__
{
	int unused;
};

/* 6220 */
struct tagEMRSTRETCHBLT
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int cxDest;
	int cyDest;
	unsigned int dwRop;
	int xSrc;
	int ySrc;
	tagXFORM xformSrc;
	unsigned int crBkColorSrc;
	unsigned int iUsageSrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	int cxSrc;
	int cySrc;
};

/* 6221 */
struct __cppobj CProjectileMushroom : CProjectileBAM
{
};

/* 6222 */
struct _ACCESS_DENIED_CALLBACK_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6223 */
struct _TOKEN_GROUPS
{
	unsigned int GroupCount;
	_SID_AND_ATTRIBUTES Groups[1];
};

/* 6224 */
struct _TOKEN_PRIVILEGES
{
	unsigned int PrivilegeCount;
	_LUID_AND_ATTRIBUTES Privileges[1];
};

/* 6225 */
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
	unsigned int SecurityLimitFlags;
	void *JobToken;
	_TOKEN_GROUPS *SidsToDisable;
	_TOKEN_PRIVILEGES *PrivilegesToDelete;
	_TOKEN_GROUPS *RestrictedSids;
};

/* 6226 */
union $E6E24A7F5B6F8B597C18331DB62781EC
{
	unsigned int ForwarderString;
	unsigned int Function;
	unsigned int Ordinal;
	unsigned int AddressOfData;
};

/* 6227 */
struct _IMAGE_THUNK_DATA32
{
	$E6E24A7F5B6F8B597C18331DB62781EC u1;
};

/* 6228 */
struct __cppobj __unaligned __declspec(align(4)) SocketStatusCallback_t
{
	unsigned int m_hSocket;
	unsigned int m_hListenSocket;
	CSteamID m_steamIDRemote;
	int m_eSNetSocketState;
};

/* 6229 */
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
	unsigned int FuncStart;
	unsigned __int32 PrologLen : 8;
	unsigned __int32 FuncLen : 22;
	unsigned __int32 ThirtyTwoBit : 1;
	unsigned __int32 ExceptionFlag : 1;
};

/* 6230 */
struct tagSERIALKEYSA
{
	unsigned int cbSize;
	unsigned int dwFlags;
	char *lpszActivePort;
	char *lpszPort;
	unsigned int iBaudRate;
	unsigned int iPortState;
	unsigned int iActive;
};

/* 6231 */
struct _RESOURCEMANAGER_COMPLETION_INFORMATION
{
	void *IoCompletionPortHandle;
	unsigned int CompletionKey;
};

/* 6232 */
struct TLK_FILE_OVERRIDE_ENTRY
{
	unsigned int strRef;
	unsigned int wFlags;
	char sndResRef[8];
	unsigned int volumeVariance;
	unsigned int pitchVariance;
	unsigned int offsetToStr;
};

/* 6233 */
struct balldelta
{
	int dx;
	int dy;
};

/* 6234 */
struct IDirectInputDevice8W
{
	IDirectInputDevice8WVtbl *lpVtbl;
};

/* 6254 */
struct IDirectInputDevice8WVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirectInputDevice8W *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirectInputDevice8W *);
	unsigned int (__stdcall *Release)(IDirectInputDevice8W *);
	HRESULT (__stdcall *GetCapabilities)(IDirectInputDevice8W *, DIDEVCAPS *);
	HRESULT (__stdcall *EnumObjects)(IDirectInputDevice8W *, int (__stdcall *)(DIDEVICEOBJECTINSTANCEW *, void *), void *, unsigned int);
	HRESULT (__stdcall *GetProperty)(IDirectInputDevice8W *, _GUID *const, DIPROPHEADER *);
	HRESULT (__stdcall *SetProperty)(IDirectInputDevice8W *, _GUID *const, DIPROPHEADER *);
	HRESULT (__stdcall *Acquire)(IDirectInputDevice8W *);
	HRESULT (__stdcall *Unacquire)(IDirectInputDevice8W *);
	HRESULT (__stdcall *GetDeviceState)(IDirectInputDevice8W *, unsigned int, void *);
	HRESULT (__stdcall *GetDeviceData)(IDirectInputDevice8W *, unsigned int, DIDEVICEOBJECTDATA *, unsigned int *, unsigned int);
	HRESULT (__stdcall *SetDataFormat)(IDirectInputDevice8W *, _DIDATAFORMAT *);
	HRESULT (__stdcall *SetEventNotification)(IDirectInputDevice8W *, void *);
	HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDevice8W *, HWND__ *, unsigned int);
	HRESULT (__stdcall *GetObjectInfo)(IDirectInputDevice8W *, DIDEVICEOBJECTINSTANCEW *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDevice8W *, DIDEVICEINSTANCEW *);
	HRESULT (__stdcall *RunControlPanel)(IDirectInputDevice8W *, HWND__ *, unsigned int);
	HRESULT (__stdcall *Initialize)(IDirectInputDevice8W *, HINSTANCE__ *, unsigned int, _GUID *const);
	HRESULT (__stdcall *CreateEffect)(IDirectInputDevice8W *, _GUID *const, DIEFFECT *, IDirectInputEffect **, IUnknown *);
	HRESULT (__stdcall *EnumEffects)(IDirectInputDevice8W *, int (__stdcall *)(DIEFFECTINFOW *, void *), void *, unsigned int);
	HRESULT (__stdcall *GetEffectInfo)(IDirectInputDevice8W *, DIEFFECTINFOW *, _GUID *const);
	HRESULT (__stdcall *GetForceFeedbackState)(IDirectInputDevice8W *, unsigned int *);
	HRESULT (__stdcall *SendForceFeedbackCommand)(IDirectInputDevice8W *, unsigned int);
	HRESULT (__stdcall *EnumCreatedEffectObjects)(IDirectInputDevice8W *, int (__stdcall *)(IDirectInputEffect *, void *), void *, unsigned int);
	HRESULT (__stdcall *Escape)(IDirectInputDevice8W *, DIEFFESCAPE *);
	HRESULT (__stdcall *Poll)(IDirectInputDevice8W *);
	HRESULT (__stdcall *SendDeviceData)(IDirectInputDevice8W *, unsigned int, DIDEVICEOBJECTDATA *, unsigned int *, unsigned int);
	HRESULT (__stdcall *EnumEffectsInFile)(IDirectInputDevice8W *, const wchar_t *, int (__stdcall *)(DIFILEEFFECT *, void *), void *, unsigned int);
	HRESULT (__stdcall *WriteEffectToFile)(IDirectInputDevice8W *, const wchar_t *, unsigned int, DIFILEEFFECT *, unsigned int);
	HRESULT (__stdcall *BuildActionMap)(IDirectInputDevice8W *, _DIACTIONFORMATW *, const wchar_t *, unsigned int);
	HRESULT (__stdcall *SetActionMap)(IDirectInputDevice8W *, _DIACTIONFORMATW *, const wchar_t *, unsigned int);
	HRESULT (__stdcall *GetImageInfo)(IDirectInputDevice8W *, _DIDEVICEIMAGEINFOHEADERW *);
};

/* 6235 */
struct DIDEVCAPS
{
	unsigned int dwSize;
	unsigned int dwFlags;
	unsigned int dwDevType;
	unsigned int dwAxes;
	unsigned int dwButtons;
	unsigned int dwPOVs;
	unsigned int dwFFSamplePeriod;
	unsigned int dwFFMinTimeResolution;
	unsigned int dwFirmwareRevision;
	unsigned int dwHardwareRevision;
	unsigned int dwFFDriverVersion;
};

/* 6236 */
const struct DIDEVICEOBJECTINSTANCEW
{
	unsigned int dwSize;
	_GUID guidType;
	unsigned int dwOfs;
	unsigned int dwType;
	unsigned int dwFlags;
	wchar_t tszName[260];
	unsigned int dwFFMaxForce;
	unsigned int dwFFForceResolution;
	unsigned __int16 wCollectionNumber;
	unsigned __int16 wDesignatorIndex;
	unsigned __int16 wUsagePage;
	unsigned __int16 wUsage;
	unsigned int dwDimension;
	unsigned __int16 wExponent;
	unsigned __int16 wReportId;
};

/* 6237 */
struct DIPROPHEADER
{
	unsigned int dwSize;
	unsigned int dwHeaderSize;
	unsigned int dwObj;
	unsigned int dwHow;
};

/* 6238 */
struct DIDEVICEOBJECTDATA
{
	unsigned int dwOfs;
	unsigned int dwData;
	unsigned int dwTimeStamp;
	unsigned int dwSequence;
	unsigned int uAppData;
};

/* 6240 */
const struct _DIDATAFORMAT
{
	unsigned int dwSize;
	unsigned int dwObjSize;
	unsigned int dwFlags;
	unsigned int dwDataSize;
	unsigned int dwNumObjs;
	_DIOBJECTDATAFORMAT *rgodf;
};

/* 6241 */
struct DIDEVICEINSTANCEW
{
	unsigned int dwSize;
	_GUID guidInstance;
	_GUID guidProduct;
	unsigned int dwDevType;
	wchar_t tszInstanceName[260];
	wchar_t tszProductName[260];
	_GUID guidFFDriver;
	unsigned __int16 wUsagePage;
	unsigned __int16 wUsage;
};

/* 6243 */
const struct DIEFFECT
{
	unsigned int dwSize;
	unsigned int dwFlags;
	unsigned int dwDuration;
	unsigned int dwSamplePeriod;
	unsigned int dwGain;
	unsigned int dwTriggerButton;
	unsigned int dwTriggerRepeatInterval;
	unsigned int cAxes;
	unsigned int *rgdwAxes;
	int *rglDirection;
	DIENVELOPE *lpEnvelope;
	unsigned int cbTypeSpecificParams;
	void *lpvTypeSpecificParams;
	unsigned int dwStartDelay;
};

/* 6244 */
struct IDirectInputEffect
{
	IDirectInputEffectVtbl *lpVtbl;
};

/* 6247 */
const struct DIEFFECTINFOW
{
	unsigned int dwSize;
	_GUID guid;
	unsigned int dwEffType;
	unsigned int dwStaticParams;
	unsigned int dwDynamicParams;
	wchar_t tszName[260];
};

/* 6245 */
struct DIEFFESCAPE
{
	unsigned int dwSize;
	unsigned int dwCommand;
	void *lpvInBuffer;
	unsigned int cbInBuffer;
	void *lpvOutBuffer;
	unsigned int cbOutBuffer;
};

/* 6248 */
const struct DIFILEEFFECT
{
	unsigned int dwSize;
	_GUID GuidEffect;
	DIEFFECT *lpDiEffect;
	char szFriendlyName[260];
};

/* 6251 */
struct _DIACTIONFORMATW
{
	unsigned int dwSize;
	unsigned int dwActionSize;
	unsigned int dwDataSize;
	unsigned int dwNumActions;
	_DIACTIONW *rgoAction;
	_GUID guidActionMap;
	unsigned int dwGenre;
	unsigned int dwBufferSize;
	int lAxisMin;
	int lAxisMax;
	HINSTANCE__ *hInstString;
	_FILETIME ftTimeStamp;
	unsigned int dwCRC;
	wchar_t tszActionMap[260];
};

/* 6253 */
struct _DIDEVICEIMAGEINFOHEADERW
{
	unsigned int dwSize;
	unsigned int dwSizeImageInfo;
	unsigned int dwcViews;
	unsigned int dwcButtons;
	unsigned int dwcAxes;
	unsigned int dwcPOVs;
	unsigned int dwBufferSize;
	unsigned int dwBufferUsed;
	_DIDEVICEIMAGEINFOW *lprgImageInfoArray;
};

/* 6239 */
struct _DIOBJECTDATAFORMAT
{
	_GUID *pguid;
	unsigned int dwOfs;
	unsigned int dwType;
	unsigned int dwFlags;
};

/* 6242 */
struct DIENVELOPE
{
	unsigned int dwSize;
	unsigned int dwAttackLevel;
	unsigned int dwAttackTime;
	unsigned int dwFadeLevel;
	unsigned int dwFadeTime;
};

/* 6246 */
struct IDirectInputEffectVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirectInputEffect *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirectInputEffect *);
	unsigned int (__stdcall *Release)(IDirectInputEffect *);
	HRESULT (__stdcall *Initialize)(IDirectInputEffect *, HINSTANCE__ *, unsigned int, _GUID *const);
	HRESULT (__stdcall *GetEffectGuid)(IDirectInputEffect *, _GUID *);
	HRESULT (__stdcall *GetParameters)(IDirectInputEffect *, DIEFFECT *, unsigned int);
	HRESULT (__stdcall *SetParameters)(IDirectInputEffect *, DIEFFECT *, unsigned int);
	HRESULT (__stdcall *Start)(IDirectInputEffect *, unsigned int, unsigned int);
	HRESULT (__stdcall *Stop)(IDirectInputEffect *);
	HRESULT (__stdcall *GetEffectStatus)(IDirectInputEffect *, unsigned int *);
	HRESULT (__stdcall *Download)(IDirectInputEffect *);
	HRESULT (__stdcall *Unload)(IDirectInputEffect *);
	HRESULT (__stdcall *Escape)(IDirectInputEffect *, DIEFFESCAPE *);
};

/* 6249 */
union $7712E57AFDA7A7D8BAE0E8D9679E017A
{
	const wchar_t *lptszActionName;
	unsigned int uResIdString;
};

/* 6250 */
struct _DIACTIONW
{
	unsigned int uAppData;
	unsigned int dwSemantic;
	unsigned int dwFlags;
	$7712E57AFDA7A7D8BAE0E8D9679E017A ___u3;
	_GUID guidInstance;
	unsigned int dwObjID;
	unsigned int dwHow;
};

/* 6252 */
struct _DIDEVICEIMAGEINFOW
{
	wchar_t tszImagePath[260];
	unsigned int dwFlags;
	unsigned int dwViewID;
	tagRECT rcOverlay;
	unsigned int dwObjID;
	unsigned int dwcValidPts;
	tagPOINT rgptCalloutLine[5];
	tagRECT rcCalloutRect;
	unsigned int dwTextAlign;
};

/* 6255 */
struct __declspec(align(4)) input_t
{
	unsigned int ofs;
	Type type;
	char num;
};

/* 6256 */
struct joystick_hwdata
{
	SDL_JoystickGUID guid;
	SDL_bool removed;
	SDL_bool send_remove_event;
	IDirectInputDevice8W *InputDevice;
	DIDEVCAPS Capabilities;
	SDL_bool buffered;
	input_t Inputs[256];
	int NumInputs;
	int NumSliders;
	SDL_bool bXInputDevice;
	SDL_bool bXInputHaptic;
	char userid;
	unsigned int dwPacketNumber;
};

/* 6257 */
struct _SDL_Joystick
{
	int instance_id;
	char *name;
	int naxes;
	__int16 *axes;
	int nhats;
	char *hats;
	int nballs;
	balldelta *balls;
	int nbuttons;
	char *buttons;
	joystick_hwdata *hwdata;
	int ref_count;
	SDL_bool force_recentering;
	SDL_JoystickPowerLevel epowerlevel;
	_SDL_Joystick *next;
};

/* 6258 */
struct __declspec(align(4)) _SDL_HatMapping
{
	int hat;
	char mask;
};

/* 6259 */
struct _SDL_ControllerMapping
{
	SDL_JoystickGUID guid;
	const char *name;
	int axes[6];
	int buttonasaxis[6];
	int buttons[15];
	int axesasbutton[15];
	_SDL_HatMapping hatasbutton[15];
	SDL_GameControllerAxis raxes[20];
	SDL_GameControllerAxis rbuttonasaxis[20];
	SDL_GameControllerButton rbuttons[20];
	SDL_GameControllerButton raxesasbutton[20];
	SDL_GameControllerButton rhatasbutton[64];
};

/* 6260 */
struct _SDL_GameController
{
	_SDL_Joystick *joystick;
	int ref_count;
	char hatState[4];
	_SDL_ControllerMapping mapping;
	_SDL_GameController *next;
};

/* 6261 */
struct ANON_OBJECT_HEADER
{
	unsigned __int16 Sig1;
	unsigned __int16 Sig2;
	unsigned __int16 Version;
	unsigned __int16 Machine;
	unsigned int TimeDateStamp;
	_GUID ClassID;
	unsigned int SizeOfData;
};

/* 6262 */
struct __declspec(align(4)) tagEMREXTESCAPE
{
	tagEMR emr;
	int iEscape;
	int cbEscData;
	char EscData[1];
};

/* 6263 */
struct __declspec(align(4)) _FILE_NAME_INFO
{
	unsigned int FileNameLength;
	wchar_t FileName[1];
};

/* 6264 */
struct tagLOGCOLORSPACEA
{
	unsigned int lcsSignature;
	unsigned int lcsVersion;
	unsigned int lcsSize;
	int lcsCSType;
	int lcsIntent;
	tagICEXYZTRIPLE lcsEndpoints;
	unsigned int lcsGammaRed;
	unsigned int lcsGammaGreen;
	unsigned int lcsGammaBlue;
	char lcsFilename[260];
};

/* 6265 */
struct tagEMRCREATECOLORSPACE
{
	tagEMR emr;
	unsigned int ihCS;
	tagLOGCOLORSPACEA lcs;
};

/* 6266 */
struct _IMAGE_VXD_HEADER
{
	unsigned __int16 e32_magic;
	char e32_border;
	char e32_worder;
	unsigned int e32_level;
	unsigned __int16 e32_cpu;
	unsigned __int16 e32_os;
	unsigned int e32_ver;
	unsigned int e32_mflags;
	unsigned int e32_mpages;
	unsigned int e32_startobj;
	unsigned int e32_eip;
	unsigned int e32_stackobj;
	unsigned int e32_esp;
	unsigned int e32_pagesize;
	unsigned int e32_lastpagesize;
	unsigned int e32_fixupsize;
	unsigned int e32_fixupsum;
	unsigned int e32_ldrsize;
	unsigned int e32_ldrsum;
	unsigned int e32_objtab;
	unsigned int e32_objcnt;
	unsigned int e32_objmap;
	unsigned int e32_itermap;
	unsigned int e32_rsrctab;
	unsigned int e32_rsrccnt;
	unsigned int e32_restab;
	unsigned int e32_enttab;
	unsigned int e32_dirtab;
	unsigned int e32_dircnt;
	unsigned int e32_fpagetab;
	unsigned int e32_frectab;
	unsigned int e32_impmod;
	unsigned int e32_impmodcnt;
	unsigned int e32_impproc;
	unsigned int e32_pagesum;
	unsigned int e32_datapage;
	unsigned int e32_preload;
	unsigned int e32_nrestab;
	unsigned int e32_cbnrestab;
	unsigned int e32_nressum;
	unsigned int e32_autodata;
	unsigned int e32_debuginfo;
	unsigned int e32_debuglen;
	unsigned int e32_instpreload;
	unsigned int e32_instdemand;
	unsigned int e32_heapsize;
	char e32_res3[12];
	unsigned int e32_winresoff;
	unsigned int e32_winreslen;
	unsigned __int16 e32_devid;
	unsigned __int16 e32_ddkver;
};

/* 6267 */
struct __cppobj UserStatsUnloaded_t
{
	CSteamID m_steamIDUser;
};

/* 6268 */
struct tagEMRSETWORLDTRANSFORM
{
	tagEMR emr;
	tagXFORM xform;
};

/* 6269 */
struct _CACHE_DESCRIPTOR
{
	char Level;
	char Associativity;
	unsigned __int16 LineSize;
	unsigned int Size;
	_PROCESSOR_CACHE_TYPE Type;
};

/* 6270 */
struct _RTL_CONDITION_VARIABLE
{
	void *Ptr;
};

/* 6271 */
struct __declspec(align(4)) tagMULTIKEYHELPA
{
	unsigned int mkSize;
	char mkKeylist;
	char szKeyphrase[1];
};

/* 6272 */
struct _TRANSACTIONMANAGER_BASIC_INFORMATION
{
	_GUID TmIdentity;
	_LARGE_INTEGER VirtualClock;
};

/* 6273 */
struct __cppobj _Real_widened<double,float>
{
};

/* 6274 */
struct _WIN32_FILE_ATTRIBUTE_DATA
{
	unsigned int dwFileAttributes;
	_FILETIME ftCreationTime;
	_FILETIME ftLastAccessTime;
	_FILETIME ftLastWriteTime;
	unsigned int nFileSizeHigh;
	unsigned int nFileSizeLow;
};

/* 6275 */
struct PPM_WMI_IDLE_STATE
{
	unsigned int Latency;
	unsigned int Power;
	unsigned int TimeCheck;
	char PromotePercent;
	char DemotePercent;
	char StateType;
	char Reserved;
	unsigned int StateFlags;
	unsigned int Context;
	unsigned int IdleHandler;
	unsigned int Reserved1;
};

/* 6276 */
struct PPM_WMI_IDLE_STATES
{
	unsigned int Type;
	unsigned int Count;
	unsigned int TargetState;
	unsigned int OldState;
	unsigned __int64 TargetProcessors;
	PPM_WMI_IDLE_STATE State[1];
};

/* 6277 */
struct __declspec(align(8)) _FILE_BASIC_INFO
{
	_LARGE_INTEGER CreationTime;
	_LARGE_INTEGER LastAccessTime;
	_LARGE_INTEGER LastWriteTime;
	_LARGE_INTEGER ChangeTime;
	unsigned int FileAttributes;
};

/* 6278 */
struct _OSVERSIONINFOEXA
{
	unsigned int dwOSVersionInfoSize;
	unsigned int dwMajorVersion;
	unsigned int dwMinorVersion;
	unsigned int dwBuildNumber;
	unsigned int dwPlatformId;
	char szCSDVersion[128];
	unsigned __int16 wServicePackMajor;
	unsigned __int16 wServicePackMinor;
	unsigned __int16 wSuiteMask;
	char wProductType;
	char wReserved;
};

/* 6279 */
struct _IMAGE_COFF_SYMBOLS_HEADER
{
	unsigned int NumberOfSymbols;
	unsigned int LvaToFirstSymbol;
	unsigned int NumberOfLinenumbers;
	unsigned int LvaToFirstLinenumber;
	unsigned int RvaToFirstByteOfCode;
	unsigned int RvaToLastByteOfCode;
	unsigned int RvaToFirstByteOfData;
	unsigned int RvaToLastByteOfData;
};

/* 6280 */
struct _ImageArchitectureHeader
{
	unsigned __int32 AmaskValue : 1;
	unsigned __int32 : 7;
	unsigned __int32 AmaskShift : 8;
	unsigned int FirstEntryRVA;
};

/* 6281 */
struct _SYSTEM_POWER_STATUS
{
	char ACLineStatus;
	char BatteryFlag;
	char BatteryLifePercent;
	char Reserved1;
	unsigned int BatteryLifeTime;
	unsigned int BatteryFullLifeTime;
};

/* 6282 */
struct tagEMRPOLYLINE16
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cpts;
	tagPOINTS apts[1];
};

/* 6283 */
struct tagMENUBARINFO
{
	unsigned int cbSize;
	tagRECT rcBar;
	HMENU__ *hMenu;
	HWND__ *hwndMenu;
	__int32 fBarFocused : 1;
	__int32 fFocused : 1;
};

/* 6284 */
struct tagWTSSESSION_NOTIFICATION
{
	unsigned int cbSize;
	unsigned int dwSessionId;
};

/* 6285 */
struct __declspec(align(8)) PPM_IDLE_STATE_BUCKET_EX
{
	unsigned __int64 TotalTimeUs;
	unsigned int MinTimeUs;
	unsigned int MaxTimeUs;
	unsigned int Count;
};

/* 6286 */
struct PPM_IDLE_STATE_ACCOUNTING_EX
{
	unsigned __int64 TotalTime;
	unsigned int IdleTransitions;
	unsigned int FailedTransitions;
	unsigned int InvalidBucketIndex;
	unsigned int MinTimeUs;
	unsigned int MaxTimeUs;
	PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
};

/* 6287 */
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6288 */
struct __cppobj _Real_type<float>
{
};

/* 6289 */
struct tagEMRSCALEVIEWPORTEXTEX
{
	tagEMR emr;
	int xNum;
	int xDenom;
	int yNum;
	int yDenom;
};

/* 6290 */
struct __unaligned __declspec(align(2)) DLGTEMPLATE
{
	unsigned int style;
	unsigned int dwExtendedStyle;
	unsigned __int16 cdit;
	__int16 x;
	__int16 y;
	__int16 cx;
	__int16 cy;
};

/* 6291 */
struct tagEMRELLIPSE
{
	tagEMR emr;
	_RECTL rclBox;
};

/* 6292 */
struct _ACCESS_ALLOWED_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6293 */
struct $79FA692AF2D868318B7516C685A0638E
{
	unsigned __int32 RatePercent : 7;
	unsigned __int32 Reserved0 : 25;
};

/* 6294 */
union _RATE_QUOTA_LIMIT
{
	unsigned int RateData;
	$79FA692AF2D868318B7516C685A0638E __s1;
};

/* 6295 */
struct $70D636CC6D3E102A1CB1CECA38555A4E
{
	char Flags;
};

/* 6296 */
struct $E7FD15DFD778E8FFF937F659685E7981
{
	unsigned int NodeNumber;
};

/* 6297 */
union $AAA835BB7251322004E65730D5B36431
{
	$70D636CC6D3E102A1CB1CECA38555A4E ProcessorCore;
	$E7FD15DFD778E8FFF937F659685E7981 NumaNode;
	_CACHE_DESCRIPTOR Cache;
	unsigned __int64 Reserved[2];
};

/* 6298 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
	unsigned int ProcessorMask;
	_LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	$AAA835BB7251322004E65730D5B36431 ___u2;
};

/* 6299 */
struct tagENHMETAHEADER
{
	unsigned int iType;
	unsigned int nSize;
	_RECTL rclBounds;
	_RECTL rclFrame;
	unsigned int dSignature;
	unsigned int nVersion;
	unsigned int nBytes;
	unsigned int nRecords;
	unsigned __int16 nHandles;
	unsigned __int16 sReserved;
	unsigned int nDescription;
	unsigned int offDescription;
	unsigned int nPalEntries;
	tagSIZE szlDevice;
	tagSIZE szlMillimeters;
	unsigned int cbPixelFormat;
	unsigned int offPixelFormat;
	unsigned int bOpenGL;
	tagSIZE szlMicrometers;
};

/* 6300 */
struct RemoteStorageDownloadUGCResult_t
{
	EResult m_eResult;
	unsigned __int64 m_hFile;
	unsigned int m_nAppID;
	int m_nSizeInBytes;
	char m_pchFileName[260];
	unsigned __int64 m_ulSteamIDOwner;
};

/* 6301 */
struct _TAPE_WMI_OPERATIONS
{
	unsigned int Method;
	unsigned int DataBufferSize;
	void *DataBuffer;
};

/* 6302 */
struct ScreenshotReady_t
{
	unsigned int m_hLocal;
	EResult m_eResult;
};

/* 6303 */
struct __declspec(align(8)) tagGESTUREINFO
{
	unsigned int cbSize;
	unsigned int dwFlags;
	unsigned int dwID;
	HWND__ *hwndTarget;
	tagPOINTS ptsLocation;
	unsigned int dwInstanceID;
	unsigned int dwSequenceID;
	unsigned __int64 ullArguments;
	unsigned int cbExtraArgs;
};

/* 6304 */
struct _devicemodeW
{
	wchar_t dmDeviceName[32];
	unsigned __int16 dmSpecVersion;
	unsigned __int16 dmDriverVersion;
	unsigned __int16 dmSize;
	unsigned __int16 dmDriverExtra;
	unsigned int dmFields;
	$76AE2FEC9DA5F9E77066675463311D8D ___u6;
	$B7918B71186120D91EE6B0695F00B012 ___u7;
	$DADF6C68D01F632A2008C72A3F5E68F4 ___u8;
	__int16 dmColor;
	__int16 dmDuplex;
	__int16 dmYResolution;
	__int16 dmTTOption;
	__int16 dmCollate;
	wchar_t dmFormName[32];
	unsigned __int16 dmLogPixels;
	unsigned int dmBitsPerPel;
	unsigned int dmPelsWidth;
	unsigned int dmPelsHeight;
	$309666D137CBB19809FA597AD348B415 ___u19;
	unsigned int dmDisplayFrequency;
	unsigned int dmICMMethod;
	unsigned int dmICMIntent;
	unsigned int dmMediaType;
	unsigned int dmDitherType;
	unsigned int dmReserved1;
	unsigned int dmReserved2;
	unsigned int dmPanningWidth;
	unsigned int dmPanningHeight;
};

/* 6305 */
struct _SE_SECURITY_DESCRIPTOR
{
	unsigned int Size;
	unsigned int Flags;
	void *SecurityDescriptor;
};

/* 6306 */
struct HFONT__
{
	int unused;
};

/* 6307 */
struct tagMOUSEMOVEPOINT
{
	int x;
	int y;
	unsigned int time;
	unsigned int dwExtraInfo;
};

/* 6308 */
struct CZipFile
{
	unsigned int zip;
	const char *path;
	const char *name;
	const char *ext;
	int offset;
	int size;
};

/* 6309 */
struct tagHIGHCONTRASTA
{
	unsigned int cbSize;
	unsigned int dwFlags;
	char *lpszDefaultScheme;
};

/* 6310 */
struct _JIT_DEBUG_INFO
{
	unsigned int dwSize;
	unsigned int dwProcessorArchitecture;
	unsigned int dwThreadID;
	unsigned int dwReserved0;
	unsigned __int64 lpExceptionAddress;
	unsigned __int64 lpExceptionRecord;
	unsigned __int64 lpContextRecord;
};

/* 6311 */
struct _FILE_IO_PRIORITY_HINT_INFO
{
	_PRIORITY_HINT PriorityHint;
};

/* 6312 */
struct _OSVERSIONINFOA
{
	unsigned int dwOSVersionInfoSize;
	unsigned int dwMajorVersion;
	unsigned int dwMinorVersion;
	unsigned int dwBuildNumber;
	unsigned int dwPlatformId;
	char szCSDVersion[128];
};

/* 6313 */
struct __declspec(align(4)) tagEMRSETICMPROFILE
{
	tagEMR emr;
	unsigned int dwFlags;
	unsigned int cbName;
	unsigned int cbData;
	char Data[1];
};

/* 6314 */
struct _IMAGE_BASE_RELOCATION
{
	unsigned int VirtualAddress;
	unsigned int SizeOfBlock;
};

/* 6315 */
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
	unsigned __int64 LastRecoveredLsn;
};

/* 6316 */
struct _PROCESSOR_NUMBER
{
	unsigned __int16 Group;
	char Number;
	char Reserved;
};

/* 6317 */
struct __declspec(align(4)) _FILE_STANDARD_INFO
{
	_LARGE_INTEGER AllocationSize;
	_LARGE_INTEGER EndOfFile;
	unsigned int NumberOfLinks;
	char DeletePending;
	char Directory;
};

/* 6318 */
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
	_GUID EnlistmentId;
	_GUID UOW;
};

/* 6319 */
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
	unsigned int MarshalCookie;
	_GUID UOW;
};

/* 6320 */
struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
	DISPLAYCONFIG_DEVICE_INFO_TYPE type;
	unsigned int size;
	_LUID adapterId;
	unsigned int id;
};

/* 6321 */
struct DISPLAYCONFIG_2DREGION
{
	unsigned int cx;
	unsigned int cy;
};

/* 6322 */
struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
	unsigned __int64 pixelRate;
	DISPLAYCONFIG_RATIONAL hSyncFreq;
	DISPLAYCONFIG_RATIONAL vSyncFreq;
	DISPLAYCONFIG_2DREGION activeSize;
	DISPLAYCONFIG_2DREGION totalSize;
	unsigned int videoStandard;
	DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
};

/* 6323 */
struct DISPLAYCONFIG_TARGET_MODE
{
	DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
};

/* 6324 */
struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	unsigned int width;
	unsigned int height;
	DISPLAYCONFIG_TARGET_MODE targetMode;
};

/* 6325 */
struct tagCANDIDATELIST
{
	unsigned int dwSize;
	unsigned int dwStyle;
	unsigned int dwCount;
	unsigned int dwSelection;
	unsigned int dwPageStart;
	unsigned int dwPageSize;
	unsigned int dwOffset[1];
};

/* 6326 */
struct __cppobj CResHelper<CResText,1017>
{
	CResText *pRes;
	CResRef cResRef;
};

/* 6327 */
struct __cppobj CPersistantEffectFireDeath : CPersistantEffectBurningDeath
{
};

/* 6328 */
struct tagACCESSTIMEOUT
{
	unsigned int cbSize;
	unsigned int dwFlags;
	unsigned int iTimeOutMSec;
};

/* 6329 */
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
	void *CompletionKey;
	void *CompletionPort;
};

/* 6330 */
struct HWINEVENTHOOK__
{
	int unused;
};

/* 6331 */
struct tagMENUGETOBJECTINFO
{
	unsigned int dwFlags;
	unsigned int uPos;
	HMENU__ *hmenu;
	void *riid;
	void *pvObj;
};

/* 6332 */
struct __declspec(align(2)) _MESSAGE_RESOURCE_ENTRY
{
	unsigned __int16 Length;
	unsigned __int16 Flags;
	char Text[1];
};

/* 6333 */
struct tagHIGHCONTRASTW
{
	unsigned int cbSize;
	unsigned int dwFlags;
	wchar_t *lpszDefaultScheme;
};

/* 6334 */
union $22971E98F1DCAE471B592EC18ECB1551
{
	unsigned int PhysicalAddress;
	unsigned int VirtualSize;
};

/* 6335 */
struct _IMAGE_SECTION_HEADER
{
	char Name[8];
	$22971E98F1DCAE471B592EC18ECB1551 Misc;
	unsigned int VirtualAddress;
	unsigned int SizeOfRawData;
	unsigned int PointerToRawData;
	unsigned int PointerToRelocations;
	unsigned int PointerToLinenumbers;
	unsigned __int16 NumberOfRelocations;
	unsigned __int16 NumberOfLinenumbers;
	unsigned int Characteristics;
};

/* 6336 */
struct tagPOLYTEXTW
{
	int x;
	int y;
	unsigned int n;
	const wchar_t *lpstr;
	unsigned int uiFlags;
	tagRECT rcl;
	int *pdx;
};

/* 6337 */
struct _LONGDOUBLE
{
	long double x;
};

/* 6338 */
struct PPM_PERFSTATE_DOMAIN_EVENT
{
	unsigned int State;
	unsigned int Latency;
	unsigned int Speed;
	unsigned __int64 Processors;
};

/* 6339 */
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
	unsigned int SavepointId;
};

/* 6340 */
struct tagGESTURENOTIFYSTRUCT
{
	unsigned int cbSize;
	unsigned int dwFlags;
	HWND__ *hwndTarget;
	tagPOINTS ptsLocation;
	unsigned int dwInstanceID;
};

/* 6341 */
struct __cppobj __unaligned __declspec(align(4)) GameConnectedClanChatMsg_t
{
	CSteamID m_steamIDClanChat;
	CSteamID m_steamIDUser;
	int m_iMessageID;
};

/* 6342 */
struct SYSTEM_BATTERY_STATE
{
	char AcOnLine;
	char BatteryPresent;
	char Charging;
	char Discharging;
	char Spare1[4];
	unsigned int MaxCapacity;
	unsigned int RemainingCapacity;
	unsigned int Rate;
	unsigned int EstimatedTime;
	unsigned int DefaultAlert1;
	unsigned int DefaultAlert2;
};

/* 6343 */
struct tagICONMETRICSA
{
	unsigned int cbSize;
	int iHorzSpacing;
	int iVertSpacing;
	int iTitleWrap;
	tagLOGFONTA lfFont;
};

/* 6344 */
struct _nlsversioninfo
{
	unsigned int dwNLSVersionInfoSize;
	unsigned int dwNLSVersion;
	unsigned int dwDefinedVersion;
};

/* 6345 */
struct _stat64
{
	unsigned int st_dev;
	unsigned __int16 st_ino;
	unsigned __int16 st_mode;
	__int16 st_nlink;
	__int16 st_uid;
	__int16 st_gid;
	unsigned int st_rdev;
	__int64 st_size;
	__int64 st_atime;
	__int64 st_mtime;
	__int64 st_ctime;
};

/* 6346 */
struct SDL_RendererInfo
{
	const char *name;
	unsigned int flags;
	unsigned int num_texture_formats;
	unsigned int texture_formats[16];
	int max_texture_width;
	int max_texture_height;
};

/* 6347 */
struct __declspec(align(8)) _TRANSACTION_PROPERTIES_INFORMATION
{
	unsigned int IsolationLevel;
	unsigned int IsolationFlags;
	_LARGE_INTEGER Timeout;
	unsigned int Outcome;
	unsigned int DescriptionLength;
	wchar_t Description[1];
};

/* 6348 */
struct HMETAFILE__
{
	int unused;
};

/* 6349 */
struct tagMETAFILEPICT
{
	int mm;
	int xExt;
	int yExt;
	HMETAFILE__ *hMF;
};

/* 6350 */
struct tagAXESLISTW
{
	unsigned int axlReserved;
	unsigned int axlNumAxes;
	tagAXISINFOW axlAxisInfo[16];
};

/* 6351 */
struct _FOCUS_EVENT_RECORD
{
	int bSetFocus;
};

/* 6352 */
struct tagHELPWININFOW
{
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	wchar_t rgchMember[2];
};

/* 6353 */
struct _numberfmtA
{
	unsigned int NumDigits;
	unsigned int LeadingZero;
	unsigned int Grouping;
	char *lpDecimalSep;
	char *lpThousandSep;
	unsigned int NegativeOrder;
};

/* 6354 */
struct tagHANDLETABLE
{
	void *objectHandle[1];
};

/* 6355 */
struct tagSOUNDSENTRYA
{
	unsigned int cbSize;
	unsigned int dwFlags;
	unsigned int iFSTextEffect;
	unsigned int iFSTextEffectMSec;
	unsigned int iFSTextEffectColorBits;
	unsigned int iFSGrafEffect;
	unsigned int iFSGrafEffectMSec;
	unsigned int iFSGrafEffectColor;
	unsigned int iWindowsEffect;
	unsigned int iWindowsEffectMSec;
	char *lpszWindowsEffectDLL;
	unsigned int iWindowsEffectOrdinal;
};

/* 6356 */
struct _IMAGE_RESOURCE_DATA_ENTRY
{
	unsigned int OffsetToData;
	unsigned int Size;
	unsigned int CodePage;
	unsigned int Reserved;
};

/* 6357 */
struct _COMMTIMEOUTS
{
	unsigned int ReadIntervalTimeout;
	unsigned int ReadTotalTimeoutMultiplier;
	unsigned int ReadTotalTimeoutConstant;
	unsigned int WriteTotalTimeoutMultiplier;
	unsigned int WriteTotalTimeoutConstant;
};

/* 6358 */
struct tagAUDIODESCRIPTION
{
	unsigned int cbSize;
	int Enabled;
	unsigned int Locale;
};

/* 6359 */
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6360 */
struct _EXIT_PROCESS_DEBUG_INFO
{
	unsigned int dwExitCode;
};

/* 6361 */
struct __cppobj ISteamClient
{
	ISteamClientVtbl *vfptr;
};

/* 6391 */
struct ISteamClientVtbl
{
	int (__thiscall *CreateSteamPipe)(ISteamClient *this);
	_BYTE gap4[16];
	ISteamUser *(__thiscall *GetISteamUser)(ISteamClient *this, int, int, const char *);
	struct ISteamGameServer *(__thiscall *GetISteamGameServer)(ISteamClient *this, int, int, const char *);
	void (__thiscall *SetLocalIPBinding)(ISteamClient *this, unsigned int, unsigned __int16);
	ISteamFriends *(__thiscall *GetISteamFriends)(ISteamClient *this, int, int, const char *);
	ISteamUtils *(__thiscall *GetISteamUtils)(ISteamClient *this, int, const char *);
	ISteamMatchmaking *(__thiscall *GetISteamMatchmaking)(ISteamClient *this, int, int, const char *);
	ISteamMatchmakingServers *(__thiscall *GetISteamMatchmakingServers)(ISteamClient *this, int, int, const char *);
	void *(__thiscall *GetISteamGenericInterface)(ISteamClient *this, int, int, const char *);
	ISteamUserStats *(__thiscall *GetISteamUserStats)(ISteamClient *this, int, int, const char *);
	struct ISteamGameServerStats *(__thiscall *GetISteamGameServerStats)(ISteamClient *this, int, int, const char *);
	ISteamApps *(__thiscall *GetISteamApps)(ISteamClient *this, int, int, const char *);
	ISteamNetworking *(__thiscall *GetISteamNetworking)(ISteamClient *this, int, int, const char *);
	ISteamRemoteStorage *(__thiscall *GetISteamRemoteStorage)(ISteamClient *this, int, int, const char *);
	ISteamScreenshots *(__thiscall *GetISteamScreenshots)(ISteamClient *this, int, int, const char *);
	void (__thiscall *RunFrame)(ISteamClient *this);
	unsigned int (__thiscall *GetIPCCallCount)(ISteamClient *this);
	void (__thiscall *SetWarningMessageHook)(ISteamClient *this, void (__cdecl *)(int, const char *));
	bool (__thiscall *BShutdownIfAllPipesClosed)(ISteamClient *this);
	ISteamHTTP *(__thiscall *GetISteamHTTP)(ISteamClient *this, int, int, const char *);
	ISteamUnifiedMessages *(__thiscall *GetISteamUnifiedMessages)(ISteamClient *this, int, int, const char *);
	ISteamController *(__thiscall *GetISteamController)(ISteamClient *this, int, int, const char *);
	ISteamUGC *(__thiscall *GetISteamUGC)(ISteamClient *this, int, int, const char *);
	ISteamAppList *(__thiscall *GetISteamAppList)(ISteamClient *this, int, int, const char *);
	ISteamMusic *(__thiscall *GetISteamMusic)(ISteamClient *this, int, int, const char *);
	ISteamMusicRemote *(__thiscall *GetISteamMusicRemote)(ISteamClient *this, int, int, const char *);
	ISteamHTMLSurface *(__thiscall *GetISteamHTMLSurface)(ISteamClient *this, int, int, const char *);
	void (__thiscall *Set_SteamAPI_CPostAPIResultInProcess)(ISteamClient *this, void (__cdecl *)(unsigned __int64, void *, unsigned int, int));
	void (__thiscall *Remove_SteamAPI_CPostAPIResultInProcess)(ISteamClient *this, void (__cdecl *)(unsigned __int64, void *, unsigned int, int));
	void (__thiscall *Set_SteamAPI_CCheckCallbackRegisteredInProcess)(ISteamClient *this, unsigned int (__cdecl *)(int));
};

/* 6362 */
struct __cppobj ISteamFriends
{
	ISteamFriendsVtbl *vfptr;
};

/* 6364 */
struct __cppobj ISteamUtils
{
	ISteamUtilsVtbl *vfptr;
};

/* 6366 */
struct __cppobj ISteamMatchmaking
{
	ISteamMatchmakingVtbl *vfptr;
};

/* 6370 */
struct __cppobj ISteamMatchmakingServers
{
	ISteamMatchmakingServersVtbl *vfptr;
};

/* 6378 */
struct __cppobj ISteamApps
{
	ISteamAppsVtbl *vfptr;
};

/* 6380 */
struct __cppobj ISteamScreenshots
{
	ISteamScreenshotsVtbl *vfptr;
};

/* 6382 */
struct __cppobj ISteamHTTP
{
	ISteamHTTPVtbl *vfptr;
};

/* 6384 */
struct __cppobj ISteamUnifiedMessages
{
	ISteamUnifiedMessagesVtbl *vfptr;
};

/* 6386 */
struct __cppobj ISteamController
{
	ISteamControllerVtbl *vfptr;
};

/* 6389 */
struct __cppobj ISteamMusic
{
	ISteamMusicVtbl *vfptr;
};

/* 6363 */
struct ISteamFriendsVtbl
{
	const char *(__thiscall *GetPersonaName)(ISteamFriends *this);
	bool (__thiscall *GetFriendGamePlayed)(ISteamFriends *this, CSteamID, FriendGameInfo_t *) __declspec(align(32));
	const char *(__thiscall *GetFriendPersonaNameHistory)(ISteamFriends *this, CSteamID, int);
	const char *(__thiscall *GetPlayerNickname)(ISteamFriends *this, CSteamID);
	bool (__thiscall *HasFriend)(ISteamFriends *this, CSteamID, int);
	int (__thiscall *GetClanCount)(ISteamFriends *this);
	CSteamID *(__thiscall *GetClanByIndex)(ISteamFriends *this, CSteamID *result, int);
	const char *(__thiscall *GetClanName)(ISteamFriends *this, CSteamID);
	const char *(__thiscall *GetClanTag)(ISteamFriends *this, CSteamID);
	bool (__thiscall *GetClanActivityCounts)(ISteamFriends *this, CSteamID, int *, int *, int *);
	unsigned __int64 (__thiscall *DownloadClanActivityCounts)(ISteamFriends *this, CSteamID *, int);
	int (__thiscall *GetFriendCountFromSource)(ISteamFriends *this, CSteamID);
	CSteamID *(__thiscall *GetFriendFromSourceByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
	bool (__thiscall *IsUserInSource)(ISteamFriends *this, CSteamID, CSteamID);
	void (__thiscall *SetInGameVoiceSpeaking)(ISteamFriends *this, CSteamID, bool);
	void (__thiscall *ActivateGameOverlay)(ISteamFriends *this, const char *);
	void (__thiscall *ActivateGameOverlayToUser)(ISteamFriends *this, const char *, CSteamID);
	void (__thiscall *ActivateGameOverlayToWebPage)(ISteamFriends *this, const char *);
	void (__thiscall *ActivateGameOverlayToStore)(ISteamFriends *this, unsigned int, EOverlayToStoreFlag);
	void (__thiscall *SetPlayedWith)(ISteamFriends *this, CSteamID);
	void (__thiscall *ActivateGameOverlayInviteDialog)(ISteamFriends *this, CSteamID);
	int (__thiscall *GetSmallFriendAvatar)(ISteamFriends *this, CSteamID);
	int (__thiscall *GetMediumFriendAvatar)(ISteamFriends *this, CSteamID);
	int (__thiscall *GetLargeFriendAvatar)(ISteamFriends *this, CSteamID);
	bool (__thiscall *RequestUserInformation)(ISteamFriends *this, CSteamID, bool);
	unsigned __int64 (__thiscall *RequestClanOfficerList)(ISteamFriends *this, CSteamID);
	CSteamID *(__thiscall *GetClanOwner)(ISteamFriends *this, CSteamID *result, CSteamID);
	int (__thiscall *GetClanOfficerCount)(ISteamFriends *this, CSteamID);
	CSteamID *(__thiscall *GetClanOfficerByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
	unsigned int (__thiscall *GetUserRestrictions)(ISteamFriends *this);
	bool (__thiscall *SetRichPresence)(ISteamFriends *this, const char *, const char *);
	void (__thiscall *ClearRichPresence)(ISteamFriends *this);
	const char *(__thiscall *GetFriendRichPresence)(ISteamFriends *this, CSteamID, const char *);
	int (__thiscall *GetFriendRichPresenceKeyCount)(ISteamFriends *this, CSteamID);
	const char *(__thiscall *GetFriendRichPresenceKeyByIndex)(ISteamFriends *this, CSteamID, int);
	void (__thiscall *RequestFriendRichPresence)(ISteamFriends *this, CSteamID);
	bool (__thiscall *InviteUserToGame)(ISteamFriends *this, CSteamID, const char *);
	int (__thiscall *GetCoplayFriendCount)(ISteamFriends *this);
	CSteamID *(__thiscall *GetCoplayFriend)(ISteamFriends *this, CSteamID *result, int);
	int (__thiscall *GetFriendCoplayTime)(ISteamFriends *this, CSteamID);
	unsigned int (__thiscall *GetFriendCoplayGame)(ISteamFriends *this, CSteamID);
	unsigned __int64 (__thiscall *JoinClanChatRoom)(ISteamFriends *this, CSteamID);
	bool (__thiscall *LeaveClanChatRoom)(ISteamFriends *this, CSteamID);
	int (__thiscall *GetClanChatMemberCount)(ISteamFriends *this, CSteamID);
	CSteamID *(__thiscall *GetChatMemberByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
	bool (__thiscall *SendClanChatMessage)(ISteamFriends *this, CSteamID, const char *);
	int (__thiscall *GetClanChatMessage)(ISteamFriends *this, CSteamID, int, void *, int, EChatEntryType *, CSteamID *);
	bool (__thiscall *IsClanChatAdmin)(ISteamFriends *this, CSteamID, CSteamID);
	bool (__thiscall *IsClanChatWindowOpenInSteam)(ISteamFriends *this, CSteamID);
	bool (__thiscall *OpenClanChatWindowInSteam)(ISteamFriends *this, CSteamID);
	bool (__thiscall *CloseClanChatWindowInSteam)(ISteamFriends *this, CSteamID);
	bool (__thiscall *SetListenForFriendsMessages)(ISteamFriends *this, bool);
	bool (__thiscall *ReplyToFriendMessage)(ISteamFriends *this, CSteamID, const char *);
	int (__thiscall *GetFriendMessage)(ISteamFriends *this, CSteamID, int, void *, int, EChatEntryType *);
	unsigned __int64 (__thiscall *GetFollowerCount)(ISteamFriends *this, CSteamID);
	unsigned __int64 (__thiscall *IsFollowing)(ISteamFriends *this, CSteamID);
	unsigned __int64 (__thiscall *EnumerateFollowingList)(ISteamFriends *this, unsigned int);
};

/* 6365 */
struct ISteamUtilsVtbl
{
	unsigned int (__thiscall *GetSecondsSinceAppActive)(ISteamUtils *this);
	_BYTE gap4[12];
	const char *(__thiscall *GetIPCountry)(ISteamUtils *this);
	bool (__thiscall *GetImageSize)(ISteamUtils *this, int, unsigned int *, unsigned int *);
	bool (__thiscall *GetImageRGBA)(ISteamUtils *this, int, char *, int);
	bool (__thiscall *GetCSERIPPort)(ISteamUtils *this, unsigned int *, unsigned __int16 *);
	char (__thiscall *GetCurrentBatteryPower)(ISteamUtils *this);
	unsigned int (__thiscall *GetAppID)(ISteamUtils *this);
	void (__thiscall *SetOverlayNotificationPosition)(ISteamUtils *this, ENotificationPosition);
	bool (__thiscall *IsAPICallCompleted)(ISteamUtils *this, unsigned __int64, bool *);
	ESteamAPICallFailure (__thiscall *GetAPICallFailureReason)(ISteamUtils *this, unsigned __int64);
	bool (__thiscall *GetAPICallResult)(ISteamUtils *this, unsigned __int64, void *, int, int, bool *);
	void (__thiscall *RunFrame)(ISteamUtils *this);
	unsigned int (__thiscall *GetIPCCallCount)(ISteamUtils *this);
	void (__thiscall *SetWarningMessageHook)(ISteamUtils *this, void (__cdecl *)(int, const char *));
	bool (__thiscall *IsOverlayEnabled)(ISteamUtils *this);
	bool (__thiscall *BOverlayNeedsPresent)(ISteamUtils *this);
	unsigned __int64 (__thiscall *CheckFileSignature)(ISteamUtils *this, const char *);
	bool (__thiscall *ShowGamepadTextInput)(ISteamUtils *this, EGamepadTextInputMode, EGamepadTextInputLineMode, const char *, unsigned int, const char *);
	unsigned int (__thiscall *GetEnteredGamepadTextLength)(ISteamUtils *this);
	bool (__thiscall *GetEnteredGamepadTextInput)(ISteamUtils *this, char *, unsigned int);
	const char *(__thiscall *GetSteamUILanguage)(ISteamUtils *this);
	bool (__thiscall *IsSteamRunningInVR)(ISteamUtils *this);
};

/* 6367 */
struct ISteamMatchmakingVtbl
{
	int (__thiscall *GetFavoriteGameCount)(ISteamMatchmaking *this);
	_BYTE gap4[16];
	void (__thiscall *AddRequestLobbyListStringFilter)(ISteamMatchmaking *this, const char *, const char *, ELobbyComparison);
	void (__thiscall *AddRequestLobbyListNumericalFilter)(ISteamMatchmaking *this, const char *, int, ELobbyComparison);
	void (__thiscall *AddRequestLobbyListNearValueFilter)(ISteamMatchmaking *this, const char *, int);
	void (__thiscall *AddRequestLobbyListFilterSlotsAvailable)(ISteamMatchmaking *this, int);
	void (__thiscall *AddRequestLobbyListDistanceFilter)(ISteamMatchmaking *this, ELobbyDistanceFilter);
	void (__thiscall *AddRequestLobbyListResultCountFilter)(ISteamMatchmaking *this, int);
	void (__thiscall *AddRequestLobbyListCompatibleMembersFilter)(ISteamMatchmaking *this, CSteamID);
	CSteamID *(__thiscall *GetLobbyByIndex)(ISteamMatchmaking *this, CSteamID *result, int);
	unsigned __int64 (__thiscall *CreateLobby)(ISteamMatchmaking *this, ELobbyType, int);
	unsigned __int64 (__thiscall *JoinLobby)(ISteamMatchmaking *this, CSteamID);
	void (__thiscall *LeaveLobby)(ISteamMatchmaking *this, CSteamID);
	bool (__thiscall *InviteUserToLobby)(ISteamMatchmaking *this, CSteamID, CSteamID);
	int (__thiscall *GetNumLobbyMembers)(ISteamMatchmaking *this, CSteamID);
	CSteamID *(__thiscall *GetLobbyMemberByIndex)(ISteamMatchmaking *this, CSteamID *result, CSteamID, int);
	const char *(__thiscall *GetLobbyData)(ISteamMatchmaking *this, CSteamID, const char *);
	bool (__thiscall *SetLobbyData)(ISteamMatchmaking *this, CSteamID, const char *, const char *);
	int (__thiscall *GetLobbyDataCount)(ISteamMatchmaking *this, CSteamID);
	bool (__thiscall *GetLobbyDataByIndex)(ISteamMatchmaking *this, CSteamID, int, char *, int, char *, int);
	bool (__thiscall *DeleteLobbyData)(ISteamMatchmaking *this, CSteamID, const char *);
	const char *(__thiscall *GetLobbyMemberData)(ISteamMatchmaking *this, CSteamID, CSteamID, const char *);
	void (__thiscall *SetLobbyMemberData)(ISteamMatchmaking *this, CSteamID, const char *, const char *);
	bool (__thiscall *SendLobbyChatMsg)(ISteamMatchmaking *this, CSteamID, const void *, int);
	int (__thiscall *GetLobbyChatEntry)(ISteamMatchmaking *this, CSteamID, int, CSteamID *, void *, int, EChatEntryType *);
	bool (__thiscall *RequestLobbyData)(ISteamMatchmaking *this, CSteamID);
	void (__thiscall *SetLobbyGameServer)(ISteamMatchmaking *this, CSteamID, unsigned int, unsigned __int16, CSteamID);
	bool (__thiscall *GetLobbyGameServer)(ISteamMatchmaking *this, CSteamID, unsigned int *, unsigned __int16 *, CSteamID *);
	bool (__thiscall *SetLobbyMemberLimit)(ISteamMatchmaking *this, CSteamID, int);
	int (__thiscall *GetLobbyMemberLimit)(ISteamMatchmaking *this, CSteamID);
	bool (__thiscall *SetLobbyType)(ISteamMatchmaking *this, CSteamID, ELobbyType);
	bool (__thiscall *SetLobbyJoinable)(ISteamMatchmaking *this, CSteamID, bool);
	CSteamID *(__thiscall *GetLobbyOwner)(ISteamMatchmaking *this, CSteamID *result, CSteamID);
	bool (__thiscall *SetLobbyOwner)(ISteamMatchmaking *this, CSteamID, CSteamID);
	bool (__thiscall *SetLinkedLobby)(ISteamMatchmaking *this, CSteamID, CSteamID);
};

/* 6377 */
struct ISteamMatchmakingServersVtbl
{
	void *(__thiscall *RequestInternetServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
	_BYTE gap4[8];
	void *(__thiscall *RequestFavoritesServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
	void *(__thiscall *RequestHistoryServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
	void *(__thiscall *RequestSpectatorServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
	void (__thiscall *ReleaseRequest)(ISteamMatchmakingServers *this, void *);
	gameserveritem_t *(__thiscall *GetServerDetails)(ISteamMatchmakingServers *this, void *, int);
	void (__thiscall *CancelQuery)(ISteamMatchmakingServers *this, void *);
	void (__thiscall *RefreshQuery)(ISteamMatchmakingServers *this, void *);
	bool (__thiscall *IsRefreshing)(ISteamMatchmakingServers *this, void *);
	int (__thiscall *GetServerCount)(ISteamMatchmakingServers *this, void *);
	void (__thiscall *RefreshServer)(ISteamMatchmakingServers *this, void *, int);
	int (__thiscall *PingServer)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingPingResponse *);
	int (__thiscall *PlayerDetails)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingPlayersResponse *);
	int (__thiscall *ServerRules)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingRulesResponse *);
	void (__thiscall *CancelServerQuery)(ISteamMatchmakingServers *this, int);
};

/* 6379 */
struct ISteamAppsVtbl
{
	bool (__thiscall *BIsSubscribed)(ISteamApps *this);
	_BYTE gap4[8];
	bool (__thiscall *BIsVACBanned)(ISteamApps *this);
	const char *(__thiscall *GetCurrentGameLanguage)(ISteamApps *this);
	const char *(__thiscall *GetAvailableGameLanguages)(ISteamApps *this);
	bool (__thiscall *BIsSubscribedApp)(ISteamApps *this, unsigned int);
	bool (__thiscall *BIsDlcInstalled)(ISteamApps *this, unsigned int);
	unsigned int (__thiscall *GetEarliestPurchaseUnixTime)(ISteamApps *this, unsigned int);
	bool (__thiscall *BIsSubscribedFromFreeWeekend)(ISteamApps *this);
	int (__thiscall *GetDLCCount)(ISteamApps *this);
	bool (__thiscall *BGetDLCDataByIndex)(ISteamApps *this, int, unsigned int *, bool *, char *, int);
	void (__thiscall *InstallDLC)(ISteamApps *this, unsigned int);
	void (__thiscall *UninstallDLC)(ISteamApps *this, unsigned int);
	void (__thiscall *RequestAppProofOfPurchaseKey)(ISteamApps *this, unsigned int);
	bool (__thiscall *GetCurrentBetaName)(ISteamApps *this, char *, int);
	bool (__thiscall *MarkContentCorrupt)(ISteamApps *this, bool);
	unsigned int (__thiscall *GetInstalledDepots)(ISteamApps *this, unsigned int, unsigned int *, unsigned int);
	unsigned int (__thiscall *GetAppInstallDir)(ISteamApps *this, unsigned int, char *, unsigned int);
	bool (__thiscall *BIsAppInstalled)(ISteamApps *this, unsigned int);
	CSteamID *(__thiscall *GetAppOwner)(ISteamApps *this, CSteamID *result);
	const char *(__thiscall *GetLaunchQueryParam)(ISteamApps *this, const char *);
};

/* 6381 */
struct ISteamScreenshotsVtbl
{
	unsigned int (__thiscall *WriteScreenshot)(ISteamScreenshots *this, void *, unsigned int, int, int);
	unsigned int (__thiscall *AddScreenshotToLibrary)(ISteamScreenshots *this, const char *, const char *, int, int);
	void (__thiscall *TriggerScreenshot)(ISteamScreenshots *this);
	void (__thiscall *HookScreenshots)(ISteamScreenshots *this, bool);
	bool (__thiscall *SetLocation)(ISteamScreenshots *this, unsigned int, const char *);
	bool (__thiscall *TagUser)(ISteamScreenshots *this, unsigned int, CSteamID);
	bool (__thiscall *TagPublishedFile)(ISteamScreenshots *this, unsigned int, unsigned __int64);
};

/* 6383 */
struct ISteamHTTPVtbl
{
	unsigned int (__thiscall *CreateHTTPRequest)(ISteamHTTP *this, EHTTPMethod, const char *);
	_BYTE gap4[8];
	bool (__thiscall *SetHTTPRequestHeaderValue)(ISteamHTTP *this, unsigned int, const char *, const char *);
	bool (__thiscall *SetHTTPRequestGetOrPostParameter)(ISteamHTTP *this, unsigned int, const char *, const char *);
	bool (__thiscall *SendHTTPRequest)(ISteamHTTP *this, unsigned int, unsigned __int64 *);
	bool (__thiscall *SendHTTPRequestAndStreamResponse)(ISteamHTTP *this, unsigned int, unsigned __int64 *);
	bool (__thiscall *DeferHTTPRequest)(ISteamHTTP *this, unsigned int);
	bool (__thiscall *PrioritizeHTTPRequest)(ISteamHTTP *this, unsigned int);
	bool (__thiscall *GetHTTPResponseHeaderSize)(ISteamHTTP *this, unsigned int, const char *, unsigned int *);
	bool (__thiscall *GetHTTPResponseHeaderValue)(ISteamHTTP *this, unsigned int, const char *, char *, unsigned int);
	bool (__thiscall *GetHTTPResponseBodySize)(ISteamHTTP *this, unsigned int, unsigned int *);
	bool (__thiscall *GetHTTPResponseBodyData)(ISteamHTTP *this, unsigned int, char *, unsigned int);
	bool (__thiscall *GetHTTPStreamingResponseBodyData)(ISteamHTTP *this, unsigned int, unsigned int, char *, unsigned int);
	bool (__thiscall *ReleaseHTTPRequest)(ISteamHTTP *this, unsigned int);
	bool (__thiscall *GetHTTPDownloadProgressPct)(ISteamHTTP *this, unsigned int, float *);
	bool (__thiscall *SetHTTPRequestRawPostBody)(ISteamHTTP *this, unsigned int, const char *, char *, unsigned int);
};

/* 6385 */
struct ISteamUnifiedMessagesVtbl
{
	unsigned __int64 (__thiscall *SendMethod)(ISteamUnifiedMessages *this, const char *, const void *, unsigned int, unsigned __int64);
	bool (__thiscall *GetMethodResponseInfo)(ISteamUnifiedMessages *this, unsigned __int64, unsigned int *, EResult *);
	bool (__thiscall *GetMethodResponseData)(ISteamUnifiedMessages *this, unsigned __int64, void *, unsigned int, bool);
	bool (__thiscall *ReleaseMethod)(ISteamUnifiedMessages *this, unsigned __int64);
	bool (__thiscall *SendNotification)(ISteamUnifiedMessages *this, const char *, const void *, unsigned int);
};

/* 6388 */
struct ISteamControllerVtbl
{
	bool (__thiscall *Init)(ISteamController *this, const char *);
	bool (__thiscall *Shutdown)(ISteamController *this);
	void (__thiscall *RunFrame)(ISteamController *this);
	bool (__thiscall *GetControllerState)(ISteamController *this, unsigned int, SteamControllerState_t *);
	void (__thiscall *TriggerHapticPulse)(ISteamController *this, unsigned int, ESteamControllerPad, unsigned __int16);
	void (__thiscall *SetOverrideMode)(ISteamController *this, const char *);
};

/* 6390 */
struct ISteamMusicVtbl
{
	bool (__thiscall *BIsEnabled)(ISteamMusic *this);
	_BYTE gap4[4];
	AudioPlayback_Status (__thiscall *GetPlaybackStatus)(ISteamMusic *this);
	void (__thiscall *Play)(ISteamMusic *this);
	void (__thiscall *Pause)(ISteamMusic *this);
	void (__thiscall *PlayPrevious)(ISteamMusic *this);
	void (__thiscall *PlayNext)(ISteamMusic *this);
	void (__thiscall *SetVolume)(ISteamMusic *this, float);
	float (__thiscall *GetVolume)(ISteamMusic *this);
};

/* 6368 */
struct __cppobj ISteamMatchmakingServerListResponse
{
	ISteamMatchmakingServerListResponseVtbl *vfptr;
};

/* 6371 */
struct __cppobj ISteamMatchmakingPingResponse
{
	ISteamMatchmakingPingResponseVtbl *vfptr;
};

/* 6373 */
struct __cppobj ISteamMatchmakingPlayersResponse
{
	ISteamMatchmakingPlayersResponseVtbl *vfptr;
};

/* 6375 */
struct __cppobj ISteamMatchmakingRulesResponse
{
	ISteamMatchmakingRulesResponseVtbl *vfptr;
};

/* 6387 */
struct __unaligned __declspec(align(4)) SteamControllerState_t
{
	unsigned int unPacketNum;
	unsigned __int64 ulButtons;
	__int16 sLeftPadX;
	__int16 sLeftPadY;
	__int16 sRightPadX;
	__int16 sRightPadY;
};

/* 6369 */
struct ISteamMatchmakingServerListResponseVtbl
{
	void (__thiscall *ServerResponded)(ISteamMatchmakingServerListResponse *this, void *, int);
	void (__thiscall *ServerFailedToRespond)(ISteamMatchmakingServerListResponse *this, void *, int);
	void (__thiscall *RefreshComplete)(ISteamMatchmakingServerListResponse *this, void *, EMatchMakingServerResponse);
};

/* 6372 */
struct ISteamMatchmakingPingResponseVtbl
{
	void (__thiscall *ServerResponded)(ISteamMatchmakingPingResponse *this, gameserveritem_t *);
	void (__thiscall *ServerFailedToRespond)(ISteamMatchmakingPingResponse *this);
};

/* 6374 */
struct ISteamMatchmakingPlayersResponseVtbl
{
	void (__thiscall *AddPlayerToList)(ISteamMatchmakingPlayersResponse *this, const char *, int, float);
	void (__thiscall *PlayersFailedToRespond)(ISteamMatchmakingPlayersResponse *this);
	void (__thiscall *PlayersRefreshComplete)(ISteamMatchmakingPlayersResponse *this);
};

/* 6376 */
struct ISteamMatchmakingRulesResponseVtbl
{
	void (__thiscall *RulesResponded)(ISteamMatchmakingRulesResponse *this, const char *, const char *);
	void (__thiscall *RulesFailedToRespond)(ISteamMatchmakingRulesResponse *this);
	void (__thiscall *RulesRefreshComplete)(ISteamMatchmakingRulesResponse *this);
};

/* 6392 */
struct _ImageArchitectureEntry
{
	unsigned int FixupInstRVA;
	unsigned int NewInst;
};

/* 6393 */
union $4CFA15F5CE489CDF0BD78DFB308FEF36
{
	unsigned __int16 Ordinal;
	unsigned __int16 Hint;
};

/* 6394 */
struct IMPORT_OBJECT_HEADER
{
	unsigned __int16 Sig1;
	unsigned __int16 Sig2;
	unsigned __int16 Version;
	unsigned __int16 Machine;
	unsigned int TimeDateStamp;
	unsigned int SizeOfData;
	$4CFA15F5CE489CDF0BD78DFB308FEF36 ___u6;
	unsigned __int16 Type : 2;
	unsigned __int16 NameType : 3;
	unsigned __int16 Reserved : 11;
};

/* 6395 */
struct tagMSGBOXPARAMSW
{
	unsigned int cbSize;
	HWND__ *hwndOwner;
	HINSTANCE__ *hInstance;
	const wchar_t *lpszText;
	const wchar_t *lpszCaption;
	unsigned int dwStyle;
	const wchar_t *lpszIcon;
	unsigned int dwContextHelpId;
	void (__stdcall *lpfnMsgBoxCallback)(tagHELPINFO *);
	unsigned int dwLanguageId;
};

/* 6396 */
struct __cppobj __declspec(align(4)) CProjectileFireHands : CProjectileBAM
{
	__int16 m_counter;
};

/* 6397 */
struct tagMSG
{
	HWND__ *hwnd;
	unsigned int message;
	unsigned int wParam;
	int lParam;
	unsigned int time;
	tagPOINT pt;
};

/* 6398 */
struct tagLOGPALETTE
{
	unsigned __int16 palVersion;
	unsigned __int16 palNumEntries;
	tagPALETTEENTRY palPalEntry[1];
};

/* 6399 */
struct tagNONCLIENTMETRICSA
{
	unsigned int cbSize;
	int iBorderWidth;
	int iScrollWidth;
	int iScrollHeight;
	int iCaptionWidth;
	int iCaptionHeight;
	tagLOGFONTA lfCaptionFont;
	int iSmCaptionWidth;
	int iSmCaptionHeight;
	tagLOGFONTA lfSmCaptionFont;
	int iMenuWidth;
	int iMenuHeight;
	tagLOGFONTA lfMenuFont;
	tagLOGFONTA lfStatusFont;
	tagLOGFONTA lfMessageFont;
};

/* 6400 */
struct tagRAWINPUTDEVICE
{
	unsigned __int16 usUsagePage;
	unsigned __int16 usUsage;
	unsigned int dwFlags;
	HWND__ *hwndTarget;
};

/* 6401 */
struct tagCREATESTRUCTW
{
	void *lpCreateParams;
	HINSTANCE__ *hInstance;
	HMENU__ *hMenu;
	HWND__ *hwndParent;
	int cy;
	int cx;
	int y;
	int x;
	int style;
	const wchar_t *lpszName;
	const wchar_t *lpszClass;
	unsigned int dwExStyle;
};

/* 6402 */
struct tagCBT_CREATEWNDW
{
	tagCREATESTRUCTW *lpcs;
	HWND__ *hwndInsertAfter;
};

/* 6403 */
struct tagACTCTX_SECTION_KEYED_DATA_2600
{
	unsigned int cbSize;
	unsigned int ulDataFormatVersion;
	void *lpData;
	unsigned int ulLength;
	void *lpSectionGlobalData;
	unsigned int ulSectionGlobalDataLength;
	void *lpSectionBase;
	unsigned int ulSectionTotalLength;
	void *hActCtx;
	unsigned int ulAssemblyRosterIndex;
};

/* 6404 */
struct _PERFORMANCE_DATA
{
	unsigned __int16 Size;
	char Version;
	char HwCountersCount;
	unsigned int ContextSwitchCount;
	unsigned __int64 WaitReasonBitMap;
	unsigned __int64 CycleTime;
	unsigned int RetryCount;
	unsigned int Reserved;
	_HARDWARE_COUNTER_DATA HwCounters[16];
};

/* 6405 */
struct FLASHWINFO
{
	unsigned int cbSize;
	HWND__ *hwnd;
	unsigned int dwFlags;
	unsigned int uCount;
	unsigned int dwTimeout;
};

/* 6406 */
struct __declspec(align(4)) _MODEMDEVCAPS
{
	unsigned int dwActualSize;
	unsigned int dwRequiredSize;
	unsigned int dwDevSpecificOffset;
	unsigned int dwDevSpecificSize;
	unsigned int dwModemProviderVersion;
	unsigned int dwModemManufacturerOffset;
	unsigned int dwModemManufacturerSize;
	unsigned int dwModemModelOffset;
	unsigned int dwModemModelSize;
	unsigned int dwModemVersionOffset;
	unsigned int dwModemVersionSize;
	unsigned int dwDialOptions;
	unsigned int dwCallSetupFailTimer;
	unsigned int dwInactivityTimeout;
	unsigned int dwSpeakerVolume;
	unsigned int dwSpeakerMode;
	unsigned int dwModemOptions;
	unsigned int dwMaxDTERate;
	unsigned int dwMaxDCERate;
	char abVariablePortion[1];
};

/* 11238 */
enum _EXCEPTION_DISPOSITION
{
	ExceptionContinueExecution = 0x0,
	ExceptionContinueSearch = 0x1,
	ExceptionNestedException = 0x2,
	ExceptionCollidedUnwind = 0x3,
};

/* 6407 */
struct _EXCEPTION_REGISTRATION_RECORD
{
	_EXCEPTION_REGISTRATION_RECORD *Next;
	_EXCEPTION_DISPOSITION (__stdcall *Handler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
};

/* 6409 */
union $7A727655067EA29DD1B3C3F7D79CBFD1
{
	void *FiberData;
	unsigned int Version;
};

/* 6408 */
struct _NT_TIB
{
	_EXCEPTION_REGISTRATION_RECORD *ExceptionList;
	void *StackBase;
	void *StackLimit;
	void *SubSystemTib;
	$7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
	void *ArbitraryUserPointer;
	_NT_TIB *Self;
};

/* 6410 */
struct tagWINDOWPLACEMENT
{
	unsigned int length;
	unsigned int flags;
	unsigned int showCmd;
	tagPOINT ptMinPosition;
	tagPOINT ptMaxPosition;
	tagRECT rcNormalPosition;
};

/* 6411 */
struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
	unsigned int cbSize;
	_COORD dwSize;
	_COORD dwCursorPosition;
	unsigned __int16 wAttributes;
	_SMALL_RECT srWindow;
	_COORD dwMaximumWindowSize;
	unsigned __int16 wPopupAttributes;
	int bFullscreenSupported;
	unsigned int ColorTable[16];
};

/* 6412 */
struct _SERVICE_STATUS
{
	unsigned int dwServiceType;
	unsigned int dwCurrentState;
	unsigned int dwControlsAccepted;
	unsigned int dwWin32ExitCode;
	unsigned int dwServiceSpecificExitCode;
	unsigned int dwCheckPoint;
	unsigned int dwWaitHint;
};

/* 6413 */
struct _ENUM_SERVICE_STATUSW
{
	wchar_t *lpServiceName;
	wchar_t *lpDisplayName;
	_SERVICE_STATUS ServiceStatus;
};

/* 6414 */
struct __declspec(align(8)) RemoteStoragePublishFileProgress_t
{
	long double m_dPercentFile;
	bool m_bPreview;
};

/* 6415 */
struct _CONSOLE_FONT_INFOEX
{
	unsigned int cbSize;
	unsigned int nFont;
	_COORD dwFontSize;
	unsigned int FontFamily;
	unsigned int FontWeight;
	wchar_t FaceName[32];
};

/* 6416 */
struct value_entW
{
	wchar_t *ve_valuename;
	unsigned int ve_valuelen;
	unsigned int ve_valueptr;
	unsigned int ve_type;
};

/* 6417 */
struct _PACKEDEVENTINFO
{
	unsigned int ulSize;
	unsigned int ulNumEventsForLogFile;
	unsigned int ulOffsets[];
};

/* 6418 */
struct _MEMORYSTATUSEX
{
	unsigned int dwLength;
	unsigned int dwMemoryLoad;
	unsigned __int64 ullTotalPhys;
	unsigned __int64 ullAvailPhys;
	unsigned __int64 ullTotalPageFile;
	unsigned __int64 ullAvailPageFile;
	unsigned __int64 ullTotalVirtual;
	unsigned __int64 ullAvailVirtual;
	unsigned __int64 ullAvailExtendedVirtual;
};

/* 6419 */
struct PLTHeader_st
{
	unsigned int nType;
	unsigned int nVersion;
	unsigned int nLayers;
	unsigned int nCompressed;
	unsigned int nWidth;
	unsigned int nHeight;
};

/* 6420 */
struct __cppobj CResPLT : CRes
{
	char *m_pData;
	PLTHeader_st *m_pHeader;
};

/* 6421 */
struct KeyFileHeader_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int nResFiles;
	unsigned int nKeys;
	unsigned int nOffsetToFileTable;
	unsigned int nOffsetToKeyTable;
};

/* 6422 */
struct _XSTATE_FEATURE
{
	unsigned int Offset;
	unsigned int Size;
};

/* 6423 */
struct _PSINJECTDATA
{
	unsigned int DataBytes;
	unsigned __int16 InjectionPoint;
	unsigned __int16 PageNumber;
};

/* 6424 */
struct tagMENUITEMINFOW
{
	unsigned int cbSize;
	unsigned int fMask;
	unsigned int fType;
	unsigned int fState;
	unsigned int wID;
	HMENU__ *hSubMenu;
	HBITMAP__ *hbmpChecked;
	HBITMAP__ *hbmpUnchecked;
	unsigned int dwItemData;
	wchar_t *dwTypeData;
	unsigned int cch;
	HBITMAP__ *hbmpItem;
};

/* 6425 */
struct tagGCP_RESULTSA
{
	unsigned int lStructSize;
	char *lpOutString;
	unsigned int *lpOrder;
	int *lpDx;
	int *lpCaretPos;
	char *lpClass;
	wchar_t *lpGlyphs;
	unsigned int nGlyphs;
	int nMaxFit;
};

/* 6426 */
struct _SERVICE_NOTIFY_1
{
	unsigned int dwVersion;
	void (__stdcall *pfnNotifyCallback)(void *);
	void *pContext;
	unsigned int dwNotificationStatus;
	_SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 6427 */
struct HTASK__
{
	int unused;
};

/* 6428 */
struct tagEMRFORMAT
{
	unsigned int dSignature;
	unsigned int nVersion;
	unsigned int cbData;
	unsigned int offData;
};

/* 6429 */
struct tagMETARECORD
{
	unsigned int rdSize;
	unsigned __int16 rdFunction;
	unsigned __int16 rdParm[1];
};

/* 6430 */
struct _GENERIC_MAPPING
{
	unsigned int GenericRead;
	unsigned int GenericWrite;
	unsigned int GenericExecute;
	unsigned int GenericAll;
};

/* 6431 */
struct __declspec(align(8)) RemoteStorageUpdatePublishedFileResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
	bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
};

/* 6432 */
struct _heapinfo
{
	int *_pentry;
	unsigned int _size;
	int _useflag;
};

/* 6433 */
struct tagTITLEBARINFOEX
{
	unsigned int cbSize;
	tagRECT rcTitleBar;
	unsigned int rgstate[6];
	tagRECT rgrect[6];
};

/* 6434 */
struct biffFixedTableEntry_st
{
	unsigned int nID;
	unsigned int nOffset;
	unsigned int nNumber;
	unsigned int nSize;
	unsigned int nType;
};

/* 6435 */
struct tagVS_FIXEDFILEINFO
{
	unsigned int dwSignature;
	unsigned int dwStrucVersion;
	unsigned int dwFileVersionMS;
	unsigned int dwFileVersionLS;
	unsigned int dwProductVersionMS;
	unsigned int dwProductVersionLS;
	unsigned int dwFileFlagsMask;
	unsigned int dwFileFlags;
	unsigned int dwFileOS;
	unsigned int dwFileType;
	unsigned int dwFileSubtype;
	unsigned int dwFileDateMS;
	unsigned int dwFileDateLS;
};

/* 11253 */
enum _SC_ACTION_TYPE
{
	SC_ACTION_NONE = 0x0,
	SC_ACTION_RESTART = 0x1,
	SC_ACTION_REBOOT = 0x2,
	SC_ACTION_RUN_COMMAND = 0x3,
};

/* 6436 */
struct _SC_ACTION
{
	_SC_ACTION_TYPE Type;
	unsigned int Delay;
};

/* 6437 */
struct _SERVICE_FAILURE_ACTIONSA
{
	unsigned int dwResetPeriod;
	char *lpRebootMsg;
	char *lpCommand;
	unsigned int cActions;
	_SC_ACTION *lpsaActions;
};

/* 6438 */
struct HIMC__
{
	int unused;
};

/* 6439 */
union _double_val
{
	unsigned __int16 _Sh[8];
	long double _Val;
};

/* 6440 */
struct __declspec(align(8)) _FILE_ID_BOTH_DIR_INFO
{
	unsigned int NextEntryOffset;
	unsigned int FileIndex;
	_LARGE_INTEGER CreationTime;
	_LARGE_INTEGER LastAccessTime;
	_LARGE_INTEGER LastWriteTime;
	_LARGE_INTEGER ChangeTime;
	_LARGE_INTEGER EndOfFile;
	_LARGE_INTEGER AllocationSize;
	unsigned int FileAttributes;
	unsigned int FileNameLength;
	unsigned int EaSize;
	char ShortNameLength;
	wchar_t ShortName[12];
	_LARGE_INTEGER FileId;
	wchar_t FileName[1];
};

/* 6441 */
struct tagEMREXTCREATEPEN
{
	tagEMR emr;
	unsigned int ihPen;
	unsigned int offBmi;
	unsigned int cbBmi;
	unsigned int offBits;
	unsigned int cbBits;
	tagEXTLOGPEN32 elp;
};

/* 6442 */
union $66A2FC5ED47CB5912809650DAB14E256
{
	unsigned int VirtualAddress;
	unsigned int RelocCount;
};

/* 6443 */
struct __unaligned __declspec(align(2)) _IMAGE_RELOCATION
{
	$66A2FC5ED47CB5912809650DAB14E256 ___u0;
	unsigned int SymbolTableIndex;
	unsigned __int16 Type;
};

/* 6444 */
struct PPM_WMI_PERF_STATES
{
	unsigned int Count;
	unsigned int MaxFrequency;
	unsigned int CurrentState;
	unsigned int MaxPerfState;
	unsigned int MinPerfState;
	unsigned int LowestPerfState;
	unsigned int ThermalConstraint;
	char BusyAdjThreshold;
	char PolicyType;
	char Type;
	char Reserved;
	unsigned int TimerInterval;
	unsigned __int64 TargetProcessors;
	unsigned int PStateHandler;
	unsigned int PStateContext;
	unsigned int TStateHandler;
	unsigned int TStateContext;
	unsigned int FeedbackHandler;
	unsigned int Reserved1;
	unsigned __int64 Reserved2;
	PPM_WMI_PERF_STATE State[1];
};

/* 6445 */
struct __cppobj CProjectileCastingGlow : CProjectile
{
	CVidCell m_animation;
	CVidBitmap m_newPalette;
	unsigned int m_dwRenderFlags;
	char m_bNewPalette;
	char m_transparency;
	char m_duration;
	char m_delay;
};

/* 6446 */
struct tagWNDCLASSW
{
	unsigned int style;
	int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE__ *hInstance;
	HICON__ *hIcon;
	HICON__ *hCursor;
	HBRUSH__ *hbrBackground;
	const wchar_t *lpszMenuName;
	const wchar_t *lpszClassName;
};

/* 6447 */
struct _QUERY_SERVICE_LOCK_STATUSW
{
	unsigned int fIsLocked;
	wchar_t *lpLockOwner;
	unsigned int dwLockDuration;
};

/* 6448 */
struct _MOUSE_EVENT_RECORD
{
	_COORD dwMousePosition;
	unsigned int dwButtonState;
	unsigned int dwControlKeyState;
	unsigned int dwEventFlags;
};

/* 6449 */
struct __cppobj __declspec(align(8)) UserStatsReceived_t
{
	unsigned __int64 m_nGameID;
	EResult m_eResult;
	__unaligned __declspec(align(1)) CSteamID m_steamIDUser;
};

/* 6450 */
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
	_GUID OldestTransactionGuid;
};

/* 6451 */
struct tagLOCALESIGNATURE
{
	unsigned int lsUsb[4];
	unsigned int lsCsbDefault[2];
	unsigned int lsCsbSupported[2];
};

/* 6452 */
struct _CONNECTDLGSTRUCTW
{
	unsigned int cbStructure;
	HWND__ *hwndOwner;
	_NETRESOURCEW *lpConnRes;
	unsigned int dwFlags;
	unsigned int dwDevNum;
};

/* 6453 */
struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
{
	EResult m_eResult;
	EWorkshopFileAction m_eAction;
	int m_nResultsReturned;
	int m_nTotalResultCount;
	unsigned __int64 m_rgPublishedFileId[50];
	unsigned int m_rgRTimeUpdated[50];
};

/* 6454 */
struct tagWINDOWPOS
{
	HWND__ *hwnd;
	HWND__ *hwndInsertAfter;
	int x;
	int y;
	int cx;
	int cy;
	unsigned int flags;
};

/* 6455 */
struct tagNCCALCSIZE_PARAMS
{
	tagRECT rgrc[3];
	tagWINDOWPOS *lppos;
};

/* 6456 */
struct __declspec(align(8)) RemoteStoragePublishedFileDeleted_t
{
	unsigned __int64 m_nPublishedFileId;
	unsigned int m_nAppID;
};

/* 6457 */
struct _IMAGE_SEPARATE_DEBUG_HEADER
{
	unsigned __int16 Signature;
	unsigned __int16 Flags;
	unsigned __int16 Machine;
	unsigned __int16 Characteristics;
	unsigned int TimeDateStamp;
	unsigned int CheckSum;
	unsigned int ImageBase;
	unsigned int SizeOfImage;
	unsigned int NumberOfSections;
	unsigned int ExportedNamesSize;
	unsigned int DebugDirectorySize;
	unsigned int SectionAlignment;
	unsigned int Reserved[2];
};

/* 6458 */
struct tagCOMPAREITEMSTRUCT
{
	unsigned int CtlType;
	unsigned int CtlID;
	HWND__ *hwndItem;
	unsigned int itemID1;
	unsigned int itemData1;
	unsigned int itemID2;
	unsigned int itemData2;
	unsigned int dwLocaleId;
};

/* 6459 */
struct _CONTEXT_CHUNK
{
	int Offset;
	unsigned int Length;
};

/* 6460 */
struct _ENUM_SERVICE_STATUSA
{
	char *lpServiceName;
	char *lpDisplayName;
	_SERVICE_STATUS ServiceStatus;
};

/* 6461 */
struct tagEMRRESTOREDC
{
	tagEMR emr;
	int iRelative;
};

/* 6462 */
struct _UMS_CREATE_THREAD_ATTRIBUTES
{
	unsigned int UmsVersion;
	void *UmsContext;
	void *UmsCompletionList;
};

/* 6463 */
struct _MESSAGE_RESOURCE_DATA
{
	unsigned int NumberOfBlocks;
	_MESSAGE_RESOURCE_BLOCK Blocks[1];
};

/* 6464 */
struct _cpinfoexW
{
	unsigned int MaxCharSize;
	char DefaultChar[2];
	char LeadByte[12];
	wchar_t UnicodeDefaultChar;
	unsigned int CodePage;
	wchar_t CodePageName[260];
};

/* 6465 */
struct tagIMECHARPOSITION
{
	unsigned int dwSize;
	unsigned int dwCharPos;
	tagPOINT pt;
	unsigned int cLineHeight;
	tagRECT rcDocument;
};

/* 6466 */
struct $0E5D5DB362C7A374EBF52ABD6985A37E
{
	_SINGLE_LIST_ENTRY Next;
	unsigned __int16 Depth;
	unsigned __int16 Sequence;
};

/* 6467 */
union _SLIST_HEADER
{
	unsigned __int64 Alignment;
	$0E5D5DB362C7A374EBF52ABD6985A37E __s1;
};

/* 6468 */
struct _UNIVERSAL_NAME_INFOW
{
	wchar_t *lpUniversalName;
};

/* 6469 */
struct __declspec(align(4)) _TAPE_WRITE_MARKS
{
	unsigned int Type;
	unsigned int Count;
	char Immediate;
};

/* 6470 */
struct HTTPRequestDataReceived_t
{
	unsigned int m_hRequest;
	unsigned __int64 m_ulContextValue;
	unsigned int m_cOffset;
	unsigned int m_cBytesReceived;
};

/* 6471 */
struct tagSTYLEBUFA
{
	unsigned int dwStyle;
	char szDescription[32];
};

/* 6472 */
struct tagCURSORINFO
{
	unsigned int cbSize;
	unsigned int flags;
	HICON__ *hCursor;
	tagPOINT ptScreenPos;
};

/* 6473 */
struct value_entA
{
	char *ve_valuename;
	unsigned int ve_valuelen;
	unsigned int ve_valueptr;
	unsigned int ve_type;
};

/* 6474 */
struct tagENUMLOGFONTEXW
{
	tagLOGFONTW elfLogFont;
	wchar_t elfFullName[64];
	wchar_t elfStyle[32];
	wchar_t elfScript[32];
};

/* 6475 */
struct tagENUMLOGFONTEXDVW
{
	tagENUMLOGFONTEXW elfEnumLogfontEx;
	tagDESIGNVECTOR elfDesignVector;
};

/* 6476 */
struct __unaligned __declspec(align(2)) STR_RES_HEADER
{
	unsigned __int16 wFlags;
	char sndResRef[8];
	unsigned int volumeVariance;
	unsigned int pitchVariance;
	unsigned int offsetToStr;
	unsigned int strSize;
};

/* 6477 */
struct _IO_COUNTERS
{
	unsigned __int64 ReadOperationCount;
	unsigned __int64 WriteOperationCount;
	unsigned __int64 OtherOperationCount;
	unsigned __int64 ReadTransferCount;
	unsigned __int64 WriteTransferCount;
	unsigned __int64 OtherTransferCount;
};

/* 6478 */
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
	_JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
	_IO_COUNTERS IoInfo;
	unsigned int ProcessMemoryLimit;
	unsigned int JobMemoryLimit;
	unsigned int PeakProcessMemoryUsed;
	unsigned int PeakJobMemoryUsed;
};

/* 6479 */
struct tagTOUCHINPUT
{
	int x;
	int y;
	void *hSource;
	unsigned int dwID;
	unsigned int dwFlags;
	unsigned int dwMask;
	unsigned int dwTime;
	unsigned int dwExtraInfo;
	unsigned int cxContact;
	unsigned int cyContact;
};

/* 6480 */
struct UI_Control_Slider_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	char refSlider[8];
	char refSliderThumb[8];
	unsigned __int16 nSequenceThumb;
	unsigned __int16 nFrameThumbNormal;
	unsigned __int16 nFrameThumbSelected;
	unsigned __int16 xThumbOffset;
	unsigned __int16 yThumbOffset;
	unsigned __int16 tickSize;
	unsigned __int16 nTicks;
	unsigned __int16 activeBarTop;
	unsigned __int16 activeBarBottom;
	unsigned __int16 activeBarLeft;
	unsigned __int16 activeBarRight;
};

/* 6481 */
struct _nlsversioninfoex
{
	unsigned int dwNLSVersionInfoSize;
	unsigned int dwNLSVersion;
	unsigned int dwDefinedVersion;
	unsigned int dwEffectiveId;
	_GUID guidCustomVersion;
};

/* 6482 */
struct _MEMORYSTATUS
{
	unsigned int dwLength;
	unsigned int dwMemoryLoad;
	unsigned int dwTotalPhys;
	unsigned int dwAvailPhys;
	unsigned int dwTotalPageFile;
	unsigned int dwAvailPageFile;
	unsigned int dwTotalVirtual;
	unsigned int dwAvailVirtual;
};

/* 6483 */
struct _WGLSWAP
{
	HDC__ *hdc;
	unsigned int uiFlags;
};

/* 6484 */
struct tagCHARSETINFO
{
	unsigned int ciCharset;
	unsigned int ciACP;
	tagFONTSIGNATURE fs;
};

/* 6485 */
struct tagTTPOLYGONHEADER
{
	unsigned int cb;
	unsigned int dwType;
	tagPOINTFX pfxStart;
};

/* 6486 */
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA
{
	unsigned int dwReason;
	char *pszComment;
	_SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 6487 */
struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
	char Name[16];
	char Date[12];
	char UserID[6];
	char GroupID[6];
	char Mode[8];
	char Size[10];
	char EndHeader[2];
};

/* 6488 */
struct __declspec(align(4)) FriendSessionStateInfo_t
{
	unsigned int m_uiOnlineSessionInstances;
	char m_uiPublishedToFriendsSessionInstance;
};

/* 6489 */
struct SDL_atomic_t
{
	int value;
};

/* 6490 */
struct __declspec(align(8)) RemoteStorageAppSyncProgress_t
{
	char m_rgchCurrentFile[260];
	unsigned int m_nAppID;
	unsigned int m_uBytesTransferredThisChunk;
	long double m_dAppPercentComplete;
	bool m_bUploading;
};

/* 6491 */
struct __cppobj __declspec(align(4)) CProjectileColorSpray : CProjectileBAM
{
	__int16 m_counter;
};

/* 6492 */
union $D0FAA225C480F7E79DE0C59B79FF3D5C
{
	unsigned int EntryPointToken;
	unsigned int EntryPointRVA;
};

/* 6493 */
struct IMAGE_COR20_HEADER
{
	unsigned int cb;
	unsigned __int16 MajorRuntimeVersion;
	unsigned __int16 MinorRuntimeVersion;
	_IMAGE_DATA_DIRECTORY MetaData;
	unsigned int Flags;
	$D0FAA225C480F7E79DE0C59B79FF3D5C ___u5;
	_IMAGE_DATA_DIRECTORY Resources;
	_IMAGE_DATA_DIRECTORY StrongNameSignature;
	_IMAGE_DATA_DIRECTORY CodeManagerTable;
	_IMAGE_DATA_DIRECTORY VTableFixups;
	_IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
	_IMAGE_DATA_DIRECTORY ManagedNativeHeader;
};

/* 6494 */
struct __m256d
{
	long double m256d_f64[4];
};

/* 6495 */
struct __declspec(align(2)) _SERVICE_PREFERRED_NODE_INFO
{
	unsigned __int16 usPreferredNode;
	char fDelete;
};

/* 6496 */
struct _IMAGE_EXPORT_DIRECTORY
{
	unsigned int Characteristics;
	unsigned int TimeDateStamp;
	unsigned __int16 MajorVersion;
	unsigned __int16 MinorVersion;
	unsigned int Name;
	unsigned int Base;
	unsigned int NumberOfFunctions;
	unsigned int NumberOfNames;
	unsigned int AddressOfFunctions;
	unsigned int AddressOfNames;
	unsigned int AddressOfNameOrdinals;
};

/* 6497 */
struct tagNEWTEXTMETRICW
{
	int tmHeight;
	int tmAscent;
	int tmDescent;
	int tmInternalLeading;
	int tmExternalLeading;
	int tmAveCharWidth;
	int tmMaxCharWidth;
	int tmWeight;
	int tmOverhang;
	int tmDigitizedAspectX;
	int tmDigitizedAspectY;
	wchar_t tmFirstChar;
	wchar_t tmLastChar;
	wchar_t tmDefaultChar;
	wchar_t tmBreakChar;
	char tmItalic;
	char tmUnderlined;
	char tmStruckOut;
	char tmPitchAndFamily;
	char tmCharSet;
	unsigned int ntmFlags;
	unsigned int ntmSizeEM;
	unsigned int ntmCellHeight;
	unsigned int ntmAvgWidth;
};

/* 6498 */
struct tagNEWTEXTMETRICEXW
{
	tagNEWTEXTMETRICW ntmTm;
	tagFONTSIGNATURE ntmFontSig;
};

/* 6499 */
struct tagENUMTEXTMETRICW
{
	tagNEWTEXTMETRICEXW etmNewTextMetricEx;
	tagAXESLISTW etmAxesList;
};

/* 6500 */
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
	void *lpInformation;
	void *lpSectionBase;
	unsigned int ulSectionLength;
	void *lpSectionGlobalDataBase;
	unsigned int ulSectionGlobalDataLength;
};

/* 6501 */
struct tagACTCTX_SECTION_KEYED_DATA
{
	unsigned int cbSize;
	unsigned int ulDataFormatVersion;
	void *lpData;
	unsigned int ulLength;
	void *lpSectionGlobalData;
	unsigned int ulSectionGlobalDataLength;
	void *lpSectionBase;
	unsigned int ulSectionTotalLength;
	void *hActCtx;
	unsigned int ulAssemblyRosterIndex;
	unsigned int ulFlags;
	tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
};

/* 6502 */
struct tagEMRPLGBLT
{
	tagEMR emr;
	_RECTL rclBounds;
	_POINTL aptlDest[3];
	int xSrc;
	int ySrc;
	int cxSrc;
	int cySrc;
	tagXFORM xformSrc;
	unsigned int crBkColorSrc;
	unsigned int iUsageSrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	int xMask;
	int yMask;
	unsigned int iUsageMask;
	unsigned int offBmiMask;
	unsigned int cbBmiMask;
	unsigned int offBitsMask;
	unsigned int cbBitsMask;
};

/* 6503 */
struct __declspec(align(4)) _LOAD_DLL_DEBUG_INFO
{
	void *hFile;
	void *lpBaseOfDll;
	unsigned int dwDebugInfoFileOffset;
	unsigned int nDebugInfoSize;
	void *lpImageName;
	unsigned __int16 fUnicode;
};

/* 6504 */
struct UI_PanelHeader_st
{
	unsigned int nPanelID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	unsigned __int16 nControls;
	char refMosaic[8];
	unsigned __int16 nFirstControl;
	unsigned __int16 wFlags;
};

/* 6505 */
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
	unsigned int BeginAddress;
	unsigned int EndAddress;
	unsigned int UnwindInfoAddress;
};

/* 6506 */
struct $4513DC3CCFACECD09C8EAC7B805F6919
{
	unsigned int WeakDefaultSymIndex;
	unsigned int WeakSearchType;
	char rgbReserved[12];
};

/* 6507 */
struct $94989A3E9A435ED97145FE1E68FB2FC6
{
	char Name[20];
};

/* 6508 */
struct $47B47A2EB50216D404F2F0D49488C8F4
{
	unsigned int Length;
	unsigned __int16 NumberOfRelocations;
	unsigned __int16 NumberOfLinenumbers;
	unsigned int CheckSum;
	__int16 Number;
	char Selection;
	char bReserved;
	__int16 HighNumber;
	char rgbReserved[2];
};

/* 6509 */
struct $95EC2160EE73DEF8E63B3C99B8227654
{
	unsigned int crc;
	char rgbReserved[16];
};

/* 6510 */
struct $88B2AD51A0FA26305D1A45B5C0B492BA
{
	IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	char rgbReserved[2];
};

/* 6511 */
union _IMAGE_AUX_SYMBOL_EX
{
	$4513DC3CCFACECD09C8EAC7B805F6919 Sym;
	$94989A3E9A435ED97145FE1E68FB2FC6 File;
	$47B47A2EB50216D404F2F0D49488C8F4 Section;
	$88B2AD51A0FA26305D1A45B5C0B492BA __s3;
	$95EC2160EE73DEF8E63B3C99B8227654 CRC;
};

/* 6512 */
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
	unsigned __int64 CycleTime;
};

/* 6513 */
struct tagEMRCREATEMONOBRUSH
{
	tagEMR emr;
	unsigned int ihBrush;
	unsigned int iUsage;
	unsigned int offBmi;
	unsigned int cbBmi;
	unsigned int offBits;
	unsigned int cbBits;
};

/* 6514 */
struct HDESK__
{
	int unused;
};

/* 6515 */
struct BSMINFO
{
	unsigned int cbSize;
	HDESK__ *hdesk;
	HWND__ *hwnd;
	_LUID luid;
};

/* 6516 */
union _FILE_SEGMENT_ELEMENT
{
	void *__ptr64 Buffer;
	unsigned __int64 Alignment;
};

/* 6517 */
struct _div_t
{
	int quot;
	int rem;
};

/* 6518 */
struct _SID_AND_ATTRIBUTES_HASH
{
	unsigned int SidCount;
	_SID_AND_ATTRIBUTES *SidAttr;
	unsigned int Hash[32];
};

/* 6519 */
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
{
	unsigned int ElementCount;
	_COMPATIBILITY_CONTEXT_ELEMENT Elements[];
};

/* 6520 */
struct _SERVICE_FAILURE_ACTIONS_FLAG
{
	int fFailureActionsOnNonCrashFailures;
};

/* 6521 */
struct NumberOfCurrentPlayers_t
{
	char m_bSuccess;
	int m_cPlayers;
};

/* 6522 */
struct _GLYPHMETRICS
{
	unsigned int gmBlackBoxX;
	unsigned int gmBlackBoxY;
	tagPOINT gmptGlyphOrigin;
	__int16 gmCellIncX;
	__int16 gmCellIncY;
};

/* 6523 */
struct _JOB_SET_ARRAY
{
	void *JobHandle;
	unsigned int MemberLevel;
	unsigned int Flags;
};

/* 6524 */
struct $77B11F2259FB720D3169017E12CED493
{
	HINSTANCE__ *LocalizedReasonModule;
	unsigned int LocalizedReasonId;
	unsigned int ReasonStringCount;
	wchar_t **ReasonStrings;
};

/* 6525 */
union $01B219A0658C171A5DD0149DA815B7FE
{
	$77B11F2259FB720D3169017E12CED493 Detailed;
	wchar_t *SimpleReasonString;
};

/* 6526 */
struct _REASON_CONTEXT
{
	unsigned int Version;
	unsigned int Flags;
	$01B219A0658C171A5DD0149DA815B7FE Reason;
};

/* 6527 */
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
	_LARGE_INTEGER TotalUserTime;
	_LARGE_INTEGER TotalKernelTime;
	_LARGE_INTEGER ThisPeriodTotalUserTime;
	_LARGE_INTEGER ThisPeriodTotalKernelTime;
	unsigned int TotalPageFaultCount;
	unsigned int TotalProcesses;
	unsigned int ActiveProcesses;
	unsigned int TotalTerminatedProcesses;
};

/* 6528 */
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
	_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	_IO_COUNTERS IoInfo;
};

/* 6529 */
struct tagEMRSETMITERLIMIT
{
	tagEMR emr;
	float eMiterLimit;
};

/* 6530 */
struct tagEMRCREATEBRUSHINDIRECT
{
	tagEMR emr;
	unsigned int ihBrush;
	tagLOGBRUSH32 lb;
};

/* 6531 */
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
	unsigned int dwFlags;
	unsigned int ulFormatVersion;
	unsigned int ulAssemblyCount;
	unsigned int ulRootManifestPathType;
	unsigned int ulRootManifestPathChars;
	unsigned int ulRootConfigurationPathType;
	unsigned int ulRootConfigurationPathChars;
	unsigned int ulAppDirPathType;
	unsigned int ulAppDirPathChars;
	const wchar_t *lpRootManifestPath;
	const wchar_t *lpRootConfigurationPath;
	const wchar_t *lpAppDirPath;
};

/* 6532 */
struct _CREATE_THREAD_DEBUG_INFO
{
	void *hThread;
	void *lpThreadLocalBase;
	unsigned int (__stdcall *lpStartAddress)(void *);
};

/* 6533 */
union $EA34C7E6D81320D8E70BE4D28CB95CAA
{
	_EXCEPTION_DEBUG_INFO Exception;
	_CREATE_THREAD_DEBUG_INFO CreateThread;
	_CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
	_EXIT_THREAD_DEBUG_INFO ExitThread;
	_EXIT_PROCESS_DEBUG_INFO ExitProcess;
	_LOAD_DLL_DEBUG_INFO LoadDll;
	_UNLOAD_DLL_DEBUG_INFO UnloadDll;
	_OUTPUT_DEBUG_STRING_INFO DebugString;
	_RIP_INFO RipInfo;
};

/* 6534 */
struct _DEBUG_EVENT
{
	unsigned int dwDebugEventCode;
	unsigned int dwProcessId;
	unsigned int dwThreadId;
	$EA34C7E6D81320D8E70BE4D28CB95CAA u;
};

/* 6535 */
struct __cppobj CMapStringToPtr::CAssoc
{
	CMapStringToPtr::CAssoc *pNext;
	unsigned int nHashValue;
	CString key;
	void *value;
};

/* 6536 */
struct __cppobj CMapStringToPtr : CObject
{
	CMapStringToPtr::CAssoc **m_pHashTable;
	unsigned int m_nHashTableSize;
	int m_nCount;
	CMapStringToPtr::CAssoc *m_pFreeList;
	CPlex *m_pBlocks;
	int m_nBlockSize;
};

/* 6537 */
struct _SECURITY_DESCRIPTOR_RELATIVE
{
	char Revision;
	char Sbz1;
	unsigned __int16 Control;
	unsigned int Owner;
	unsigned int Group;
	unsigned int Sacl;
	unsigned int Dacl;
};

/* 6538 */
struct __declspec(align(8)) _FILE_STREAM_INFO
{
	unsigned int NextEntryOffset;
	unsigned int StreamNameLength;
	_LARGE_INTEGER StreamSize;
	_LARGE_INTEGER StreamAllocationSize;
	wchar_t StreamName[1];
};

/* 11254 */
enum _TOKEN_TYPE
{
	TokenPrimary = 0x1,
	TokenImpersonation = 0x2,
};

/* 11255 */
enum _SECURITY_IMPERSONATION_LEVEL
{
	SecurityAnonymous = 0x0,
	SecurityIdentification = 0x1,
	SecurityImpersonation = 0x2,
	SecurityDelegation = 0x3,
};

/* 6539 */
struct _TOKEN_STATISTICS
{
	_LUID TokenId;
	_LUID AuthenticationId;
	_LARGE_INTEGER ExpirationTime;
	_TOKEN_TYPE TokenType;
	_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	unsigned int DynamicCharged;
	unsigned int DynamicAvailable;
	unsigned int GroupCount;
	unsigned int PrivilegeCount;
	_LUID ModifiedId;
};

/* 6540 */
struct __unaligned __declspec(align(4)) SDL_AudioCVT
{
	int needed;
	unsigned __int16 src_format;
	unsigned __int16 dst_format;
	long double rate_incr;
	char *buf;
	int len;
	int len_cvt;
	int len_mult;
	long double len_ratio;
	void (__cdecl *filters[10])(SDL_AudioCVT *, unsigned __int16);
	int filter_index;
};

/* 6541 */
struct _TAPE_GET_POSITION
{
	unsigned int Type;
	unsigned int Partition;
	_LARGE_INTEGER Offset;
};

/* 6542 */
struct LowBatteryPower_t
{
	char m_nMinutesBatteryLeft;
};

/* 6543 */
struct RemoteStorageUpdateUserPublishedItemVoteResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
};

/* 6544 */
struct __declspec(align(8)) _stat32i64
{
	unsigned int st_dev;
	unsigned __int16 st_ino;
	unsigned __int16 st_mode;
	__int16 st_nlink;
	__int16 st_uid;
	__int16 st_gid;
	unsigned int st_rdev;
	__int64 st_size;
	int st_atime;
	int st_mtime;
	int st_ctime;
};

/* 6545 */
struct _wfinddata64_t
{
	unsigned int attrib;
	__int64 time_create;
	__int64 time_access;
	__int64 time_write;
	__int64 size;
	wchar_t name[260];
};

/* 6546 */
struct PPM_IDLE_ACCOUNTING
{
	unsigned int StateCount;
	unsigned int TotalTransitions;
	unsigned int ResetCount;
	unsigned __int64 StartTime;
	PPM_IDLE_STATE_ACCOUNTING State[1];
};

/* 6547 */
struct __cppobj tagMOUSEHOOKSTRUCTEX : tagMOUSEHOOKSTRUCT
{
	unsigned int mouseData;
};

/* 6548 */
struct tagCWPSTRUCT
{
	int lParam;
	unsigned int wParam;
	unsigned int message;
	HWND__ *hwnd;
};

/* 6549 */
struct tagALTTABINFO
{
	unsigned int cbSize;
	int cItems;
	int cColumns;
	int cRows;
	int iColFocus;
	int iRowFocus;
	int cxItem;
	int cyItem;
	tagPOINT ptStart;
};

/* 6550 */
struct _IMAGE_TLS_DIRECTORY32
{
	unsigned int StartAddressOfRawData;
	unsigned int EndAddressOfRawData;
	unsigned int AddressOfIndex;
	unsigned int AddressOfCallBacks;
	unsigned int SizeOfZeroFill;
	unsigned int Characteristics;
};

/* 6551 */
struct __declspec(align(4)) tagEMRPOLYDRAW16
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cpts;
	tagPOINTS apts[1];
	char abTypes[1];
};

/* 6552 */
struct _GRADIENT_RECT
{
	unsigned int UpperLeft;
	unsigned int LowerRight;
};

/* 6553 */
struct _SYSTEM_MANDATORY_LABEL_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6554 */
struct __declspec(align(4)) _TAPE_ERASE
{
	unsigned int Type;
	char Immediate;
};

/* 6555 */
struct HRSRC__
{
	int unused;
};

/* 6556 */
struct __cppobj CProjectileMagicMissileMulti : CProjectileMulti
{
};

/* 6557 */
struct _ACL_SIZE_INFORMATION
{
	unsigned int AceCount;
	unsigned int AclBytesInUse;
	unsigned int AclBytesFree;
};

/* 6558 */
struct tagEMRPOLYPOLYLINE16
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int nPolys;
	unsigned int cpts;
	unsigned int aPolyCounts[1];
	tagPOINTS apts[1];
};

/* 6559 */
struct _TRANSACTIONMANAGER_LOG_INFORMATION
{
	_GUID LogIdentity;
};

/* 6560 */
struct RemoteStorageGetPublishedItemVoteDetailsResult_t
{
	EResult m_eResult;
	unsigned __int64 m_unPublishedFileId;
	int m_nVotesFor;
	int m_nVotesAgainst;
	int m_nReports;
	float m_fScore;
};

/* 6561 */
struct __declspec(align(2)) tagHW_PROFILE_INFOA
{
	unsigned int dwDockInfo;
	char szHwProfileGuid[39];
	char szHwProfileName[80];
};

/* 6562 */
struct SDL_AssertData
{
	int always_ignore;
	unsigned int trigger_count;
	const char *condition;
	const char *filename;
	int linenum;
	const char *function;
	SDL_AssertData *next;
};

/* 6563 */
struct _ENUM_SERVICE_STATUS_PROCESSW
{
	wchar_t *lpServiceName;
	wchar_t *lpDisplayName;
	_SERVICE_STATUS_PROCESS ServiceStatusProcess;
};

/* 6564 */
struct tagKERNINGPAIR
{
	unsigned __int16 wFirst;
	unsigned __int16 wSecond;
	int iKernAmount;
};

/* 6565 */
struct PPM_IDLE_ACCOUNTING_EX
{
	unsigned int StateCount;
	unsigned int TotalTransitions;
	unsigned int ResetCount;
	unsigned __int64 StartTime;
	PPM_IDLE_STATE_ACCOUNTING_EX State[1];
};

/* 6566 */
struct _ENLISTMENT_BASIC_INFORMATION
{
	_GUID EnlistmentId;
	_GUID TransactionId;
	_GUID ResourceManagerId;
};

/* 6567 */
struct $12EDD93CAC4208332C3108DBB4839320
{
	unsigned __int16 AllowScaling : 1;
	unsigned __int16 Disabled : 1;
	unsigned __int16 Reserved : 14;
};

/* 6568 */
union $2470598D16752614E56D8986BA34CBB5
{
	unsigned __int16 AsWORD;
	$12EDD93CAC4208332C3108DBB4839320 __s1;
};

/* 6569 */
struct PROCESSOR_IDLESTATE_POLICY
{
	unsigned __int16 Revision;
	$2470598D16752614E56D8986BA34CBB5 Flags;
	unsigned int PolicyCount;
	PROCESSOR_IDLESTATE_INFO Policy[3];
};

/* 6570 */
struct tagEMRCREATEPEN
{
	tagEMR emr;
	unsigned int ihPen;
	tagLOGPEN lopn;
};

/* 6571 */
union $D73D647711E0D18BB6EFDDF78E7AEEC6
{
	wchar_t UnicodeChar;
	char AsciiChar;
};

/* 6572 */
struct _KEY_EVENT_RECORD
{
	int bKeyDown;
	unsigned __int16 wRepeatCount;
	unsigned __int16 wVirtualKeyCode;
	unsigned __int16 wVirtualScanCode;
	$D73D647711E0D18BB6EFDDF78E7AEEC6 uChar;
	unsigned int dwControlKeyState;
};

/* 6573 */
struct tagGLYPHSET
{
	unsigned int cbThis;
	unsigned int flAccel;
	unsigned int cGlyphsSupported;
	unsigned int cRanges;
	tagWCRANGE ranges[1];
};

/* 6574 */
struct _QUERY_SERVICE_LOCK_STATUSA
{
	unsigned int fIsLocked;
	char *lpLockOwner;
	unsigned int dwLockDuration;
};

/* 6575 */
struct _CONSOLE_HISTORY_INFO
{
	unsigned int cbSize;
	unsigned int HistoryBufferSize;
	unsigned int NumberOfHistoryBuffers;
	unsigned int dwFlags;
};

/* 6576 */
struct _OBJECTID
{
	_GUID Lineage;
	unsigned int Uniquifier;
};

/* 6577 */
struct _SYSTEM_ALARM_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6578 */
struct IMAGE_LOAD_CONFIG_DIRECTORY64
{
	unsigned int Size;
	unsigned int TimeDateStamp;
	unsigned __int16 MajorVersion;
	unsigned __int16 MinorVersion;
	unsigned int GlobalFlagsClear;
	unsigned int GlobalFlagsSet;
	unsigned int CriticalSectionDefaultTimeout;
	unsigned __int64 DeCommitFreeBlockThreshold;
	unsigned __int64 DeCommitTotalFreeThreshold;
	unsigned __int64 LockPrefixTable;
	unsigned __int64 MaximumAllocationSize;
	unsigned __int64 VirtualMemoryThreshold;
	unsigned __int64 ProcessAffinityMask;
	unsigned int ProcessHeapFlags;
	unsigned __int16 CSDVersion;
	unsigned __int16 Reserved1;
	unsigned __int64 EditList;
	unsigned __int64 SecurityCookie;
	unsigned __int64 SEHandlerTable;
	unsigned __int64 SEHandlerCount;
};

/* 6579 */
struct tagEMRSETPIXELV
{
	tagEMR emr;
	_POINTL ptlPixel;
	unsigned int crColor;
};

/* 6580 */
union $8662F439D215AAEDBB1F787C8B649648
{
	unsigned __int64 FiberData;
	unsigned int Version;
};

/* 6581 */
struct _NT_TIB64
{
	unsigned __int64 ExceptionList;
	unsigned __int64 StackBase;
	unsigned __int64 StackLimit;
	unsigned __int64 SubSystemTib;
	$8662F439D215AAEDBB1F787C8B649648 ___u4;
	unsigned __int64 ArbitraryUserPointer;
	unsigned __int64 Self;
};

/* 6582 */
struct _UMS_SCHEDULER_STARTUP_INFO
{
	unsigned int UmsVersion;
	void *CompletionList;
	void (__stdcall *SchedulerProc)(_RTL_UMS_SCHEDULER_REASON, unsigned int, void *);
	void *SchedulerParam;
};

/* 6583 */
struct _ABCFLOAT
{
	float abcfA;
	float abcfB;
	float abcfC;
};

/* 6584 */
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
	unsigned __int64 BeginAddress;
	unsigned __int64 EndAddress;
	unsigned __int64 ExceptionHandler;
	unsigned __int64 HandlerData;
	unsigned __int64 PrologEndAddress;
};

/* 6585 */
struct _CONSOLE_CURSOR_INFO
{
	unsigned int dwSize;
	int bVisible;
};

/* 6586 */
struct __declspec(align(8)) _TAPE_GET_MEDIA_PARAMETERS
{
	_LARGE_INTEGER Capacity;
	_LARGE_INTEGER Remaining;
	unsigned int BlockSize;
	unsigned int PartitionCount;
	char WriteProtected;
};

/* 6587 */
struct _TOKEN_ELEVATION
{
	unsigned int TokenIsElevated;
};

/* 6589 */
struct $10E94018B72E9DBF3712C172F081E927
{
	void *data;
	unsigned int size;
	unsigned int left;
};

/* 6590 */
struct $FF8086F3E0100A5DFCCCCFE0FA2899D8
{
	SDL_bool append;
	void *h;
	$10E94018B72E9DBF3712C172F081E927 buffer;
};

/* 6591 */
struct $B0FB99CBA6333A3C14AD59B9DAD77F42
{
	SDL_bool autoclose;
	_iobuf *fp;
};

/* 6592 */
struct $B570A5609C4905F1E669435F33844355
{
	char *base;
	char *here;
	char *stop;
};

/* 6593 */
struct $1BC14106096014F86F39CB4D094D835F
{
	void *data1;
	void *data2;
};

/* 6594 */
union $2F13D6589CC7C9BCF7758724B656644B
{
	$FF8086F3E0100A5DFCCCCFE0FA2899D8 windowsio;
	$B0FB99CBA6333A3C14AD59B9DAD77F42 stdio;
	$B570A5609C4905F1E669435F33844355 mem;
	$1BC14106096014F86F39CB4D094D835F unknown;
};

/* 6588 */
struct SDL_RWops
{
	__int64 (__cdecl *size)(SDL_RWops *);
	__int64 (__cdecl *seek)(SDL_RWops *, __int64, int);
	unsigned int (__cdecl *read)(SDL_RWops *, void *, unsigned int, unsigned int);
	unsigned int (__cdecl *write)(SDL_RWops *, const void *, unsigned int, unsigned int);
	int (__cdecl *close)(SDL_RWops *);
	unsigned int type;
	$2F13D6589CC7C9BCF7758724B656644B hidden;
};

/* 6595 */
struct _SERVICE_DESCRIPTIONA
{
	char *lpDescription;
};

/* 6596 */
struct tagRAWINPUTDEVICELIST
{
	void *hDevice;
	unsigned int dwType;
};

/* 6597 */
struct _XSTATE_CONFIGURATION
{
	unsigned __int64 EnabledFeatures;
	unsigned int Size;
	unsigned __int32 OptimizedSave : 1;
	_XSTATE_FEATURE Features[64];
};

/* 6598 */
struct tagBITMAP
{
	int bmType;
	int bmWidth;
	int bmHeight;
	int bmWidthBytes;
	unsigned __int16 bmPlanes;
	unsigned __int16 bmBitsPixel;
	void *bmBits;
};

/* 6599 */
struct tagDIBSECTION
{
	tagBITMAP dsBm;
	tagBITMAPINFOHEADER dsBmih;
	unsigned int dsBitfields[3];
	void *dshSection;
	unsigned int dsOffset;
};

/* 6600 */
struct _WOW64_LDT_ENTRY
{
	unsigned __int16 LimitLow;
	unsigned __int16 BaseLow;
	$F0B2C92AC73C9B6567840E22AC07DBF2 HighWord;
};

/* 6601 */
struct __declspec(align(4)) _WIN32_STREAM_ID
{
	unsigned int dwStreamId;
	unsigned int dwStreamAttributes;
	_LARGE_INTEGER Size;
	unsigned int dwStreamNameSize;
	wchar_t cStreamName[1];
};

/* 6602 */
struct _TOKEN_OWNER
{
	void *Owner;
};

/* 6603 */
struct _EVENTSFORLOGFILE
{
	unsigned int ulSize;
	wchar_t szLogicalLogFile[256];
	unsigned int ulNumRecords;
	_EVENTLOGRECORD pEventLogRecords[];
};

/* 6604 */
struct _SUPPORTED_OS_INFO
{
	unsigned __int16 OsCount;
	unsigned __int16 MitigationExist;
	unsigned __int16 OsList[4];
};

/* 6605 */
struct __cppobj GameLobbyJoinRequested_t
{
	CSteamID m_steamIDLobby;
	CSteamID m_steamIDFriend;
};

/* 6606 */
struct biffVarTableEntry_st
{
	unsigned int nID;
	unsigned int nOffset;
	unsigned int nSize;
	unsigned int nType;
};

/* 6607 */
struct __declspec(align(2)) _IMAGE_RESOURCE_DIRECTORY_STRING
{
	unsigned __int16 Length;
	char NameString[1];
};

/* 6608 */
struct _ACCESS_DENIED_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6609 */
struct _IMAGE_DOS_HEADER
{
	unsigned __int16 e_magic;
	unsigned __int16 e_cblp;
	unsigned __int16 e_cp;
	unsigned __int16 e_crlc;
	unsigned __int16 e_cparhdr;
	unsigned __int16 e_minalloc;
	unsigned __int16 e_maxalloc;
	unsigned __int16 e_ss;
	unsigned __int16 e_sp;
	unsigned __int16 e_csum;
	unsigned __int16 e_ip;
	unsigned __int16 e_cs;
	unsigned __int16 e_lfarlc;
	unsigned __int16 e_ovno;
	unsigned __int16 e_res[4];
	unsigned __int16 e_oemid;
	unsigned __int16 e_oeminfo;
	unsigned __int16 e_res2[10];
	int e_lfanew;
};

/* 6610 */
struct _FILE_DISPOSITION_INFO
{
	char DeleteFileA;
};

/* 6611 */
struct $1570E6E652654060C308A778ED15CE16
{
	unsigned __int32 bootPersistenceOn : 1;
	unsigned __int32 reserved : 31;
};

/* 6612 */
union $A13D9FBC5E3E073D802882F516E1F1EB
{
	$1570E6E652654060C308A778ED15CE16 __s0;
	unsigned int value;
};

/* 6613 */
struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	$A13D9FBC5E3E073D802882F516E1F1EB ___u1;
};

/* 6614 */
struct __cppobj CResDLG : CRes
{
};

/* 6615 */
struct __cppobj CResHelper<CResDLG,1011>
{
	CResDLG *pRes;
	CResRef cResRef;
};

/* 6616 */
struct HTTPRequestCompleted_t
{
	unsigned int m_hRequest;
	unsigned __int64 m_ulContextValue;
	bool m_bRequestSuccessful;
	EHTTPStatusCode m_eStatusCode;
};

/* 6617 */
struct CallbackMsg_t
{
	int m_hSteamUser;
	int m_iCallback;
	char *m_pubParam;
	int m_cubParam;
};

/* 6618 */
struct __declspec(align(4)) SDL_HapticCondition
{
	unsigned __int16 type;
	SDL_HapticDirection direction;
	unsigned int length;
	unsigned __int16 delay;
	unsigned __int16 button;
	unsigned __int16 interval;
	unsigned __int16 right_sat[3];
	unsigned __int16 left_sat[3];
	__int16 right_coeff[3];
	__int16 left_coeff[3];
	unsigned __int16 deadband[3];
	__int16 center[3];
};

/* 6619 */
struct tagLASTINPUTINFO
{
	unsigned int cbSize;
	unsigned int dwTime;
};

/* 6620 */
struct tagIMEMENUITEMINFOW
{
	unsigned int cbSize;
	unsigned int fType;
	unsigned int fState;
	unsigned int wID;
	HBITMAP__ *hbmpChecked;
	HBITMAP__ *hbmpUnchecked;
	unsigned int dwItemData;
	wchar_t szString[80];
	HBITMAP__ *hbmpItem;
};

/* 6621 */
struct tagCOLORADJUSTMENT
{
	unsigned __int16 caSize;
	unsigned __int16 caFlags;
	unsigned __int16 caIlluminantIndex;
	unsigned __int16 caRedGamma;
	unsigned __int16 caGreenGamma;
	unsigned __int16 caBlueGamma;
	unsigned __int16 caReferenceBlack;
	unsigned __int16 caReferenceWhite;
	__int16 caContrast;
	__int16 caBrightness;
	__int16 caColorfulness;
	__int16 caRedGreenTint;
};

/* 6622 */
struct tagEMRSETCOLORADJUSTMENT
{
	tagEMR emr;
	tagCOLORADJUSTMENT ColorAdjustment;
};

/* 6623 */
struct _FPO_DATA
{
	unsigned int ulOffStart;
	unsigned int cbProcSize;
	unsigned int cdwLocals;
	unsigned __int16 cdwParams;
	unsigned __int16 cbProlog : 8;
	unsigned __int16 cbRegs : 3;
	unsigned __int16 fHasSEH : 1;
	unsigned __int16 fUseBP : 1;
	unsigned __int16 reserved : 1;
	unsigned __int16 cbFrame : 2;
};

/* 6624 */
struct tagNONCLIENTMETRICSW
{
	unsigned int cbSize;
	int iBorderWidth;
	int iScrollWidth;
	int iScrollHeight;
	int iCaptionWidth;
	int iCaptionHeight;
	tagLOGFONTW lfCaptionFont;
	int iSmCaptionWidth;
	int iSmCaptionHeight;
	tagLOGFONTW lfSmCaptionFont;
	int iMenuWidth;
	int iMenuHeight;
	tagLOGFONTW lfMenuFont;
	tagLOGFONTW lfStatusFont;
	tagLOGFONTW lfMessageFont;
	int iPaddedBorderWidth;
};

/* 6625 */
struct _TOKEN_MANDATORY_POLICY
{
	unsigned int Policy;
};

/* 6626 */
struct _TOKEN_ACCESS_INFORMATION
{
	_SID_AND_ATTRIBUTES_HASH *SidHash;
	_SID_AND_ATTRIBUTES_HASH *RestrictedSidHash;
	_TOKEN_PRIVILEGES *Privileges;
	_LUID AuthenticationId;
	_TOKEN_TYPE TokenType;
	_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	_TOKEN_MANDATORY_POLICY MandatoryPolicy;
	unsigned int Flags;
};

/* 6627 */
struct tagEMRSETVIEWPORTORGEX
{
	tagEMR emr;
	_POINTL ptlOrigin;
};

/* 6628 */
struct _WOW64_DESCRIPTOR_TABLE_ENTRY
{
	unsigned int Selector;
	_WOW64_LDT_ENTRY Descriptor;
};

/* 6629 */
struct _SERVICE_TABLE_ENTRYA
{
	char *lpServiceName;
	void (__stdcall *lpServiceProc)(unsigned int, char **);
};

/* 6630 */
struct __cppobj CAIPlayerScript : CResHelper<CResText,1017>
{
};

/* 6631 */
struct EncryptedAppTicketResponse_t
{
	EResult m_eResult;
};

/* 6632 */
struct _MENU_EVENT_RECORD
{
	unsigned int dwCommandId;
};

/* 6633 */
struct _RGNDATAHEADER
{
	unsigned int dwSize;
	unsigned int iType;
	unsigned int nCount;
	unsigned int nRgnSize;
	tagRECT rcBound;
};

/* 6634 */
struct __declspec(align(4)) _RGNDATA
{
	_RGNDATAHEADER rdh;
	char Buffer[1];
};

/* 6635 */
struct _REMOTE_NAME_INFOA
{
	char *lpUniversalName;
	char *lpConnectionName;
	char *lpRemainingPath;
};

/* 6636 */
struct __cppobj __unaligned __declspec(align(4)) AvatarImageLoaded_t
{
	CSteamID m_steamID;
	int m_iImage;
	int m_iWide;
	int m_iTall;
};

/* 6637 */
struct __declspec(align(8)) _TRANSACTION_NOTIFICATION
{
	void *TransactionKey;
	unsigned int TransactionNotification;
	_LARGE_INTEGER TmVirtualClock;
	unsigned int ArgumentLength;
};

/* 6638 */
struct tagFILTERKEYS
{
	unsigned int cbSize;
	unsigned int dwFlags;
	unsigned int iWaitMSec;
	unsigned int iDelayMSec;
	unsigned int iRepeatMSec;
	unsigned int iBounceMSec;
};

/* 6639 */
struct tagEMRSETTEXTCOLOR
{
	tagEMR emr;
	unsigned int crColor;
};

/* 6640 */
struct _DOCINFOW
{
	int cbSize;
	const wchar_t *lpszDocName;
	const wchar_t *lpszOutput;
	const wchar_t *lpszDatatype;
	unsigned int fwType;
};

/* 6641 */
struct __cppobj CDialogFile : CResHelper<CResDLG,1011>
{
};

/* 6642 */
struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
{
	EResult m_eResult;
	int m_nResultsReturned;
	int m_nTotalResultCount;
	unsigned __int64 m_rgPublishedFileId[50];
};

/* 6643 */
struct tagDELETEITEMSTRUCT
{
	unsigned int CtlType;
	unsigned int CtlID;
	unsigned int itemID;
	HWND__ *hwndItem;
	unsigned int itemData;
};

/* 6644 */
struct UI_Header_st
{
	unsigned int nFileType;
	unsigned int nFileVersion;
	unsigned int nPanels;
	unsigned int nOffsetToControlTable;
	unsigned int nOffsetToPanelTable;
};

/* 6645 */
struct __declspec(align(8)) RemoteStoragePublishedFileUnsubscribed_t
{
	unsigned __int64 m_nPublishedFileId;
	unsigned int m_nAppID;
};

/* 6646 */
struct __declspec(align(4)) POWERBROADCAST_SETTING
{
	_GUID PowerSetting;
	unsigned int DataLength;
	char Data[1];
};

/* 6647 */
struct __declspec(align(4)) _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
	unsigned int LogPathLength;
	wchar_t LogPath[1];
};

/* 6648 */
struct __cppobj tagMONITORINFOEXW : tagMONITORINFO
{
	wchar_t szDevice[32];
};

/* 6649 */
struct _SYSTEM_POWER_POLICY
{
	unsigned int Revision;
	POWER_ACTION_POLICY PowerButton;
	POWER_ACTION_POLICY SleepButton;
	POWER_ACTION_POLICY LidClose;
	_SYSTEM_POWER_STATE LidOpenWake;
	unsigned int Reserved;
	POWER_ACTION_POLICY Idle;
	unsigned int IdleTimeout;
	char IdleSensitivity;
	char DynamicThrottle;
	char Spare2[2];
	_SYSTEM_POWER_STATE MinSleep;
	_SYSTEM_POWER_STATE MaxSleep;
	_SYSTEM_POWER_STATE ReducedLatencySleep;
	unsigned int WinLogonFlags;
	unsigned int Spare3;
	unsigned int DozeS4Timeout;
	unsigned int BroadcastCapacityResolution;
	SYSTEM_POWER_LEVEL DischargePolicy[4];
	unsigned int VideoTimeout;
	char VideoDimDisplay;
	unsigned int VideoReserved[3];
	unsigned int SpindownTimeout;
	char OptimizeForPower;
	char FanThrottleTolerance;
	char ForcedThrottle;
	char MinThrottle;
	POWER_ACTION_POLICY OverThrottled;
};

/* 6650 */
struct __cppobj NewLaunchQueryParameters_t
{
};

/* 6651 */
struct _IMAGE_RESOURCE_DIR_STRING_U
{
	unsigned __int16 Length;
	wchar_t NameString[1];
};

/* 6652 */
struct _TRANSACTION_LIST_INFORMATION
{
	unsigned int NumberOfTransactions;
	_TRANSACTION_LIST_ENTRY TransactionInformation[1];
};

/* 6653 */
struct tagEMRMASKBLT
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int cxDest;
	int cyDest;
	unsigned int dwRop;
	int xSrc;
	int ySrc;
	tagXFORM xformSrc;
	unsigned int crBkColorSrc;
	unsigned int iUsageSrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
	int xMask;
	int yMask;
	unsigned int iUsageMask;
	unsigned int offBmiMask;
	unsigned int cbBmiMask;
	unsigned int offBitsMask;
	unsigned int cbBitsMask;
};

/* 6654 */
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW
{
	unsigned int dwReason;
	wchar_t *pszComment;
	_SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 6655 */
struct _APPLICATIONLAUNCH_SETTING_VALUE
{
	_LARGE_INTEGER ActivationTime;
	unsigned int Flags;
	unsigned int ButtonInstanceID;
};

/* 6656 */
struct $C849F87CCAF06F124EC48524C532BAAF
{
	__int8 NoDomainAccounting : 1;
	__int8 IncreasePolicy : 2;
	__int8 DecreasePolicy : 2;
	__int8 Reserved : 3;
};

/* 6657 */
union $7AEA44A04EF2147FD3F7D1D605A4649D
{
	char AsBYTE;
	$C849F87CCAF06F124EC48524C532BAAF __s1;
};

/* 6658 */
union $53C0EB34AC25CF99A346FF64BCCCB595
{
	char Spare;
	$7AEA44A04EF2147FD3F7D1D605A4649D Flags;
};

/* 6659 */
struct PROCESSOR_PERFSTATE_POLICY
{
	unsigned int Revision;
	char MaxThrottle;
	char MinThrottle;
	char BusyAdjThreshold;
	$53C0EB34AC25CF99A346FF64BCCCB595 ___u4;
	unsigned int TimeCheck;
	unsigned int IncreaseTime;
	unsigned int DecreaseTime;
	unsigned int IncreasePercent;
	unsigned int DecreasePercent;
};

/* 6660 */
struct _SERVICE_SID_INFO
{
	unsigned int dwServiceSidType;
};

/* 6661 */
struct DownloadClanActivityCountsResult_t
{
	bool m_bSuccess;
};

/* 6662 */
struct BATTERY_REPORTING_SCALE
{
	unsigned int Granularity;
	unsigned int Capacity;
};

/* 6663 */
struct _complex
{
	long double x;
	long double y;
};

/* 6664 */
struct tagEMRPIXELFORMAT
{
	tagEMR emr;
	tagPIXELFORMATDESCRIPTOR pfd;
};

/* 6665 */
struct _SYSTEM_AUDIT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6666 */
struct __declspec(align(8)) RemoteStoragePublishedFileSubscribed_t
{
	unsigned __int64 m_nPublishedFileId;
	unsigned int m_nAppID;
};

/* 6667 */
struct SERVICE_STATUS_HANDLE__
{
	int unused;
};

/* 6668 */
struct tagMENUINFO
{
	unsigned int cbSize;
	unsigned int fMask;
	unsigned int dwStyle;
	unsigned int cyMax;
	HBRUSH__ *hbrBack;
	unsigned int dwContextHelpID;
	unsigned int dwMenuData;
};

/* 6669 */
struct _SERVICE_TIMECHANGE_INFO
{
	_LARGE_INTEGER liNewTime;
	_LARGE_INTEGER liOldTime;
};

/* 6670 */
struct _ICONINFO
{
	int fIcon;
	unsigned int xHotspot;
	unsigned int yHotspot;
	HBITMAP__ *hbmMask;
	HBITMAP__ *hbmColor;
};

/* 6671 */
struct _OBJECT_TYPE_LIST
{
	unsigned __int16 Level;
	unsigned __int16 Sbz;
	_GUID *ObjectType;
};

/* 6672 */
struct _SE_ACCESS_REQUEST
{
	unsigned int Size;
	_SE_SECURITY_DESCRIPTOR *SeSecurityDescriptor;
	unsigned int DesiredAccess;
	unsigned int PreviouslyGrantedAccess;
	void *PrincipalSelfSid;
	_GENERIC_MAPPING *GenericMapping;
	unsigned int ObjectTypeListCount;
	_OBJECT_TYPE_LIST *ObjectTypeList;
};

/* 6673 */
struct _exception
{
	int type;
	char *name;
	long double arg1;
	long double arg2;
	long double retval;
};

/* 6674 */
struct _PROCESS_INFORMATION
{
	void *hProcess;
	void *hThread;
	unsigned int dwProcessId;
	unsigned int dwThreadId;
};

/* 6675 */
struct __declspec(align(8)) LobbyEnter_t
{
	unsigned __int64 m_ulSteamIDLobby;
	unsigned int m_rgfChatPermissions;
	bool m_bLocked;
	unsigned int m_EChatRoomEnterResponse;
};

/* 6676 */
struct __declspec(align(4)) _cpinfo
{
	unsigned int MaxCharSize;
	char DefaultChar[2];
	char LeadByte[12];
};

/* 6677 */
struct SteamServersDisconnected_t
{
	EResult m_eResult;
};

/* 6678 */
struct SHELLHOOKINFO
{
	HWND__ *hwnd;
	tagRECT rc;
};

/* 6679 */
struct _PSFEATURE_OUTPUT
{
	int bPageIndependent;
	int bSetPageDevice;
};

/* 6680 */
struct _SYSTEM_AUDIT_OBJECT_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int Flags;
	_GUID ObjectType;
	_GUID InheritedObjectType;
	unsigned int SidStart;
};

/* 6681 */
struct __cppobj CProjectileLightningBolt : CProjectileBAM
{
};

/* 6682 */
struct __cppobj __vc_attributes::immediatebindAttribute
{
};

/* 6683 */
struct __cppobj __vc_attributes::inAttribute
{
};

/* 6684 */
struct __cppobj __vc_attributes::publicAttribute
{
};

/* 6685 */
struct __cppobj __vc_attributes::size_isAttribute
{
	const char *expression;
};

/* 6686 */
struct __cppobj __vc_attributes::exportAttribute
{
};

/* 6687 */
struct __cppobj __vc_attributes::controlAttribute
{
};

/* 6688 */
struct __cppobj __vc_attributes::helpstringcontextAttribute
{
	int contextid;
};

/* 6689 */
struct __cppobj __vc_attributes::rangeAttribute
{
	int low_val;
	int high_val;
};

/* 6690 */
struct __cppobj __vc_attributes::displaybindAttribute
{
};

/* 6691 */
struct __cppobj __vc_attributes::hookAttribute
{
	const char *event;
	const char *source;
	const char *handler;
	const char *receiver;
};

/* 6692 */
struct __cppobj __vc_attributes::uidefaultAttribute
{
};

/* 6693 */
struct __cppobj __vc_attributes::defaultbindAttribute
{
};

/* 6694 */
struct __cppobj __vc_attributes::outAttribute
{
};

/* 6695 */
struct __cppobj __vc_attributes::defaultvalueAttribute
{
	const char *value;
};

/* 6696 */
struct __cppobj __vc_attributes::pointer_defaultAttribute
{
	__vc_attributes::pointer_defaultAttribute::type_e type;
};

/* 6697 */
struct __cppobj __vc_attributes::uuidAttribute
{
	const char *value;
};

/* 6698 */
struct __cppobj __vc_attributes::localAttribute
{
};

/* 6699 */
struct __cppobj __vc_attributes::idAttribute
{
	int id_num;
};

/* 6700 */
struct __cppobj __vc_attributes::nonbrowsableAttribute
{
};

/* 6701 */
struct __cppobj __vc_attributes::importlibAttribute
{
	const char *tlb_file;
};

/* 6702 */
struct __cppobj __vc_attributes::call_asAttribute
{
	void *local_proc;
};

/* 6703 */
struct __cppobj __vc_attributes::dispinterfaceAttribute
{
};

/* 6704 */
struct __cppobj __vc_attributes::dualAttribute
{
};

/* 6705 */
struct __cppobj __vc_attributes::switch_typeAttribute
{
	const char *switch_type_specifier;
};

/* 6706 */
struct __cppobj __declspec(align(4)) __vc_attributes::idl_moduleAttribute
{
	const char *name;
	const char *dllname;
	const char *version;
	const char *uuid;
	const char *helpstring;
	int helpstringcontext;
	int helpcontext;
	bool hidden;
	bool restricted;
};

/* 6707 */
struct __cppobj __vc_attributes::coclassAttribute
{
};

/* 6708 */
struct __cppobj __vc_attributes::defaultAttribute
{
	const char *value;
};

/* 6709 */
struct __cppobj __vc_attributes::requesteditAttribute
{
};

/* 6710 */
struct __cppobj __vc_attributes::providerAttribute
{
	const char *name;
	const char *uuid;
	int cookies;
};

/* 6711 */
struct __cppobj __vc_attributes::max_isAttribute
{
	const char *expression;
};

/* 6712 */
struct __cppobj __vc_attributes::importAttribute
{
	const char *idl_file;
};

/* 6713 */
struct __cppobj __vc_attributes::satypeAttribute
{
	const char *type;
};

/* 6714 */
struct __cppobj __vc_attributes::propgetAttribute
{
};

/* 6715 */
struct __cppobj __vc_attributes::propputAttribute
{
};

/* 6716 */
struct __cppobj __vc_attributes::async_uuidAttribute
{
	const char *uuid;
};

/* 6717 */
struct __cppobj __vc_attributes::idl_quoteAttribute
{
	const char *text;
};

/* 6718 */
struct __cppobj __vc_attributes::usesgetlasterrorAttribute
{
};

/* 6719 */
struct __cppobj __vc_attributes::unhookAttribute
{
	const char *event;
	const char *source;
	const char *handler;
	const char *receiver;
};

/* 6720 */
struct __cppobj __vc_attributes::nonextensibleAttribute
{
};

/* 6721 */
struct __cppobj __vc_attributes::objectAttribute
{
};

/* 6722 */
struct __cppobj __vc_attributes::iid_isAttribute
{
	const char *limited_expression;
};

/* 6723 */
struct __cppobj __vc_attributes::progidAttribute
{
	const char *name;
};

/* 6724 */
struct __cppobj __vc_attributes::readonlyAttribute
{
};

/* 6725 */
struct __cppobj __vc_attributes::wire_marshalAttribute
{
	const char *wire_type;
};

/* 6726 */
struct __cppobj __vc_attributes::pragmaAttribute
{
	const char *token_sequence;
};

/* 6727 */
struct __cppobj __vc_attributes::propputrefAttribute
{
};

/* 6728 */
struct __cppobj __vc_attributes::vi_progidAttribute
{
	const char *value;
};

/* 6729 */
struct __cppobj __vc_attributes::odlAttribute
{
};

/* 6730 */
struct __cppobj __vc_attributes::bindableAttribute
{
};

/* 6731 */
struct __cppobj __vc_attributes::oleautomationAttribute
{
};

/* 6732 */
struct __cppobj __vc_attributes::helpstringdllAttribute
{
	const char *dllname;
};

/* 6733 */
struct __cppobj __vc_attributes::defaultcollelemAttribute
{
};

/* 6734 */
struct __cppobj __vc_attributes::retvalAttribute
{
};

/* 6735 */
struct __cppobj __vc_attributes::length_isAttribute
{
	const char *expression;
};

/* 6736 */
struct __cppobj __vc_attributes::atl::db_commandAttribute
{
	const char *command;
	const char *name;
	const char *source_name;
	const char *hresult;
	const char *bindings;
	const char *bulk_fetch;
};

/* 6737 */
struct __cppobj __vc_attributes::atl::db_sourceAttribute
{
	const char *source;
	const char *name;
	const char *hresult;
};

/* 6738 */
struct __cppobj __vc_attributes::atl::db_columnAttribute
{
	const char *ordinal;
	const char *dbtype;
	const char *precision;
	const char *scale;
	const char *status;
	const char *length;
};

/* 6739 */
struct __cppobj __vc_attributes::atl::soap_namespaceAttribute
{
	const char *value;
};

/* 6740 */
struct __cppobj __vc_attributes::atl::db_tableAttribute
{
	const char *table;
	const char *name;
	const char *source_name;
	const char *hresult;
	const char *bulk_fetch;
};

/* 6741 */
struct __cppobj __vc_attributes::atl::implements_categoryAttribute
{
	const char *value;
};

/* 6742 */
struct __cppobj __vc_attributes::atl::aggregatesAttribute
{
	const char *clsid;
};

/* 6743 */
struct __cppobj __declspec(align(2)) __vc_attributes::atl::soap_headerAttribute
{
	const char *value;
	bool required;
	bool in;
	bool out;
};

/* 6744 */
struct __cppobj __vc_attributes::atl::requires_categoryAttribute
{
	const char *value;
};

/* 6745 */
struct __cppobj __vc_attributes::atl::perf_objectAttribute
{
	int name_res;
	int help_res;
	const char *namestring;
	const char *helpstring;
	int detail;
	bool no_instances;
	const char *class_;
	int maxinstnamelen;
};

/* 6746 */
struct __cppobj __vc_attributes::atl::rdxAttribute
{
	const char *key;
	const char *valuename;
	const char *regtype;
};

/* 6747 */
struct __cppobj __declspec(align(4)) __vc_attributes::atl::perfmonAttribute
{
	const char *name;
	bool register;
};

/* 6748 */
struct __cppobj __declspec(align(4)) __vc_attributes::atl::db_accessorAttribute
{
	int id;
	bool auto_;
};

/* 6749 */
struct __cppobj __vc_attributes::atl::soap_handlerAttribute
{
	const char *name;
	const char *namespace;
	const char *protocol;
	const char *style;
	const char *use;
};

/* 6750 */
struct __cppobj __vc_attributes::atl::support_error_infoAttribute
{
	const char *error_interface;
};

/* 6751 */
struct __cppobj __vc_attributes::atl::tag_nameAttribute
{
	const char *name;
	const char *parse_func;
};

/* 6752 */
struct __cppobj __vc_attributes::atl::com_interface_entryAttribute
{
	const char *value;
};

/* 6753 */
struct __cppobj __vc_attributes::atl::db_paramAttribute
{
	const char *ordinal;
	const char *paramtype;
	const char *dbtype;
	const char *precision;
	const char *scale;
	const char *status;
	const char *length;
};

/* 6754 */
struct __cppobj __vc_attributes::atl::perf_counterAttribute
{
	const char *namestring;
	const char *helpstring;
	int name_res;
	int help_res;
	int countertype;
	int defscale;
	bool default_counter;
	int detail;
	int max_counter_size;
	const char *countertype_string;
};

/* 6755 */
struct __cppobj __vc_attributes::atl::soap_methodAttribute
{
	const char *name;
};

/* 6756 */
struct __cppobj __vc_attributes::atl::request_handlerAttribute
{
	const char *name;
	const char *sdl;
};

/* 6757 */
struct __cppobj __vc_attributes::atl::synchronizeAttribute
{
};

/* 6758 */
struct __cppobj __vc_attributes::atl::registration_scriptAttribute
{
	const char *script;
};

/* 6759 */
struct __cppobj __vc_attributes::no_injected_textAttribute
{
	bool value;
};

/* 6760 */
struct __cppobj __vc_attributes::caseAttribute
{
	int value;
};

/* 6761 */
struct __cppobj __vc_attributes::helpstringAttribute
{
	const char *help_text_string;
};

/* 6762 */
struct __cppobj __vc_attributes::entryAttribute
{
	const char *entry_id;
};

/* 6763 */
struct __cppobj __vc_attributes::defaultvtableAttribute
{
	const char *value;
};

/* 6764 */
struct __cppobj __declspec(align(4)) __vc_attributes::emitidlAttribute
{
	int value;
	bool defaultimports;
};

/* 6765 */
struct __cppobj __vc_attributes::stringAttribute
{
};

/* 6766 */
struct __cppobj __vc_attributes::varargAttribute
{
};

/* 6767 */
struct __cppobj __vc_attributes::includeAttribute
{
	const char *include_file;
};

/* 6768 */
struct __cppobj __vc_attributes::implementsAttribute
{
	const char *interfaces;
	const char *dispinterfaces;
};

/* 6769 */
struct __cppobj __vc_attributes::last_isAttribute
{
	const char *expression;
};

/* 6770 */
struct __cppobj __vc_attributes::ptrAttribute
{
};

/* 6771 */
struct __cppobj __vc_attributes::helper_attributes::v1_earlyAttribute
{
};

/* 6772 */
struct __cppobj __declspec(align(4)) __vc_attributes::helper_attributes::source_annotation_attributeAttribute
{
	int ValidOn;
	bool AllowMultiple;
};

/* 6773 */
struct __cppobj __vc_attributes::helper_attributes::requires_valueAttribute
{
};

/* 6774 */
struct __cppobj __vc_attributes::helper_attributes::as_stringAttribute
{
};

/* 6775 */
struct __cppobj __vc_attributes::helper_attributes::multi_valueAttribute
{
};

/* 6776 */
struct __cppobj __vc_attributes::helper_attributes::repeatableAttribute
{
};

/* 6777 */
struct __cppobj __vc_attributes::helper_attributes::notify_atlprovAttribute
{
};

/* 6778 */
struct __cppobj __declspec(align(4)) __vc_attributes::helper_attributes::attributeAttribute
{
	int ValidOn;
	bool AllowMultiple;
	bool Inherited;
};

/* 6779 */
struct __cppobj __vc_attributes::helper_attributes::process_earlyAttribute
{
};

/* 6780 */
struct __cppobj __vc_attributes::helper_attributes::help_stringAttribute
{
	const char *value;
};

/* 6781 */
struct __cppobj __vc_attributes::helper_attributes::v1_nameAttribute
{
	const char *name;
};

/* 6782 */
struct __cppobj __vc_attributes::helper_attributes::default_valueAttribute
{
	void *value;
};

/* 6783 */
struct __cppobj __vc_attributes::first_isAttribute
{
	const char *value;
};

/* 6784 */
struct __cppobj __vc_attributes::noncreatableAttribute
{
};

/* 6785 */
struct __cppobj __vc_attributes::appobjectAttribute
{
};

/* 6786 */
struct __cppobj __vc_attributes::restrictedAttribute
{
	const char *value;
};

/* 6787 */
struct __cppobj __vc_attributes::importidlAttribute
{
	const char *value;
};

/* 6788 */
struct __cppobj __vc_attributes::cpp_quoteAttribute
{
	const char *string;
};

/* 6789 */
struct __cppobj __vc_attributes::v1_enumAttribute
{
};

/* 6790 */
struct __cppobj __vc_attributes::refAttribute
{
};

/* 6791 */
struct __cppobj __vc_attributes::licensedAttribute
{
};

/* 6792 */
struct __cppobj __vc_attributes::lcidAttribute
{
};

/* 6793 */
struct __cppobj __vc_attributes::versionAttribute
{
	const char *value;
};

/* 6794 */
struct __cppobj __vc_attributes::helpcontextAttribute
{
	const char *helpcontext_value;
};

/* 6795 */
struct __cppobj __vc_attributes::helpfileAttribute
{
	const char *filename;
};

/* 6796 */
struct __cppobj __vc_attributes::sourceAttribute
{
	const char *value;
};

/* 6797 */
struct __cppobj __vc_attributes::transmit_asAttribute
{
	const char *xmit_type;
};

/* 6798 */
struct __cppobj __vc_attributes::hiddenAttribute
{
};

/* 6799 */
struct __cppobj __vc_attributes::library_blockAttribute
{
};

/* 6800 */
struct __cppobj __vc_attributes::customAttribute
{
	char *value;
};

/* 6801 */
struct __cppobj __vc_attributes::switch_isAttribute
{
	const char *limited_expression;
};

/* 6802 */
struct __cppobj __vc_attributes::ms_unionAttribute
{
};

/* 6803 */
struct __cppobj __vc_attributes::uniqueAttribute
{
};

/* 6804 */
struct __cppobj __vc_attributes::includelibAttribute
{
	const char *value;
};

/* 6805 */
struct __cppobj __vc_attributes::optionalAttribute
{
};

/* 6806 */
struct __declspec(align(4)) tagEMRGDICOMMENT
{
	tagEMR emr;
	unsigned int cbData;
	char Data[1];
};

/* 6807 */
union _float_const
{
	unsigned __int16 _Word[8];
	float _Float;
	long double _Double;
	long double _Long_double;
};

/* 6808 */
struct __declspec(align(4)) tagCURSORSHAPE
{
	int xHotSpot;
	int yHotSpot;
	int cx;
	int cy;
	int cbWidth;
	char Planes;
	char BitsPixel;
};

/* 6809 */
struct UI_ControlTableEntry_st
{
	unsigned int nControlOffset;
	unsigned int nControlSize;
};

/* 6810 */
struct __cppobj CResUI : CRes
{
	UI_Header_st *pHeader;
	UI_PanelHeader_st *pPanels;
	UI_ControlTableEntry_st *pControlTable;
};

/* 6811 */
struct provider_info
{
	unsigned int (__cdecl *pi_R0_1val)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
	unsigned int (__cdecl *pi_R0_allvals)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
	unsigned int (__cdecl *pi_R3_1val)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
	unsigned int (__cdecl *pi_R3_allvals)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
	unsigned int pi_flags;
	void *pi_key_context;
};

/* 6812 */
struct HCOLORSPACE__
{
	int unused;
};

/* 6813 */
struct __declspec(align(8)) LeaderboardScoresDownloaded_t
{
	unsigned __int64 m_hSteamLeaderboard;
	unsigned __int64 m_hSteamLeaderboardEntries;
	int m_cEntryCount;
};

/* 6814 */
struct _TAPE_CREATE_PARTITION
{
	unsigned int Method;
	unsigned int Count;
	unsigned int Size;
};

/* 6815 */
struct tagEMRSETCOLORSPACE
{
	tagEMR emr;
	unsigned int ihCS;
};

/* 6816 */
struct RemoteStorageAppSyncedServer_t
{
	unsigned int m_nAppID;
	EResult m_eResult;
	int m_unNumUploads;
};

/* 6817 */
struct RemoteStorageEnumerateUserPublishedFilesResult_t
{
	EResult m_eResult;
	int m_nResultsReturned;
	int m_nTotalResultCount;
	unsigned __int64 m_rgPublishedFileId[50];
};

/* 6818 */
struct PPM_IDLESTATE_EVENT
{
	unsigned int NewState;
	unsigned int OldState;
	unsigned __int64 Processors;
};

/* 6819 */
struct tagSOUNDSENTRYW
{
	unsigned int cbSize;
	unsigned int dwFlags;
	unsigned int iFSTextEffect;
	unsigned int iFSTextEffectMSec;
	unsigned int iFSTextEffectColorBits;
	unsigned int iFSGrafEffect;
	unsigned int iFSGrafEffectMSec;
	unsigned int iFSGrafEffectColor;
	unsigned int iWindowsEffect;
	unsigned int iWindowsEffectMSec;
	wchar_t *lpszWindowsEffectDLL;
	unsigned int iWindowsEffectOrdinal;
};

/* 6820 */
struct HGESTUREINFO__
{
	int unused;
};

/* 6821 */
struct FavoritesListAccountsUpdated_t
{
	EResult m_eResult;
};

/* 6822 */
struct RemoteStorageConflictResolution_t
{
	unsigned int m_nAppID;
	EResult m_eResult;
};

/* 6823 */
struct PPM_THERMALCHANGE_EVENT
{
	unsigned int ThermalConstraint;
	unsigned __int64 Processors;
};

/* 6824 */
struct tagENUMLOGFONTW
{
	tagLOGFONTW elfLogFont;
	wchar_t elfFullName[64];
	wchar_t elfStyle[32];
};

/* 6825 */
struct __cppobj _Real_widened<float,float>
{
};

/* 6826 */
struct _TOKEN_AUDIT_POLICY
{
	char PerUserPolicy[27];
};

/* 6827 */
struct _CONSOLE_FONT_INFO
{
	unsigned int nFont;
	_COORD dwFontSize;
};

/* 6828 */
struct _DISCDLGSTRUCTW
{
	unsigned int cbStructure;
	HWND__ *hwndOwner;
	wchar_t *lpLocalName;
	wchar_t *lpRemoteName;
	unsigned int dwFlags;
};

/* 6829 */
struct TLK_FILE_OVERRIDE_HEADER
{
	unsigned int fileType;
	unsigned int versionNum;
	unsigned int LanguageType;
	unsigned int nStrEntries;
	unsigned int strEntriesOffset;
};

/* 6830 */
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
	unsigned int NumberOfAssignedProcesses;
	unsigned int NumberOfProcessIdsInList;
	unsigned int ProcessIdList[1];
};

/* 6831 */
struct __declspec(align(4)) _FILE_NOTIFY_INFORMATION
{
	unsigned int NextEntryOffset;
	unsigned int Action;
	unsigned int FileNameLength;
	wchar_t FileName[1];
};

/* 6832 */
struct NOTIFY_USER_POWER_SETTING
{
	_GUID Guid;
};

/* 6833 */
struct _SERVICE_TRIGGER_INFO
{
	unsigned int cTriggers;
	_SERVICE_TRIGGER *pTriggers;
	char *pReserved;
};

/* 6834 */
struct __cppobj GameConnectedChatJoin_t
{
	CSteamID m_steamIDClanChat;
	CSteamID m_steamIDUser;
};

/* 6835 */
struct _IMAGE_RESOURCE_DIRECTORY
{
	unsigned int Characteristics;
	unsigned int TimeDateStamp;
	unsigned __int16 MajorVersion;
	unsigned __int16 MinorVersion;
	unsigned __int16 NumberOfNamedEntries;
	unsigned __int16 NumberOfIdEntries;
};

/* 6836 */
struct __declspec(align(8)) RemoteStoragePublishFileResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
	bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
};

/* 6837 */
struct tagCOMPOSITIONFORM
{
	unsigned int dwStyle;
	tagPOINT ptCurrentPos;
	tagRECT rcArea;
};

/* 6838 */
struct _CONTEXT_EX
{
	_CONTEXT_CHUNK All;
	_CONTEXT_CHUNK Legacy;
	_CONTEXT_CHUNK XState;
};

/* 6839 */
struct _SERVICE_DESCRIPTIONW
{
	wchar_t *lpDescription;
};

/* 6840 */
struct LeaderboardScoreUploaded_t
{
	char m_bSuccess;
	unsigned __int64 m_hSteamLeaderboard;
	int m_nScore;
	char m_bScoreChanged;
	int m_nGlobalRankNew;
	int m_nGlobalRankPrevious;
};

/* 6841 */
union $E38888FFFF2E8047BDBD55C921E86469
{
	unsigned int FiberData;
	unsigned int Version;
};

/* 6842 */
struct _NT_TIB32
{
	unsigned int ExceptionList;
	unsigned int StackBase;
	unsigned int StackLimit;
	unsigned int SubSystemTib;
	$E38888FFFF2E8047BDBD55C921E86469 ___u4;
	unsigned int ArbitraryUserPointer;
	unsigned int Self;
};

/* 6843 */
struct _IMAGE_NT_HEADERS64
{
	unsigned int Signature;
	_IMAGE_FILE_HEADER FileHeader;
	_IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

/* 6844 */
struct _IMAGE_TLS_DIRECTORY64
{
	unsigned __int64 StartAddressOfRawData;
	unsigned __int64 EndAddressOfRawData;
	unsigned __int64 AddressOfIndex;
	unsigned __int64 AddressOfCallBacks;
	unsigned int SizeOfZeroFill;
	unsigned int Characteristics;
};

/* 6845 */
struct SDL_HapticLeftRight
{
	unsigned __int16 type;
	unsigned int length;
	unsigned __int16 large_magnitude;
	unsigned __int16 small_magnitude;
};

/* 6846 */
struct _FILE_END_OF_FILE_INFO
{
	_LARGE_INTEGER EndOfFile;
};

/* 6847 */
struct tagEMRGRADIENTFILL
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int nVer;
	unsigned int nTri;
	unsigned int ulMode;
	_TRIVERTEX Ver[1];
};

/* 6848 */
struct __unaligned __declspec(align(2)) UI_Control_TextDisplay_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	char refTextFont[8];
	char refNameFont[8];
	unsigned int rgbTextForeground;
	unsigned int rgbDefaultName;
	unsigned int rgbBackground;
	unsigned int nScrollBarId;
};

/* 6849 */
struct _SE_IMPERSONATION_STATE
{
	void *Token;
	char CopyOnOpen;
	char EffectiveOnly;
	_SECURITY_IMPERSONATION_LEVEL Level;
};

/* 6850 */
struct tagEMREXTFLOODFILL
{
	tagEMR emr;
	_POINTL ptlStart;
	unsigned int crColor;
	unsigned int iMode;
};

/* 6851 */
struct _ACCESS_ALLOWED_CALLBACK_ACE
{
	_ACE_HEADER Header;
	unsigned int Mask;
	unsigned int SidStart;
};

/* 6852 */
struct _EVENTLOG_FULL_INFORMATION
{
	unsigned int dwFull;
};

/* 6853 */
struct SDL_HapticConstant
{
	unsigned __int16 type;
	SDL_HapticDirection direction;
	unsigned int length;
	unsigned __int16 delay;
	unsigned __int16 button;
	unsigned __int16 interval;
	__int16 level;
	unsigned __int16 attack_length;
	unsigned __int16 attack_level;
	unsigned __int16 fade_length;
	unsigned __int16 fade_level;
};

/* 6854 */
struct __declspec(align(4)) SDL_HapticPeriodic
{
	unsigned __int16 type;
	SDL_HapticDirection direction;
	unsigned int length;
	unsigned __int16 delay;
	unsigned __int16 button;
	unsigned __int16 interval;
	unsigned __int16 period;
	__int16 magnitude;
	__int16 offset;
	unsigned __int16 phase;
	unsigned __int16 attack_length;
	unsigned __int16 attack_level;
	unsigned __int16 fade_length;
	unsigned __int16 fade_level;
};

/* 6855 */
struct SDL_HapticCustom
{
	unsigned __int16 type;
	SDL_HapticDirection direction;
	unsigned int length;
	unsigned __int16 delay;
	unsigned __int16 button;
	unsigned __int16 interval;
	char channels;
	unsigned __int16 period;
	unsigned __int16 samples;
	unsigned __int16 *data;
	unsigned __int16 attack_length;
	unsigned __int16 attack_level;
	unsigned __int16 fade_length;
	unsigned __int16 fade_level;
};

/* 6856 */
union SDL_HapticEffect
{
	unsigned __int16 type;
	SDL_HapticConstant constant;
	SDL_HapticPeriodic periodic;
	SDL_HapticCondition condition;
	SDL_HapticRamp ramp;
	SDL_HapticLeftRight leftright;
	SDL_HapticCustom custom;
};

/* 6857 */
struct tagCBT_CREATEWNDA
{
	tagCREATESTRUCTA *lpcs;
	HWND__ *hwndInsertAfter;
};

/* 6858 */
struct HHOOK__
{
	int unused;
};

/* 6859 */
struct $6177A0AD8E9F0D390D62242D769E2CDF
{
	char DataBuffer[1];
};

/* 6860 */
struct __declspec(align(4)) _REPARSE_GUID_DATA_BUFFER
{
	unsigned int ReparseTag;
	unsigned __int16 ReparseDataLength;
	unsigned __int16 Reserved;
	_GUID ReparseGuid;
	$6177A0AD8E9F0D390D62242D769E2CDF GenericReparseBuffer;
};

/* 6861 */
struct _SECURITY_DESCRIPTOR
{
	char Revision;
	char Sbz1;
	unsigned __int16 Control;
	void *Owner;
	void *Group;
	_ACL *Sacl;
	_ACL *Dacl;
};

/* 6862 */
struct _WIN32_FIND_STREAM_DATA
{
	_LARGE_INTEGER StreamSize;
	wchar_t cStreamName[296];
};

/* 6863 */
struct __unaligned __declspec(align(2)) KeyFileKeyEntry_st
{
	char resRef[8];
	unsigned __int16 nType;
	unsigned int nID;
};

/* 6864 */
struct HSPRITE__
{
	int unused;
};

/* 6865 */
struct tagTTPOLYCURVE
{
	unsigned __int16 wType;
	unsigned __int16 cpfx;
	tagPOINTFX apfx[1];
};

/* 6866 */
struct __declspec(align(4)) tagHW_PROFILE_INFOW
{
	unsigned int dwDockInfo;
	wchar_t szHwProfileGuid[39];
	wchar_t szHwProfileName[80];
};

/* 6867 */
struct __cppobj ScreenshotRequested_t
{
};

/* 6868 */
struct __declspec(align(4)) _TAPE_PREPARE
{
	unsigned int Operation;
	char Immediate;
};

/* 6869 */
struct __declspec(align(8)) UserAchievementStored_t
{
	unsigned __int64 m_nGameID;
	bool m_bGroupAchievement;
	char m_rgchAchievementName[128];
	unsigned int m_nCurProgress;
	unsigned int m_nMaxProgress;
};

/* 6870 */
struct _CHAR_INFO
{
	$D73D647711E0D18BB6EFDDF78E7AEEC6 Char;
	unsigned __int16 Attributes;
};

/* 6871 */
struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	wchar_t viewGdiDeviceName[32];
};

/* 6872 */
struct __cppobj IPCountry_t
{
};

/* 6873 */
struct tagEMRCREATEPALETTE
{
	tagEMR emr;
	unsigned int ihPal;
	tagLOGPALETTE lgpl;
};

/* 6874 */
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
	unsigned int UIRestrictionsClass;
};

/* 6875 */
struct TLK_FILE_OVERRIDE_TEXT_BLOCK
{
	unsigned int m_dwFlags;
	unsigned int m_nOffsetToPrevious;
	char m_text[512];
	unsigned int m_nOffsetToNext;
};

/* 6876 */
struct PPM_WMI_IDLE_STATES_EX
{
	unsigned int Type;
	unsigned int Count;
	unsigned int TargetState;
	unsigned int OldState;
	void *TargetProcessors;
	PPM_WMI_IDLE_STATE State[1];
};

/* 6877 */
struct LIST_ENTRY64
{
	unsigned __int64 Flink;
	unsigned __int64 Blink;
};

/* 6878 */
union __m128i
{
	char m128i_i8[16];
	__int16 m128i_i16[8];
	int m128i_i32[4];
	__int64 m128i_i64[2];
	char m128i_u8[16];
	unsigned __int16 m128i_u16[8];
	unsigned int m128i_u32[4];
	unsigned __int64 m128i_u64[2];
};

/* 6879 */
struct HPEN__
{
	int unused;
};

/* 6880 */
struct __declspec(align(4)) _SECURITY_QUALITY_OF_SERVICE
{
	unsigned int Length;
	_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	char ContextTrackingMode;
	char EffectiveOnly;
};

/* 6881 */
struct tagDRAWITEMSTRUCT
{
	unsigned int CtlType;
	unsigned int CtlID;
	unsigned int itemID;
	unsigned int itemAction;
	unsigned int itemState;
	HWND__ *hwndItem;
	HDC__ *hDC;
	tagRECT rcItem;
	unsigned int itemData;
};

/* 6882 */
struct __cppobj __declspec(align(4)) CProjectileSegment : CProjectileBAM
{
	__int16 m_counter;
};

/* 6883 */
struct __cppobj CResCRE : CRes
{
};

/* 6884 */
struct __cppobj CResHelper<CResCRE,1009>
{
	CResCRE *pRes;
	CResRef cResRef;
};

/* 6885 */
struct __cppobj CCreatureFile : CResHelper<CResCRE,1009>
{
};

/* 6886 */
struct __cppobj __declspec(align(4)) CProjectileTravelDoor : CProjectile
{
	CVidCell m_animation;
	CVidBitmap m_newPalette;
	unsigned int m_dwRenderFlags;
	char m_bNewPalette;
	char m_transparency;
	CString m_animationStr;
	char m_nState;
};

/* 6887 */
struct HTTPRequestHeadersReceived_t
{
	unsigned int m_hRequest;
	unsigned __int64 m_ulContextValue;
};

/* 6888 */
struct __cppobj _Real_widened<double,double>
{
};

/* 6889 */
struct _TAPE_GET_DRIVE_PARAMETERS
{
	char ECC;
	char Compression;
	char DataPadding;
	char ReportSetmarks;
	unsigned int DefaultBlockSize;
	unsigned int MaximumBlockSize;
	unsigned int MinimumBlockSize;
	unsigned int MaximumPartitionCount;
	unsigned int FeaturesLow;
	unsigned int FeaturesHigh;
	unsigned int EOTWarningZoneSize;
};

/* 6890 */
struct __cppobj CProjectileLightningStorm : CProjectileChain
{
};

/* 6891 */
struct ANON_OBJECT_HEADER_V2
{
	unsigned __int16 Sig1;
	unsigned __int16 Sig2;
	unsigned __int16 Version;
	unsigned __int16 Machine;
	unsigned int TimeDateStamp;
	_GUID ClassID;
	unsigned int SizeOfData;
	unsigned int Flags;
	unsigned int MetaDataSize;
	unsigned int MetaDataOffset;
};

/* 6892 */
struct __cppobj _Real_widened<float,double>
{
};

/* 6893 */
struct FavoritesListChanged_t
{
	unsigned int m_nIP;
	unsigned int m_nQueryPort;
	unsigned int m_nConnPort;
	unsigned int m_nAppID;
	unsigned int m_nFlags;
	bool m_bAdd;
	unsigned int m_unAccountId;
};

/* 6894 */
struct _CrtMemState
{
	_CrtMemBlockHeader *pBlockHeader;
	unsigned int lCounts[5];
	unsigned int lSizes[5];
	unsigned int lHighWaterCount;
	unsigned int lTotalCount;
};

/* 6895 */
struct _TAPE_SET_MEDIA_PARAMETERS
{
	unsigned int BlockSize;
};

/* 6896 */
struct RemoteStorageEnumerateUserSubscribedFilesResult_t
{
	EResult m_eResult;
	int m_nResultsReturned;
	int m_nTotalResultCount;
	unsigned __int64 m_rgPublishedFileId[50];
	unsigned int m_rgRTimeSubscribed[50];
};

/* 6897 */
struct GamepadTextInputDismissed_t
{
	bool m_bSubmitted;
	unsigned int m_unSubmittedText;
};

/* 6898 */
struct PPM_WMI_LEGACY_PERFSTATE
{
	unsigned int Frequency;
	unsigned int Flags;
	unsigned int PercentFrequency;
};

/* 6899 */
struct tagMDICREATESTRUCTW
{
	const wchar_t *szClass;
	const wchar_t *szTitle;
	void *hOwner;
	int x;
	int y;
	int cx;
	int cy;
	unsigned int style;
	int lParam;
};

/* 6900 */
struct __unaligned __declspec(align(2)) UI_Control_Edit_st
{
	unsigned int nID;
	unsigned __int16 x;
	unsigned __int16 y;
	unsigned __int16 nWidth;
	unsigned __int16 nHeight;
	unsigned __int16 nType;
	char refEdit[8];
	char refEditClientFocus[8];
	char refEditClientNoFocus[8];
	char refEditCaret[8];
	unsigned __int16 nSequenceEditCaret;
	unsigned __int16 nFrameEditCaret;
	unsigned __int16 xEditClientOffset;
	unsigned __int16 yEditClientOffset;
	unsigned __int16 xEditCaretOffset;
	unsigned __int16 yEditCaretOffset;
	char refTextFont[8];
	unsigned __int16 nSequenceText;
	char defaultString[32];
	unsigned __int16 maxChars;
	unsigned __int16 caseFormat;
	unsigned __int16 typeFormat;
};

/* 6901 */
struct DISPLAYCONFIG_PATH_TARGET_INFO
{
	_LUID adapterId;
	unsigned int id;
	unsigned int modeInfoIdx;
	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	DISPLAYCONFIG_ROTATION rotation;
	DISPLAYCONFIG_SCALING scaling;
	DISPLAYCONFIG_RATIONAL refreshRate;
	DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
	int targetAvailable;
	unsigned int statusFlags;
};

/* 6902 */
struct DISPLAYCONFIG_PATH_INFO
{
	DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
	DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
	unsigned int flags;
};

/* 6903 */
struct _CONSOLE_SELECTION_INFO
{
	unsigned int dwFlags;
	_COORD dwSelectionAnchor;
	_SMALL_RECT srSelection;
};

/* 6904 */
struct SYSTEM_POWER_CAPABILITIES
{
	char PowerButtonPresent;
	char SleepButtonPresent;
	char LidPresent;
	char SystemS1;
	char SystemS2;
	char SystemS3;
	char SystemS4;
	char SystemS5;
	char HiberFilePresent;
	char FullWake;
	char VideoDimPresent;
	char ApmPresent;
	char UpsPresent;
	char ThermalControl;
	char ProcessorThrottle;
	char ProcessorMinThrottle;
	char ProcessorMaxThrottle;
	char FastSystemS4;
	char spare2[3];
	char DiskSpinDown;
	char spare3[8];
	char SystemBatteriesPresent;
	char BatteriesAreShortTerm;
	BATTERY_REPORTING_SCALE BatteryScale[3];
	_SYSTEM_POWER_STATE AcOnLineWake;
	_SYSTEM_POWER_STATE SoftLidWake;
	_SYSTEM_POWER_STATE RtcWake;
	_SYSTEM_POWER_STATE MinDeviceWakeState;
	_SYSTEM_POWER_STATE DefaultLowLatencyWake;
};

/* 6905 */
struct __JUMP_BUFFER
{
	unsigned int Ebp;
	unsigned int Ebx;
	unsigned int Edi;
	unsigned int Esi;
	unsigned int Esp;
	unsigned int Eip;
	unsigned int Registration;
	unsigned int TryLevel;
	unsigned int Cookie;
	unsigned int UnwindFunc;
	unsigned int UnwindData[6];
};

/* 6906 */
struct __declspec(align(4)) tagEMRGLSBOUNDEDRECORD
{
	tagEMR emr;
	_RECTL rclBounds;
	unsigned int cbData;
	char Data[1];
};

/* 6907 */
struct __cppobj CResHelper<CResPng,1035>
{
	CResPng *pRes;
	CResRef cResRef;
};

/* 6908 */
struct _SDL_iconv_t
{
	int src_fmt;
	int dst_fmt;
};

/* 6909 */
union __m256i
{
	char m256i_i8[32];
	__int16 m256i_i16[16];
	int m256i_i32[8];
	__int64 m256i_i64[4];
	char m256i_u8[32];
	unsigned __int16 m256i_u16[16];
	unsigned int m256i_u32[8];
	unsigned __int64 m256i_u64[4];
};

/* 6910 */
union $980F6A28C67C8F3640106D01D4C85A6A
{
	unsigned int Characteristics;
	unsigned int OriginalFirstThunk;
};

/* 6911 */
struct _IMAGE_IMPORT_DESCRIPTOR
{
	$980F6A28C67C8F3640106D01D4C85A6A ___u0;
	unsigned int TimeDateStamp;
	unsigned int ForwarderChain;
	unsigned int Name;
	unsigned int FirstThunk;
};

/* 6912 */
struct __cppobj __unaligned __declspec(align(4)) GameConnectedFriendChatMsg_t
{
	CSteamID m_steamIDUser;
	int m_iMessageID;
};

/* 6913 */
struct RemoteStorageAppSyncStatusCheck_t
{
	unsigned int m_nAppID;
	EResult m_eResult;
};

/* 6914 */
struct _DRAWPATRECT
{
	tagPOINT ptPosition;
	tagPOINT ptSize;
	unsigned __int16 wStyle;
	unsigned __int16 wPattern;
};

/* 6915 */
union $DCDEF3D95031538F54B564ED2F70C140
{
	DISPLAYCONFIG_TARGET_MODE targetMode;
	DISPLAYCONFIG_SOURCE_MODE sourceMode;
};

/* 6916 */
struct DISPLAYCONFIG_MODE_INFO
{
	DISPLAYCONFIG_MODE_INFO_TYPE infoType;
	unsigned int id;
	_LUID adapterId;
	$DCDEF3D95031538F54B564ED2F70C140 ___u3;
};

/* 6917 */
struct tagEMRBITBLT
{
	tagEMR emr;
	_RECTL rclBounds;
	int xDest;
	int yDest;
	int cxDest;
	int cyDest;
	unsigned int dwRop;
	int xSrc;
	int ySrc;
	tagXFORM xformSrc;
	unsigned int crBkColorSrc;
	unsigned int iUsageSrc;
	unsigned int offBmiSrc;
	unsigned int cbBmiSrc;
	unsigned int offBitsSrc;
	unsigned int cbBitsSrc;
};

/* 6918 */
struct _SERVICE_FAILURE_ACTIONSW
{
	unsigned int dwResetPeriod;
	wchar_t *lpRebootMsg;
	wchar_t *lpCommand;
	unsigned int cActions;
	_SC_ACTION *lpsaActions;
};

/* 6919 */
struct _SID
{
	char Revision;
	char SubAuthorityCount;
	_SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
	unsigned int SubAuthority[1];
};

/* 6920 */
struct tagEMRSETMAPPERFLAGS
{
	tagEMR emr;
	unsigned int dwFlags;
};

/* 6921 */
struct _CRT_FLOAT
{
	float f;
};

/* 6922 */
struct tagMDINEXTMENU
{
	HMENU__ *hmenuIn;
	HMENU__ *hmenuNext;
	HWND__ *hwndNext;
};

/* 6923 */
struct RemoteStoragePublishedFileUpdated_t
{
	unsigned __int64 m_nPublishedFileId;
	unsigned int m_nAppID;
	unsigned __int64 m_hFile;
};

/* 6924 */
struct __cppobj __unaligned __declspec(align(4)) FriendRichPresenceUpdate_t
{
	CSteamID m_steamIDFriend;
	unsigned int m_nAppID;
};

/* 6925 */
struct _wfinddata32_t
{
	unsigned int attrib;
	int time_create;
	int time_access;
	int time_write;
	unsigned int size;
	wchar_t name[260];
};

/* 6926 */
struct __cppobj _Combined_type<float,long double>
{
};

/* 6927 */
struct _LDOUBLE
{
	char ld[10];
};

/* 6928 */
struct __declspec(align(8)) RemoteStorageGetPublishedFileDetailsResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
	unsigned int m_nCreatorAppID;
	unsigned int m_nConsumerAppID;
	char m_rgchTitle[129];
	char m_rgchDescription[8000];
	unsigned __int64 m_hFile;
	unsigned __int64 m_hPreviewFile;
	unsigned __int64 m_ulSteamIDOwner;
	unsigned int m_rtimeCreated;
	unsigned int m_rtimeUpdated;
	ERemoteStoragePublishedFileVisibility m_eVisibility;
	bool m_bBanned;
	char m_rgchTags[1025];
	bool m_bTagsTruncated;
	char m_pchFileName[260];
	int m_nFileSize;
	int m_nPreviewFileSize;
	char m_rgchURL[256];
	EWorkshopFileType m_eFileType;
	bool m_bAcceptedForUse;
};

/* 6929 */
struct tagEMRSETPALETTEENTRIES
{
	tagEMR emr;
	unsigned int ihPal;
	unsigned int iStart;
	unsigned int cEntries;
	tagPALETTEENTRY aPalEntries[1];
};

/* 6930 */
struct luaL_Stream
{
	_iobuf *f;
	int (__cdecl *closef)(lua_State *);
};

/* 6931 */
struct _EXCEPTION_RECORD64
{
	unsigned int ExceptionCode;
	unsigned int ExceptionFlags;
	unsigned __int64 ExceptionRecord;
	unsigned __int64 ExceptionAddress;
	unsigned int NumberParameters;
	unsigned int __unusedAlignment;
	unsigned __int64 ExceptionInformation[15];
};

/* 6932 */
struct __cppobj GameRichPresenceJoinRequested_t
{
	CSteamID m_steamIDFriend;
	char m_rgchConnect[256];
};

/* 6933 */
struct tagEMRRESIZEPALETTE
{
	tagEMR emr;
	unsigned int ihPal;
	unsigned int cEntries;
};

/* 6934 */
struct CheckFileSignature_t
{
	ECheckFileSignature m_eCheckFileSignature;
};

/* 6935 */
struct ClientGameServerDeny_t
{
	unsigned int m_uAppID;
	unsigned int m_unGameServerIP;
	unsigned __int16 m_usGameServerPort;
	unsigned __int16 m_bSecure;
	unsigned int m_uReason;
};

/* 6936 */
struct _TIME_ZONE_INFORMATION
{
	int Bias;
	wchar_t StandardName[32];
	_SYSTEMTIME StandardDate;
	int StandardBias;
	wchar_t DaylightName[32];
	_SYSTEMTIME DaylightDate;
	int DaylightBias;
};

/* 6937 */
struct tagTPMPARAMS
{
	unsigned int cbSize;
	tagRECT rcExclude;
};

/* 6938 */
struct pvalueW
{
	wchar_t *pv_valuename;
	int pv_valuelen;
	void *pv_value_context;
	unsigned int pv_type;
};

/* 6939 */
struct __declspec(align(8)) MicroTxnAuthorizationResponse_t
{
	unsigned int m_unAppID;
	unsigned __int64 m_ulOrderID;
	char m_bAuthorized;
};

/* 6940 */
struct _WINDOW_BUFFER_SIZE_RECORD
{
	_COORD dwSize;
};

/* 6941 */
union $38E6770C7FA846D706A22E36764DF44C
{
	_KEY_EVENT_RECORD KeyEvent;
	_MOUSE_EVENT_RECORD MouseEvent;
	_WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
	_MENU_EVENT_RECORD MenuEvent;
	_FOCUS_EVENT_RECORD FocusEvent;
};

/* 6942 */
struct _INPUT_RECORD
{
	unsigned __int16 EventType;
	$38E6770C7FA846D706A22E36764DF44C Event;
};

/* 6943 */
struct KeyFileResFileName_st
{
	unsigned int nFileSize;
	unsigned int nFileNameOffset;
	unsigned __int16 nFileNameSize;
	unsigned __int16 bDrives;
};

/* 6944 */
struct _CRT_DOUBLE
{
	long double x;
};

/* 6945 */
struct PPM_THERMAL_POLICY_EVENT
{
	char Mode;
	unsigned __int64 Processors;
};

/* 6946 */
struct __cppobj P2PSessionRequest_t
{
	CSteamID m_steamIDRemote;
};

/* 6947 */
struct __declspec(align(8)) LeaderboardFindResult_t
{
	unsigned __int64 m_hSteamLeaderboard;
	char m_bLeaderboardFound;
};

/* 6948 */
struct _PSFEATURE_CUSTPAPER
{
	int lOrientation;
	int lWidth;
	int lHeight;
	int lWidthOffset;
	int lHeightOffset;
};

/* 6949 */
union $0055FF1BE34206123B9C488F0A43FAA0
{
	unsigned __int64 ForwarderString;
	unsigned __int64 Function;
	unsigned __int64 Ordinal;
	unsigned __int64 AddressOfData;
};

/* 6950 */
struct _IMAGE_THUNK_DATA64
{
	$0055FF1BE34206123B9C488F0A43FAA0 u1;
};

/* 6951 */
struct __declspec(align(8)) LobbyDataUpdate_t
{
	unsigned __int64 m_ulSteamIDLobby;
	unsigned __int64 m_ulSteamIDMember;
	char m_bSuccess;
};

/* 6952 */
struct RemoteStorageEnumerateWorkshopFilesResult_t
{
	EResult m_eResult;
	int m_nResultsReturned;
	int m_nTotalResultCount;
	unsigned __int64 m_rgPublishedFileId[50];
	float m_rgScore[50];
	unsigned int m_nAppId;
	unsigned int m_unStartIndex;
};

/* 6953 */
struct ANON_OBJECT_HEADER_BIGOBJ
{
	unsigned __int16 Sig1;
	unsigned __int16 Sig2;
	unsigned __int16 Version;
	unsigned __int16 Machine;
	unsigned int TimeDateStamp;
	_GUID ClassID;
	unsigned int SizeOfData;
	unsigned int Flags;
	unsigned int MetaDataSize;
	unsigned int MetaDataOffset;
	unsigned int NumberOfSections;
	unsigned int PointerToSymbolTable;
	unsigned int NumberOfSymbols;
};

/* 6954 */
struct __unaligned __declspec(align(2)) TLK_FILE_HEADER
{
	unsigned int fileType;
	unsigned int versionNum;
	unsigned __int16 LanguageType;
	unsigned int nStrEntries;
	unsigned int strEntriesOffset;
};

/* 6955 */
struct __cppobj MovieStrings
{
	int frame;
	CString string;
};

/* 6956 */
struct __cppobj MVE_MovieMessage
{
	CString strMString;
	int iMCurrentFrame;
	MovieStrings *luMFrameToString;
	int iMCurrentIndex;
};

/* 6957 */
struct GameServerChangeRequested_t
{
	char m_rgchServer[64];
	char m_rgchPassword[64];
};

/* 6958 */
struct DISPLAYCONFIG_ADAPTER_NAME
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	wchar_t adapterDevicePath[128];
};

/* 6959 */
struct tagGCP_RESULTSW
{
	unsigned int lStructSize;
	wchar_t *lpOutString;
	unsigned int *lpOrder;
	int *lpDx;
	int *lpCaretPos;
	char *lpClass;
	wchar_t *lpGlyphs;
	unsigned int nGlyphs;
	int nMaxFit;
};

/* 6960 */
struct tagHARDWAREHOOKSTRUCT
{
	HWND__ *hwnd;
	unsigned int message;
	unsigned int wParam;
	int lParam;
};

/* 6961 */
struct _QUOTA_LIMITS_EX
{
	unsigned int PagedPoolLimit;
	unsigned int NonPagedPoolLimit;
	unsigned int MinimumWorkingSetSize;
	unsigned int MaximumWorkingSetSize;
	unsigned int PagefileLimit;
	_LARGE_INTEGER TimeLimit;
	unsigned int WorkingSetLimit;
	unsigned int Reserved2;
	unsigned int Reserved3;
	unsigned int Reserved4;
	unsigned int Flags;
	_RATE_QUOTA_LIMIT CpuRateLimit;
};

/* 6962 */
struct __declspec(align(2)) _IMAGE_IMPORT_BY_NAME
{
	unsigned __int16 Hint;
	char Name[1];
};

/* 6963 */
struct __declspec(align(8)) RemoteStorageSetUserPublishedFileActionResult_t
{
	EResult m_eResult;
	unsigned __int64 m_nPublishedFileId;
	EWorkshopFileAction m_eAction;
};

/* 6964 */
struct __cppobj CProjectileSkyStrikeBAM : CProjectileBAM
{
};

/* 6965 */
struct __cppobj CVidPng : CVidImage, CResHelper<CResPng,1035>
{
};

/* 6966 */
struct LobbyCreated_t
{
	EResult m_eResult;
	unsigned __int64 m_ulSteamIDLobby;
};

/* 6967 */
struct __cppobj CProjectileNewScorcher : CProjectileBAM
{
	char m_nSegments;
	int m_deltaZ;
	int itsAffectedCreatures[64];
	int itsNumAffectedCreatures;
	int itsAIUpdateCounter;
	int itsApplyEffectsInterval;
	int itsClearAffectedCreaturesInterval;
	int itsTargetID;
};

/* 6968 */
struct IPCFailure_t
{
	char m_eFailureType;
};

/* 6969 */
struct _LDBL12
{
	char ld12[12];
};

/* 6970 */
union _ldouble_val
{
	unsigned __int16 _Sh[8];
	long double _Val;
};

/* 6971 */
struct MENUITEMTEMPLATE
{
	unsigned __int16 mtOption;
	unsigned __int16 mtID;
	wchar_t mtString[1];
};

/* 6972 */
struct CVIDMODE_CLIP_OUTCODE
{
	unsigned int all;
	unsigned __int32 left : 4;
	unsigned __int32 right : 4;
	unsigned __int32 bottom : 4;
	unsigned __int32 top : 4;
};

/* 6973 */
struct TLK_FILE_OVERRIDE_TEXT_HEADER
{
	unsigned int m_nOffsetToFirstFree;
};

/* 6974 */
struct UpdateEnabledCallbackData
{
	unsigned __int64 *vecPublished;
	int count;
};

/* 6975 */
struct __cppobj __declspec(align(4)) FriendsIsFollowing_t
{
	EResult m_eResult;
	__unaligned __declspec(align(1)) CSteamID m_steamID;
	bool m_bIsFollowing;
};

/* 6976 */
struct __cppobj CTimer : CObject
{
	int bEveryIteration;
	int bOnceOnly;
	int bTimerStarted;
	CWarp *pEngine;
	__POSITION *pos;
	int nTimerInterval;
	int nElaspedTime;
};

/* 6977 */
struct __cppobj __unaligned __declspec(align(1)) P2PSessionConnectFail_t
{
	CSteamID m_steamIDRemote;
	char m_eP2PSessionError;
};

/* 6978 */
struct __cppobj CScreenCharacterStoredMageSpell
{
	CResRef m_cResSpell;
	char m_nSpellLevel;
};

/* 6979 */
struct __declspec(align(8)) UserStatsStored_t
{
	unsigned __int64 m_nGameID;
	EResult m_eResult;
};

/* 6980 */
struct __cppobj __unaligned __declspec(align(4)) JoinClanChatRoomCompletionResult_t
{
	CSteamID m_steamIDClanChat;
	EChatRoomEnterResponse m_eChatRoomEnterResponse;
};

/* 6981 */
struct __cppobj CResHelper<CResText,1007>
{
	CResText *pRes;
	CResRef cResRef;
};

/* 6982 */
struct __cppobj CAINonPlayerScript : CResHelper<CResText,1007>
{
};

/* 6983 */
struct LobbyInvite_t
{
	unsigned __int64 m_ulSteamIDUser;
	unsigned __int64 m_ulSteamIDLobby;
	unsigned __int64 m_ulGameID;
};

/* 6984 */
struct __cppobj __declspec(align(4)) ClanOfficerListResponse_t
{
	CSteamID m_steamIDClan;
	int m_cOfficers;
	char m_bSuccess;
};

/* 6985 */
struct __cppobj FriendsGetFollowerCount_t
{
	EResult m_eResult;
	__unaligned __declspec(align(1)) CSteamID m_steamID;
	int m_nCount;
};

/* 6986 */
struct $98803199E4ED0D38E8056567793943D1
{
	unsigned int Reserved[8];
};

/* 6987 */
struct $CE96C10170E589386E17747CB8C67C74
{
	unsigned int Reserved[16];
};

/* 6988 */
struct _FILE_REMOTE_PROTOCOL_INFO
{
	unsigned __int16 StructureVersion;
	unsigned __int16 StructureSize;
	unsigned int Protocol;
	unsigned __int16 ProtocolMajorVersion;
	unsigned __int16 ProtocolMinorVersion;
	unsigned __int16 ProtocolRevision;
	unsigned __int16 Reserved;
	unsigned int Flags;
	$98803199E4ED0D38E8056567793943D1 GenericReserved;
	$CE96C10170E589386E17747CB8C67C74 ProtocolSpecificReserved;
};

/* 6989 */
struct __declspec(align(8)) RemoteStorageFileShareResult_t
{
	EResult m_eResult;
	unsigned __int64 m_hFile;
	char m_rgchFilename[260];
};

/* 6990 */
struct DlcInstalled_t
{
	unsigned int m_nAppID;
};

/* 6991 */
struct __cppobj CProjectileLightningBoltGround : CProjectileBAM
{
	int m_maxBounces;
};

/* 6992 */
struct __cppobj __declspec(align(4)) CProjectileScorcher : CProjectileBAM
{
	char m_lifeSpan;
	char m_nSegments;
	int m_deltaZ;
	char m_bGlow;
};

/* 6993 */
union $D2DEA8262095EA67F706EE96A7E25EE7
{
	_LARGE_INTEGER FileId;
	_GUID ObjectId;
};

/* 6994 */
struct FILE_ID_DESCRIPTOR
{
	unsigned int dwSize;
	_FILE_ID_TYPE Type;
	$D2DEA8262095EA67F706EE96A7E25EE7 ___u2;
};

/* 6995 */
struct __unaligned __declspec(align(4)) SDL_Finger
{
	__int64 id;
	float x;
	float y;
	float pressure;
};

/* 6996 */
struct __cppobj SteamServersConnected_t
{
};

/* 6997 */
struct _stat32
{
	unsigned int st_dev;
	unsigned __int16 st_ino;
	unsigned __int16 st_mode;
	__int16 st_nlink;
	__int16 st_uid;
	__int16 st_gid;
	unsigned int st_rdev;
	int st_size;
	int st_atime;
	int st_mtime;
	int st_ctime;
};

/* 6998 */
struct LobbyChatMsg_t
{
	unsigned __int64 m_ulSteamIDLobby;
	unsigned __int64 m_ulSteamIDUser;
	char m_eChatEntryType;
	unsigned int m_iChatID;
};

/* 6999 */
struct __cppobj __declspec(align(4)) CVoice : CObject
{
	CSound *m_pSound;
	unsigned int m_nBuffer;
	unsigned int m_nSource;
	int m_nChannel;
	int m_nPriority;
	bool m_bDuckedOthers;
};

/* 7000 */
struct __m128d
{
	long double m128d_f64[2];
};

/* 7001 */
struct SteamAPICallCompleted_t
{
	unsigned __int64 m_hAsyncCall;
};

/* 7002 */
struct SetPersonaNameResponse_t
{
	bool m_bSuccess;
	bool m_bLocalSuccess;
	EResult m_result;
};

/* 7003 */
struct __declspec(align(8)) LobbyKicked_t
{
	unsigned __int64 m_ulSteamIDLobby;
	unsigned __int64 m_ulSteamIDAdmin;
	char m_bKickedDueToDisconnect;
};

/* 7004 */
struct __cppobj UserAchievementIconFetched_t
{
	CGameID m_nGameID;
	char m_rgchAchievementName[128];
	bool m_bAchieved;
	int m_nIconHandle;
};

/* 7005 */
struct GameOverlayActivated_t
{
	char m_bActive;
};

/* 7006 */
struct __cppobj _Combined_type<float,double>
{
};

/* 7007 */
struct HSTR__
{
	int unused;
};

/* 7008 */
struct AppProofOfPurchaseKeyResponse_t
{
	EResult m_eResult;
	unsigned int m_nAppID;
	char m_rgchKey[64];
};

/* 7009 */
struct ItemInstalled_t
{
	unsigned int m_unAppID;
	unsigned __int64 m_nPublishedFileId;
};

/* 7010 */
struct _XINPUT_VIBRATION
{
	unsigned __int16 wLeftMotorSpeed;
	unsigned __int16 wRightMotorSpeed;
};

/* 7011 */
struct haptic_hweffect
{
	DIEFFECT effect;
	IDirectInputEffect *ref;
	_XINPUT_VIBRATION vibration;
};

/* 7012 */
struct haptic_effect
{
	SDL_HapticEffect effect;
	haptic_hweffect *hweffect;
};

/* 7013 */
union $1995BC57F6446EE2E094685C28143A72
{
	void *value_ptr;
	int value_i;
	long double value_f;
	char buf[128];
};

/* 7014 */
struct SDL_error
{
	int error;
	char key[128];
	int argc;
	$1995BC57F6446EE2E094685C28143A72 args[5];
};

/* 7015 */
struct SDL_Thread
{
	unsigned int threadid;
	void *handle;
	int status;
	SDL_atomic_t state;
	SDL_error errbuf;
	char *name;
	void *data;
};

/* 7016 */
struct SDL_mutex
{
	_RTL_CRITICAL_SECTION cs;
};

/* 7017 */
struct haptic_hwdata
{
	IDirectInputDevice8W *device;
	unsigned int axes[3];
	SDL_bool is_joystick;
	char bXInputHaptic;
	char userid;
	SDL_Thread *thread;
	SDL_mutex *mutex;
	volatile unsigned int stopTicks;
	volatile int stopThread;
};

/* 7018 */
struct _SDL_Haptic
{
	char index;
	haptic_effect *effects;
	int neffects;
	int nplaying;
	unsigned int supported;
	int naxes;
	haptic_hwdata *hwdata;
	int ref_count;
	int rumble_id;
	SDL_HapticEffect rumble_effect;
	_SDL_Haptic *next;
};

/* 7019 */
struct __declspec(align(8)) GlobalAchievementPercentagesReady_t
{
	unsigned __int64 m_nGameID;
	EResult m_eResult;
};

/* 7020 */
struct __cppobj SteamShutdown_t
{
};

/* 7021 */
struct _ACL_REVISION_INFORMATION
{
	unsigned int AclRevision;
};

/* 7022 */
struct _wfinddata32i64_t
{
	unsigned int attrib;
	int time_create;
	int time_access;
	int time_write;
	__int64 size;
	wchar_t name[260];
};

/* 7023 */
struct RegisterActivationCodeResponse_t
{
	ERegisterActivationCodeResult m_eResult;
	unsigned int m_unPackageRegistered;
};

/* 7024 */
struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	unsigned __int16 edidManufactureId;
	unsigned __int16 edidProductCodeId;
	unsigned int connectorInstance;
	wchar_t monitorFriendlyDeviceName[64];
	wchar_t monitorDevicePath[128];
};

/* 7025 */
struct LobbyMatchList_t
{
	unsigned int m_nLobbiesMatching;
};

/* 7026 */
struct PS3TrophiesInstalled_t
{
	unsigned __int64 m_nGameID;
	EResult m_eResult;
	unsigned __int64 m_ulRequiredDiskSpace;
};

/* 7027 */
struct GameWebCallback_t
{
	char m_szURL[256];
};

/* 7028 */
struct __declspec(align(8)) GlobalStatsReceived_t
{
	unsigned __int64 m_nGameID;
	EResult m_eResult;
};

/* 7029 */
struct SDL_AudioSpec
{
	int freq;
	unsigned __int16 format;
	char channels;
	char silence;
	unsigned __int16 samples;
	unsigned __int16 padding;
	unsigned int size;
	void (__cdecl *callback)(void *, char *, int);
	void *userdata;
};

/* 7030 */
struct __declspec(align(8)) LobbyChatUpdate_t
{
	unsigned __int64 m_ulSteamIDLobby;
	unsigned __int64 m_ulSteamIDUserChanged;
	unsigned __int64 m_ulSteamIDMakingChange;
	unsigned int m_rgfChatMemberStateChange;
};

/* 7031 */
union __m256
{
	float m256_f32[8];
};

/* 7032 */
struct __cppobj CVEFVidCellBase
{
	CResRef m_cVidCellRef;
	CResRef m_cShadowVidCellRef;
	unsigned int m_bltFlags;
	unsigned int m_bltInfo;
	unsigned int m_bltFlagsExtra;
	unsigned int m_bltInfoExtra;
	CPoint m_offset;
	unsigned int m_offsetFlags;
	int m_animationSpeed;
	int m_numDirections;
	int m_direction;
	unsigned int m_directionFlags;
	CResRef m_cNewPaletteRef;
	int m_height;
	CPoint m_glowSize;
	unsigned int m_glowIntensity;
	int m_nDuration;
	CResRef m_cVVCResRes;
	int m_nStartSequence;
	int m_nLoopSequence;
	int m_nCurrentSequence;
	unsigned int m_sequenceFlags;
	CResRef m_cStartSoundRef;
	CResRef m_cLoopSoundRef;
	CResRef m_cAlphaBamRef;
	int m_nEndSequence;
	CResRef m_cEndSoundRef;
	unsigned int m_extra[84];
};

/* 7033 */
struct __cppobj CVEFEvent
{
	int m_nTimeFrame;
	unsigned int m_dwFlags;
	int m_nRepeatRate;
	unsigned int m_nResType;
	CResRef m_res;
	unsigned int m_specialFlags;
	unsigned int m_pad[49];
};

/* 7034 */
struct __cppobj CVisualEffectBase
{
	unsigned int m_nTimedEventOffset;
	unsigned int m_nTimedEventCount;
	unsigned int m_nTriggeredEventOffset;
	unsigned int m_nTriggeredEventCount;
	unsigned int m_nTargetType;
	int m_nSpeed;
	int m_nDuration;
	CPoint m_ptStartDeltaV;
	int m_nDeltaVDec;
	int m_nHeight;
	unsigned int m_flags;
	unsigned int m_extra[100];
};

/* 7035 */
struct __cppobj CResHelper<CResBinary,1020>
{
	CResBinary *pRes;
	CResRef cResRef;
};

/* 7036 */
struct __cppobj CVisualEffectFile : CResHelper<CResBinary,1020>
{
};

/* 7037 */
struct __cppobj CTypedPtrList<CPtrList,CVEFEvent *> : CPtrList
{
};

/* 7038 */
struct __cppobj CVisualEffect : CGameObject, CVisualEffectBase
{
	CTypedPtrList<CPtrList,long *> m_activeAnimations;
	CTypedPtrList<CPtrList,CVEFEvent *> m_timedEvents;
	CTypedPtrList<CPtrList,CVEFEvent *> m_triggeredEvents;
	CPoint m_ptTargetPos;
	int m_nTargetId;
	CPoint m_posExact;
	CPoint m_posOld;
	int m_nExistanceCounter;
	int m_nDirection;
	int m_nNewDirection;
	CPoint m_posDelta;
	char m_terrainTable[16];
	CStringList *pList;
	__POSITION *m_listPos;
	int m_startedList;
	unsigned int m_renderMask;
};

/* 7039 */
struct __cppobj CResHelper<CResBinary,1019>
{
	CResBinary *pRes;
	CResRef cResRef;
};

/* 7040 */
struct __cppobj CVEFVidCellFile : CResHelper<CResBinary,1019>
{
};

/* 7041 */
struct __cppobj CVEFVidCell : CGameObject, CVEFVidCellBase
{
	CVidCell *m_cVidCell;
	CVidCell *m_cShadowVidCell;
	CVidPalette m_palette;
	CVidBitmap m_newPalette;
	int m_done;
	int m_newDirection;
	char m_terrainTable[16];
	CSound m_sound;
	CVidCell *m_cAlphaBam;
	char m_level;
	char m_nCurSound;
	unsigned int m_renderMask;
	unsigned int m_renderType;
	unsigned int m_myRenderMask;
	int m_priority;
};

/* 7042 */
struct __cppobj CGameText : CGameObject
{
	int m_nWidth;
	CVidFont m_textFont;
	int m_nDuration;
	unsigned __int16 m_nBeginFade;
	CString m_sText;
	int m_iTarget;
	CGameObject *m_pTarget;
};

/* 7043 */
struct __cppobj STriggerObjectWrapper
{
	CAreaFileTriggerObject *pTriggerObject;
	CAreaPoint *pPickPointStart;
};

/* 7044 */
struct __declspec(align(8)) co
{
	long double hue;
	int colorId;
};

/* 7045 */
struct rgb
{
	int r;
	int g;
	int b;
};

/* 7046 */
struct CGameSprite::RenderHealthBar::__l50::colorPoint
{
	SDL_Point pt;
	unsigned int c;
};

/* 7047 */
struct GetCurrentPortraitCallbackData
{
	int gender;
	CStringList *pAppearancePortraits;
};

/* 7048 */
struct OnDoneButtonClickCallbackData
{
	int gender;
	CStringList *pAppearancePortraits;
};

/* 7049 */
struct OnAppearanceButtonClickCallbackData
{
	int gender;
	CStringList *pAppearancePortraits;
};

/* 7050 */
struct __cppobj CGameSound : CGameObject
{
	CAreaFileSoundObject m_soundObject;
	CSound m_looping;
	int m_bLoopPlaying;
	int m_period;
	int m_periodCount;
	char m_currentSound;
	unsigned int m_timeOfDayActive;
};

/* 7051 */
struct __cppobj CResHelper<CResPLT,6>
{
	CResPLT *pRes;
	CResRef cResRef;
};

/* 7052 */
struct __cppobj CTypedPtrList<CPtrList,CVariable *> : CPtrList
{
};

/* 7053 */
struct campaignTable
{
	char *column;
	C2DArray *table;
};

/* 7054 */
struct __cppobj CGameFireball3d : CGameObject
{
	char m_terrainTable[16];
	char m_visibleTerrainTable[16];
	unsigned __int16 m_animationID;
	unsigned __int16 m_animationIDStatic;
	char m_colorRangeValues[7];
	unsigned __int16 m_ringGranularity;
	CVidCell m_spriteSplashVidCell;
	CVidPalette m_spriteSplashPalette;
	__int16 m_holdDuration;
	int m_radius;
	int m_speed;
	char m_duration;
	char m_collision;
	CSize m_ellipseSize;
	char *m_pPlacementGrid;
	CPoint m_nEllipse;
	CRect *m_pEllipse;
	char *m_flagEllipse;
	CSound m_sndExplosion;
	CString m_sSoundTemporal;
	int m_bCenterSoundLooping;
	int m_bSplashGlow;
	int m_bBrightest;
	int m_bRingTemporals;
	int m_bInteriorTemporals;
	int m_bRandomSpeed;
	int m_bPalettedRing;
	int m_bPalettedArea;
	int m_bCone;
	unsigned __int16 m_coneSize;
	CPoint m_posEdge;
	int m_bNewPalette;
	CVidBitmap m_newPalette;
	CResRef m_fireBallArea;
	CResRef m_fireBallRing;
	unsigned __int16 m_projectileType;
	int m_bPermanent;
	int m_bCanSave;
};

/* 7055 */
struct __cppobj CTypedPtrList<CPtrList,LimboHackId *> : CPtrList
{
};

/* 7056 */
struct __cppobj LimboHackId
{
	CString m_name;
	CPoint m_dest;
	CPoint m_source;
	CResRef m_areaRes;
};

/* 7057 */
struct __cppobj CTypedPtrList<CPtrList,CGameJournalAlphabetizer *> : CPtrList
{
};

/* 7058 */
struct __cppobj CTypedPtrArray<CPtrArray,CDialogFile_Dialog *> : CPtrArray
{
};

/* 7059 */
struct __cppobj CTypedPtrArray<CPtrArray,CDialogFile_Reply *> : CPtrArray
{
};

/* 7060 */
struct __cppobj CTypedPtrArray<CPtrArray,CDialogFile_StartingConditional *> : CPtrArray
{
};

/* 7061 */
struct __cppobj CTypedPtrArray<CPtrArray,CDialogFile_ReplyConditional *> : CPtrArray
{
};

/* 7062 */
struct __cppobj CTypedPtrArray<CPtrArray,CDialogFile_ActionScript *> : CPtrArray
{
};

/* 7063 */
struct __cppobj CTypedPtrList<CPtrList,SProjectileWrapper *> : CPtrList
{
};

/* 7064 */
struct __cppobj CTypedPtrList<CPtrList,CAreaFileStaticObject *> : CPtrList
{
};

/* 7065 */
struct __cppobj CTypedPtrList<CPtrList,CAreaFileSoundObject *> : CPtrList
{
};

/* 7066 */
struct __cppobj CTypedPtrList<CPtrList,CAreaFileRandomMonsterSpawningPoint *> : CPtrList
{
};

/* 7067 */
struct __cppobj CTypedPtrList<CPtrList,STriggerObjectWrapper *> : CPtrList
{
};

/* 7068 */
struct __cppobj CTypedPtrList<CPtrList,SAreaFileDoorWrapper *> : CPtrList
{
};

/* 7069 */
struct __cppobj CTypedPtrList<CPtrList,SAreaFileCreatureWrapper *> : CPtrList
{
};

/* 7070 */
struct __cppobj altObject
{
	int iObject;
	CPoint pos;
	int dist;
	char objType;
	float weight;
};

/* 7071 */
struct __cppobj CTypedPtrList<CPtrList,CGameObject *> : CPtrList
{
};

/* 7072 */
struct _tagpropertykey
{
	_GUID fmtid;
	unsigned int pid;
};

/* 7073 */
struct tagBIND_OPTS
{
	unsigned int cbStruct;
	unsigned int grfFlags;
	unsigned int grfMode;
	unsigned int dwTickCountDeadline;
};

/* 7074 */
struct __unaligned __declspec(align(1)) _SHITEMID
{
	unsigned __int16 cb;
	char abID[1];
};

/* 7075 */
struct _ITEMIDLIST
{
	_SHITEMID mkid;
};

/* 7076 */
struct KNOWNFOLDER_DEFINITION
{
	KF_CATEGORY category;
	wchar_t *pszName;
	wchar_t *pszDescription;
	_GUID fidParent;
	wchar_t *pszRelativePath;
	wchar_t *pszParsingName;
	wchar_t *pszTooltip;
	wchar_t *pszLocalizedName;
	wchar_t *pszIcon;
	wchar_t *pszSecurity;
	unsigned int dwAttributes;
	unsigned int kfdFlags;
	_GUID ftidType;
};

/* 7077 */
struct __cppobj IShellLibrary : IUnknown
{
};

/* 7078 */
struct __cppobj IShellItem : IUnknown
{
};

/* 7079 */
struct IBindCtx
{
	IBindCtxVtbl *lpVtbl;
};

/* 7088 */
struct IBindCtxVtbl
{
	HRESULT (__stdcall *QueryInterface)(IBindCtx *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IBindCtx *);
	unsigned int (__stdcall *Release)(IBindCtx *);
	HRESULT (__stdcall *RegisterObjectBound)(IBindCtx *, IUnknown *);
	HRESULT (__stdcall *RevokeObjectBound)(IBindCtx *, IUnknown *);
	HRESULT (__stdcall *ReleaseBoundObjects)(IBindCtx *);
	HRESULT (__stdcall *SetBindOptions)(IBindCtx *, tagBIND_OPTS *);
	HRESULT (__stdcall *GetBindOptions)(IBindCtx *, tagBIND_OPTS *);
	HRESULT (__stdcall *GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **);
	HRESULT (__stdcall *RegisterObjectParam)(IBindCtx *, unsigned __int16 *, IUnknown *);
	HRESULT (__stdcall *GetObjectParam)(IBindCtx *, unsigned __int16 *, IUnknown **);
	HRESULT (__stdcall *EnumObjectParam)(IBindCtx *, IEnumString **);
	HRESULT (__stdcall *RevokeObjectParam)(IBindCtx *, unsigned __int16 *);
};

/* 7080 */
struct IRunningObjectTable
{
	IRunningObjectTableVtbl *lpVtbl;
};

/* 7086 */
struct IEnumString
{
	IEnumStringVtbl *lpVtbl;
};

/* 7085 */
struct IRunningObjectTableVtbl
{
	HRESULT (__stdcall *QueryInterface)(IRunningObjectTable *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IRunningObjectTable *);
	unsigned int (__stdcall *Release)(IRunningObjectTable *);
	HRESULT (__stdcall *Register)(IRunningObjectTable *, unsigned int, IUnknown *, IMoniker *, unsigned int *);
	HRESULT (__stdcall *Revoke)(IRunningObjectTable *, unsigned int);
	HRESULT (__stdcall *IsRunning)(IRunningObjectTable *, IMoniker *);
	HRESULT (__stdcall *GetObjectW)(IRunningObjectTable *, IMoniker *, IUnknown **);
	HRESULT (__stdcall *NoteChangeTime)(IRunningObjectTable *, unsigned int, _FILETIME *);
	HRESULT (__stdcall *GetTimeOfLastChange)(IRunningObjectTable *, IMoniker *, _FILETIME *);
	HRESULT (__stdcall *EnumRunning)(IRunningObjectTable *, IEnumMoniker **);
};

/* 7087 */
struct IEnumStringVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumString *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumString *);
	unsigned int (__stdcall *Release)(IEnumString *);
	HRESULT (__stdcall *Next)(IEnumString *, unsigned int, unsigned __int16 **, unsigned int *);
	HRESULT (__stdcall *Skip)(IEnumString *, unsigned int);
	HRESULT (__stdcall *Reset)(IEnumString *);
	HRESULT (__stdcall *Clone)(IEnumString *, IEnumString **);
};

/* 7081 */
struct IMoniker
{
	IMonikerVtbl *lpVtbl;
};

/* 7082 */
struct IEnumMoniker
{
	IEnumMonikerVtbl *lpVtbl;
};

/* 7084 */
struct IMonikerVtbl
{
	HRESULT (__stdcall *QueryInterface)(IMoniker *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IMoniker *);
	unsigned int (__stdcall *Release)(IMoniker *);
	HRESULT (__stdcall *GetClassID)(IMoniker *, _GUID *);
	HRESULT (__stdcall *IsDirty)(IMoniker *);
	HRESULT (__stdcall *Load)(IMoniker *, IStream *);
	HRESULT (__stdcall *Save)(IMoniker *, IStream *, int);
	HRESULT (__stdcall *GetSizeMax)(IMoniker *, _ULARGE_INTEGER *);
	HRESULT (__stdcall *BindToObject)(IMoniker *, IBindCtx *, IMoniker *, _GUID *const, void **);
	HRESULT (__stdcall *BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, _GUID *const, void **);
	HRESULT (__stdcall *Reduce)(IMoniker *, IBindCtx *, unsigned int, IMoniker **, IMoniker **);
	HRESULT (__stdcall *ComposeWith)(IMoniker *, IMoniker *, int, IMoniker **);
	HRESULT (__stdcall *Enum)(IMoniker *, int, IEnumMoniker **);
	HRESULT (__stdcall *IsEqual)(IMoniker *, IMoniker *);
	HRESULT (__stdcall *Hash)(IMoniker *, unsigned int *);
	HRESULT (__stdcall *IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *);
	HRESULT (__stdcall *GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, _FILETIME *);
	HRESULT (__stdcall *Inverse)(IMoniker *, IMoniker **);
	HRESULT (__stdcall *CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **);
	HRESULT (__stdcall *RelativePathTo)(IMoniker *, IMoniker *, IMoniker **);
	HRESULT (__stdcall *GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, unsigned __int16 **);
	HRESULT (__stdcall *ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, unsigned __int16 *, unsigned int *, IMoniker **);
	HRESULT (__stdcall *IsSystemMoniker)(IMoniker *, unsigned int *);
};

/* 7083 */
struct IEnumMonikerVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumMoniker *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumMoniker *);
	unsigned int (__stdcall *Release)(IEnumMoniker *);
	HRESULT (__stdcall *Next)(IEnumMoniker *, unsigned int, IMoniker **, unsigned int *);
	HRESULT (__stdcall *Skip)(IEnumMoniker *, unsigned int);
	HRESULT (__stdcall *Reset)(IEnumMoniker *);
	HRESULT (__stdcall *Clone)(IEnumMoniker *, IEnumMoniker **);
};

/* 7089 */
struct __cppobj IPersist : IUnknown
{
};

/* 7090 */
struct __cppobj IPersistStream : IPersist
{
};

/* 11226 */
enum IPSEC_AUTH_TYPE_
{
	IPSEC_AUTH_MD5 = 0x0,
	IPSEC_AUTH_SHA_1 = 0x1,
	IPSEC_AUTH_SHA_256 = 0x2,
	IPSEC_AUTH_AES_128 = 0x3,
	IPSEC_AUTH_AES_192 = 0x4,
	IPSEC_AUTH_AES_256 = 0x5,
	IPSEC_AUTH_MAX = 0x6,
};

/* 7091 */
struct __declspec(align(4)) IPSEC_AUTH_TRANSFORM_ID0_
{
	IPSEC_AUTH_TYPE_ authType;
	char authConfig;
};

/* 11227 */
enum IPSEC_CIPHER_TYPE_
{
	IPSEC_CIPHER_TYPE_DES = 0x1,
	IPSEC_CIPHER_TYPE_3DES = 0x2,
	IPSEC_CIPHER_TYPE_AES_128 = 0x3,
	IPSEC_CIPHER_TYPE_AES_192 = 0x4,
	IPSEC_CIPHER_TYPE_AES_256 = 0x5,
	IPSEC_CIPHER_TYPE_MAX = 0x6,
};

/* 7092 */
struct __declspec(align(4)) IPSEC_CIPHER_TRANSFORM_ID0_
{
	IPSEC_CIPHER_TYPE_ cipherType;
	char cipherConfig;
};

/* 7093 */
struct _ADDRESS_FAMILY_INFORMATION
{
	unsigned __int16 EthernetType;
	char HeaderSize;
	char AddressBytes;
	char NextHeaderOffset;
	char HopLimitOffset;
	char SourceAddressOffset;
	char DestinationAddressOffset;
	unsigned __int16 WfpInboundIpPacketLayerId;
	unsigned __int16 WfpOutboundIpPacketLayerId;
	unsigned __int16 WfpOutboundTransportLayerId;
	unsigned __int16 WfpRouteAuthorizationLayerId;
};

/* 7094 */
struct _INITIAL_PRIVILEGE_SET
{
	unsigned int PrivilegeCount;
	unsigned int Control;
	_LUID_AND_ATTRIBUTES Privilege[3];
};

/* 7095 */
struct $D4AA1BC4E11813B6A97637E071CF5F66
{
	unsigned __int32 IoPriorityBoosted : 1;
	unsigned __int32 OwnerCount : 31;
};

/* 7096 */
union $F03411656AC5243D808670A3FB81D3E3
{
	$D4AA1BC4E11813B6A97637E071CF5F66 __s0;
	unsigned int TableSize;
};

/* 7097 */
struct _OWNER_ENTRY
{
	unsigned int OwnerThread;
	$F03411656AC5243D808670A3FB81D3E3 ___u1;
};

/* 7124 */
struct __declspec(align(4)) _KDEVICE_QUEUE_ENTRY
{
	_LIST_ENTRY DeviceListEntry;
	unsigned int SortKey;
	char Inserted;
};

/* 7210 */
struct _WAIT_CONTEXT_BLOCK
{
	_KDEVICE_QUEUE_ENTRY WaitQueueEntry;
	_IO_ALLOCATION_ACTION (__stdcall *DeviceRoutine)(_DEVICE_OBJECT *, _IRP *, void *, void *);
	void *DeviceContext;
	unsigned int NumberOfMapRegisters;
	void *DeviceObject;
	void *CurrentIrp;
	_KDPC *BufferChainingDpc;
};

/* 7211 */
union $E142C82A4E7BB9BCCCBE047FE447B4AB
{
	_LIST_ENTRY ListEntry;
	_WAIT_CONTEXT_BLOCK Wcb;
};

/* 7212 */
struct __declspec(align(4)) _KDEVICE_QUEUE
{
	__int16 Type;
	__int16 Size;
	_LIST_ENTRY DeviceListHead;
	unsigned int Lock;
	char Busy;
};

/* 7209 */
struct _KDPC
{
	char Type;
	char Importance;
	volatile unsigned __int16 Number;
	_LIST_ENTRY DpcListEntry;
	void (__stdcall *DeferredRoutine)(_KDPC *, void *, void *, void *);
	void *DeferredContext;
	void *SystemArgument1;
	void *SystemArgument2;
	void *DpcData;
};

/* 7108 */
struct $F5B94BD893D8523DFA261066E567F83A
{
	char Type;
	char ControlFlags;
	char ThreadControlFlags;
	char TimerControlFlags;
};

/* 7109 */
struct $89EF016DDFFC522FF397EE80C5CC0484
{
	_BYTE gap0[1];
	__int8 Absolute : 1;
	__int8 Coalescable : 1;
	__int8 KeepShifting : 1;
	__int8 EncodedTolerableDelay : 5;
	__int8 CpuThrottled : 1;
	__int8 CycleProfiling : 1;
	__int8 CounterProfiling : 1;
	__int8 Reserved : 5;
	__int8 Index : 6;
	__int8 Inserted : 1;
	__int8 Expired : 1;
};

/* 7110 */
struct $F151C2BFBC638D507868B880929DEDD5
{
	_BYTE gap0[1];
	char Abandoned;
	char Hand;
	char DebugActive;
};

/* 7111 */
struct $0B6FB50FFAD4BED3D9F7829B10596895
{
	_BYTE gap0[1];
	char Signalling;
	char Size;
	char DpcActive;
};

/* 7112 */
union $83CDA82E40A3E6AE24C9C47B594D8717
{
	$F5B94BD893D8523DFA261066E567F83A __s0;
	volatile int Lock;
	$89EF016DDFFC522FF397EE80C5CC0484 __s2;
	$F151C2BFBC638D507868B880929DEDD5 __s3;
	$0B6FB50FFAD4BED3D9F7829B10596895 __s4;
};

/* 7113 */
struct _DISPATCHER_HEADER
{
	$83CDA82E40A3E6AE24C9C47B594D8717 ___u0;
	int SignalState;
	_LIST_ENTRY WaitListHead;
};

/* 7115 */
struct _KEVENT
{
	_DISPATCHER_HEADER Header;
};

/* 7098 */
struct _DEVICE_OBJECT
{
	__int16 Type;
	unsigned __int16 Size;
	int ReferenceCount;
	_DRIVER_OBJECT *DriverObject;
	_DEVICE_OBJECT *NextDevice;
	_DEVICE_OBJECT *AttachedDevice;
	_IRP *CurrentIrp;
	struct _IO_TIMER *Timer;
	unsigned int Flags;
	unsigned int Characteristics;
	_VPB *Vpb;
	void *DeviceExtension;
	unsigned int DeviceType;
	char StackSize;
	$E142C82A4E7BB9BCCCBE047FE447B4AB Queue;
	unsigned int AlignmentRequirement;
	_KDEVICE_QUEUE DeviceQueue;
	_KDPC Dpc;
	unsigned int ActiveThreadCount;
	void *SecurityDescriptor;
	_KEVENT DeviceLock;
	unsigned __int16 SectorSize;
	unsigned __int16 Spare1;
	_DEVOBJ_EXTENSION *DeviceObjectExtension;
	void *Reserved;
};

/* 7100 */
struct _UNICODE_STRING
{
	unsigned __int16 Length;
	unsigned __int16 MaximumLength;
	unsigned __int16 *Buffer;
};

/* 7099 */
struct _DRIVER_OBJECT
{
	__int16 Type;
	__int16 Size;
	_DEVICE_OBJECT *DeviceObject;
	unsigned int Flags;
	void *DriverStart;
	unsigned int DriverSize;
	void *DriverSection;
	_DRIVER_EXTENSION *DriverExtension;
	_UNICODE_STRING DriverName;
	_UNICODE_STRING *HardwareDatabase;
	_FAST_IO_DISPATCH *FastIoDispatch;
	int (__stdcall *DriverInit)(_DRIVER_OBJECT *, _UNICODE_STRING *);
	void (__stdcall *DriverStartIo)(_DEVICE_OBJECT *, _IRP *);
	void (__stdcall *DriverUnload)(_DRIVER_OBJECT *);
	int (__stdcall *MajorFunction[28])(_DEVICE_OBJECT *, _IRP *);
};

/* 7120 */
union $52BFDFAAADAAE5C0EC507F56FD119437
{
	_IRP *MasterIrp;
	int IrpCount;
	void *SystemBuffer;
};

/* 7103 */
union $250F5FE22B4503EFD7D48C86CC7F2167
{
	int Status;
	void *Pointer;
};

/* 7104 */
struct _IO_STATUS_BLOCK
{
	$250F5FE22B4503EFD7D48C86CC7F2167 ___u0;
	unsigned int Information;
};

/* 7121 */
union $779151E339C93E25F4551301D9837DFB
{
	void (__stdcall *UserApcRoutine)(void *, _IO_STATUS_BLOCK *, unsigned int);
	void *IssuingProcess;
};

/* 7122 */
struct $732C1C812E566FBA3A95BCB0D30A6FE7
{
	$779151E339C93E25F4551301D9837DFB ___u0;
	void *UserApcContext;
};

/* 7123 */
union $76496B68E2AF9883C9ACA67706F72379
{
	$732C1C812E566FBA3A95BCB0D30A6FE7 AsynchronousParameters;
	_LARGE_INTEGER AllocationSize;
};

/* 7203 */
union $337EB9D72D33AC527CCAFCE1361099FE
{
	_KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
	void *DriverContext[4];
};

/* 7204 */
union $32CC65D54276DCC6D591DDFC63FB93BE
{
	_IO_STACK_LOCATION *CurrentStackLocation;
	unsigned int PacketType;
};

/* 7205 */
struct $37B8E0BAF763A817F6B534E7B45D7873
{
	$337EB9D72D33AC527CCAFCE1361099FE ___u0;
	struct _ETHREAD *Thread;
	char *AuxiliaryBuffer;
	_LIST_ENTRY ListEntry;
	$32CC65D54276DCC6D591DDFC63FB93BE ___u4;
	_FILE_OBJECT *OriginalFileObject;
};

/* 7206 */
struct __declspec(align(2)) _KAPC
{
	char Type;
	char SpareByte0;
	char Size;
	char SpareByte1;
	unsigned int SpareLong0;
	struct _KTHREAD *Thread;
	_LIST_ENTRY ApcListEntry;
	void (__stdcall *KernelRoutine)(_KAPC *, void (__stdcall **)(void *, void *, void *), void **, void **, void **);
	void (__stdcall *RundownRoutine)(_KAPC *);
	void (__stdcall *NormalRoutine)(void *, void *, void *);
	void *NormalContext;
	void *SystemArgument1;
	void *SystemArgument2;
	char ApcStateIndex;
	char ApcMode;
	char Inserted;
};

/* 7207 */
union $2CEB42EA506575C40A71F14371F7D04D
{
	$37B8E0BAF763A817F6B534E7B45D7873 Overlay;
	_KAPC Apc;
	void *CompletionKey;
};

/* 7119 */
struct _IRP
{
	__int16 Type;
	unsigned __int16 Size;
	_MDL *MdlAddress;
	unsigned int Flags;
	$52BFDFAAADAAE5C0EC507F56FD119437 AssociatedIrp;
	_LIST_ENTRY ThreadListEntry;
	_IO_STATUS_BLOCK IoStatus;
	char RequestorMode;
	char PendingReturned;
	char StackCount;
	char CurrentLocation;
	char Cancel;
	char CancelIrql;
	char ApcEnvironment;
	char AllocationFlags;
	_IO_STATUS_BLOCK *UserIosb;
	_KEVENT *UserEvent;
	$76496B68E2AF9883C9ACA67706F72379 Overlay;
	void (__stdcall *CancelRoutine)(_DEVICE_OBJECT *, _IRP *);
	void *UserBuffer;
	$2CEB42EA506575C40A71F14371F7D04D Tail;
};

/* 7145 */
struct _VPB
{
	__int16 Type;
	__int16 Size;
	unsigned __int16 Flags;
	unsigned __int16 VolumeLabelLength;
	_DEVICE_OBJECT *DeviceObject;
	_DEVICE_OBJECT *RealDevice;
	unsigned int SerialNumber;
	unsigned int ReferenceCount;
	wchar_t VolumeLabel[32];
};

/* 7213 */
struct _DEVOBJ_EXTENSION
{
	__int16 Type;
	unsigned __int16 Size;
	_DEVICE_OBJECT *DeviceObject;
};

/* 7101 */
struct _DRIVER_EXTENSION
{
	_DRIVER_OBJECT *DriverObject;
	int (__stdcall *AddDevice)(_DRIVER_OBJECT *, _DEVICE_OBJECT *);
	unsigned int Count;
	_UNICODE_STRING ServiceKeyName;
};

/* 7208 */
struct _FAST_IO_DISPATCH
{
	unsigned int SizeOfFastIoDispatch;
	char (__stdcall *FastIoCheckIfPossible)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, char, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoRead)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoWrite)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoQueryBasicInfo)(_FILE_OBJECT *, char, _FILE_BASIC_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoQueryStandardInfo)(_FILE_OBJECT *, char, _FILE_STANDARD_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoLock)(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, char, char, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoUnlockSingle)(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoUnlockAll)(_FILE_OBJECT *, struct _EPROCESS *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoUnlockAllByKey)(_FILE_OBJECT *, void *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoDeviceControl)(_FILE_OBJECT *, char, void *, unsigned int, void *, unsigned int, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	void (__stdcall *AcquireFileForNtCreateSection)(_FILE_OBJECT *);
	void (__stdcall *ReleaseFileForNtCreateSection)(_FILE_OBJECT *);
	void (__stdcall *FastIoDetachDevice)(_DEVICE_OBJECT *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoQueryNetworkOpenInfo)(_FILE_OBJECT *, char, _FILE_NETWORK_OPEN_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	int (__stdcall *AcquireForModWrite)(_FILE_OBJECT *, _LARGE_INTEGER *, _ERESOURCE **, _DEVICE_OBJECT *);
	char (__stdcall *MdlRead)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *MdlReadComplete)(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);
	char (__stdcall *PrepareMdlWrite)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);
	char (__stdcall *MdlWriteComplete)(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoReadCompressed)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);
	char (__stdcall *FastIoWriteCompressed)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);
	char (__stdcall *MdlReadCompleteCompressed)(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);
	char (__stdcall *MdlWriteCompleteCompressed)(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);
	char (__stdcall *FastIoQueryOpen)(_IRP *, _FILE_NETWORK_OPEN_INFORMATION *, _DEVICE_OBJECT *);
	int (__stdcall *ReleaseForModWrite)(_FILE_OBJECT *, _ERESOURCE *, _DEVICE_OBJECT *);
	int (__stdcall *AcquireForCcFlush)(_FILE_OBJECT *, _DEVICE_OBJECT *);
	int (__stdcall *ReleaseForCcFlush)(_FILE_OBJECT *, _DEVICE_OBJECT *);
};

/* 7118 */
struct _MDL
{
	_MDL *Next;
	__int16 Size;
	__int16 MdlFlags;
	struct _EPROCESS *Process;
	void *MappedSystemVa;
	void *StartVa;
	unsigned int ByteCount;
	unsigned int ByteOffset;
};

/* 7129 */
struct $68ECEC5AFE43FAE55B4B88283C74EEE1
{
	_IO_SECURITY_CONTEXT *SecurityContext;
	unsigned int Options;
	unsigned __int16 FileAttributes;
	unsigned __int16 ShareAccess;
	unsigned int EaLength;
};

/* 7130 */
struct $6AD2124E815728CE4B0FE22B9EAF81AC
{
	unsigned int Length;
	unsigned int Key;
	_LARGE_INTEGER ByteOffset;
};

/* 7131 */
struct $F7D254311ACFAD4152D2540485CB7D12
{
	unsigned int Length;
	_UNICODE_STRING *FileName;
	_FILE_INFORMATION_CLASS FileInformationClass;
	unsigned int FileIndex;
};

/* 7132 */
struct $50A7D1BFBD4B9BBEBCBBE3D92FEB6A61
{
	unsigned int Length;
	unsigned int CompletionFilter;
};

/* 7133 */
struct $13ACB7B891C4EBF02E05B42CDECE9FE0
{
	unsigned int Length;
	_FILE_INFORMATION_CLASS FileInformationClass;
};

/* 7134 */
struct $A08C4E4D68F10DE40516853589D2B735
{
	char ReplaceIfExists;
	char AdvanceOnly;
};

/* 7135 */
union $3144E2A6FD2A9EC2554236A518ECD79B
{
	$A08C4E4D68F10DE40516853589D2B735 __s0;
	unsigned int ClusterCount;
	void *DeleteHandle;
};

/* 7136 */
struct $72A4719310C3E7BAD215E37C4926E1D0
{
	unsigned int Length;
	_FILE_INFORMATION_CLASS FileInformationClass;
	_FILE_OBJECT *FileObject;
	$3144E2A6FD2A9EC2554236A518ECD79B ___u3;
};

/* 7137 */
struct $43049A1C9CD1076EE2F76BA56B9556D6
{
	unsigned int Length;
	void *EaList;
	unsigned int EaListLength;
	unsigned int EaIndex;
};

/* 7138 */
struct $44CAF4394294FD1AA9144BF9A47D2B76
{
	unsigned int Length;
};

/* 7139 */
struct $1943FDEADE10E7FD43B6CCE74CFA8530
{
	unsigned int Length;
	_FSINFOCLASS FsInformationClass;
};

/* 7140 */
struct $1452ECD7C6E5AB3C058EED8909EEC64B
{
	unsigned int OutputBufferLength;
	unsigned int InputBufferLength;
	unsigned int FsControlCode;
	void *Type3InputBuffer;
};

/* 7141 */
struct $71C8017C6722500DF24F47D244BE6BD5
{
	_LARGE_INTEGER *Length;
	unsigned int Key;
	_LARGE_INTEGER ByteOffset;
};

/* 7142 */
struct $343716E60DEC8CEA3C236115305CA9A5
{
	unsigned int OutputBufferLength;
	unsigned int InputBufferLength;
	unsigned int IoControlCode;
	void *Type3InputBuffer;
};

/* 7143 */
struct $79FAFD50642EF9FCAC6F48CCDD5826D7
{
	unsigned int SecurityInformation;
	unsigned int Length;
};

/* 7144 */
struct $29E784017BF8D630C3CED492840B3F1E
{
	unsigned int SecurityInformation;
	void *SecurityDescriptor;
};

/* 7146 */
struct $CA1983E80E7826480F34ABACBA328DDD
{
	_VPB *Vpb;
	_DEVICE_OBJECT *DeviceObject;
};

/* 7147 */
struct $B2B4984C7002DD41520623255E2F9497
{
	struct _SCSI_REQUEST_BLOCK *Srb;
};

/* 7148 */
struct $F26D5252B9CB0364A89F29DE5B8870AE
{
	unsigned int Length;
	void *StartSid;
	struct _FILE_GET_QUOTA_INFORMATION *SidList;
	unsigned int SidListLength;
};

/* 7149 */
struct $C1BC32858FB697884EDD4131EA6A233C
{
	_DEVICE_RELATION_TYPE Type;
};

/* 7151 */
struct $AC5E3F333293BEFD607F10AE2C7DE499
{
	_GUID *InterfaceType;
	unsigned __int16 Size;
	unsigned __int16 Version;
	_INTERFACE *Interface;
	void *InterfaceSpecificData;
};

/* 7153 */
struct $9AB950DD91FD6726B50B2987F0F2E4D9
{
	_DEVICE_CAPABILITIES *Capabilities;
};

/* 7167 */
struct $9048E4F482083714E5CEAAD6EA203EC5
{
	_IO_RESOURCE_REQUIREMENTS_LIST *IoResourceRequirementList;
};

/* 7168 */
struct $5E4425892CB91929A7D567B5DA0A3F92
{
	unsigned int WhichSpace;
	void *Buffer;
	unsigned int Offset;
	unsigned int Length;
};

/* 7169 */
struct $F39C847BB869FD7EF9D8E5470FAAB584
{
	char Lock;
};

/* 7170 */
struct $3426B4450FF6BD51568487A5BF2ED8D1
{
	BUS_QUERY_ID_TYPE IdType;
};

/* 7171 */
struct $3A06744509C760F19BA9A0740AAD834F
{
	DEVICE_TEXT_TYPE DeviceTextType;
	unsigned int LocaleId;
};

/* 7172 */
struct $0D0F0828677567129464EA9C35050DC9
{
	char InPath;
	char Reserved[3];
	_DEVICE_USAGE_NOTIFICATION_TYPE Type;
};

/* 7173 */
struct $11F4275C5C519326409AF4E80485B892
{
	_SYSTEM_POWER_STATE PowerState;
};

/* 7175 */
struct $9741F72EF71D4417833D7A34BBF15275
{
	_POWER_SEQUENCE *PowerSequence;
};

/* 7176 */
struct $76514DB155979F88E47E6F460A9859AB
{
	unsigned __int32 Reserved1 : 8;
	unsigned __int32 TargetSystemState : 4;
	unsigned __int32 EffectiveSystemState : 4;
	unsigned __int32 CurrentSystemState : 4;
	unsigned __int32 IgnoreHibernationPath : 1;
	unsigned __int32 PseudoTransition : 1;
	unsigned __int32 Reserved2 : 10;
};

/* 7177 */
union $2EB688F32BA5A5B6D22BDCFDF30F472A
{
	$76514DB155979F88E47E6F460A9859AB __s0;
	unsigned int ContextAsUlong;
};

/* 7178 */
struct _SYSTEM_POWER_STATE_CONTEXT
{
	$2EB688F32BA5A5B6D22BDCFDF30F472A ___u0;
};

/* 7180 */
union $C3C68634690CED277417BAC5A218CEE2
{
	unsigned int SystemContext;
	_SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
};

/* 7179 */
union _POWER_STATE
{
	_SYSTEM_POWER_STATE SystemState;
	_DEVICE_POWER_STATE DeviceState;
};

/* 7181 */
struct $2F64836CF81F64C1630E1069FCF6BD38
{
	$C3C68634690CED277417BAC5A218CEE2 ___u0;
	_POWER_STATE_TYPE Type;
	_POWER_STATE State;
	POWER_ACTION ShutdownType;
};

/* 7198 */
struct $717697D885173FA8F0E9E404355E3BFC
{
	_CM_RESOURCE_LIST *AllocatedResources;
	_CM_RESOURCE_LIST *AllocatedResourcesTranslated;
};

/* 7199 */
struct $27D1A893733DBE62F2FCC36974CB79FA
{
	unsigned int ProviderId;
	void *DataPath;
	unsigned int BufferSize;
	void *Buffer;
};

/* 7200 */
struct $228F32E73A128818A25FF1959272C294
{
	void *Argument1;
	void *Argument2;
	void *Argument3;
	void *Argument4;
};

/* 7201 */
union $85E713F93DF929DF6B66275289C5BE29
{
	$68ECEC5AFE43FAE55B4B88283C74EEE1 Create;
	$6AD2124E815728CE4B0FE22B9EAF81AC Read;
	$6AD2124E815728CE4B0FE22B9EAF81AC Write;
	$F7D254311ACFAD4152D2540485CB7D12 QueryDirectory;
	$50A7D1BFBD4B9BBEBCBBE3D92FEB6A61 NotifyDirectory;
	$13ACB7B891C4EBF02E05B42CDECE9FE0 QueryFile;
	$72A4719310C3E7BAD215E37C4926E1D0 SetFile;
	$43049A1C9CD1076EE2F76BA56B9556D6 QueryEa;
	$44CAF4394294FD1AA9144BF9A47D2B76 SetEa;
	$1943FDEADE10E7FD43B6CCE74CFA8530 QueryVolume;
	$1943FDEADE10E7FD43B6CCE74CFA8530 SetVolume;
	$1452ECD7C6E5AB3C058EED8909EEC64B FileSystemControl;
	$71C8017C6722500DF24F47D244BE6BD5 LockControl;
	$343716E60DEC8CEA3C236115305CA9A5 DeviceIoControl;
	$79FAFD50642EF9FCAC6F48CCDD5826D7 QuerySecurity;
	$29E784017BF8D630C3CED492840B3F1E SetSecurity;
	$CA1983E80E7826480F34ABACBA328DDD MountVolume;
	$CA1983E80E7826480F34ABACBA328DDD VerifyVolume;
	$B2B4984C7002DD41520623255E2F9497 Scsi;
	$F26D5252B9CB0364A89F29DE5B8870AE QueryQuota;
	$44CAF4394294FD1AA9144BF9A47D2B76 SetQuota;
	$C1BC32858FB697884EDD4131EA6A233C QueryDeviceRelations;
	$AC5E3F333293BEFD607F10AE2C7DE499 QueryInterface;
	$9AB950DD91FD6726B50B2987F0F2E4D9 DeviceCapabilities;
	$9048E4F482083714E5CEAAD6EA203EC5 FilterResourceRequirements;
	$5E4425892CB91929A7D567B5DA0A3F92 ReadWriteConfig;
	$F39C847BB869FD7EF9D8E5470FAAB584 SetLock;
	$3426B4450FF6BD51568487A5BF2ED8D1 QueryId;
	$3A06744509C760F19BA9A0740AAD834F QueryDeviceText;
	$0D0F0828677567129464EA9C35050DC9 UsageNotification;
	$11F4275C5C519326409AF4E80485B892 WaitWake;
	$9741F72EF71D4417833D7A34BBF15275 PowerSequence;
	$2F64836CF81F64C1630E1069FCF6BD38 Power;
	$717697D885173FA8F0E9E404355E3BFC StartDevice;
	$27D1A893733DBE62F2FCC36974CB79FA WMI;
	$228F32E73A128818A25FF1959272C294 Others;
};

/* 7202 */
struct __unaligned __declspec(align(4)) _IO_STACK_LOCATION
{
	char MajorFunction;
	char MinorFunction;
	char Flags;
	char Control;
	$85E713F93DF929DF6B66275289C5BE29 Parameters;
	_DEVICE_OBJECT *DeviceObject;
	_FILE_OBJECT *FileObject;
	int (__stdcall *CompletionRoutine)(_DEVICE_OBJECT *, _IRP *, void *);
	void *Context;
};

/* 7102 */
struct _FILE_OBJECT
{
	__int16 Type;
	__int16 Size;
	_DEVICE_OBJECT *DeviceObject;
	_VPB *Vpb;
	void *FsContext;
	void *FsContext2;
	_SECTION_OBJECT_POINTERS *SectionObjectPointer;
	void *PrivateCacheMap;
	int FinalStatus;
	_FILE_OBJECT *RelatedFileObject;
	char LockOperation;
	char DeletePending;
	char ReadAccess;
	char WriteAccess;
	char DeleteAccess;
	char SharedRead;
	char SharedWrite;
	char SharedDelete;
	unsigned int Flags;
	_UNICODE_STRING FileName;
	_LARGE_INTEGER CurrentByteOffset;
	unsigned int Waiters;
	unsigned int Busy;
	void *LastLock;
	_KEVENT Lock;
	_KEVENT Event;
	_IO_COMPLETION_CONTEXT *CompletionContext;
	unsigned int IrpListLock;
	_LIST_ENTRY IrpList;
	void *FileObjectExtension;
};

/* 7105 */
struct __declspec(align(8)) _FILE_BASIC_INFORMATION
{
	_LARGE_INTEGER CreationTime;
	_LARGE_INTEGER LastAccessTime;
	_LARGE_INTEGER LastWriteTime;
	_LARGE_INTEGER ChangeTime;
	unsigned int FileAttributes;
};

/* 7106 */
struct __declspec(align(4)) _FILE_STANDARD_INFORMATION
{
	_LARGE_INTEGER AllocationSize;
	_LARGE_INTEGER EndOfFile;
	unsigned int NumberOfLinks;
	char DeletePending;
	char Directory;
};

/* 7107 */
struct __declspec(align(8)) _FILE_NETWORK_OPEN_INFORMATION
{
	_LARGE_INTEGER CreationTime;
	_LARGE_INTEGER LastAccessTime;
	_LARGE_INTEGER LastWriteTime;
	_LARGE_INTEGER ChangeTime;
	_LARGE_INTEGER AllocationSize;
	_LARGE_INTEGER EndOfFile;
	unsigned int FileAttributes;
};

/* 7116 */
union $B8D4EB9E6E3D1A926634FE9A5064A2BB
{
	void *Address;
	unsigned int CreatorBackTraceIndex;
};

/* 7117 */
struct _ERESOURCE
{
	_LIST_ENTRY SystemResourcesList;
	_OWNER_ENTRY *OwnerTable;
	__int16 ActiveCount;
	unsigned __int16 Flag;
	_KSEMAPHORE *SharedWaiters;
	_KEVENT *ExclusiveWaiters;
	_OWNER_ENTRY OwnerEntry;
	unsigned int ActiveEntries;
	unsigned int ContentionCount;
	unsigned int NumberOfSharedWaiters;
	unsigned int NumberOfExclusiveWaiters;
	$B8D4EB9E6E3D1A926634FE9A5064A2BB ___u11;
	unsigned int SpinLock;
};

/* 7128 */
struct _IO_SECURITY_CONTEXT
{
	_SECURITY_QUALITY_OF_SERVICE *SecurityQos;
	_ACCESS_STATE *AccessState;
	unsigned int DesiredAccess;
	unsigned int FullCreateOptions;
};

/* 7150 */
struct _INTERFACE
{
	unsigned __int16 Size;
	unsigned __int16 Version;
	void *Context;
	void (__stdcall *InterfaceReference)(void *);
	void (__stdcall *InterfaceDereference)(void *);
};

/* 7152 */
struct _DEVICE_CAPABILITIES
{
	unsigned __int16 Size;
	unsigned __int16 Version;
	unsigned __int32 DeviceD1 : 1;
	unsigned __int32 DeviceD2 : 1;
	unsigned __int32 LockSupported : 1;
	unsigned __int32 EjectSupported : 1;
	unsigned __int32 Removable : 1;
	unsigned __int32 DockDevice : 1;
	unsigned __int32 UniqueID : 1;
	unsigned __int32 SilentInstall : 1;
	unsigned __int32 RawDeviceOK : 1;
	unsigned __int32 SurpriseRemovalOK : 1;
	unsigned __int32 WakeFromD0 : 1;
	unsigned __int32 WakeFromD1 : 1;
	unsigned __int32 WakeFromD2 : 1;
	unsigned __int32 WakeFromD3 : 1;
	unsigned __int32 HardwareDisabled : 1;
	unsigned __int32 NonDynamic : 1;
	unsigned __int32 WarmEjectSupported : 1;
	unsigned __int32 NoDisplayInUI : 1;
	unsigned __int32 Reserved : 14;
	unsigned int Address;
	unsigned int UINumber;
	_DEVICE_POWER_STATE DeviceState[7];
	_SYSTEM_POWER_STATE SystemWake;
	_DEVICE_POWER_STATE DeviceWake;
	unsigned int D1Latency;
	unsigned int D2Latency;
	unsigned int D3Latency;
};

/* 7154 */
struct $7BBA01FA93023ED5FB117394AFBB4B01
{
	unsigned int Length;
	unsigned int Alignment;
	_LARGE_INTEGER MinimumAddress;
	_LARGE_INTEGER MaximumAddress;
};

/* 7155 */
struct $51A28082B43ED80BBDB11BBD1CAEDCBE
{
	unsigned int MinimumVector;
	unsigned int MaximumVector;
	_IRQ_DEVICE_POLICY AffinityPolicy;
	_IRQ_PRIORITY PriorityPolicy;
	unsigned int TargetedProcessors;
};

/* 7156 */
struct $290D34FD7868E94AFEC0383C08CB9B28
{
	unsigned int MinimumChannel;
	unsigned int MaximumChannel;
};

/* 7157 */
struct $B14DB811EDFC1214B110A98B000FF49B
{
	unsigned int Data[3];
};

/* 7158 */
struct $CF7D779FCF8501AF42168A39ACA3AE76
{
	unsigned int Length;
	unsigned int MinBusNumber;
	unsigned int MaxBusNumber;
	unsigned int Reserved;
};

/* 7159 */
struct $5D61DD2957AFDEE7ED67BD2EDF2BEA99
{
	unsigned int Priority;
	unsigned int Reserved1;
	unsigned int Reserved2;
};

/* 7160 */
struct $B699770C38D393939C7638C7CF45F9B4
{
	unsigned int Length40;
	unsigned int Alignment40;
	_LARGE_INTEGER MinimumAddress;
	_LARGE_INTEGER MaximumAddress;
};

/* 7161 */
struct $C7A90BA19AE7C2263529F1234CC33956
{
	unsigned int Length48;
	unsigned int Alignment48;
	_LARGE_INTEGER MinimumAddress;
	_LARGE_INTEGER MaximumAddress;
};

/* 7162 */
struct $858C71E05329CCC77490EB649E285A6F
{
	unsigned int Length64;
	unsigned int Alignment64;
	_LARGE_INTEGER MinimumAddress;
	_LARGE_INTEGER MaximumAddress;
};

/* 7163 */
union $4390CF774BA5476F2E0CA6CA061295A6
{
	$7BBA01FA93023ED5FB117394AFBB4B01 Port;
	$7BBA01FA93023ED5FB117394AFBB4B01 Memory;
	$51A28082B43ED80BBDB11BBD1CAEDCBE Interrupt;
	$290D34FD7868E94AFEC0383C08CB9B28 Dma;
	$7BBA01FA93023ED5FB117394AFBB4B01 Generic;
	$B14DB811EDFC1214B110A98B000FF49B DevicePrivate;
	$CF7D779FCF8501AF42168A39ACA3AE76 BusNumber;
	$5D61DD2957AFDEE7ED67BD2EDF2BEA99 ConfigData;
	$B699770C38D393939C7638C7CF45F9B4 Memory40;
	$C7A90BA19AE7C2263529F1234CC33956 Memory48;
	$858C71E05329CCC77490EB649E285A6F Memory64;
};

/* 7164 */
struct _IO_RESOURCE_DESCRIPTOR
{
	char Option;
	char Type;
	char ShareDisposition;
	char Spare1;
	unsigned __int16 Flags;
	unsigned __int16 Spare2;
	$4390CF774BA5476F2E0CA6CA061295A6 u;
};

/* 7165 */
struct _IO_RESOURCE_LIST
{
	unsigned __int16 Version;
	unsigned __int16 Revision;
	unsigned int Count;
	_IO_RESOURCE_DESCRIPTOR Descriptors[1];
};

/* 7166 */
struct _IO_RESOURCE_REQUIREMENTS_LIST
{
	unsigned int ListSize;
	_INTERFACE_TYPE InterfaceType;
	unsigned int BusNumber;
	unsigned int SlotNumber;
	unsigned int Reserved[3];
	unsigned int AlternativeLists;
	_IO_RESOURCE_LIST List[1];
};

/* 7174 */
struct _POWER_SEQUENCE
{
	unsigned int SequenceD1;
	unsigned int SequenceD2;
	unsigned int SequenceD3;
};

/* 7182 */
struct __unaligned __declspec(align(4)) $7A5E2A5416B1E0B54EE684566A609384
{
	_LARGE_INTEGER Start;
	unsigned int Length;
};

/* 7183 */
struct $B56176FCA237C2B0A687F85299143576
{
	unsigned int Level;
	unsigned int Vector;
	unsigned int Affinity;
};

/* 7184 */
struct $7AC00411D044B43A85AFD80B1CBC99F4
{
	unsigned __int16 Reserved;
	unsigned __int16 MessageCount;
	unsigned int Vector;
	unsigned int Affinity;
};

/* 7185 */
union $B1290BE8F20D59E71FC729809FA31EA9
{
	$7AC00411D044B43A85AFD80B1CBC99F4 Raw;
	$B56176FCA237C2B0A687F85299143576 Translated;
};

/* 7186 */
struct $5B28CE291809AD442B7EA85C764FB30E
{
	$B1290BE8F20D59E71FC729809FA31EA9 ___u0;
};

/* 7187 */
struct $72748C417E05990EBECC6BB8D043D8B0
{
	unsigned int Channel;
	unsigned int Port;
	unsigned int Reserved1;
};

/* 7188 */
struct $6C467299E1DD150E8FDAFB428553E9E9
{
	unsigned int Start;
	unsigned int Length;
	unsigned int Reserved;
};

/* 7189 */
struct $D735038633D506DCA1748B01FF7747C2
{
	unsigned int DataSize;
	unsigned int Reserved1;
	unsigned int Reserved2;
};

/* 7190 */
struct __unaligned __declspec(align(4)) $735AB889EA91B930628049452C8E5F99
{
	_LARGE_INTEGER Start;
	unsigned int Length40;
};

/* 7191 */
struct __unaligned __declspec(align(4)) $4B2DF844A0CEA77DEA06B2E0C346E902
{
	_LARGE_INTEGER Start;
	unsigned int Length48;
};

/* 7192 */
struct __unaligned __declspec(align(4)) $EBDE46F2E2C4520757F9FEBC13D244B1
{
	_LARGE_INTEGER Start;
	unsigned int Length64;
};

/* 7193 */
union $CA209DBFD65B4D2BD6BDFD6832C48887
{
	$7A5E2A5416B1E0B54EE684566A609384 Generic;
	$7A5E2A5416B1E0B54EE684566A609384 Port;
	$B56176FCA237C2B0A687F85299143576 Interrupt;
	$5B28CE291809AD442B7EA85C764FB30E MessageInterrupt;
	$7A5E2A5416B1E0B54EE684566A609384 Memory;
	$72748C417E05990EBECC6BB8D043D8B0 Dma;
	$B14DB811EDFC1214B110A98B000FF49B DevicePrivate;
	$6C467299E1DD150E8FDAFB428553E9E9 BusNumber;
	$D735038633D506DCA1748B01FF7747C2 DeviceSpecificData;
	$735AB889EA91B930628049452C8E5F99 Memory40;
	$4B2DF844A0CEA77DEA06B2E0C346E902 Memory48;
	$EBDE46F2E2C4520757F9FEBC13D244B1 Memory64;
};

/* 7194 */
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
	char Type;
	char ShareDisposition;
	unsigned __int16 Flags;
	$CA209DBFD65B4D2BD6BDFD6832C48887 u;
};

/* 7195 */
struct _CM_PARTIAL_RESOURCE_LIST
{
	unsigned __int16 Version;
	unsigned __int16 Revision;
	unsigned int Count;
	_CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
};

/* 7196 */
struct _CM_FULL_RESOURCE_DESCRIPTOR
{
	_INTERFACE_TYPE InterfaceType;
	unsigned int BusNumber;
	_CM_PARTIAL_RESOURCE_LIST PartialResourceList;
};

/* 7197 */
struct _CM_RESOURCE_LIST
{
	unsigned int Count;
	_CM_FULL_RESOURCE_DESCRIPTOR List[1];
};

/* 7214 */
struct _SECTION_OBJECT_POINTERS
{
	void *DataSectionObject;
	void *SharedCacheMap;
	void *ImageSectionObject;
};

/* 7215 */
struct _IO_COMPLETION_CONTEXT
{
	void *Port;
	void *Key;
};

/* 7114 */
struct _KSEMAPHORE
{
	_DISPATCHER_HEADER Header;
	int Limit;
};

/* 7125 */
struct _SECURITY_SUBJECT_CONTEXT
{
	void *ClientToken;
	_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	void *PrimaryToken;
	void *ProcessAuditId;
};

/* 7126 */
union $DD9E6D47003F39A0F494CA3C4D4FF3DF
{
	_INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
	_PRIVILEGE_SET PrivilegeSet;
};

/* 7127 */
struct _ACCESS_STATE
{
	_LUID OperationID;
	char SecurityEvaluated;
	char GenerateAudit;
	char GenerateOnClose;
	char PrivilegesAllocated;
	unsigned int Flags;
	unsigned int RemainingDesiredAccess;
	unsigned int PreviouslyGrantedAccess;
	unsigned int OriginalDesiredAccess;
	_SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
	void *SecurityDescriptor;
	void *AuxData;
	$DD9E6D47003F39A0F494CA3C4D4FF3DF Privileges;
	char AuditPrivileges;
	_UNICODE_STRING ObjectName;
	_UNICODE_STRING ObjectTypeName;
};

/* 7216 */
struct _STRING
{
	unsigned __int16 Length;
	unsigned __int16 MaximumLength;
	char *Buffer;
};

/* 7217 */
struct __declspec(align(2)) FWPS_IPSEC_SPECIFIC_TUPLES0_
{
	unsigned __int16 localPort;
	unsigned __int16 remotePort;
	char ipProtocol;
};

/* 7218 */
struct $2EC0619BD80986F3D0F6014BDA99AA61
{
	__int8 Length : 5;
	__int8 BroadcastIndicator : 3;
	__int8 Direction : 1;
};

/* 7219 */
union $32228DFA907734C38E4C020369E6B433
{
	$2EC0619BD80986F3D0F6014BDA99AA61 __s0;
	char Bil;
};

/* 7220 */
struct $A1BF081EDBF32169482AA86497E21EF9
{
	_BYTE gap0[1];
	char Dlf;
};

/* 7221 */
struct $7F03B33FB1E09BD9DAA1FCDEC3936AC9
{
	_BYTE gap0[1];
	unsigned __int8 : 1;
	__int8 LargestFrame : 4;
	__int8 Reserved : 3;
};

/* 7222 */
union $51A64DD1FBFE19C2B2830F78E6D79EF1
{
	$32228DFA907734C38E4C020369E6B433 ___u0;
	$A1BF081EDBF32169482AA86497E21EF9 __s1;
	$7F03B33FB1E09BD9DAA1FCDEC3936AC9 __s2;
};

/* 7223 */
struct _SOURCEROUTE_HEADER
{
	$51A64DD1FBFE19C2B2830F78E6D79EF1 ___u0;
	unsigned __int16 Rd[];
};

/* 7225 */
union $618DA8ADB1B9E18AC65EFDACAD7BB79F
{
	_SLIST_HEADER ListHead;
	_SINGLE_LIST_ENTRY SingleListHead;
};

/* 7226 */
union $9D02AA4AC86E49CEAF084B97B97744B1
{
	unsigned int AllocateMisses;
	unsigned int AllocateHits;
};

/* 7227 */
union $4290DA71080BA5C562B380EC38D3C295
{
	unsigned int FreeMisses;
	unsigned int FreeHits;
};

/* 7228 */
union $827313E80EA768E7300E5FECAF731B2E
{
	void *(__stdcall *AllocateEx)(_POOL_TYPE, unsigned int, unsigned int, _LOOKASIDE_LIST_EX *);
	void *(__stdcall *Allocate)(_POOL_TYPE, unsigned int, unsigned int);
};

/* 7229 */
union $A906A885D4BFAE6A2147DEFC8688E824
{
	void (__stdcall *FreeEx)(void *, _LOOKASIDE_LIST_EX *);
	void (__stdcall *Free)(void *);
};

/* 7230 */
union $BA67176EA55FA2D963EA02A98A2C99D2
{
	unsigned int LastAllocateMisses;
	unsigned int LastAllocateHits;
};

/* 7231 */
struct _GENERAL_LOOKASIDE_POOL
{
	$618DA8ADB1B9E18AC65EFDACAD7BB79F ___u0;
	unsigned __int16 Depth;
	unsigned __int16 MaximumDepth;
	unsigned int TotalAllocates;
	$9D02AA4AC86E49CEAF084B97B97744B1 ___u4;
	unsigned int TotalFrees;
	$4290DA71080BA5C562B380EC38D3C295 ___u6;
	_POOL_TYPE Type;
	unsigned int Tag;
	unsigned int Size;
	$827313E80EA768E7300E5FECAF731B2E ___u10;
	$A906A885D4BFAE6A2147DEFC8688E824 ___u11;
	_LIST_ENTRY ListEntry;
	unsigned int LastTotalAllocates;
	$BA67176EA55FA2D963EA02A98A2C99D2 ___u14;
	unsigned int Future[2];
};

/* 7224 */
struct _LOOKASIDE_LIST_EX
{
	_GENERAL_LOOKASIDE_POOL L;
};

/* 7232 */
struct __declspec(align(64)) _PPL_LOOKASIDE_LIST
{
	_LOOKASIDE_LIST_EX List;
	_LOOKASIDE_LIST_EX *BackendList;
};

/* 7233 */
struct _GENERAL_LOOKASIDE
{
	$618DA8ADB1B9E18AC65EFDACAD7BB79F ___u0;
	unsigned __int16 Depth;
	unsigned __int16 MaximumDepth;
	unsigned int TotalAllocates;
	$9D02AA4AC86E49CEAF084B97B97744B1 ___u4;
	unsigned int TotalFrees;
	$4290DA71080BA5C562B380EC38D3C295 ___u6;
	_POOL_TYPE Type;
	unsigned int Tag;
	unsigned int Size;
	$827313E80EA768E7300E5FECAF731B2E ___u10;
	$A906A885D4BFAE6A2147DEFC8688E824 ___u11;
	_LIST_ENTRY ListEntry;
	unsigned int LastTotalAllocates;
	$BA67176EA55FA2D963EA02A98A2C99D2 ___u14;
	unsigned int Future[2];
};

/* 7234 */
struct _FAST_MUTEX
{
	volatile int Count;
	struct _KTHREAD *Owner;
	unsigned int Contention;
	_KEVENT Gate;
	unsigned int OldIrql;
};

/* 7235 */
struct _PAGED_LOOKASIDE_LIST
{
	_GENERAL_LOOKASIDE L;
	_FAST_MUTEX Lock__ObsoleteButDoNotDelete;
};

/* 7236 */
struct _TXN_PARAMETER_BLOCK
{
	unsigned __int16 Length;
	unsigned __int16 TxFsContext;
	void *TransactionObject;
};

/* 7237 */
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
	_LIST_ENTRY Linkage;
	unsigned int Signature;
};

/* 7238 */
struct $7AB0461A727F28B9D4873A511C9F9EFB
{
	unsigned __int64 Signature : 16;
	unsigned __int64 Length : 24;
	unsigned __int64 Identifier : 16;
	unsigned __int64 Attributes : 2;
	unsigned __int64 DoNotLog : 1;
	unsigned __int64 Reserved : 5;
};

/* 7239 */
union _WHEA_PERSISTENCE_INFO
{
	$7AB0461A727F28B9D4873A511C9F9EFB __s0;
	unsigned __int64 AsULONGLONG;
};

/* 7250 */
struct $991BC9F65DEDDAF9973CE7D5A5A18A0F
{
	_NET_BUFFER_LIST *Next;
	_NET_BUFFER *FirstNetBuffer;
};

/* 7251 */
union $63378EA214E66268BB9255D4A9F6B610
{
	$991BC9F65DEDDAF9973CE7D5A5A18A0F __s0;
	_SLIST_HEADER Link;
};

/* 7240 */
struct _NET_BUFFER_LIST
{
	$63378EA214E66268BB9255D4A9F6B610 ___u0;
	_NET_BUFFER_LIST_CONTEXT *Context;
	_NET_BUFFER_LIST *ParentNetBufferList;
	void *NdisPoolHandle;
	__declspec(align(8)) void *NdisReserved[2];
	void *ProtocolReserved[4];
	void *MiniportReserved[2];
	void *Scratch;
	void *SourceHandle;
	unsigned int NblFlags;
	int ChildRefCount;
	unsigned int Flags;
	int Status;
	void *NetBufferListInfo[17];
};

/* 7245 */
struct $240C0CCEB0BBED6B931FEF74F1DE9434
{
	_NET_BUFFER *Next;
	_MDL *CurrentMdl;
};

/* 7246 */
union $55B348045B3DDCF6C4A28E77DA0D2E63
{
	$240C0CCEB0BBED6B931FEF74F1DE9434 __s0;
	_SLIST_HEADER Link;
};

/* 7247 */
union $8FD4E5FE6EF5F441EE4404416B4B7C68
{
	unsigned int DataLength;
	unsigned int stDataLength;
};

/* 7248 */
union $686D77DEADFBDFF481EBCABBAE25C547
{
	_NET_BUFFER_SHARED_MEMORY *SharedMemoryInfo;
	_SCATTER_GATHER_LIST *ScatterGatherList;
};

/* 7241 */
struct __declspec(align(8)) _NET_BUFFER
{
	$55B348045B3DDCF6C4A28E77DA0D2E63 ___u0;
	unsigned int CurrentMdlOffset;
	$8FD4E5FE6EF5F441EE4404416B4B7C68 ___u2;
	_MDL *MdlChain;
	unsigned int DataOffset;
	unsigned __int16 ChecksumBias;
	unsigned __int16 Reserved;
	void *NdisPoolHandle;
	void *NdisReserved[2];
	void *ProtocolReserved[6];
	void *MiniportReserved[4];
	_LARGE_INTEGER DataPhysicalAddress;
	$686D77DEADFBDFF481EBCABBAE25C547 ___u12;
};

/* 7249 */
struct _NET_BUFFER_LIST_CONTEXT
{
	_NET_BUFFER_LIST_CONTEXT *Next;
	unsigned __int16 Size;
	unsigned __int16 Offset;
	char ContextData[];
};

/* 7242 */
struct _NET_BUFFER_SHARED_MEMORY
{
	_NET_BUFFER_SHARED_MEMORY *NextSharedMemorySegment;
	unsigned int SharedMemoryFlags;
	void *SharedMemoryHandle;
	unsigned int SharedMemoryOffset;
	unsigned int SharedMemoryLength;
};

/* 7243 */
struct _SCATTER_GATHER_ELEMENT
{
	_LARGE_INTEGER Address;
	unsigned int Length;
	unsigned int Reserved;
};

/* 7244 */
struct _SCATTER_GATHER_LIST
{
	unsigned int NumberOfElements;
	unsigned int Reserved;
	_SCATTER_GATHER_ELEMENT Elements[];
};

/* 7252 */
struct ALE_IPSEC_CONTEXT_
{
	void *extensibleContext;
	unsigned __int64 ipsecInboundFilterId;
	unsigned __int64 lastAcquireTimeStamp;
	unsigned int preferredInboundSASpi;
	unsigned int preferredInboundTunnelSASpi;
	unsigned int flags;
	FWPS_IPSEC_SPECIFIC_TUPLES0_ specificTuples;
	unsigned __int64 mmSaId;
	unsigned __int64 qmSaId;
	_GUID saLookupContext;
	_ALE_PEER_TOKENS *peerTokenInformation;
	struct _ALE_PEER_INFORMATION *peerInformation;
	unsigned int queryMask;
	unsigned int ipsecStatus;
};

/* 7253 */
struct FWPP_PACKET_INJECTOR_INFO_
{
	void *injectionHandle;
	void *injectionContext;
};

/* 7254 */
struct IPSEC_VIRTUAL_IF_TUNNEL_INFO0_
{
	unsigned __int64 virtualIfTunnelId;
	unsigned __int64 trafficSelectorId;
};

/* 7255 */
union $B9960C94E5C7440AAD123E054833A0D8
{
	char ipv6FirstFragHeader[128];
	char ipv4FirstFragHeader[20];
};

/* 7256 */
struct FWPP_NBL_INJECTION_CONTEXT_
{
	FWPS_NET_BUFFER_LIST_TYPE_ nblType;
	_NET_BUFFER_LIST *parentFragmentNblChain;
	IPPROTO ipVersion;
	$B9960C94E5C7440AAD123E054833A0D8 ___u3;
	char *ipv6FirstFragHeaderAlloc;
	unsigned int ipv6FirstFragHeaderSize;
	int stackContextInitialized;
	int deepClone;
	ALE_IPSEC_CONTEXT_ ipSecContext;
	struct _NL_LOCAL_ADDRESS *epochLocalAddress;
	unsigned __int16 epochLocalPort;
	struct _ENDPOINT_CONTEXT *epochEndpointContext;
	FWPP_PACKET_INJECTOR_INFO_ *injectorInfo;
	unsigned int *ipsecContextType;
	unsigned int ipsecContextTypeStorage;
	int referenceCount;
	IPSEC_VIRTUAL_IF_TUNNEL_INFO0_ virtualIfTunnelInfo;
};

/* 7257 */
struct WFP_NBL_INFO_CONTAINER_
{
	FWPP_NBL_INJECTION_CONTEXT_ *injectionCtxt;
	FWPP_NBL_TAGGED_CONTEXT_ *taggedContexts;
	void *ipsecCtxt;
};

/* 7258 */
struct $3EBF2C50350853523070F2D571BF0F6F
{
	__int8 Group : 1;
	__int8 Local : 1;
};

/* 7259 */
union _DL_OUI
{
	char Byte[3];
	$3EBF2C50350853523070F2D571BF0F6F __s1;
};

/* 7260 */
struct _EVENT_DESCRIPTOR
{
	unsigned __int16 Id;
	char Version;
	char Channel;
	char Level;
	char Opcode;
	unsigned __int16 Task;
	unsigned __int64 Keyword;
};

/* 7261 */
struct $4A5F1B35252BFCEE800BB0A07201DB1F
{
	char MinorRevision;
	char MajorRevision;
};

/* 7262 */
union _WHEA_REVISION
{
	$4A5F1B35252BFCEE800BB0A07201DB1F __s0;
	unsigned __int16 AsUSHORT;
};

/* 7263 */
struct $303239889594314C554CBA593C88201B
{
	unsigned __int32 PlatformId : 1;
	unsigned __int32 Timestamp : 1;
	unsigned __int32 PartitionId : 1;
	unsigned __int32 Reserved : 29;
};

/* 7264 */
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
	$303239889594314C554CBA593C88201B __s0;
	unsigned int AsULONG;
};

/* 7265 */
struct $0E69AD184FCFEB7998E3B897182A8ACD
{
	unsigned __int64 Seconds : 8;
	unsigned __int64 Minutes : 8;
	unsigned __int64 Hours : 8;
	unsigned __int64 Precise : 1;
	unsigned __int64 Reserved : 7;
	unsigned __int64 Day : 8;
	unsigned __int64 Month : 8;
	unsigned __int64 Year : 8;
	unsigned __int64 Century : 8;
};

/* 7266 */
union _WHEA_TIMESTAMP
{
	$0E69AD184FCFEB7998E3B897182A8ACD __s0;
	_LARGE_INTEGER AsLARGE_INTEGER;
};

/* 7267 */
struct $437784891AA9E873707BAF02F9C8B216
{
	unsigned __int32 Recovered : 1;
	unsigned __int32 PreviousError : 1;
	unsigned __int32 Simulated : 1;
	unsigned __int32 Reserved : 29;
};

/* 7268 */
union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
	$437784891AA9E873707BAF02F9C8B216 __s0;
	unsigned int AsULONG;
};

/* 7269 */
struct _WHEA_ERROR_RECORD_HEADER
{
	unsigned int Signature;
	_WHEA_REVISION Revision;
	__unaligned __declspec(align(1)) unsigned int SignatureEnd;
	unsigned __int16 SectionCount;
	_WHEA_ERROR_SEVERITY Severity;
	_WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
	unsigned int Length;
	_WHEA_TIMESTAMP Timestamp;
	_GUID PlatformId;
	_GUID PartitionId;
	_GUID CreatorId;
	_GUID NotifyType;
	unsigned __int64 RecordId;
	_WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
	__unaligned __declspec(align(1)) _WHEA_PERSISTENCE_INFO PersistenceInfo;
	char Reserved[12];
};

/* 7270 */
struct $9E3BDF483767D1858B3449DAFFBAF238
{
	__int8 FRUId : 1;
	__int8 FRUText : 1;
	__int8 Reserved : 6;
};

/* 7271 */
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
	$9E3BDF483767D1858B3449DAFFBAF238 __s0;
	char AsUCHAR;
};

/* 7272 */
struct $EBBD5017D96525D77178BA3E4B036D03
{
	unsigned __int32 Primary : 1;
	unsigned __int32 ContainmentWarning : 1;
	unsigned __int32 Reset : 1;
	unsigned __int32 ThresholdExceeded : 1;
	unsigned __int32 ResourceNotAvailable : 1;
	unsigned __int32 LatentError : 1;
	unsigned __int32 Reserved : 26;
};

/* 7273 */
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
	$EBBD5017D96525D77178BA3E4B036D03 __s0;
	unsigned int AsULONG;
};

/* 7274 */
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
	unsigned int SectionOffset;
	unsigned int SectionLength;
	_WHEA_REVISION Revision;
	_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
	char Reserved;
	_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
	_GUID SectionType;
	_GUID FRUId;
	_WHEA_ERROR_SEVERITY SectionSeverity;
	char FRUText[20];
};

/* 7275 */
struct _WHEA_ERROR_RECORD
{
	_WHEA_ERROR_RECORD_HEADER Header;
	_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
};

/* 7276 */
struct $3FFA74047526058133F7FE8CD5EF9518
{
	__int8 HeaderLength : 4;
	__int8 Version : 4;
};

/* 7277 */
union $436C4E36B196BED1F70A4282E2C4F839
{
	char VersionAndHeaderLength;
	$3FFA74047526058133F7FE8CD5EF9518 __s1;
};

/* 7278 */
struct $6E6BD4033FC585FAC47FECF35B1B14F7
{
	__int8 EcnField : 2;
	__int8 TypeOfService : 6;
};

/* 7279 */
union $779BDDE2EF84D962BD00E7CF669DBC94
{
	char TypeOfServiceAndEcnField;
	$6E6BD4033FC585FAC47FECF35B1B14F7 __s1;
};

/* 7280 */
struct $F11B15A51CFFCDAB5E9FFF0D1A58CBE8
{
	unsigned __int16 DontUse1 : 5;
	unsigned __int16 MoreFragments : 1;
	unsigned __int16 DontFragment : 1;
	unsigned __int16 Reserved : 1;
	unsigned __int16 DontUse2 : 8;
};

/* 7281 */
union $80F4F1E7417B88DDA31487D7F8C25D27
{
	unsigned __int16 FlagsAndOffset;
	$F11B15A51CFFCDAB5E9FFF0D1A58CBE8 __s1;
};

/* 7282 */
struct _IPV4_HEADER
{
	$436C4E36B196BED1F70A4282E2C4F839 ___u0;
	$779BDDE2EF84D962BD00E7CF669DBC94 ___u1;
	unsigned __int16 TotalLength;
	unsigned __int16 Identification;
	$80F4F1E7417B88DDA31487D7F8C25D27 ___u4;
	char TimeToLive;
	char Protocol;
	unsigned __int16 HeaderChecksum;
	in_addr SourceAddress;
	in_addr DestinationAddress;
};

/* 7283 */
struct __declspec(align(64)) _RTL_SCALABLE_MRSW_LOCK_COUNTER
{
	int Count;
};

/* 7284 */
struct __declspec(align(4)) _WPP_SOCKADDR
{
	sockaddr *SockAddr;
	unsigned __int16 Length;
};

/* 7285 */
struct _RTL_MRSW_LOCK
{
	unsigned int ExclusiveLock;
	int ReaderCount;
};

/* 7286 */
struct _IO_DRIVER_CREATE_CONTEXT
{
	__int16 Size;
	_ECP_LIST *ExtraCreateParameter;
	void *DeviceObjectHint;
	_TXN_PARAMETER_BLOCK *TxnParameters;
};

/* 7287 */
struct _KSPIN_LOCK_QUEUE
{
	_KSPIN_LOCK_QUEUE *volatile Next;
	unsigned int *volatile Lock;
};

/* 7288 */
struct __declspec(align(4)) _KLOCK_QUEUE_HANDLE
{
	_KSPIN_LOCK_QUEUE LockQueue;
	char OldIrql;
};

/* 7289 */
union _DL_EI48
{
	char Byte[3];
};

/* 7290 */
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
	_LIST_ENTRY *ChainHead;
	_LIST_ENTRY *PrevLinkage;
	unsigned int Signature;
};

/* 7291 */
struct _RTL_DYNAMIC_HASH_TABLE
{
	unsigned int Flags;
	unsigned int Shift;
	unsigned int TableSize;
	unsigned int Pivot;
	unsigned int DivisorMask;
	unsigned int NumEntries;
	unsigned int NonEmptyBuckets;
	unsigned int NumEnumerators;
	void *Directory;
};

/* 7292 */
struct _EVENT_DATA_DESCRIPTOR
{
	unsigned __int64 Ptr;
	unsigned int Size;
	unsigned int Reserved;
};

/* 7293 */
union $A4F155292088DF2506564DAB01BB050D
{
	_GUID Guid;
	_LUID IfLuid;
};

/* 7294 */
struct _NPI_MODULEID
{
	unsigned __int16 Length;
	_NPI_MODULEID_TYPE Type;
	$A4F155292088DF2506564DAB01BB050D ___u2;
};

/* 7295 */
struct _RTL_SCALABLE_MRSW_LOCK
{
	unsigned int ExclusiveLock;
	unsigned int ReaderArrayMask;
	_RTL_SCALABLE_MRSW_LOCK_COUNTER ReaderCount[4];
};

/* 7296 */
struct $2FC304102BA872E20BC9DBD989DC1C67
{
	unsigned __int32 EcnField : 2;
	unsigned __int32 EspTrailerSpaceAllocated : 1;
};

/* 7297 */
union $1763457FB0503BB7F69336FE5BFCCCEB
{
	unsigned int Flags;
	$2FC304102BA872E20BC9DBD989DC1C67 __s1;
};

/* 7298 */
struct _NETIO_NET_BUFFER_CONTEXT
{
	unsigned int OriginalDataOffset;
	unsigned int OriginalDataLength;
	unsigned int TruncatedLength;
	$1763457FB0503BB7F69336FE5BFCCCEB ___u3;
	void *Scratch[2];
};

/* 7299 */
struct $95524D7FF2E8E5CA171D244EABE3E9C8
{
	unsigned __int16 DontUse1 : 8;
	unsigned __int16 MoreFragments : 1;
	unsigned __int16 ReservedBits : 2;
	unsigned __int16 DontUse2 : 5;
};

/* 7300 */
union $29C493347D297AEB43F58BE990BC6B51
{
	$95524D7FF2E8E5CA171D244EABE3E9C8 __s0;
	unsigned __int16 OffsetAndFlags;
};

/* 7301 */
struct _IPV6_FRAGMENT_HEADER
{
	char NextHeader;
	char Reserved;
	$29C493347D297AEB43F58BE990BC6B51 ___u2;
	unsigned int Id;
};

/* 7302 */
struct __declspec(align(64)) _PPL_LOOKASIDE_LIST_ARRAY
{
	unsigned int ValidEntryCount;
	unsigned int Flags;
	unsigned int Tag;
	unsigned int LookasideTag;
	unsigned int Size;
	_POOL_TYPE PoolType;
	unsigned __int16 Depth;
	_PPL_LOOKASIDE_LIST **LookasideLists;
};

/* 7303 */
struct $C7D1ECE9C01D92286062F80E9BABF03D
{
	unsigned __int32 PreviousError : 1;
	unsigned __int32 Reserved1 : 1;
	unsigned __int32 HypervisorError : 1;
	unsigned __int32 Simulated : 1;
	unsigned __int32 PlatformPfaControl : 1;
	unsigned __int32 PlatformDirectedOffline : 1;
	unsigned __int32 Reserved2 : 26;
};

/* 7304 */
union _WHEA_ERROR_PACKET_FLAGS
{
	$C7D1ECE9C01D92286062F80E9BABF03D __s0;
	unsigned int AsULONG;
};

/* 7305 */
struct _WHEA_ERROR_PACKET_V2
{
	unsigned int Signature;
	unsigned int Version;
	unsigned int Length;
	_WHEA_ERROR_PACKET_FLAGS Flags;
	_WHEA_ERROR_TYPE ErrorType;
	_WHEA_ERROR_SEVERITY ErrorSeverity;
	unsigned int ErrorSourceId;
	_WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
	_GUID NotifyType;
	unsigned __int64 Context;
	_WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
	unsigned int Reserved1;
	unsigned int DataOffset;
	unsigned int DataLength;
	unsigned int PshedDataOffset;
	unsigned int PshedDataLength;
};

/* 7306 */
struct $2698ED6124F6DB2024B017F626AB3D08
{
	_DL_OUI Oui;
	_DL_EI48 Ei48;
};

/* 7307 */
union _DL_EUI48
{
	char Byte[6];
	$2698ED6124F6DB2024B017F626AB3D08 __s1;
};

/* 7308 */
struct __declspec(align(8)) _NPAGED_LOOKASIDE_LIST
{
	_GENERAL_LOOKASIDE L;
	unsigned int Lock__ObsoleteButDoNotDelete;
};

/* 7309 */
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
	_RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
	_LIST_ENTRY *ChainHead;
	unsigned int BucketIndex;
};

/* 7310 */
struct $C0EEABB5179F8B91CA945A98E264358E
{
	unsigned __int32 Deleting : 1;
	unsigned __int32 ReferenceCount : 30;
	unsigned __int32 Overflow : 1;
};

/* 7311 */
union _REFERENCE_OBJECT
{
	$C0EEABB5179F8B91CA945A98E264358E __s0;
	int Value;
};

/* 7312 */
struct _IID
{
	unsigned int x;
	unsigned __int16 s1;
	unsigned __int16 s2;
	char c[8];
};

/* 7313 */
struct byte_reader
{
	unsigned int (__cdecl *read)(void *, void *, unsigned int);
	void *data;
	char *buf;
	int buf_size;
	char *buf_ptr;
	int buf_cnt;
};

/* 7314 */
struct bit_reader
{
	byte_reader bytes;
	unsigned int data;
	int bitcnt;
};

/* 7315 */
struct ogg_sync_state
{
	char *data;
	int storage;
	int fill;
	int returned;
	int unsynced;
	int headerbytes;
	int bodybytes;
};

/* 7316 */
struct vorbis_info
{
	int version;
	int channels;
	int rate;
	int bitrate_upper;
	int bitrate_nominal;
	int bitrate_lower;
	int bitrate_window;
	void *codec_setup;
};

/* 7317 */
struct vorbis_comment
{
	char **user_comments;
	int *comment_lengths;
	int comments;
	char *vendor;
};

/* 7318 */
struct ogg_stream_state
{
	char *body_data;
	int body_storage;
	int body_fill;
	int body_returned;
	int *lacing_vals;
	__int64 *granule_vals;
	int lacing_storage;
	int lacing_fill;
	int lacing_packet;
	int lacing_returned;
	char header[282];
	int header_fill;
	int e_o_s;
	int b_o_s;
	int serialno;
	int pageno;
	__int64 packetno;
	__int64 granulepos;
};

/* 7319 */
struct __declspec(align(8)) vorbis_dsp_state
{
	int analysisp;
	vorbis_info *vi;
	float **pcm;
	float **pcmret;
	int pcm_storage;
	int pcm_current;
	int pcm_returned;
	int preextrapolate;
	int eofflag;
	int lW;
	int W;
	int nW;
	int centerW;
	__int64 granulepos;
	__int64 sequence;
	__int64 glue_bits;
	__int64 time_bits;
	__int64 floor_bits;
	__int64 res_bits;
	void *backend_state;
};

/* 7320 */
struct oggpack_buffer
{
	int endbyte;
	int endbit;
	char *buffer;
	char *ptr;
	int storage;
};

/* 7321 */
struct alloc_chain
{
	void *ptr;
	alloc_chain *next;
};

/* 7322 */
struct __declspec(align(8)) vorbis_block
{
	float **pcm;
	oggpack_buffer opb;
	int lW;
	int W;
	int nW;
	int pcmend;
	int mode;
	int eofflag;
	__int64 granulepos;
	__int64 sequence;
	vorbis_dsp_state *vd;
	void *localstore;
	int localtop;
	int localalloc;
	int totaluse;
	alloc_chain *reap;
	int glue_bits;
	int time_bits;
	int floor_bits;
	int res_bits;
	void *internal;
};

/* 7323 */
struct ov_callbacks
{
	unsigned int (__cdecl *read_func)(void *, unsigned int, unsigned int, void *);
	int (__cdecl *seek_func)(void *, __int64, int);
	int (__cdecl *close_func)(void *);
	int (__cdecl *tell_func)(void *);
};

/* 7324 */
struct OggVorbis_File
{
	void *datasource;
	int seekable;
	__int64 offset;
	__int64 end;
	ogg_sync_state oy;
	int links;
	__int64 *offsets;
	__int64 *dataoffsets;
	int *serialnos;
	__int64 *pcmlengths;
	vorbis_info *vi;
	vorbis_comment *vc;
	__int64 pcm_offset;
	int ready_state;
	int current_serialno;
	int current_link;
	long double bittrack;
	long double samptrack;
	ogg_stream_state os;
	vorbis_dsp_state vd;
	vorbis_block vb;
	ov_callbacks callbacks;
};

/* 7325 */
struct _AudioDecoder
{
	bit_reader bits;
	int levels;
	int subbands;
	int samples_per_subband;
	int total_samples;
	int *prev_samples;
	int *samples;
	int block_samples_per_subband;
	int block_total_samples;
	unsigned int channels;
	unsigned int rate;
	int file_cnt;
	int *samp_ptr;
	int samp_cnt;
	OggVorbis_File vf;
};

/* 7326 */
struct tag_soundstruct
{
	int flags;
	void *file;
	_AudioDecoder *decoder;
	int preReadPos;
	int preReadSize;
	char *preReadBuf;
	int filesize;
	int sampleRate;
	int channels;
	int currentPos;
};

/* 7327 */
struct tag_stream
{
	unsigned int (__cdecl *open)(char *, int);
	unsigned int (__cdecl *close)(unsigned int);
	unsigned int (__cdecl *read)(unsigned int, void *, int);
	unsigned int (__cdecl *write)(unsigned int, void *, int);
	unsigned int (__cdecl *seek)(unsigned int, int, int);
	unsigned int (__cdecl *tell)(unsigned int);
	unsigned int (__cdecl *filesize)(unsigned int);
	unsigned int handle;
};

/* 7328 */
struct tag_sound
{
	tag_stream stream;
	char *tmpbuf;
	unsigned int source;
	unsigned int *buffers;
	int curbuf;
	int soundFlags;
	int statusFlags;
	int type;
	int curpos;
	int volume;
	int minReadBuffer;
	unsigned int fileSize;
	unsigned int numBytesRead;
	unsigned int currentSectionSize;
	unsigned int readLimit;
	unsigned int lastUpdate;
	unsigned int lastPosition;
	unsigned int numBuffers;
	unsigned int dataSize;
	unsigned int userData;
	int frequency;
	int format;
	void *callbackArg;
	void (__cdecl *callbackFunc)(void *, int);
	void *deleteCallbackArg;
	void (__cdecl *deleteCallbackFunc)(void *);
	tag_sound *next;
	tag_sound *prev;
	void *sectionsizes;
};

/* 7329 */
struct JumpList
{
	char name[8];
	char *fileName;
	char *list;
	char (*tag)[8];
	char (*section)[8];
	int numSections;
};

/* 7330 */
struct tagSectionSizeStruct
{
	int song;
	int section;
	int start;
	int size;
	int startoffset;
	tagSectionSizeStruct *next;
};

/* 7331 */
struct __cppobj yfSectionSizeManager
{
	yfSectionSizeManagerVtbl *vfptr;
	tagSectionSizeStruct *sectionsizes;
};

/* 7332 */
struct yfSectionSizeManagerVtbl
{
	void *(__thiscall *__vecDelDtor)(yfSectionSizeManager *this, unsigned int);
};

/* 7333 */
struct tag_fadesound
{
	tag_sound *s;
	int end_time;
	int end;
	int start;
	int length;
	int pause;
	tag_fadesound *prev;
	tag_fadesound *next;
};

/* 7334 */
struct z_stream_s
{
	char *next_in;
	unsigned int avail_in;
	unsigned int total_in;
	char *next_out;
	unsigned int avail_out;
	unsigned int total_out;
	char *msg;
	z_internal_state *state;
	void *(__cdecl *zalloc)(void *, unsigned int, unsigned int);
	void (__cdecl *zfree)(void *, void *);
	void *opaque;
	int data_type;
	unsigned int adler;
	unsigned int reserved;
};

/* 7336 */
union $3FED14670831426F78C1F126725788C0
{
	unsigned __int16 freq;
	unsigned __int16 code;
};

/* 7337 */
union $2467CA9704E0472D4CCF1296A763D23A
{
	unsigned __int16 dad;
	unsigned __int16 len;
};

/* 7338 */
struct ct_data_s
{
	$3FED14670831426F78C1F126725788C0 fc;
	$2467CA9704E0472D4CCF1296A763D23A dl;
};

/* 7340 */
struct tree_desc_s
{
	ct_data_s *dyn_tree;
	int max_code;
	static_tree_desc_s *stat_desc;
};

/* 7341 */
struct z_internal_state
{
	z_stream_s *strm;
	int status;
	char *pending_buf;
	unsigned int pending_buf_size;
	char *pending_out;
	unsigned int pending;
	int wrap;
	z_gz_header_s *gzhead;
	unsigned int gzindex;
	char method;
	int last_flush;
	unsigned int w_size;
	unsigned int w_bits;
	unsigned int w_mask;
	char *window;
	unsigned int window_size;
	unsigned __int16 *prev;
	unsigned __int16 *head;
	unsigned int ins_h;
	unsigned int hash_size;
	unsigned int hash_bits;
	unsigned int hash_mask;
	unsigned int hash_shift;
	int block_start;
	unsigned int match_length;
	unsigned int prev_match;
	int match_available;
	unsigned int strstart;
	unsigned int match_start;
	unsigned int lookahead;
	unsigned int prev_length;
	unsigned int max_chain_length;
	unsigned int max_lazy_match;
	int level;
	int strategy;
	unsigned int good_match;
	int nice_match;
	ct_data_s dyn_ltree[573];
	ct_data_s dyn_dtree[61];
	ct_data_s bl_tree[39];
	tree_desc_s l_desc;
	tree_desc_s d_desc;
	tree_desc_s bl_desc;
	unsigned __int16 bl_count[16];
	int heap[573];
	int heap_len;
	int heap_max;
	char depth[573];
	char *l_buf;
	unsigned int lit_bufsize;
	unsigned int last_lit;
	unsigned __int16 *d_buf;
	unsigned int opt_len;
	unsigned int static_len;
	unsigned int matches;
	unsigned int insert;
	unsigned __int16 bi_buf;
	int bi_valid;
	unsigned int high_water;
};

/* 7335 */
struct z_gz_header_s
{
	int text;
	unsigned int time;
	int xflags;
	int os;
	char *extra;
	unsigned int extra_len;
	unsigned int extra_max;
	char *name;
	unsigned int name_max;
	char *comment;
	unsigned int comm_max;
	int hcrc;
	int done;
};

/* 7339 */
const struct static_tree_desc_s
{
	ct_data_s *static_tree;
	const int *extra_bits;
	int extra_base;
	int elems;
	int max_length;
};

/* 7342 */
struct config_s
{
	unsigned __int16 good_length;
	unsigned __int16 max_lazy;
	unsigned __int16 nice_length;
	unsigned __int16 max_chain;
	block_state (__cdecl *func)(z_internal_state *, int);
};

/* 7343 */
struct code
{
	char op;
	char bits;
	unsigned __int16 val;
};

/* 7344 */
struct inflate_state
{
	z_stream_s *strm;
	inflate_mode mode;
	int last;
	int wrap;
	int havedict;
	int flags;
	unsigned int dmax;
	unsigned int check;
	unsigned int total;
	z_gz_header_s *head;
	unsigned int wbits;
	unsigned int wsize;
	unsigned int whave;
	unsigned int wnext;
	char *window;
	unsigned int hold;
	unsigned int bits;
	unsigned int length;
	unsigned int offset;
	unsigned int extra;
	code *lencode;
	code *distcode;
	unsigned int lenbits;
	unsigned int distbits;
	unsigned int ncode;
	unsigned int nlen;
	unsigned int ndist;
	unsigned int have;
	code *next;
	unsigned __int16 lens[320];
	unsigned __int16 work[288];
	code codes[1444];
	int sane;
	int back;
	unsigned int was;
};

/* 7345 */
struct zlib_filefunc_def_s
{
	void *(__cdecl *zopen_file)(void *, const char *, int);
	unsigned int (__cdecl *zread_file)(void *, void *, void *, unsigned int);
	unsigned int (__cdecl *zwrite_file)(void *, void *, const void *, unsigned int);
	int (__cdecl *ztell_file)(void *, void *);
	int (__cdecl *zseek_file)(void *, void *, unsigned int, int);
	int (__cdecl *zclose_file)(void *, void *);
	int (__cdecl *zerror_file)(void *, void *);
	void (__cdecl *zcentral_file)(void *, const char *, unsigned int, unsigned int);
	void *opaque;
};

/* 7346 */
struct unz_global_info_s
{
	unsigned int number_entry;
	unsigned int size_comment;
};

/* 7347 */
struct tm_unz_s
{
	unsigned int tm_sec;
	unsigned int tm_min;
	unsigned int tm_hour;
	unsigned int tm_mday;
	unsigned int tm_mon;
	unsigned int tm_year;
};

/* 7348 */
struct unz_file_info_s
{
	unsigned int version;
	unsigned int version_needed;
	unsigned int flag;
	unsigned int compression_method;
	unsigned int dosDate;
	unsigned int crc;
	unsigned int compressed_size;
	unsigned int uncompressed_size;
	unsigned int size_filename;
	unsigned int size_file_extra;
	unsigned int size_file_comment;
	unsigned int disk_num_start;
	unsigned int internal_fa;
	unsigned int external_fa;
	tm_unz_s tmu_date;
};

/* 7349 */
struct unz_file_info_internal_s
{
	unsigned int offset_curfile;
};

/* 7350 */
struct file_in_zip_read_info_s
{
	char *read_buffer;
	z_stream_s stream;
	unsigned int pos_in_zipfile;
	unsigned int stream_initialised;
	unsigned int offset_local_extrafield;
	unsigned int size_local_extrafield;
	unsigned int pos_local_extrafield;
	unsigned int z_crc32;
	unsigned int crc32_wait;
	unsigned int rest_read_compressed;
	unsigned int rest_read_uncompressed;
	zlib_filefunc_def_s z_filefunc;
	void *filestream;
	unsigned int compression_method;
	unsigned int byte_before_the_zipfile;
	int raw;
};

/* 7351 */
struct unz_s
{
	zlib_filefunc_def_s z_filefunc;
	void *filestream;
	unz_global_info_s gi;
	unsigned int byte_before_the_zipfile;
	unsigned int num_file;
	unsigned int pos_in_central_dir;
	unsigned int current_file_ok;
	unsigned int central_pos;
	unsigned int size_central_dir;
	unsigned int offset_central_dir;
	unz_file_info_s cur_file_info;
	unz_file_info_internal_s cur_file_info_internal;
	file_in_zip_read_info_s *pfile_in_zip_read;
	int encrypted;
};

/* 7352 */
struct __unaligned __declspec(align(2)) unz_central_directory_file_info_s
{
	unsigned int signature;
	__int16 version;
	__int16 version_to_extract;
	__int16 flags;
	__int16 compression_method;
	__int16 last_mod_file_time;
	__int16 last_mod_file_date;
	unsigned int z_crc32;
	unsigned int compressed_size;
	unsigned int uncompressed_size;
	__int16 file_name_length;
	__int16 extra_field_length;
	__int16 file_comment_length;
	__int16 disk_number_start;
	__int16 internal_file_attributes;
	unsigned int external_file_attributes;
	unsigned int relative_offset;
};

/* 7353 */
struct unz_file_pos_s
{
	unsigned int pos_in_zip_directory;
	unsigned int num_of_file;
};

/* 7354 */
struct linkedlist_datablock_internal_s
{
	linkedlist_datablock_internal_s *next_datablock;
	unsigned int avail_in_this_block;
	unsigned int filled_in_this_block;
	unsigned int unused;
	char data[4080];
};

/* 7355 */
struct linkedlist_data_s
{
	linkedlist_datablock_internal_s *first_block;
	linkedlist_datablock_internal_s *last_block;
};

/* 7356 */
struct curfile_info
{
	z_stream_s stream;
	int stream_initialised;
	unsigned int pos_in_buffered_data;
	unsigned int pos_local_header;
	char *central_header;
	unsigned int size_centralheader;
	unsigned int flag;
	int method;
	char buffered_data[16384];
	unsigned int dosDate;
	unsigned int z_crc32;
};

/* 7357 */
struct zip_internal
{
	_iobuf *filezip;
	linkedlist_data_s central_dir;
	int in_opened_file_inzip;
	curfile_info ci;
	unsigned int begin_pos;
	unsigned int number_entry;
};

/* 7358 */
struct tm_zip_s
{
	unsigned int tm_sec;
	unsigned int tm_min;
	unsigned int tm_hour;
	unsigned int tm_mday;
	unsigned int tm_mon;
	unsigned int tm_year;
};

/* 7359 */
struct zip_fileinfo
{
	tm_zip_s tmz_date;
	unsigned int dosDate;
	unsigned int internal_fa;
	unsigned int external_fa;
};

/* 7360 */
struct __cppobj CCrypt
{
};

/* 7361 */
struct stbi_io_callbacks
{
	int (__cdecl *read)(void *, char *, int);
	void (__cdecl *skip)(void *, int);
	int (__cdecl *eof)(void *);
};

/* 7362 */
struct ogg_packet
{
	char *packet;
	int bytes;
	int b_o_s;
	int e_o_s;
	__int64 granulepos;
	__int64 packetno;
};

/* 7363 */
struct stbi__context
{
	unsigned int img_x;
	unsigned int img_y;
	int img_n;
	int img_out_n;
	stbi_io_callbacks io;
	void *io_user_data;
	int read_from_callbacks;
	int buflen;
	char buffer_start[128];
	char *img_buffer;
	char *img_buffer_end;
	char *img_buffer_original;
	char *img_buffer_original_end;
};

/* 7364 */
struct stbi__zhuffman
{
	unsigned __int16 fast[512];
	unsigned __int16 firstcode[16];
	int maxcode[17];
	unsigned __int16 firstsymbol[16];
	char size[288];
	unsigned __int16 value[288];
};

/* 7365 */
struct stbi__zbuf
{
	char *zbuffer;
	char *zbuffer_end;
	int num_bits;
	unsigned int code_buffer;
	char *zout;
	char *zout_start;
	char *zout_end;
	int z_expandable;
	stbi__zhuffman z_length;
	stbi__zhuffman z_distance;
};

/* 7366 */
struct stbi__pngchunk
{
	unsigned int length;
	unsigned int type;
};

/* 7367 */
struct stbi__png
{
	stbi__context *s;
	char *idata;
	char *expanded;
	char *out;
};

/* 7368 */
struct ov_pointer
{
	char *data;
	__int64 offset;
	__int64 len;
};

/* 7369 */
struct CFileReaderParms
{
	char *m_pSrc;
	char *m_pSrcCurrent;
	int m_nSrcLength;
};

/* 7370 */
struct vpx_image
{
	vpx_img_fmt fmt;
	vpx_color_space cs;
	unsigned int w;
	unsigned int h;
	unsigned int bit_depth;
	unsigned int d_w;
	unsigned int d_h;
	unsigned int x_chroma_shift;
	unsigned int y_chroma_shift;
	char *planes[4];
	int stride[4];
	int bps;
	void *user_priv;
	char *img_data;
	int img_data_owner;
	int self_allocd;
	void *fb_priv;
};

/* 7371 */
const struct vpx_codec_dec_cfg
{
	unsigned int threads;
	unsigned int w;
	unsigned int h;
};

/* 7372 */
union $2D1F62F346D0795B3B44D5445302F84A
{
	vpx_codec_dec_cfg *dec;
	const struct vpx_codec_enc_cfg *enc;
	const void *raw;
};

/* 7373 */
struct vpx_codec_ctx
{
	const char *name;
	vpx_codec_iface *iface;
	vpx_codec_err_t err;
	const char *err_detail;
	int init_flags;
	$2D1F62F346D0795B3B44D5445302F84A config;
	vpx_codec_priv *priv;
};

/* 7374 */
struct nestegg_io
{
	int (__cdecl *read)(void *, unsigned int, void *);
	int (__cdecl *seek)(__int64, int, void *);
	__int64 (__cdecl *tell)(void *);
	void *userdata;
};

/* 7375 */
struct nestegg_video_params
{
	unsigned int stereo_mode;
	unsigned int width;
	unsigned int height;
	unsigned int display_width;
	unsigned int display_height;
	unsigned int crop_bottom;
	unsigned int crop_top;
	unsigned int crop_left;
	unsigned int crop_right;
	unsigned int alpha_mode;
};

/* 7376 */
struct nestegg_audio_params
{
	long double rate;
	unsigned int channels;
	unsigned int depth;
	unsigned __int64 codec_delay;
	unsigned __int64 seek_preroll;
};

/* 7381 */
struct ebml_binary
{
	char *data;
	unsigned int length;
};

/* 7382 */
union ebml_value
{
	unsigned __int64 u;
	long double f;
	__int64 i;
	char *s;
	ebml_binary b;
};

/* 7383 */
struct ebml_type
{
	ebml_value v;
	ebml_type_enum type;
	int read;
};

/* 7384 */
struct ebml
{
	ebml_type ebml_version;
	ebml_type ebml_read_version;
	ebml_type ebml_max_id_length;
	ebml_type ebml_max_size_length;
	ebml_type doctype;
	ebml_type doctype_version;
	ebml_type doctype_read_version;
};

/* 7386 */
struct ebml_list
{
	ebml_list_node *head;
	ebml_list_node *tail;
};

/* 7387 */
struct info
{
	ebml_type timecode_scale;
	ebml_type duration;
};

/* 7388 */
struct tracks
{
	ebml_list track_entry;
};

/* 7389 */
struct cues
{
	ebml_list cue_point;
};

/* 7390 */
struct segment
{
	ebml_list seek_head;
	info info;
	ebml_list cluster;
	tracks tracks;
	cues cues;
};

/* 7377 */
struct __declspec(align(8)) nestegg
{
	nestegg_io *io;
	void (*log)(nestegg *, unsigned int, const char *, ...);
	pool_ctx *alloc_pool;
	unsigned __int64 last_id;
	unsigned __int64 last_size;
	int last_valid;
	list_node *ancestor;
	ebml ebml;
	segment segment;
	__int64 segment_offset;
	unsigned int track_count;
};

/* 7378 */
struct pool_ctx
{
	char dummy;
};

/* 7379 */
struct list_node
{
	list_node *previous;
	ebml_element_desc *node;
	char *data;
};

/* 7385 */
struct __declspec(align(8)) ebml_list_node
{
	ebml_list_node *next;
	unsigned __int64 id;
	void *data;
};

/* 7380 */
struct ebml_element_desc
{
	const char *name;
	unsigned __int64 id;
	ebml_type_enum type;
	unsigned int offset;
	unsigned int flags;
	ebml_element_desc *children;
	unsigned int size;
	unsigned int data_offset;
};

/* 7391 */
struct nestegg_batton
{
	__int64 offset;
	char *data;
	__int64 length;
};

/* 7392 */
struct frame
{
	char *data;
	unsigned int length;
	frame *next;
};

/* 7393 */
struct block_additional
{
	unsigned int id;
	char *data;
	unsigned int length;
	block_additional *next;
};

/* 7394 */
struct nestegg_packet
{
	unsigned __int64 track;
	unsigned __int64 timecode;
	unsigned __int64 duration;
	frame *frame;
	block_additional *block_additional;
	__int64 discard_padding;
};

/* 7395 */
struct $988723DC2270764A2545BFED1FEAAD7A
{
	nestegg_batton batton;
	nestegg *ctx;
	nestegg_packet *pkt;
	nestegg_video_params vparams;
	nestegg_audio_params aparams;
};

/* 7396 */
struct $834F92CAC2334A2793E159274A69B47B
{
	vpx_codec_ctx decoder;
	vpx_codec_ctx alphaDecoder;
	vpx_codec_dec_cfg cfg;
	char *img_data;
	int track;
	int frame;
};

/* 7397 */
struct $B4792D43ACBA25931228ED8B44B5A8CC
{
	vorbis_info vi;
	vorbis_comment vc;
	vorbis_dsp_state vds;
	vorbis_block vb;
	__int64 packetno;
	unsigned int buffers[60];
	unsigned int source;
	int current_buffer;
	int buffers_filled;
	int track;
};

/* 7398 */
struct webm_codec
{
	$988723DC2270764A2545BFED1FEAAD7A container;
	$834F92CAC2334A2793E159274A69B47B video;
	$B4792D43ACBA25931228ED8B44B5A8CC audio;
};

/* 7399 */
struct PVRTextureHeaderV3
{
	unsigned int u32Version;
	unsigned int u32Flags;
	unsigned int u64PixelFormatlo;
	unsigned int u64PixelFormathi;
	unsigned int u32ColourSpace;
	unsigned int u32ChannelType;
	unsigned int u32Height;
	unsigned int u32Width;
	unsigned int u32Depth;
	unsigned int u32NumSurfaces;
	unsigned int u32NumFaces;
	unsigned int u32MIPMapCount;
	unsigned int u32MetaDataSize;
};

/* 7400 */
struct CResCell::Parse::__l7::cRes
{
	unsigned int tag;
	unsigned int version;
	unsigned int compressedSize;
};

/* 7401 */
struct zip_t
{
	const char *name;
	file_t file;
};

/* 7402 */
struct __cppobj CArray<zip_t,zip_t &> : CObject
{
	zip_t *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 7403 */
struct __cppobj CArray<CZipFile,CZipFile &> : CObject
{
	CZipFile *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 7404 */
struct __cppobj CArray<COverridePath,COverridePath &> : CObject
{
	COverridePath *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 7405 */
struct __cppobj CTypedPtrArray<CPtrArray,CRes *> : CPtrArray
{
};

/* 7406 */
struct biff_t
{
	const char *name;
	file_t file;
	view_t view;
	biffVarTableEntry_st *v;
	biffFixedTableEntry_st *f;
};

/* 7407 */
struct __declspec(align(4)) __timeb64
{
	__int64 time;
	unsigned __int16 millitm;
	__int16 timezone;
	__int16 dstflag;
};

/* 7408 */
struct __declspec(align(4)) timeb
{
	__int64 time;
	unsigned __int16 millitm;
	__int16 timezone;
	__int16 dstflag;
};

/* 7409 */
struct __cppobj Mod_t
{
	CString archiveName;
	CString osPath;
	CString modName;
};

/* 7410 */
struct __cppobj CArray<Mod_t,Mod_t &> : CObject
{
	Mod_t *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 7411 */
struct $9F432C50B3DE4245520F57FE93098BCC
{
	char *lang;
	char *oldName;
	char *newName;
};

/* 7412 */
struct __cppobj CArray<CDLC,CDLC &> : CObject
{
	CDLC *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 7413 */
struct __cppobj CArray<CDLC_Content,CDLC_Content &> : CObject
{
	CDLC_Content *m_pData;
	int m_nSize;
	int m_nMaxSize;
	int m_nGrowBy;
};

/* 7414 */
struct $4CE6B1659AD21A81EFA97CFEC3F55684
{
	HWND__ *window;
	HDC__ *hdc;
};

/* 7415 */
union $4F327EFB21E01A67697260A5CBC71F3C
{
	$4CE6B1659AD21A81EFA97CFEC3F55684 win;
	int dummy;
};

/* 7416 */
struct SDL_SysWMinfo
{
	SDL_version version;
	SDL_SYSWM_TYPE subsystem;
	$4F327EFB21E01A67697260A5CBC71F3C info;
};

/* 7417 */
struct __cppobj CSoundExtensionBase
{
	unsigned int m_nRange;
	unsigned int m_dwFlags;
	int m_nPitchVariance;
	int m_nVolumeVariance;
	unsigned int reservedSpace[60];
};

/* 7418 */
struct __cppobj CResHelper<CResBinary,5>
{
	CResBinary *pRes;
	CResRef cResRef;
};

/* 7419 */
struct __cppobj CSoundExtensionFile : CResHelper<CResBinary,5>
{
};

/* 7420 */
struct OverrideTextEntry_t
{
	int id;
	int text;
};

/* 7421 */
struct tlkEntry_t
{
	int id;
	int text;
};

/* 7422 */
struct override_writer
{
	int totalStrLength;
	int totalStrCount;
	void *data;
	int curEntry;
	tlkEntry_t *entries;
	int stringOffset;
};

/* 7423 */
struct stbi__write_context
{
	void (__cdecl *func)(void *, void *, int);
	void *context;
};

/* 7424 */
struct __cppobj Vec2
{
	float x;
	float y;
};

/* 7425 */
struct _D3DVERTEXELEMENT9
{
	unsigned __int16 Stream;
	unsigned __int16 Offset;
	char Type;
	char Method;
	char Usage;
	char UsageIndex;
};

/* 7426 */
struct __cppobj IDirect3D9 : IUnknown
{
};

/* 7427 */
struct __cppobj IDirect3DDevice9 : IUnknown
{
};

/* 7428 */
struct _D3DXMACRO
{
	const char *Name;
	const char *Definition;
};

/* 7429 */
struct __cppobj ID3DXInclude
{
	ID3DXIncludeVtbl *vfptr;
};

/* 7430 */
struct ID3DXIncludeVtbl
{
	HRESULT (__stdcall *Open)(ID3DXInclude *this, _D3DXINCLUDE_TYPE, const char *, const void *, const void **, unsigned int *);
	HRESULT (__stdcall *Close)(ID3DXInclude *this, const void *);
};

/* 7431 */
struct __cppobj ID3DXEffectPool : IUnknown
{
};

/* 7432 */
struct __cppobj ID3DXBaseEffect : IUnknown
{
};

/* 7433 */
struct __cppobj ID3DXEffect : ID3DXBaseEffect
{
};

/* 7434 */
struct __cppobj ID3DXBuffer : IUnknown
{
};

/* 11228 */
enum _D3DFORMAT
{
	D3DFMT_UNKNOWN = 0x0,
	D3DFMT_R8G8B8 = 0x14,
	D3DFMT_A8R8G8B8 = 0x15,
	D3DFMT_X8R8G8B8 = 0x16,
	D3DFMT_R5G6B5 = 0x17,
	D3DFMT_X1R5G5B5 = 0x18,
	D3DFMT_A1R5G5B5 = 0x19,
	D3DFMT_A4R4G4B4 = 0x1A,
	D3DFMT_R3G3B2 = 0x1B,
	D3DFMT_A8 = 0x1C,
	D3DFMT_A8R3G3B2 = 0x1D,
	D3DFMT_X4R4G4B4 = 0x1E,
	D3DFMT_A2B10G10R10 = 0x1F,
	D3DFMT_A8B8G8R8 = 0x20,
	D3DFMT_X8B8G8R8 = 0x21,
	D3DFMT_G16R16 = 0x22,
	D3DFMT_A2R10G10B10 = 0x23,
	D3DFMT_A16B16G16R16 = 0x24,
	D3DFMT_A8P8 = 0x28,
	D3DFMT_P8 = 0x29,
	D3DFMT_L8 = 0x32,
	D3DFMT_A8L8 = 0x33,
	D3DFMT_A4L4 = 0x34,
	D3DFMT_V8U8 = 0x3C,
	D3DFMT_L6V5U5 = 0x3D,
	D3DFMT_X8L8V8U8 = 0x3E,
	D3DFMT_Q8W8V8U8 = 0x3F,
	D3DFMT_V16U16 = 0x40,
	D3DFMT_A2W10V10U10 = 0x43,
	D3DFMT_UYVY = 0x59565955,
	D3DFMT_R8G8_B8G8 = 0x47424752,
	D3DFMT_YUY2 = 0x32595559,
	D3DFMT_G8R8_G8B8 = 0x42475247,
	D3DFMT_DXT1 = 0x31545844,
	D3DFMT_DXT2 = 0x32545844,
	D3DFMT_DXT3 = 0x33545844,
	D3DFMT_DXT4 = 0x34545844,
	D3DFMT_DXT5 = 0x35545844,
	D3DFMT_D16_LOCKABLE = 0x46,
	D3DFMT_D32 = 0x47,
	D3DFMT_D15S1 = 0x49,
	D3DFMT_D24S8 = 0x4B,
	D3DFMT_D24X8 = 0x4D,
	D3DFMT_D24X4S4 = 0x4F,
	D3DFMT_D16 = 0x50,
	D3DFMT_D32F_LOCKABLE = 0x52,
	D3DFMT_D24FS8 = 0x53,
	D3DFMT_D32_LOCKABLE = 0x54,
	D3DFMT_S8_LOCKABLE = 0x55,
	D3DFMT_L16 = 0x51,
	D3DFMT_VERTEXDATA = 0x64,
	D3DFMT_INDEX16 = 0x65,
	D3DFMT_INDEX32 = 0x66,
	D3DFMT_Q16W16V16U16 = 0x6E,
	D3DFMT_MULTI2_ARGB8 = 0x3154454D,
	D3DFMT_R16F = 0x6F,
	D3DFMT_G16R16F = 0x70,
	D3DFMT_A16B16G16R16F = 0x71,
	D3DFMT_R32F = 0x72,
	D3DFMT_G32R32F = 0x73,
	D3DFMT_A32B32G32R32F = 0x74,
	D3DFMT_CxV8U8 = 0x75,
	D3DFMT_A1 = 0x76,
	D3DFMT_A2B10G10R10_XR_BIAS = 0x77,
	D3DFMT_BINARYBUFFER = 0xC7,
	D3DFMT_FORCE_DWORD = 0x7FFFFFFF,
};

/* 11229 */
enum _D3DMULTISAMPLE_TYPE
{
	D3DMULTISAMPLE_NONE = 0x0,
	D3DMULTISAMPLE_NONMASKABLE = 0x1,
	D3DMULTISAMPLE_2_SAMPLES = 0x2,
	D3DMULTISAMPLE_3_SAMPLES = 0x3,
	D3DMULTISAMPLE_4_SAMPLES = 0x4,
	D3DMULTISAMPLE_5_SAMPLES = 0x5,
	D3DMULTISAMPLE_6_SAMPLES = 0x6,
	D3DMULTISAMPLE_7_SAMPLES = 0x7,
	D3DMULTISAMPLE_8_SAMPLES = 0x8,
	D3DMULTISAMPLE_9_SAMPLES = 0x9,
	D3DMULTISAMPLE_10_SAMPLES = 0xA,
	D3DMULTISAMPLE_11_SAMPLES = 0xB,
	D3DMULTISAMPLE_12_SAMPLES = 0xC,
	D3DMULTISAMPLE_13_SAMPLES = 0xD,
	D3DMULTISAMPLE_14_SAMPLES = 0xE,
	D3DMULTISAMPLE_15_SAMPLES = 0xF,
	D3DMULTISAMPLE_16_SAMPLES = 0x10,
	D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF,
};

/* 11230 */
enum _D3DSWAPEFFECT
{
	D3DSWAPEFFECT_DISCARD = 0x1,
	D3DSWAPEFFECT_FLIP = 0x2,
	D3DSWAPEFFECT_COPY = 0x3,
	D3DSWAPEFFECT_OVERLAY = 0x4,
	D3DSWAPEFFECT_FLIPEX = 0x5,
	D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,
};

/* 7435 */
struct _D3DPRESENT_PARAMETERS_
{
	unsigned int BackBufferWidth;
	unsigned int BackBufferHeight;
	_D3DFORMAT BackBufferFormat;
	unsigned int BackBufferCount;
	_D3DMULTISAMPLE_TYPE MultiSampleType;
	unsigned int MultiSampleQuality;
	_D3DSWAPEFFECT SwapEffect;
	HWND__ *hDeviceWindow;
	int Windowed;
	int EnableAutoDepthStencil;
	_D3DFORMAT AutoDepthStencilFormat;
	unsigned int Flags;
	unsigned int FullScreen_RefreshRateInHz;
	unsigned int PresentationInterval;
};

/* 7436 */
struct texture_t
{
	unsigned int texture;
	int w;
	int h;
	bool initialized;
	bool deleted;
	DrawFilter minFilter;
	DrawFilter magFilter;
	unsigned int wrapS;
	unsigned int wrapT;
	int internalFormat;
	unsigned int altTexture;
};

/* 7437 */
struct program_t
{
	unsigned int p;
	unsigned int uST;
	unsigned int uTcScale;
	unsigned int uTex;
	unsigned int uTex2;
	unsigned int uColorTone;
	unsigned int uZoomStrength;
	unsigned int uTcClamp;
	unsigned int uScreenHeight;
	unsigned int uSpriteBlurAmount;
};

/* 7438 */
struct d3dvertex_t
{
	float x;
	float y;
	float z;
	unsigned int c;
	float s;
	float t;
	float s1;
	float t1;
};

/* 7439 */
struct __cppobj IDirect3DResource9 : IUnknown
{
};

/* 7440 */
struct __cppobj IDirect3DVertexBuffer9 : IDirect3DResource9
{
};

/* 7441 */
struct $730FDA81411627D18117760CFDFC5D48
{
	unsigned __int32 program : 4;
	unsigned __int32 mode : 2;
	unsigned __int32 projection : 2;
	unsigned __int32 blending : 1;
	unsigned __int32 srcBlend : 4;
	unsigned __int32 dstBlend : 4;
	unsigned __int32 tone : 3;
	unsigned __int32 scissor : 1;
	unsigned __int32 texture : 9;
};

/* 7442 */
union drawState_t
{
	$730FDA81411627D18117760CFDFC5D48 __s0;
	int all;
};

/* 7443 */
struct drawCmd_t
{
	drawState_t state;
	int primStart;
	int primCount;
};

/* 7444 */
union $872C6102D0359DAE2EF3C8EA2BA4F27D
{
	float x;
	float r;
};

/* 7445 */
union $DEC82102868918D992B707FF755C8272
{
	float y;
	float g;
};

/* 7446 */
union $DCA4A7CF5EA786B859D71FBD4D5071B1
{
	float z;
	float b;
};

/* 7447 */
union $982F841FE54CFF99ACD9FF52992C4925
{
	float w;
	float a;
};

/* 7448 */
struct vec4_t
{
	$872C6102D0359DAE2EF3C8EA2BA4F27D ___u0;
	$DEC82102868918D992B707FF755C8272 ___u1;
	$DCA4A7CF5EA786B859D71FBD4D5071B1 ___u2;
	$982F841FE54CFF99ACD9FF52992C4925 ___u3;
};

/* 7449 */
struct $7A482BBA0D1D34ED5A2E6984BF7642B3
{
	int x;
	int y;
	int w;
	int h;
};

/* 7450 */
struct $E3958E369F0C9F787F3E14F852D69D7E
{
	bool enabled;
	int t;
	int zoomSrc[4];
	int zoomDst[4];
};

/* 7451 */
struct samplerState_t
{
	unsigned int nWrapS;
	unsigned int nWrapT;
	unsigned int nMinFilter;
	unsigned int nMagFilter;
};

/* 7452 */
struct __cppobj IDirect3DVertexDeclaration9 : IUnknown
{
};

/* 7453 */
struct $B25F51DB3FCB81BFDAE30DDA6174F083
{
	void *d3dDll;
	void *d3dxDll;
	IDirect3D9 *(__stdcall *D3DCreate)(unsigned int);
	HRESULT *(__stdcall *D3DXCreateEffect)(IDirect3DDevice9 *, const void *, unsigned int, _D3DXMACRO *, ID3DXInclude *, unsigned int, ID3DXEffectPool *, ID3DXEffect **, ID3DXBuffer **);
	IDirect3D9 *d3dObject;
	IDirect3DDevice9 *d3dDevice;
	_D3DPRESENT_PARAMETERS_ d3dpp;
	texture_t textures[512];
	program_t programs[9];
	d3dvertex_t *vertScratch;
	IDirect3DVertexBuffer9 *verts;
	drawCmd_t cmds[8192];
	vec4_t projections[4];
	drawCmd_t user;
	d3dvertex_t v;
	drawState_t stateStack[4];
	int stateStackTop;
	$7A482BBA0D1D34ED5A2E6984BF7642B3 viewport;
	vec4_t vertScale;
	vec4_t zoom;
	int n;
	SDL_Rect scissor;
	drawState_t hwState;
	drawState_t force;
	$E3958E369F0C9F787F3E14F852D69D7E pp;
	_D3DFORMAT uploadFormat;
	int sortStart;
	float blurAmount;
	bool forceReset;
	DepthLockState depthLockState;
	samplerState_t samplerStates[2];
	IDirect3DVertexDeclaration9 *dxVertexDecl;
};

/* 7454 */
struct fx_t
{
	int texW;
	int texH;
	int texX;
	int texY;
	int tempX;
	int tempY;
	int tempH;
	unsigned int *texels;
	int texture;
};

/* 7455 */
struct _D3DVECTOR
{
	float x;
	float y;
	float z;
};

/* 7456 */
struct _D3DCOLORVALUE
{
	float r;
	float g;
	float b;
	float a;
};

/* 7457 */
struct _D3DRECT
{
	int x1;
	int y1;
	int x2;
	int y2;
};

/* 7458 */
struct $40942CBCB8F0A1CDBC81269929B28324
{
	float _11;
	float _12;
	float _13;
	float _14;
	float _21;
	float _22;
	float _23;
	float _24;
	float _31;
	float _32;
	float _33;
	float _34;
	float _41;
	float _42;
	float _43;
	float _44;
};

/* 7459 */
union $02F0D444D503B17D9D0C1A0866F044F6
{
	$40942CBCB8F0A1CDBC81269929B28324 __s0;
	float m[4][4];
};

/* 7460 */
struct _D3DMATRIX
{
	$02F0D444D503B17D9D0C1A0866F044F6 ___u0;
};

/* 7461 */
struct _D3DVIEWPORT9
{
	unsigned int X;
	unsigned int Y;
	unsigned int Width;
	unsigned int Height;
	float MinZ;
	float MaxZ;
};

/* 7462 */
struct _D3DCLIPSTATUS9
{
	unsigned int ClipUnion;
	unsigned int ClipIntersection;
};

/* 7463 */
struct _D3DMATERIAL9
{
	_D3DCOLORVALUE Diffuse;
	_D3DCOLORVALUE Ambient;
	_D3DCOLORVALUE Specular;
	_D3DCOLORVALUE Emissive;
	float Power;
};

/* 11256 */
enum _D3DLIGHTTYPE
{
	D3DLIGHT_POINT = 0x1,
	D3DLIGHT_SPOT = 0x2,
	D3DLIGHT_DIRECTIONAL = 0x3,
	D3DLIGHT_PARALLELPOINT = 0x4,
	D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,
};

/* 7464 */
struct _D3DLIGHT9
{
	_D3DLIGHTTYPE Type;
	_D3DCOLORVALUE Diffuse;
	_D3DCOLORVALUE Specular;
	_D3DCOLORVALUE Ambient;
	_D3DVECTOR Position;
	_D3DVECTOR Direction;
	float Range;
	float Falloff;
	float Attenuation0;
	float Attenuation1;
	float Attenuation2;
	float Theta;
	float Phi;
};

/* 7465 */
struct _D3DDISPLAYMODE
{
	unsigned int Width;
	unsigned int Height;
	unsigned int RefreshRate;
	_D3DFORMAT Format;
};

/* 11231 */
enum _D3DDEVTYPE
{
	D3DDEVTYPE_HAL = 0x1,
	D3DDEVTYPE_REF = 0x2,
	D3DDEVTYPE_SW = 0x3,
	D3DDEVTYPE_NULLREF = 0x4,
	D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,
};

/* 7466 */
struct _D3DDEVICE_CREATION_PARAMETERS
{
	unsigned int AdapterOrdinal;
	_D3DDEVTYPE DeviceType;
	HWND__ *hFocusWindow;
	unsigned int BehaviorFlags;
};

/* 7467 */
struct _D3DGAMMARAMP
{
	unsigned __int16 red[256];
	unsigned __int16 green[256];
	unsigned __int16 blue[256];
};

/* 11232 */
enum _D3DRESOURCETYPE
{
	D3DRTYPE_SURFACE = 0x1,
	D3DRTYPE_VOLUME = 0x2,
	D3DRTYPE_TEXTURE = 0x3,
	D3DRTYPE_VOLUMETEXTURE = 0x4,
	D3DRTYPE_CUBETEXTURE = 0x5,
	D3DRTYPE_VERTEXBUFFER = 0x6,
	D3DRTYPE_INDEXBUFFER = 0x7,
	D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF,
};

/* 11233 */
enum _D3DPOOL
{
	D3DPOOL_DEFAULT = 0x0,
	D3DPOOL_MANAGED = 0x1,
	D3DPOOL_SYSTEMMEM = 0x2,
	D3DPOOL_SCRATCH = 0x3,
	D3DPOOL_FORCE_DWORD = 0x7FFFFFFF,
};

/* 7468 */
struct _D3DVERTEXBUFFER_DESC
{
	_D3DFORMAT Format;
	_D3DRESOURCETYPE Type;
	unsigned int Usage;
	_D3DPOOL Pool;
	unsigned int Size;
	unsigned int FVF;
};

/* 7469 */
struct _D3DINDEXBUFFER_DESC
{
	_D3DFORMAT Format;
	_D3DRESOURCETYPE Type;
	unsigned int Usage;
	_D3DPOOL Pool;
	unsigned int Size;
};

/* 7470 */
struct _D3DSURFACE_DESC
{
	_D3DFORMAT Format;
	_D3DRESOURCETYPE Type;
	unsigned int Usage;
	_D3DPOOL Pool;
	_D3DMULTISAMPLE_TYPE MultiSampleType;
	unsigned int MultiSampleQuality;
	unsigned int Width;
	unsigned int Height;
};

/* 7471 */
struct _D3DVOLUME_DESC
{
	_D3DFORMAT Format;
	_D3DRESOURCETYPE Type;
	unsigned int Usage;
	_D3DPOOL Pool;
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
};

/* 7472 */
struct _D3DLOCKED_RECT
{
	int Pitch;
	void *pBits;
};

/* 7473 */
struct _D3DBOX
{
	unsigned int Left;
	unsigned int Top;
	unsigned int Right;
	unsigned int Bottom;
	unsigned int Front;
	unsigned int Back;
};

/* 7474 */
struct _D3DLOCKED_BOX
{
	int RowPitch;
	int SlicePitch;
	void *pBits;
};

/* 11257 */
enum _D3DBASISTYPE
{
	D3DBASIS_BEZIER = 0x0,
	D3DBASIS_BSPLINE = 0x1,
	D3DBASIS_CATMULL_ROM = 0x2,
	D3DBASIS_FORCE_DWORD = 0x7FFFFFFF,
};

/* 11258 */
enum _D3DDEGREETYPE
{
	D3DDEGREE_LINEAR = 0x1,
	D3DDEGREE_QUADRATIC = 0x2,
	D3DDEGREE_CUBIC = 0x3,
	D3DDEGREE_QUINTIC = 0x5,
	D3DDEGREE_FORCE_DWORD = 0x7FFFFFFF,
};

/* 7475 */
struct _D3DRECTPATCH_INFO
{
	unsigned int StartVertexOffsetWidth;
	unsigned int StartVertexOffsetHeight;
	unsigned int Width;
	unsigned int Height;
	unsigned int Stride;
	_D3DBASISTYPE Basis;
	_D3DDEGREETYPE Degree;
};

/* 7476 */
struct _D3DTRIPATCH_INFO
{
	unsigned int StartVertexOffset;
	unsigned int NumVertices;
	_D3DBASISTYPE Basis;
	_D3DDEGREETYPE Degree;
};

/* 7477 */
struct __unaligned __declspec(align(4)) _D3DADAPTER_IDENTIFIER9
{
	char Driver[512];
	char Description[512];
	char DeviceName[32];
	_LARGE_INTEGER DriverVersion;
	unsigned int VendorId;
	unsigned int DeviceId;
	unsigned int SubSysId;
	unsigned int Revision;
	_GUID DeviceIdentifier;
	unsigned int WHQLLevel;
};

/* 7478 */
struct _D3DRASTER_STATUS
{
	int InVBlank;
	unsigned int ScanLine;
};

/* 7479 */
struct _D3DVSHADERCAPS2_0
{
	unsigned int Caps;
	int DynamicFlowControlDepth;
	int NumTemps;
	int StaticFlowControlDepth;
};

/* 7480 */
struct _D3DPSHADERCAPS2_0
{
	unsigned int Caps;
	int DynamicFlowControlDepth;
	int NumTemps;
	int StaticFlowControlDepth;
	int NumInstructionSlots;
};

/* 7481 */
struct _D3DCAPS9
{
	_D3DDEVTYPE DeviceType;
	unsigned int AdapterOrdinal;
	unsigned int Caps;
	unsigned int Caps2;
	unsigned int Caps3;
	unsigned int PresentationIntervals;
	unsigned int CursorCaps;
	unsigned int DevCaps;
	unsigned int PrimitiveMiscCaps;
	unsigned int RasterCaps;
	unsigned int ZCmpCaps;
	unsigned int SrcBlendCaps;
	unsigned int DestBlendCaps;
	unsigned int AlphaCmpCaps;
	unsigned int ShadeCaps;
	unsigned int TextureCaps;
	unsigned int TextureFilterCaps;
	unsigned int CubeTextureFilterCaps;
	unsigned int VolumeTextureFilterCaps;
	unsigned int TextureAddressCaps;
	unsigned int VolumeTextureAddressCaps;
	unsigned int LineCaps;
	unsigned int MaxTextureWidth;
	unsigned int MaxTextureHeight;
	unsigned int MaxVolumeExtent;
	unsigned int MaxTextureRepeat;
	unsigned int MaxTextureAspectRatio;
	unsigned int MaxAnisotropy;
	float MaxVertexW;
	float GuardBandLeft;
	float GuardBandTop;
	float GuardBandRight;
	float GuardBandBottom;
	float ExtentsAdjust;
	unsigned int StencilCaps;
	unsigned int FVFCaps;
	unsigned int TextureOpCaps;
	unsigned int MaxTextureBlendStages;
	unsigned int MaxSimultaneousTextures;
	unsigned int VertexProcessingCaps;
	unsigned int MaxActiveLights;
	unsigned int MaxUserClipPlanes;
	unsigned int MaxVertexBlendMatrices;
	unsigned int MaxVertexBlendMatrixIndex;
	float MaxPointSize;
	unsigned int MaxPrimitiveCount;
	unsigned int MaxVertexIndex;
	unsigned int MaxStreams;
	unsigned int MaxStreamStride;
	unsigned int VertexShaderVersion;
	unsigned int MaxVertexShaderConst;
	unsigned int PixelShaderVersion;
	float PixelShader1xMaxValue;
	unsigned int DevCaps2;
	float MaxNpatchTessellationLevel;
	unsigned int Reserved5;
	unsigned int MasterAdapterOrdinal;
	unsigned int AdapterOrdinalInGroup;
	unsigned int NumberOfAdaptersInGroup;
	unsigned int DeclTypes;
	unsigned int NumSimultaneousRTs;
	unsigned int StretchRectFilterCaps;
	_D3DVSHADERCAPS2_0 VS20Caps;
	_D3DPSHADERCAPS2_0 PS20Caps;
	unsigned int VertexTextureFilterCaps;
	unsigned int MaxVShaderInstructionsExecuted;
	unsigned int MaxPShaderInstructionsExecuted;
	unsigned int MaxVertexShader30InstructionSlots;
	unsigned int MaxPixelShader30InstructionSlots;
};

/* 7482 */
struct __cppobj IDirect3DVertexShader9 : IUnknown
{
};

/* 7483 */
struct __cppobj IDirect3DPixelShader9 : IUnknown
{
};

/* 7484 */
struct __cppobj IDirect3DBaseTexture9 : IDirect3DResource9
{
};

/* 7485 */
struct __cppobj IDirect3DTexture9 : IDirect3DBaseTexture9
{
};

/* 7486 */
struct __cppobj D3DXFLOAT16
{
	unsigned __int16 value;
};

/* 7487 */
struct __cppobj D3DXVECTOR2
{
	float x;
	float y;
};

/* 7488 */
struct __cppobj D3DXVECTOR2_16F
{
	D3DXFLOAT16 x;
	D3DXFLOAT16 y;
};

/* 7489 */
struct __cppobj D3DXVECTOR3 : _D3DVECTOR
{
};

/* 7490 */
struct __cppobj D3DXVECTOR3_16F
{
	D3DXFLOAT16 x;
	D3DXFLOAT16 y;
	D3DXFLOAT16 z;
};

/* 7491 */
struct __cppobj D3DXVECTOR4
{
	float x;
	float y;
	float z;
	float w;
};

/* 7492 */
struct __cppobj D3DXVECTOR4_16F
{
	D3DXFLOAT16 x;
	D3DXFLOAT16 y;
	D3DXFLOAT16 z;
	D3DXFLOAT16 w;
};

/* 7493 */
struct __cppobj D3DXMATRIX : _D3DMATRIX
{
};

/* 7494 */
struct __cppobj _D3DXMATRIXA16 : D3DXMATRIX
{
};

/* 7495 */
struct __cppobj D3DXQUATERNION
{
	float x;
	float y;
	float z;
	float w;
};

/* 7496 */
struct __cppobj D3DXPLANE
{
	float a;
	float b;
	float c;
	float d;
};

/* 7497 */
struct __cppobj D3DXCOLOR
{
	float r;
	float g;
	float b;
	float a;
};

/* 7498 */
struct __cppobj ID3DXSprite : IUnknown
{
};

/* 7499 */
struct _D3DXFONT_DESCA
{
	int Height;
	unsigned int Width;
	unsigned int Weight;
	unsigned int MipLevels;
	int Italic;
	char CharSet;
	char OutputPrecision;
	char Quality;
	char PitchAndFamily;
	char FaceName[32];
};

/* 7500 */
struct _D3DXFONT_DESCW
{
	int Height;
	unsigned int Width;
	unsigned int Weight;
	unsigned int MipLevels;
	int Italic;
	char CharSet;
	char OutputPrecision;
	char Quality;
	char PitchAndFamily;
	wchar_t FaceName[32];
};

/* 7501 */
struct __cppobj ID3DXFont : IUnknown
{
};

/* 7502 */
struct __cppobj IDirect3DSurface9 : IDirect3DResource9
{
};

/* 7503 */
struct _D3DXEFFECT_DESC
{
	const char *Creator;
	unsigned int Parameters;
	unsigned int Techniques;
	unsigned int Functions;
};

/* 7504 */
struct _D3DXPARAMETER_DESC
{
	const char *Name;
	const char *Semantic;
	_D3DXPARAMETER_CLASS Class;
	_D3DXPARAMETER_TYPE Type;
	unsigned int Rows;
	unsigned int Columns;
	unsigned int Elements;
	unsigned int Annotations;
	unsigned int StructMembers;
	unsigned int Flags;
	unsigned int Bytes;
};

/* 7505 */
struct _D3DXTECHNIQUE_DESC
{
	const char *Name;
	unsigned int Passes;
	unsigned int Annotations;
};

/* 7506 */
struct _D3DXPASS_DESC
{
	const char *Name;
	unsigned int Annotations;
	const unsigned int *pVertexShaderFunction;
	const unsigned int *pPixelShaderFunction;
};

/* 7507 */
struct _D3DXFUNCTION_DESC
{
	const char *Name;
	unsigned int Annotations;
};

/* 7508 */
struct __cppobj ID3DXEffectStateManager : IUnknown
{
};

/* 7509 */
struct __cppobj IDirect3DSwapChain9 : IUnknown
{
};

/* 7510 */
struct __cppobj IDirect3DVolumeTexture9 : IDirect3DBaseTexture9
{
};

/* 7511 */
struct __cppobj IDirect3DCubeTexture9 : IDirect3DBaseTexture9
{
};

/* 7512 */
struct __cppobj IDirect3DIndexBuffer9 : IDirect3DResource9
{
};

/* 7513 */
struct __cppobj IDirect3DStateBlock9 : IUnknown
{
};

/* 7514 */
struct __cppobj IDirect3DQuery9 : IUnknown
{
};

/* 7515 */
struct __cppobj IDirect3DVolume9 : IUnknown
{
};

/* 7516 */
struct vertex_t
{
	__int16 x;
	__int16 y;
	__int16 z;
	__int16 s;
	__int16 t;
	unsigned int c;
	__int16 s1;
	__int16 t1;
};

/* 7517 */
struct $BB972E60500CC126FD974613927DE0B4
{
	bool enabled;
	int t;
	unsigned int fb;
	int zoomSrc[4];
	int zoomDst[4];
	int defaultFbo;
};

/* 7518 */
struct $611257743539F48D1248594AB7AD584D
{
	texture_t textures[512];
	program_t programs[9];
	vertex_t verts[2097120];
	drawCmd_t cmds[8192];
	vec4_t projections[4];
	bool useShaders;
	bool has_pvrtc;
	bool has_s3tc;
	bool has_atc;
	drawCmd_t user;
	vertex_t v;
	drawState_t stateStack[4];
	int stateStackTop;
	$7A482BBA0D1D34ED5A2E6984BF7642B3 viewport;
	vec4_t vertScale;
	vec4_t zoom;
	int n;
	SDL_Rect scissor;
	drawState_t hwState;
	drawState_t force;
	$BB972E60500CC126FD974613927DE0B4 pp;
	unsigned int uploadFormat;
	int uploadType;
	const char *extensions;
	const char *versionstring;
	int majorVersion;
	int minorVersion;
	int sortStart;
	float blurAmount;
	DepthLockState depthLockState;
	int height;
};

/* 7519 */
struct colorblock
{
	unsigned __int16 color0;
	unsigned __int16 color1;
	char d_c_b_a;
	char h_g_f_e;
	char l_k_j_i;
	char p_o_n_m;
};

/* 7520 */
struct DXT3alphablock
{
	char b_a;
	char d_c;
	char f_e;
	char h_g;
	char j_i;
	char l_k;
	char n_m;
	char p_o;
};

/* 7521 */
struct DXT3block
{
	DXT3alphablock alpha;
	colorblock color;
};

/* 7522 */
struct alphablock
{
	char alpha0;
	char alpha1;
	char a[6];
};

/* 7523 */
struct DXT5block
{
	alphablock alpha;
	colorblock color;
};

/* 7524 */
struct CFixedAlloc::CNode
{
	CFixedAlloc::CNode *pNext;
};

/* 7525 */
struct __cppobj CFixedAlloc
{
	unsigned int m_nAllocSize;
	unsigned int m_nBlockSize;
	CPlex *m_pBlocks;
	CFixedAlloc::CNode *m_pNodeFree;
};

/* 7526 */
struct _ENetCallbacks
{
	void *(__cdecl *malloc)(unsigned int);
	void (__cdecl *free)(void *);
	void (__cdecl *no_memory)();
};

/* 7527 */
struct _ENetProtocolCommandHeader
{
	char command;
	char channelID;
	unsigned __int16 reliableSequenceNumber;
};

/* 7528 */
struct _ENetProtocolSendFragment
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 startSequenceNumber;
	unsigned __int16 dataLength;
	unsigned int fragmentCount;
	unsigned int fragmentNumber;
	unsigned int totalLength;
	unsigned int fragmentOffset;
};

/* 7529 */
struct _ENetListNode
{
	_ENetListNode *next;
	_ENetListNode *previous;
};

/* 7530 */
struct __declspec(align(4)) _ENetAddress
{
	unsigned int host;
	unsigned __int16 port;
};

/* 7532 */
struct _ENetList
{
	_ENetListNode sentinel;
};

/* 7535 */
struct _ENetProtocolAcknowledge
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 receivedReliableSequenceNumber;
	unsigned __int16 receivedSentTime;
};

/* 7536 */
struct _ENetProtocolConnect
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 outgoingPeerID;
	char incomingSessionID;
	char outgoingSessionID;
	unsigned int mtu;
	unsigned int windowSize;
	unsigned int channelCount;
	unsigned int incomingBandwidth;
	unsigned int outgoingBandwidth;
	unsigned int packetThrottleInterval;
	unsigned int packetThrottleAcceleration;
	unsigned int packetThrottleDeceleration;
	unsigned int connectID;
	unsigned int data;
};

/* 7537 */
struct _ENetProtocolVerifyConnect
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 outgoingPeerID;
	char incomingSessionID;
	char outgoingSessionID;
	unsigned int mtu;
	unsigned int windowSize;
	unsigned int channelCount;
	unsigned int incomingBandwidth;
	unsigned int outgoingBandwidth;
	unsigned int packetThrottleInterval;
	unsigned int packetThrottleAcceleration;
	unsigned int packetThrottleDeceleration;
	unsigned int connectID;
};

/* 7538 */
struct _ENetProtocolDisconnect
{
	_ENetProtocolCommandHeader header;
	unsigned int data;
};

/* 7539 */
struct _ENetProtocolPing
{
	_ENetProtocolCommandHeader header;
};

/* 7540 */
struct _ENetProtocolSendReliable
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 dataLength;
};

/* 7541 */
struct _ENetProtocolSendUnreliable
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 unreliableSequenceNumber;
	unsigned __int16 dataLength;
};

/* 7542 */
struct _ENetProtocolSendUnsequenced
{
	_ENetProtocolCommandHeader header;
	unsigned __int16 unsequencedGroup;
	unsigned __int16 dataLength;
};

/* 7543 */
struct _ENetProtocolBandwidthLimit
{
	_ENetProtocolCommandHeader header;
	unsigned int incomingBandwidth;
	unsigned int outgoingBandwidth;
};

/* 7544 */
struct _ENetProtocolThrottleConfigure
{
	_ENetProtocolCommandHeader header;
	unsigned int packetThrottleInterval;
	unsigned int packetThrottleAcceleration;
	unsigned int packetThrottleDeceleration;
};

/* 7545 */
union _ENetProtocol
{
	_ENetProtocolCommandHeader header;
	_ENetProtocolAcknowledge acknowledge;
	_ENetProtocolConnect connect;
	_ENetProtocolVerifyConnect verifyConnect;
	_ENetProtocolDisconnect disconnect;
	_ENetProtocolPing ping;
	_ENetProtocolSendReliable sendReliable;
	_ENetProtocolSendUnreliable sendUnreliable;
	_ENetProtocolSendUnsequenced sendUnsequenced;
	_ENetProtocolSendFragment sendFragment;
	_ENetProtocolBandwidthLimit bandwidthLimit;
	_ENetProtocolThrottleConfigure throttleConfigure;
};

/* 7546 */
struct ENetBuffer
{
	unsigned int dataLength;
	void *data;
};

/* 7547 */
struct _ENetCompressor
{
	void *context;
	unsigned int (__cdecl *compress)(void *, ENetBuffer *, unsigned int, unsigned int, char *, unsigned int);
	unsigned int (__cdecl *decompress)(void *, const char *, unsigned int, char *, unsigned int);
	void (__cdecl *destroy)(void *);
};

/* 7531 */
struct _ENetHost
{
	unsigned int socket;
	_ENetAddress address;
	unsigned int incomingBandwidth;
	unsigned int outgoingBandwidth;
	unsigned int bandwidthThrottleEpoch;
	unsigned int mtu;
	unsigned int randomSeed;
	int recalculateBandwidthLimits;
	_ENetPeer *peers;
	unsigned int peerCount;
	unsigned int channelLimit;
	unsigned int serviceTime;
	_ENetList dispatchQueue;
	int continueSending;
	unsigned int packetSize;
	unsigned __int16 headerFlags;
	_ENetProtocol commands[32];
	unsigned int commandCount;
	ENetBuffer buffers[65];
	unsigned int bufferCount;
	unsigned int (__cdecl *checksum)(ENetBuffer *, unsigned int);
	_ENetCompressor compressor;
	char packetData[2][4096];
	_ENetAddress receivedAddress;
	char *receivedData;
	unsigned int receivedDataLength;
	unsigned int totalSentData;
	unsigned int totalSentPackets;
	unsigned int totalReceivedData;
	unsigned int totalReceivedPackets;
};

/* 7534 */
struct _ENetPeer
{
	_ENetListNode dispatchList;
	_ENetHost *host;
	unsigned __int16 outgoingPeerID;
	unsigned __int16 incomingPeerID;
	unsigned int connectID;
	char outgoingSessionID;
	char incomingSessionID;
	_ENetAddress address;
	void *data;
	_ENetPeerState state;
	_ENetChannel *channels;
	unsigned int channelCount;
	unsigned int incomingBandwidth;
	unsigned int outgoingBandwidth;
	unsigned int incomingBandwidthThrottleEpoch;
	unsigned int outgoingBandwidthThrottleEpoch;
	unsigned int incomingDataTotal;
	unsigned int outgoingDataTotal;
	unsigned int lastSendTime;
	unsigned int lastReceiveTime;
	unsigned int nextTimeout;
	unsigned int earliestTimeout;
	unsigned int packetLossEpoch;
	unsigned int packetsSent;
	unsigned int packetsLost;
	unsigned int packetLoss;
	unsigned int packetLossVariance;
	unsigned int packetThrottle;
	unsigned int packetThrottleLimit;
	unsigned int packetThrottleCounter;
	unsigned int packetThrottleEpoch;
	unsigned int packetThrottleAcceleration;
	unsigned int packetThrottleDeceleration;
	unsigned int packetThrottleInterval;
	unsigned int lastRoundTripTime;
	unsigned int lowestRoundTripTime;
	unsigned int lastRoundTripTimeVariance;
	unsigned int highestRoundTripTimeVariance;
	unsigned int roundTripTime;
	unsigned int roundTripTimeVariance;
	unsigned int mtu;
	unsigned int windowSize;
	unsigned int reliableDataInTransit;
	unsigned __int16 outgoingReliableSequenceNumber;
	_ENetList acknowledgements;
	_ENetList sentReliableCommands;
	_ENetList sentUnreliableCommands;
	_ENetList outgoingReliableCommands;
	_ENetList outgoingUnreliableCommands;
	_ENetList dispatchedCommands;
	int needsDispatch;
	unsigned __int16 incomingUnsequencedGroup;
	unsigned __int16 outgoingUnsequencedGroup;
	unsigned int unsequencedWindow[32];
	unsigned int eventData;
};

/* 7533 */
struct _ENetChannel
{
	unsigned __int16 outgoingReliableSequenceNumber;
	unsigned __int16 outgoingUnreliableSequenceNumber;
	unsigned __int16 usedReliableWindows;
	unsigned __int16 reliableWindows[16];
	unsigned __int16 incomingReliableSequenceNumber;
	unsigned __int16 incomingUnreliableSequenceNumber;
	_ENetList incomingReliableCommands;
	_ENetList incomingUnreliableCommands;
};

/* 7548 */
struct _ENetPacket
{
	unsigned int referenceCount;
	unsigned int flags;
	char *data;
	unsigned int dataLength;
	void (__cdecl *freeCallback)(_ENetPacket *);
};

/* 7549 */
struct _ENetOutgoingCommand
{
	_ENetListNode outgoingCommandList;
	unsigned __int16 reliableSequenceNumber;
	unsigned __int16 unreliableSequenceNumber;
	unsigned int sentTime;
	unsigned int roundTripTimeout;
	unsigned int roundTripTimeoutLimit;
	unsigned int fragmentOffset;
	unsigned __int16 fragmentLength;
	unsigned __int16 sendAttempts;
	_ENetProtocol command;
	_ENetPacket *packet;
};

/* 7550 */
struct _ENetIncomingCommand
{
	_ENetListNode incomingCommandList;
	unsigned __int16 reliableSequenceNumber;
	unsigned __int16 unreliableSequenceNumber;
	_ENetProtocol command;
	unsigned int fragmentCount;
	unsigned int fragmentsRemaining;
	unsigned int *fragments;
	_ENetPacket *packet;
};

/* 7551 */
struct _ENetAcknowledgement
{
	_ENetListNode acknowledgementList;
	unsigned int sentTime;
	_ENetProtocol command;
};

/* 7552 */
struct _ENetEvent
{
	_ENetEventType type;
	_ENetPeer *peer;
	char channelID;
	unsigned int data;
	_ENetPacket *packet;
};

/* 7553 */
struct _ENetProtocolHeader
{
	unsigned __int16 peerID;
	unsigned __int16 sentTime;
};

/* 7554 */
struct _WSABUF
{
	unsigned int len;
	char *buf;
};

/* 7555 */
struct __cppobj __declspec(align(8)) cricket::SessionManagerTask : buzz::XmppTask
{
	cricket::SessionManager *session_manager_;
};

/* 7557 */
struct __cppobj std::pair<talk_base::StreamInterface * const,buzz::Jid>
{
	talk_base::StreamInterface *const first;
	buzz::Jid second;
};

/* 7556 */
struct __cppobj std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *>
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> *_Left;
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> *_Parent;
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<talk_base::StreamInterface * const,buzz::Jid> _Myval;
};

/* 7558 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7559 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::StreamInterface * const,buzz::Jid>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > >
{
};

/* 7560 */
struct __cppobj std::_Tree_buy<std::pair<talk_base::StreamInterface * const,buzz::Jid>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::StreamInterface * const,buzz::Jid>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > >
{
};

/* 7561 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> >,0> > : std::_Tree_buy<std::pair<talk_base::StreamInterface * const,buzz::Jid>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > >
{
};

/* 7562 */
struct __cppobj std::_Tree<std::_Tmap_traits<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> >,0> >
{
};

/* 7563 */
struct __cppobj std::map<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > : std::_Tree<std::_Tmap_traits<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> >,0> >
{
};

/* 7565 */
struct __cppobj std::pair<talk_base::StreamInterface * const,DP_Packet *>
{
	talk_base::StreamInterface *const first;
	DP_Packet *second;
};

/* 7564 */
struct __cppobj std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *>
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> *_Left;
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> *_Parent;
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<talk_base::StreamInterface * const,DP_Packet *> _Myval;
};

/* 7566 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7567 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::StreamInterface * const,DP_Packet *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > >
{
};

/* 7568 */
struct __cppobj std::_Tree_buy<std::pair<talk_base::StreamInterface * const,DP_Packet *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::StreamInterface * const,DP_Packet *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > >
{
};

/* 7569 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> >,0> > : std::_Tree_buy<std::pair<talk_base::StreamInterface * const,DP_Packet *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > >
{
};

/* 7570 */
struct __cppobj std::_Tree<std::_Tmap_traits<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> >,0> >
{
};

/* 7571 */
struct __cppobj std::map<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > : std::_Tree<std::_Tmap_traits<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> >,0> >
{
};

/* 7573 */
struct __cppobj XmppHandler : sigslot::has_slots<sigslot::single_threaded>
{
	buzz::XmppEngine::State m_state;
	buzz::XmppClient *m_xmpp_client;
	talk_base::NetworkManager *m_network_manager;
	cricket::BasicPortAllocator *m_port_allocator;
	cricket::SessionManagerTask *m_session_manager_task;
	cricket::SessionManager *m_session_manager;
	cricket::TunnelSessionClient *m_tunnel_client;
	XmppThread m_main_thread;
	talk_base::AutoThread m_app_thread;
	buzz::XmppClientSettings m_xcs;
	buzz::PresenceOutTask *m_presence_out_task;
	buzz::PresencePushTaskMuc *m_presence_push_task;
	buzz::Status m_status;
	std::map<buzz::Jid,buzz::Muc *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,buzz::Muc *> > > m_mucs;
	buzz::Jid m_currentMuc;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_hostedRoomName;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_hostedRoomDescription;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_hostedRoomPassword;
	bool m_hostedRoomVisible;
	bool m_isHostingRoom;
	talk_base::SocketAddress m_remoteAddress;
	buzz::MucRoomConfigTask *m_muc_config_task;
	std::map<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > m_streams;
	std::map<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > m_leftoverPackets;
	DPProviderJingle *m_provider;
};

/* 7576 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7577 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::StreamInterface * const,IDPPeer *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > >
{
};

/* 7578 */
struct __cppobj std::_Tree_buy<std::pair<talk_base::StreamInterface * const,IDPPeer *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<talk_base::StreamInterface * const,IDPPeer *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > >
{
};

/* 7579 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> >,0> > : std::_Tree_buy<std::pair<talk_base::StreamInterface * const,IDPPeer *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > >
{
};

/* 7580 */
struct __cppobj std::_Tree<std::_Tmap_traits<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> >,0> >
{
};

/* 7581 */
struct __cppobj std::map<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > : std::_Tree<std::_Tmap_traits<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> >,0> >
{
};

/* 7584 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7585 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<buzz::Jid const ,IDPPeer *>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > >
{
};

/* 7586 */
struct __cppobj std::_Tree_buy<std::pair<buzz::Jid const ,IDPPeer *>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<buzz::Jid const ,IDPPeer *>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > > >
{
};

/* 7587 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> >,0> > : std::_Tree_buy<std::pair<buzz::Jid const ,IDPPeer *>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > >
{
};

/* 7588 */
struct __cppobj std::_Tree<std::_Tmap_traits<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> >,0> >
{
};

/* 7589 */
struct __cppobj std::map<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > > : std::_Tree<std::_Tmap_traits<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> >,0> >
{
};

/* 7590 */
struct __cppobj std::_Deque_val<std::_Deque_simple_types<DP_Event *> > : std::_Container_base12
{
	DP_Event ***_Map;
	unsigned int _Mapsize;
	unsigned int _Myoff;
	unsigned int _Mysize;
};

/* 7591 */
struct __cppobj std::_Deque_alloc<0,std::_Deque_base_types<DP_Event *,std::allocator<DP_Event *> > > : std::_Deque_val<std::_Deque_simple_types<DP_Event *> >
{
};

/* 7592 */
struct __cppobj std::deque<DP_Event *,std::allocator<DP_Event *> > : std::_Deque_alloc<0,std::_Deque_base_types<DP_Event *,std::allocator<DP_Event *> > >
{
};

/* 7593 */
struct __cppobj std::queue<DP_Event *,std::deque<DP_Event *,std::allocator<DP_Event *> > >
{
	std::deque<DP_Event *,std::allocator<DP_Event *> > c;
};

/* 7572 */
struct __cppobj DPProviderJingle : IDPProvider
{
	XmppHandler m_xmpp;
	std::map<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > m_peers;
	std::map<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > > m_peerJids;
	int m_currentSessionId;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_nickname;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_version;
	bool m_connected;
	bool m_joining;
	bool m_backendConnected;
	std::queue<DP_Event *,std::deque<DP_Event *,std::allocator<DP_Event *> > > m_eventQueue;
	int m_refreshAt;
};

/* 7575 */
struct __cppobj std::pair<talk_base::StreamInterface * const,IDPPeer *>
{
	talk_base::StreamInterface *const first;
	IDPPeer *second;
};

/* 7574 */
struct __cppobj std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *>
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> *_Left;
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> *_Parent;
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<talk_base::StreamInterface * const,IDPPeer *> _Myval;
};

/* 7583 */
struct __cppobj std::pair<buzz::Jid const ,IDPPeer *>
{
	buzz::Jid first;
	IDPPeer *second;
};

/* 7582 */
struct __cppobj std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *>
{
	std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> *_Left;
	std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> *_Parent;
	std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<buzz::Jid const ,IDPPeer *> _Myval;
};

/* 7594 */
struct __cppobj DPPeerJingle : IDPPeer
{
	std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > > m_packetOutQueueControl;
	std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > > m_packetOutQueueGame;
	std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > > m_packetInQueueControl;
	std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > > m_packetInQueueGame;
	talk_base::StreamInterface *m_peer;
	XmppThread *m_thread;
	buzz::Jid m_jid;
	int m_spinPacketOutControl;
	int m_spinPacketOutGame;
	int m_spinPacketInControl;
	int m_spinPacketInGame;
	DP_Packet *m_pendingPacket;
	int m_pendingPacketChannel;
	char m_pendingPacketData[8];
	int m_pendingPacketOffset;
};

/* 7595 */
struct std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *_Myval;
};

/* 7596 */
struct __cppobj sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded>
{
	sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded>Vtbl *vfptr;
};

/* 7598 */
struct sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *this, cricket::SessionSendTask *);
	sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *this);
	sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 7599 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7600 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> >
{
};

/* 7601 */
struct __cppobj std::_List_buy<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > >
{
};

/* 7602 */
struct __cppobj std::list<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> >
{
};

/* 7603 */
struct __cppobj sigslot::_signal_base1<cricket::SessionSendTask *,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > m_connected_slots;
};

/* 7604 */
struct __cppobj sigslot::signal1<cricket::SessionSendTask *,sigslot::single_threaded> : sigslot::_signal_base1<cricket::SessionSendTask *,sigslot::single_threaded>
{
};

/* 7597 */
struct __cppobj cricket::SessionSendTask : buzz::XmppTask
{
	sigslot::signal1<cricket::SessionSendTask *,sigslot::single_threaded> SignalDone;
	cricket::SessionManager *session_manager_;
	talk_base::scoped_ptr<buzz::XmlElement> stanza_;
};

/* 7605 */
struct __cppobj std::_Vector_val<std::_Simple_types<talk_base::SocketAddress> > : std::_Container_base0
{
	talk_base::SocketAddress *_Myfirst;
	talk_base::SocketAddress *_Mylast;
	talk_base::SocketAddress *_Myend;
};

/* 7606 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > > : std::_Vector_val<std::_Simple_types<talk_base::SocketAddress> >
{
};

/* 7607 */
struct __cppobj std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > : std::_Vector_alloc<0,std::_Vec_base_types<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > >
{
};

/* 7608 */
struct __cppobj cricket::HttpPortAllocatorBase : cricket::BasicPortAllocator
{
	std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > stun_hosts_;
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > relay_hosts_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > relay_token_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > agent_;
};

/* 7609 */
struct __cppobj cricket::HttpPortAllocatorSessionBase : cricket::BasicPortAllocatorSession
{
	std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > relay_hosts_;
	std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > stun_hosts_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > relay_token_;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > agent_;
	int attempts_;
};

/* 7610 */
struct __cppobj std::_Allocator_base<DP_Event * *>
{
};

/* 7611 */
struct __cppobj std::allocator<DP_Event * *> : std::_Allocator_base<DP_Event * *>
{
};

/* 7612 */
struct __cppobj std::allocator_traits<std::allocator<DP_Event * *> >
{
};

/* 7613 */
struct __cppobj std::_Allocator_base<DP_Event *>
{
};

/* 7614 */
struct __cppobj std::allocator<DP_Event *> : std::_Allocator_base<DP_Event *>
{
};

/* 7615 */
struct __cppobj std::allocator_traits<std::allocator<DP_Event *> >
{
};

/* 7616 */
struct __cppobj std::_Allocator_base<std::pair<talk_base::StreamInterface * const,IDPPeer *> >
{
};

/* 7617 */
struct __cppobj std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> > : std::_Allocator_base<std::pair<talk_base::StreamInterface * const,IDPPeer *> >
{
};

/* 7618 */
struct __cppobj std::binary_function<talk_base::StreamInterface *,talk_base::StreamInterface *,bool>
{
};

/* 7619 */
struct __cppobj std::less<talk_base::StreamInterface *> : std::binary_function<talk_base::StreamInterface *,talk_base::StreamInterface *,bool>
{
};

/* 7620 */
struct __cppobj std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<DP_Event *> > > : std::_Iterator_base12
{
	unsigned int _Myoff;
};

/* 7621 */
struct __cppobj std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<DP_Event *> > > : std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<DP_Event *> > >
{
};

/* 7622 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Event *> > : std::allocator<DP_Event *>
{
};

/* 7623 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Event *> >::rebind<DP_Event *>
{
};

/* 7624 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Event *> >::rebind<DP_Event * *>
{
};

/* 7625 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Event * *> > : std::allocator<DP_Event * *>
{
};

/* 7626 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> >
{
};

/* 7627 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> >
{
};

/* 7628 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> > >
{
};

/* 7629 */
struct __cppobj std::_Allocator_base<std::pair<talk_base::StreamInterface * const,DP_Packet *> >
{
};

/* 7630 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> > > : std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> >
{
};

/* 7631 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface * const,IDPPeer *>,int,std::pair<talk_base::StreamInterface * const,IDPPeer *> const *,std::pair<talk_base::StreamInterface * const,IDPPeer *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7632 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface * const,IDPPeer *>,int,std::pair<talk_base::StreamInterface * const,IDPPeer *> const *,std::pair<talk_base::StreamInterface * const,IDPPeer *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,IDPPeer *>,void *> *_Ptr;
};

/* 7633 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > >,std::_Iterator_base0>
{
};

/* 7634 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > >
{
};

/* 7635 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > first;
	bool second;
};

/* 7636 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,IDPPeer *> > > > second;
};

/* 7637 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> >
{
};

/* 7638 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> >
{
};

/* 7639 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> >
{
};

/* 7640 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> >
{
};

/* 7641 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> >
{
};

/* 7642 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> > >
{
};

/* 7643 */
struct __cppobj std::_Allocator_base<std::pair<talk_base::StreamInterface * const,buzz::Jid> >
{
};

/* 7644 */
struct __cppobj std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> > : std::_Allocator_base<std::pair<talk_base::StreamInterface * const,buzz::Jid> >
{
};

/* 7645 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> > >
{
};

/* 7646 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> >
{
};

/* 7647 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> > >
{
};

/* 7648 */
struct __cppobj std::_Allocator_base<std::pair<buzz::Jid const ,IDPPeer *> >
{
};

/* 7649 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> > > : std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> >
{
};

/* 7650 */
struct __cppobj std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> > : std::_Allocator_base<std::pair<talk_base::StreamInterface * const,DP_Packet *> >
{
};

/* 7651 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface * const,DP_Packet *>,int,std::pair<talk_base::StreamInterface * const,DP_Packet *> const *,std::pair<talk_base::StreamInterface * const,DP_Packet *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7652 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface * const,DP_Packet *>,int,std::pair<talk_base::StreamInterface * const,DP_Packet *> const *,std::pair<talk_base::StreamInterface * const,DP_Packet *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,DP_Packet *>,void *> *_Ptr;
};

/* 7653 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > >,std::_Iterator_base0>
{
};

/* 7654 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > >
{
};

/* 7655 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > first;
	bool second;
};

/* 7656 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,DP_Packet *> > > > second;
};

/* 7657 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> > > : std::allocator<std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> >
{
};

/* 7659 */
struct __cppobj std::pair<_ENetPeer * const,IDPPeer *>
{
	_ENetPeer *const first;
	IDPPeer *second;
};

/* 7658 */
struct __cppobj std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *>
{
	std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> *_Left;
	std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> *_Parent;
	std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> *_Right;
	char _Color;
	char _Isnil;
	std::pair<_ENetPeer * const,IDPPeer *> _Myval;
};

/* 7660 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > : std::_Container_base0
{
	std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7661 */
struct __cppobj std::_Tree_alloc<0,std::_Tree_base_types<std::pair<_ENetPeer * const,IDPPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > > > : std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > >
{
};

/* 7662 */
struct __cppobj std::_Allocator_base<std::pair<_ENetPeer * const,IDPPeer *> >
{
};

/* 7663 */
struct __cppobj std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > : std::_Allocator_base<std::pair<_ENetPeer * const,IDPPeer *> >
{
};

/* 7664 */
struct __cppobj std::_Allocator_base<std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> >
{
};

/* 7665 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> > : std::_Allocator_base<std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> >
{
};

/* 7666 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> > > : std::allocator<std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> >
{
};

/* 7667 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7668 */
struct std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *_Myval;
};

/* 7669 */
struct __cppobj sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded>
{
	sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 7670 */
struct sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > *, std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > *);
	sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *this);
	sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 7671 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,int,sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> * const *,sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 7672 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7673 */
struct __cppobj std::_Tuple_val<_ENetPeer * const &>
{
	_ENetPeer *const *_Val;
};

/* 7674 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *>
{
};

/* 7675 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> > > : std::allocator<std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> >
{
};

/* 7676 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<buzz::Jid const ,IDPPeer *>,int,std::pair<buzz::Jid const ,IDPPeer *> const *,std::pair<buzz::Jid const ,IDPPeer *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7677 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<buzz::Jid const ,IDPPeer *>,int,std::pair<buzz::Jid const ,IDPPeer *> const *,std::pair<buzz::Jid const ,IDPPeer *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<buzz::Jid const ,IDPPeer *>,void *> *_Ptr;
};

/* 7678 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > >,std::_Iterator_base0>
{
};

/* 7679 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > > >
{
};

/* 7680 */
struct __cppobj std::binary_function<_ENetPeer *,_ENetPeer *,bool>
{
};

/* 7681 */
struct __cppobj std::less<_ENetPeer *> : std::binary_function<_ENetPeer *,_ENetPeer *,bool>
{
};

/* 7682 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface * const,buzz::Jid>,int,std::pair<talk_base::StreamInterface * const,buzz::Jid> const *,std::pair<talk_base::StreamInterface * const,buzz::Jid> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7683 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<talk_base::StreamInterface * const,buzz::Jid>,int,std::pair<talk_base::StreamInterface * const,buzz::Jid> const *,std::pair<talk_base::StreamInterface * const,buzz::Jid> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<talk_base::StreamInterface * const,buzz::Jid>,void *> *_Ptr;
};

/* 7684 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > >,std::_Iterator_base0>
{
};

/* 7685 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > >
{
};

/* 7686 */
struct __cppobj std::_Tree_buy<std::pair<_ENetPeer * const,IDPPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > > : std::_Tree_alloc<0,std::_Tree_base_types<std::pair<_ENetPeer * const,IDPPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > > >
{
};

/* 7687 */
struct __cppobj std::_Tree_comp<0,std::_Tmap_traits<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> >,0> > : std::_Tree_buy<std::pair<_ENetPeer * const,IDPPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > >
{
};

/* 7688 */
struct __cppobj std::_Tree<std::_Tmap_traits<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> >,0> > : std::_Tree_comp<0,std::_Tmap_traits<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> >,0> >
{
};

/* 7689 */
struct __cppobj std::map<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > > : std::_Tree<std::_Tmap_traits<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> >,0> >
{
};

/* 7690 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<_ENetPeer * const,IDPPeer *>,int,std::pair<_ENetPeer * const,IDPPeer *> const *,std::pair<_ENetPeer * const,IDPPeer *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7691 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<_ENetPeer * const,IDPPeer *>,int,std::pair<_ENetPeer * const,IDPPeer *> const *,std::pair<_ENetPeer * const,IDPPeer *> const &,std::_Iterator_base0>
{
	std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> *_Ptr;
};

/* 7692 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > >,std::_Iterator_base0>
{
};

/* 7693 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > >
{
};

/* 7694 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > > >
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > > first;
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > > second;
};

/* 7695 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7696 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,int,sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> * const *,sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 7697 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 7698 */
struct __cppobj std::_Allocator_base<talk_base::SocketAddress>
{
};

/* 7699 */
struct __cppobj std::allocator<talk_base::SocketAddress> : std::_Allocator_base<talk_base::SocketAddress>
{
};

/* 7700 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::SocketAddress> > : std::allocator<talk_base::SocketAddress>
{
};

/* 7701 */
struct __cppobj std::allocator_traits<std::allocator<talk_base::SocketAddress> >
{
};

/* 7702 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::SocketAddress> >::rebind<talk_base::SocketAddress>
{
};

/* 7703 */
struct __cppobj std::_Wrap_alloc<std::allocator<talk_base::SocketAddress> >::rebind<talk_base::SocketAddress *>
{
};

/* 7704 */
struct __cppobj std::allocator_traits<std::allocator<std::_Tree_node<std::pair<_ENetPeer * const,IDPPeer *>,void *> > >
{
};

/* 7705 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 7706 */
struct __cppobj std::_Tmap_traits<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> >,0>
{
};

/* 7707 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> >
{
};

/* 7708 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *>
{
};

/* 7709 */
struct __cppobj std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *>
{
};

/* 7710 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 7711 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 7712 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> >
{
};

/* 7713 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> >
{
};

/* 7714 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> >
{
};

/* 7715 */
struct std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *>
{
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> *_Next;
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> *_Prev;
	sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *_Myval;
};

/* 7716 */
struct __cppobj sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded>
{
	sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded>Vtbl *vfptr;
};

/* 7725 */
struct sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded>Vtbl
{
	void *(__thiscall *__vecDelDtor)(sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *this, unsigned int);
	sigslot::has_slots_interface *(__thiscall *getdest)(sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *this);
	void (__thiscall *emit)(sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *this, buzz::MucRoomLookupTask *, buzz::MucRoomInfo *);
	sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *(__thiscall *clone)(sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *this);
	sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *(__thiscall *duplicate)(sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *this, sigslot::has_slots_interface *);
};

/* 7717 */
struct __cppobj std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > : std::_Container_base0
{
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> *_Myhead;
	unsigned int _Mysize;
};

/* 7718 */
struct __cppobj std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > > : std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> >
{
};

/* 7719 */
struct __cppobj std::_List_buy<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > >
{
};

/* 7720 */
struct __cppobj std::list<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> >
{
};

/* 7721 */
struct __cppobj sigslot::_signal_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 7722 */
struct __cppobj sigslot::signal2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> : sigslot::_signal_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded>
{
};

/* 7723 */
struct __cppobj buzz::MucRoomLookupTask : buzz::IqTask
{
	sigslot::signal2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> SignalResult;
};

/* 7724 */
const struct __cppobj buzz::MucRoomInfo
{
	buzz::Jid jid;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > domain;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > hangout_id;
};

/* 7726 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> >
{
};

/* 7727 */
struct __cppobj std::_Allocator_base<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *>
{
};

/* 7728 */
struct __cppobj std::allocator<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *>
{
};

/* 7729 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 7730 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,int,sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> * const *,sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> * const &,std::_Iterator_base0>
{
	std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> *_Ptr;
};

/* 7731 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 7732 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > >
{
};

/* 7733 */
struct __cppobj std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 7734 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<talk_base::StreamInterface * const,buzz::Jid> > > > first;
	bool second;
};

/* 7735 */
struct __cppobj std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> >
{
};

/* 7736 */
struct __cppobj std::allocator<std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> > : std::_Allocator_base<std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> >
{
};

/* 7737 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> > > : std::allocator<std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> >
{
};

/* 7738 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *,void *> > >
{
};

/* 7739 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 7740 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> > >
{
};

/* 7741 */
struct __cppobj std::tuple<_ENetPeer * const &> : std::tuple<>
{
	std::_Tuple_val<_ENetPeer * const &> _Myfirst;
};

/* 7742 */
struct __cppobj std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > > : std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> >,std::_Iterator_base0>
{
};

/* 7743 */
struct __cppobj std::_List_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > > : std::_List_const_iterator<std::_List_val<std::_List_simple_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > >
{
};

/* 7744 */
struct __cppobj std::initializer_list<talk_base::SocketAddress>
{
	talk_base::SocketAddress *_First;
	talk_base::SocketAddress *_Last;
};

/* 7745 */
struct __cppobj std::allocator<std::pair<buzz::Jid const ,IDPPeer *> > : std::_Allocator_base<std::pair<buzz::Jid const ,IDPPeer *> >
{
};

/* 7746 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Packet *> >::rebind<std::_Container_proxy>
{
};

/* 7747 */
struct __cppobj std::_List_buy<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > : std::_List_alloc<0,std::_List_base_types<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > >
{
};

/* 7748 */
struct __cppobj std::allocator<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *> : std::_Allocator_base<sigslot::_connection_base1<cricket::SessionSendTask *,sigslot::single_threaded> *>
{
};

/* 7749 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base2<buzz::MucRoomLookupTask *,buzz::MucRoomInfo const &,sigslot::single_threaded> *,void *> > >
{
};

/* 7750 */
struct __cppobj std::_Tmap_traits<talk_base::StreamInterface *,buzz::Jid,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,buzz::Jid> >,0>
{
};

/* 7751 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<_ENetPeer * const,IDPPeer *> > > > first;
	bool second;
};

/* 7752 */
struct __cppobj std::allocator_traits<std::allocator<std::_List_node<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,void *> > >
{
};

/* 7753 */
struct __cppobj std::list<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > : std::_List_buy<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> >
{
};

/* 7754 */
struct __cppobj std::_Tmap_traits<talk_base::StreamInterface *,DP_Packet *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,DP_Packet *> >,0>
{
};

/* 7755 */
struct __cppobj __declspec(align(4)) std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > > >,bool>
{
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<buzz::Jid const ,IDPPeer *> > > > first;
	bool second;
};

/* 7756 */
struct __cppobj std::pointer_traits<std::pair<_ENetPeer * const,IDPPeer *> *>
{
};

/* 7757 */
struct __cppobj std::_Tmap_traits<talk_base::StreamInterface *,IDPPeer *,std::less<talk_base::StreamInterface *>,std::allocator<std::pair<talk_base::StreamInterface * const,IDPPeer *> >,0>
{
};

/* 7758 */
struct __cppobj std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::rebind<std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> >
{
};

/* 7759 */
struct __cppobj std::_Tmap_traits<buzz::Jid,IDPPeer *,std::less<buzz::Jid>,std::allocator<std::pair<buzz::Jid const ,IDPPeer *> >,0>
{
};

/* 7760 */
struct __cppobj __declspec(align(4)) DPPeerEnet : IDPPeer
{
	std::queue<DP_Packet *,std::deque<DP_Packet *,std::allocator<DP_Packet *> > > m_packetQueue;
	_ENetPeer *m_peer;
	_ENetHost *m_connection;
	bool m_server;
};

/* 7761 */
struct __cppobj __declspec(align(4)) DPProviderEnet : IDPProvider
{
	std::map<_ENetPeer *,IDPPeer *,std::less<_ENetPeer *>,std::allocator<std::pair<_ENetPeer * const,IDPPeer *> > > m_peerMap;
	DPPeerEnet *m_peer;
	bool m_server;
	_ENetHost *m_connection;
	int m_currentSessionId;
	bool m_hasSession;
	bool m_allowJoin;
};

/* 7762 */
struct __cppobj sigslot::_signal_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> : sigslot::_signal_base<sigslot::single_threaded>
{
	std::list<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *,std::allocator<sigslot::_connection_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> *> > m_connected_slots;
};

/* 7763 */
struct __cppobj sigslot::signal3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> : sigslot::_signal_base3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded>
{
};

/* 7764 */
struct __cppobj buzz::JingleInfoTask : buzz::XmppTask
{
	sigslot::signal3<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::vector<talk_base::SocketAddress,std::allocator<talk_base::SocketAddress> > const &,sigslot::single_threaded> SignalJingleInfo;
};

/* 7765 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<cricket::SessionSendTask,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	cricket::SessionSendTask *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::SessionSendTask *this);
};

/* 7766 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<cricket::SessionManagerTask,cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded> : sigslot::_connection_base2<cricket::SessionManager *,buzz::XmlElement const *,sigslot::single_threaded>
{
	cricket::SessionManagerTask *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::SessionManagerTask *this, cricket::SessionManager *, buzz::XmlElement *);
};

/* 7767 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<cricket::SessionManager,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	cricket::SessionManager *m_pobject;
	void (__thiscall *m_pmemfun)(cricket::SessionManager *this);
};

/* 7768 */
struct DP_MetadataPacket
{
	unsigned int id;
	char serverName[64];
	char serverPassword[64];
	int players;
};

/* 7769 */
struct DP_PacketHeader
{
	int sentFrom;
	int sendTo;
};

/* 7770 */
struct DP_PlayerPacket
{
	unsigned int id;
	char playerName[64];
	char remoteAddr[64];
	unsigned int flags;
};

/* 7771 */
struct __cppobj std::_Tuple_val<talk_base::StreamInterface * const &>
{
	talk_base::StreamInterface *const *_Val;
};

/* 7772 */
struct __cppobj std::tuple<talk_base::StreamInterface * const &> : std::tuple<>
{
	std::_Tuple_val<talk_base::StreamInterface * const &> _Myfirst;
};

/* 7773 */
struct __cppobj std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,buzz::MucPresenceStatus> *>
{
};

/* 7774 */
struct __cppobj std::_Tuple_val<buzz::Jid &&>
{
	buzz::Jid *_Val;
};

/* 7775 */
struct __cppobj std::_Wrap_alloc<std::allocator<DP_Event *> >::rebind<std::_Container_proxy>
{
};

/* 7776 */
struct __cppobj std::pointer_traits<std::pair<talk_base::StreamInterface * const,IDPPeer *> *>
{
};

/* 7777 */
struct __cppobj std::pointer_traits<std::pair<buzz::Jid const ,IDPPeer *> *>
{
};

/* 7778 */
struct __cppobj std::_Tuple_val<buzz::Jid const &>
{
	buzz::Jid *_Val;
};

/* 7779 */
struct __cppobj std::tuple<buzz::Jid &&> : std::tuple<>
{
	std::_Tuple_val<buzz::Jid &&> _Myfirst;
};

/* 7780 */
struct __cppobj std::pointer_traits<std::pair<talk_base::StreamInterface * const,DP_Packet *> *>
{
};

/* 7781 */
struct __cppobj std::tuple<buzz::Jid const &> : std::tuple<>
{
	std::_Tuple_val<buzz::Jid const &> _Myfirst;
};

/* 7782 */
struct __cppobj std::pointer_traits<std::pair<buzz::Jid const ,buzz::Muc *> *>
{
};

/* 7783 */
struct __cppobj std::pointer_traits<std::pair<talk_base::StreamInterface * const,buzz::Jid> *>
{
};

/* 7784 */
struct __declspec(align(4)) DPJinglePacketHeader
{
	unsigned int len;
	char channel;
};

/* 7785 */
struct __cppobj RoomDataMessage : talk_base::MessageData
{
	buzz::MucRoomsInfo m_room;
};

/* 7786 */
struct __cppobj __declspec(align(4)) RoomDetailsMessage : talk_base::MessageData
{
	buzz::Jid m_jid;
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_description;
	int m_occupants;
	bool m_password_protected;
};

/* 7787 */
struct __cppobj PeerRoomSizeMessage : talk_base::MessageData
{
	int m_size;
	buzz::Jid m_jid;
};

/* 7788 */
struct __cppobj PeerDisconnectMessage : talk_base::MessageData
{
	DPPeerJingle *m_peer;
};

/* 7789 */
struct __cppobj __declspec(align(8)) sigslot::_connection3<XmppHandler,talk_base::StreamInterface *,int,int,sigslot::single_threaded> : sigslot::_connection_base3<talk_base::StreamInterface *,int,int,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, talk_base::StreamInterface *, int, int);
};

/* 7790 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<XmppHandler,buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded> : sigslot::_connection_base2<buzz::MucRoomsLookupTask *,buzz::MucRoomsInfo const &,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::MucRoomsLookupTask *, buzz::MucRoomsInfo *);
};

/* 7791 */
struct __cppobj __declspec(align(8)) sigslot::_connection6<XmppHandler,buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded> : sigslot::_connection_base6<buzz::MucRoomDiscoveryTask *,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::MucRoomDiscoveryTask *, bool, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *, std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > *, std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > *);
};

/* 7792 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<XmppHandler,cricket::Session *,bool,sigslot::single_threaded> : sigslot::_connection_base2<cricket::Session *,bool,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, cricket::Session *, bool);
};

/* 7793 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<XmppHandler,enum buzz::XmppEngine::State,sigslot::single_threaded> : sigslot::_connection_base1<enum buzz::XmppEngine::State,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::XmppEngine::State);
};

/* 7794 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<XmppHandler,buzz::PresenceStatus const &,sigslot::single_threaded> : sigslot::_connection_base1<buzz::PresenceStatus const &,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::PresenceStatus *);
};

/* 7795 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<XmppHandler,buzz::Jid const &,int,sigslot::single_threaded> : sigslot::_connection_base2<buzz::Jid const &,int,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::Jid *, int);
};

/* 7796 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<XmppHandler,char const *,int,sigslot::single_threaded> : sigslot::_connection_base2<char const *,int,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, const char *, int);
};

/* 7797 */
struct __cppobj __declspec(align(8)) sigslot::_connection0<XmppHandler,sigslot::single_threaded> : sigslot::_connection_base0<sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this);
};

/* 7798 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<XmppHandler,buzz::Jid const &,sigslot::single_threaded> : sigslot::_connection_base1<buzz::Jid const &,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::Jid *);
};

/* 7799 */
struct __cppobj __declspec(align(8)) sigslot::_connection1<XmppHandler,buzz::MucRoomConfigTask *,sigslot::single_threaded> : sigslot::_connection_base1<buzz::MucRoomConfigTask *,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::MucRoomConfigTask *);
};

/* 7800 */
struct __cppobj __declspec(align(8)) sigslot::_connection4<XmppHandler,cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded> : sigslot::_connection_base4<cricket::TunnelSessionClient *,buzz::Jid,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,cricket::Session *,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, cricket::TunnelSessionClient *, buzz::Jid, std::basic_string<char,std::char_traits<char>,std::allocator<char> >, cricket::Session *);
};

/* 7801 */
struct __cppobj __declspec(align(8)) sigslot::_connection2<XmppHandler,buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded> : sigslot::_connection_base2<buzz::Jid const &,buzz::MucPresenceStatus const &,sigslot::single_threaded>
{
	XmppHandler *m_pobject;
	void (__thiscall *m_pmemfun)(XmppHandler *this, buzz::Jid *, buzz::MucPresenceStatus *);
};

/* 7802 */
struct stbtt_fontinfo
{
	void *userdata;
	char *data;
	int fontstart;
	int numGlyphs;
	int loca;
	int head;
	int glyf;
	int hhea;
	int hmtx;
	int kern;
	int index_map;
	int indexToLocFormat;
};

/* 7803 */
struct sheet
{
	int texture;
	int w;
	int h;
};

/* 7804 */
struct stbrp_node
{
	unsigned __int16 x;
	unsigned __int16 y;
	stbrp_node *next;
};

/* 7805 */
struct stbrp_context
{
	int width;
	int height;
	int align;
	int init_mode;
	int heuristic;
	int num_nodes;
	stbrp_node *active_head;
	stbrp_node *free_head;
	stbrp_node extra[2];
};

/* 7806 */
struct stbrp_rect
{
	int id;
	unsigned __int16 w;
	unsigned __int16 h;
	unsigned __int16 x;
	unsigned __int16 y;
	int was_packed;
};

/* 7807 */
struct __declspec(align(4)) glyphmap_t
{
	stbrp_rect packedRect;
	int glyphIndex;
	int xOffset;
	int yOffset;
	float leftSideBearing;
	int advanceWidth;
	int sheetIndex;
	bool renderable;
	bool fullyProcessed;
};

/* 7808 */
struct line_metric
{
	float size;
	float line_spacing;
	float ascent;
	float descent;
	float scale;
};

/* 7809 */
struct glyphHashEntry_t
{
	int key;
	int glyphIndex;
};

/* 7810 */
struct glyphHashTable_t
{
	int numElements;
	glyphHashEntry_t table[32749];
};

/* 7811 */
struct glyphAdvance_t
{
	int numGlyphAdvanceItems;
	int *glyphAdvances;
};

/* 7812 */
struct font_t
{
	char name[64];
	int space;
	stbtt_fontinfo fontInfo;
	sheet *fontSheets;
	stbrp_context *packingContext;
	stbrp_node *packingNodes;
	int numFontSizes;
	int currentSheetIndex;
	int numGlyphMaps;
	int maxNumGlyphMaps;
	glyphmap_t *newGlyphMapping;
	int *pointSizeToGlyphIndexMapping;
	line_metric *newLineMetrics;
	char *fileBuffer;
	int metricTopMax;
	int metricBottomMax;
	int metricRight;
	glyphHashTable_t glyphHashTable;
	glyphAdvance_t *glyphAdvance;
};

/* 7813 */
struct letter_t
{
	int gi;
	int w;
	const char *T;
};

/* 7814 */
struct stbtt_bakedchar
{
	unsigned __int16 x0;
	unsigned __int16 y0;
	unsigned __int16 x1;
	unsigned __int16 y1;
	float xoff;
	float yoff;
	float xadvance;
};

/* 7815 */
struct stbrp__findresult
{
	int x;
	int y;
	stbrp_node **prev_link;
};

/* 7816 */
struct stbtt__edge
{
	float x0;
	float y0;
	float x1;
	float y1;
	int invert;
};

/* 7817 */
struct stbtt_vertex
{
	__int16 x;
	__int16 y;
	__int16 cx;
	__int16 cy;
	char type;
	char padding;
};

/* 7818 */
struct stbtt__hheap_chunk
{
	stbtt__hheap_chunk *next;
};

/* 7819 */
struct stbtt__point
{
	float x;
	float y;
};

/* 7820 */
struct stbtt__active_edge
{
	stbtt__active_edge *next;
	float fx;
	float fdx;
	float fdy;
	float direction;
	float sy;
	float ey;
};

/* 7821 */
struct stbtt_aligned_quad
{
	float x0;
	float y0;
	float s0;
	float t0;
	float x1;
	float y1;
	float s1;
	float t1;
};

/* 7822 */
struct stbtt__bitmap
{
	int w;
	int h;
	int stride;
	char *pixels;
};

/* 7823 */
struct stbtt_packedchar
{
	unsigned __int16 x0;
	unsigned __int16 y0;
	unsigned __int16 x1;
	unsigned __int16 y1;
	float xoff;
	float yoff;
	float xadvance;
	float xoff2;
	float yoff2;
};

/* 7824 */
struct __declspec(align(4)) stbtt_pack_range
{
	float font_size;
	int first_unicode_codepoint_in_range;
	int *array_of_unicode_codepoints;
	int num_chars;
	stbtt_packedchar *chardata_for_range;
	char h_oversample;
	char v_oversample;
};

/* 7825 */
struct stbtt__hheap
{
	stbtt__hheap_chunk *head;
	void *first_free;
	int num_remaining_in_head_chunk;
};

/* 7826 */
struct kerning_pair
{
	int prev_char;
	float adjustment;
};

/* 7827 */
struct adjustmentData_t
{
	int maxAscent;
	int maxDescent;
};

/* 7828 */
struct stbtt_pack_context
{
	void *user_allocator_context;
	void *pack_info;
	int width;
	int height;
	int stride_in_bytes;
	int padding;
	unsigned int h_oversample;
	unsigned int v_oversample;
	char *pixels;
	void *nodes;
};

/* 7829 */
struct _TP_CALLBACK_ENVIRON_V1
{
	unsigned int Version;
	_TP_POOL *Pool;
	_TP_CLEANUP_GROUP *CleanupGroup;
	void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
	void *RaceDll;
	_ACTIVATION_CONTEXT *ActivationContext;
	void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
	$F7D6FBC11E6022EC5347B2E6AC08E232 u;
};

/* 7830 */
struct _tagADDRESS64
{
	unsigned __int64 Offset;
	unsigned __int16 Segment;
	ADDRESS_MODE Mode;
};

/* 7831 */
struct _KDHELP
{
	unsigned int Thread;
	unsigned int ThCallbackStack;
	unsigned int NextCallback;
	unsigned int FramePointer;
	unsigned int KiCallUserMode;
	unsigned int KeUserCallbackDispatcher;
	unsigned int SystemRangeStart;
	unsigned int ThCallbackBStore;
	unsigned int KiUserExceptionDispatcher;
	unsigned int StackBase;
	unsigned int StackLimit;
	unsigned int Reserved[5];
};

/* 7832 */
struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
	unsigned __int64 Offset;
	unsigned int Bytes;
	HRESULT FailureStatus;
};

/* 7833 */
struct _MINIDUMP_EXCEPTION_INFORMATION
{
	unsigned int ThreadId;
	_EXCEPTION_POINTERS *ExceptionPointers;
	int ClientPointers;
};

/* 7834 */
struct _MINIDUMP_THREAD_CALLBACK
{
	unsigned int ThreadId;
	void *ThreadHandle;
	_CONTEXT Context;
	unsigned int SizeOfContext;
	unsigned __int64 StackBase;
	unsigned __int64 StackEnd;
};

/* 7835 */
struct _MINIDUMP_THREAD_EX_CALLBACK
{
	unsigned int ThreadId;
	void *ThreadHandle;
	_CONTEXT Context;
	unsigned int SizeOfContext;
	unsigned __int64 StackBase;
	unsigned __int64 StackEnd;
	unsigned __int64 BackingStoreBase;
	unsigned __int64 BackingStoreEnd;
};

/* 7836 */
struct __unaligned __declspec(align(4)) _MINIDUMP_MODULE_CALLBACK
{
	wchar_t *FullPath;
	unsigned __int64 BaseOfImage;
	unsigned int SizeOfImage;
	unsigned int CheckSum;
	unsigned int TimeDateStamp;
	tagVS_FIXEDFILEINFO VersionInfo;
	void *CvRecord;
	unsigned int SizeOfCvRecord;
	void *MiscRecord;
	unsigned int SizeOfMiscRecord;
};

/* 7837 */
struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
	unsigned int ThreadId;
};

/* 7838 */
struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
	unsigned __int64 BaseOfImage;
};

/* 7839 */
struct __unaligned __declspec(align(4)) _MINIDUMP_IO_CALLBACK
{
	void *Handle;
	unsigned __int64 Offset;
	void *Buffer;
	unsigned int BufferBytes;
};

/* 7840 */
union $CB2149FD9C0200CC5FA2E5C959A2D277
{
	HRESULT Status;
	_MINIDUMP_THREAD_CALLBACK Thread;
	_MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
	_MINIDUMP_MODULE_CALLBACK Module;
	_MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
	_MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
	_MINIDUMP_IO_CALLBACK Io;
	_MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
	unsigned int SecondaryFlags;
};

/* 7841 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_INPUT
{
	unsigned int ProcessId;
	void *ProcessHandle;
	unsigned int CallbackType;
	$CB2149FD9C0200CC5FA2E5C959A2D277 ___u3;
};

/* 7842 */
struct _MINIDUMP_MEMORY_INFO
{
	unsigned __int64 BaseAddress;
	unsigned __int64 AllocationBase;
	unsigned int AllocationProtect;
	unsigned int __alignment1;
	unsigned __int64 RegionSize;
	unsigned int State;
	unsigned int Protect;
	unsigned int Type;
	unsigned int __alignment2;
};

/* 7843 */
struct $C3E071958E7BDFB53859BF79F284BD3C
{
	unsigned int ModuleWriteFlags;
	int Cancel;
	unsigned int MemorySize;
};

/* 7844 */
union $254EDBDF7A0752B1F398347EE5415705
{
	$C3E071958E7BDFB53859BF79F284BD3C __s0;
	unsigned int ThreadWriteFlags;
	unsigned int SecondaryFlags;
	unsigned __int64 MemoryBase;
	int CheckCancel;
	void *Handle;
	_MINIDUMP_MEMORY_INFO VmRegion;
	HRESULT Status;
};

/* 7845 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_OUTPUT
{
	$254EDBDF7A0752B1F398347EE5415705 ___u0;
	int Continue;
};

/* 7846 */
struct _MINIDUMP_CALLBACK_INFORMATION
{
	int (__stdcall *CallbackRoutine)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);
	void *CallbackParam;
};

/* 7847 */
struct _MINIDUMP_USER_STREAM
{
	unsigned int Type;
	unsigned int BufferSize;
	void *Buffer;
};

/* 7848 */
struct dumpParams_t
{
	unsigned int excThreadId;
	unsigned int excCode;
	_EXCEPTION_POINTERS *pExcPtrs;
	int numIgnoreThreads;
	unsigned int ignoreThreadIds[16];
	int numIgnoreModules;
	HINSTANCE__ *ignoreModules[16];
	wchar_t dumpPath[260];
};

/* 7849 */
struct _KDHELP64
{
	unsigned __int64 Thread;
	unsigned int ThCallbackStack;
	unsigned int ThCallbackBStore;
	unsigned int NextCallback;
	unsigned int FramePointer;
	unsigned __int64 KiCallUserMode;
	unsigned __int64 KeUserCallbackDispatcher;
	unsigned __int64 SystemRangeStart;
	unsigned __int64 KiUserExceptionDispatcher;
	unsigned __int64 StackBase;
	unsigned __int64 StackLimit;
	unsigned __int64 Reserved[5];
};

/* 7850 */
struct _tagADDRESS
{
	unsigned int Offset;
	unsigned __int16 Segment;
	ADDRESS_MODE Mode;
};

/* 7851 */
struct dumpCbParams_t
{
	dumpParams_t *p;
	void *hInfoFile;
};

/* 7852 */
struct _MINIDUMP_USER_STREAM_INFORMATION
{
	unsigned int UserStreamCount;
	_MINIDUMP_USER_STREAM *UserStreamArray;
};

/* 7853 */
struct SDL_AudioStreamer
{
	char *buffer;
	int max_len;
	int read_pos;
	int write_pos;
};

/* 7854 */
struct SDL_AudioBufferQueue
{
	char data[8192];
	unsigned int datalen;
	unsigned int startpos;
	SDL_AudioBufferQueue *next;
};

/* 7855 */
struct HWAVEOUT__
{
	int unused;
};

/* 7856 */
struct HWAVEIN__
{
	int unused;
};

/* 7857 */
struct wavehdr_tag
{
	char *lpData;
	unsigned int dwBufferLength;
	unsigned int dwBytesRecorded;
	unsigned int dwUser;
	unsigned int dwFlags;
	unsigned int dwLoops;
	wavehdr_tag *lpNext;
	unsigned int reserved;
};

/* 7858 */
struct SDL_PrivateAudioData
{
	HWAVEOUT__ *hout;
	HWAVEIN__ *hin;
	void *audio_sem;
	char *mixbuf;
	wavehdr_tag wavebuf[2];
	int next_buffer;
};

/* 7859 */
struct SDL_AudioDevice
{
	unsigned int id;
	SDL_AudioSpec spec;
	SDL_AudioCVT convert;
	int use_streamer;
	SDL_AudioStreamer streamer;
	int iscapture;
	int enabled;
	int shutdown;
	int paused;
	int opened;
	char *fake_stream;
	SDL_mutex *mixer_lock;
	SDL_Thread *thread;
	unsigned int threadid;
	SDL_AudioBufferQueue *buffer_queue_head;
	SDL_AudioBufferQueue *buffer_queue_tail;
	SDL_AudioBufferQueue *buffer_queue_pool;
	unsigned int queued_bytes;
	SDL_PrivateAudioData *hidden;
};

/* 7860 */
struct SDL_AudioDriverImpl
{
	void (__cdecl *DetectDevices)();
	int (__cdecl *OpenDevice)(SDL_AudioDevice *, void *, const char *, int);
	void (__cdecl *ThreadInit)(SDL_AudioDevice *);
	void (__cdecl *WaitDevice)(SDL_AudioDevice *);
	void (__cdecl *PlayDevice)(SDL_AudioDevice *);
	int (__cdecl *GetPendingBytes)(SDL_AudioDevice *);
	char *(__cdecl *GetDeviceBuf)(SDL_AudioDevice *);
	void (__cdecl *WaitDone)(SDL_AudioDevice *);
	void (__cdecl *CloseDevice)(SDL_AudioDevice *);
	void (__cdecl *LockDevice)(SDL_AudioDevice *);
	void (__cdecl *UnlockDevice)(SDL_AudioDevice *);
	void (__cdecl *FreeDeviceHandle)(void *);
	void (__cdecl *Deinitialize)();
	int ProvidesOwnCallbackThread;
	int SkipMixerLock;
	int HasCaptureSupport;
	int OnlyHasDefaultOutputDevice;
	int OnlyHasDefaultInputDevice;
	int AllowsArbitraryDeviceNames;
};

/* 7861 */
struct SDL_AudioDeviceItem
{
	void *handle;
	SDL_AudioDeviceItem *next;
	char name[];
};

/* 7862 */
struct SDL_AudioDriver
{
	const char *name;
	const char *desc;
	SDL_AudioDriverImpl impl;
	SDL_mutex *detectionLock;
	SDL_bool captureDevicesRemoved;
	SDL_bool outputDevicesRemoved;
	int outputDeviceCount;
	int inputDeviceCount;
	SDL_AudioDeviceItem *outputDevices;
	SDL_AudioDeviceItem *inputDevices;
};

/* 7863 */
struct AudioBootStrap
{
	const char *name;
	const char *desc;
	int (__cdecl *init)(SDL_AudioDriverImpl *);
	int demand_only;
};

/* 7864 */
struct SDL_AudioTypeFilters
{
	unsigned __int16 src_fmt;
	unsigned __int16 dst_fmt;
	void (__cdecl *filter)(SDL_AudioCVT *, unsigned __int16);
};

/* 7865 */
struct SDL_AudioRateFilters
{
	unsigned __int16 fmt;
	int channels;
	int upsample;
	int multiple;
	void (__cdecl *filter)(SDL_AudioCVT *, unsigned __int16);
};

/* 7866 */
struct SDL_BlitFuncEntry
{
	unsigned int src_format;
	unsigned int dst_format;
	int flags;
	int cpu;
	void (__cdecl *func)(SDL_BlitInfo *);
};

/* 7867 */
struct blit_table
{
	unsigned int srcR;
	unsigned int srcG;
	unsigned int srcB;
	int dstbpp;
	unsigned int dstR;
	unsigned int dstG;
	unsigned int dstB;
	unsigned int blit_features;
	void (__cdecl *blitfunc)(SDL_BlitInfo *);
	$D041BC1C98BCFC830412F83EC892C2BD alpha;
};

/* 7870 */
struct SDL_ShapeDriver
{
	SDL_WindowShaper *(__cdecl *CreateShaper)(SDL_Window *);
	int (__cdecl *SetWindowShape)(SDL_WindowShaper *, SDL_Surface *, SDL_WindowShapeMode *);
	int (__cdecl *ResizeWindowShape)(SDL_Window *);
};

/* 7871 */
struct $B384F519FE8089F07030757CCCD746CE
{
	int red_size;
	int green_size;
	int blue_size;
	int alpha_size;
	int depth_size;
	int buffer_size;
	int stencil_size;
	int double_buffer;
	int accum_red_size;
	int accum_green_size;
	int accum_blue_size;
	int accum_alpha_size;
	int stereo;
	int multisamplebuffers;
	int multisamplesamples;
	int accelerated;
	int major_version;
	int minor_version;
	int flags;
	int profile_mask;
	int share_with_current_context;
	int release_behavior;
	int framebuffer_srgb_capable;
	int retained_backing;
	int driver_loaded;
	char driver_path[256];
	void *dll_handle;
};

/* 7868 */
struct SDL_VideoDevice
{
	const char *name;
	int (__cdecl *VideoInit)(SDL_VideoDevice *);
	void (__cdecl *VideoQuit)(SDL_VideoDevice *);
	int (__cdecl *GetDisplayBounds)(SDL_VideoDevice *, SDL_VideoDisplay *, SDL_Rect *);
	int (__cdecl *GetDisplayDPI)(SDL_VideoDevice *, SDL_VideoDisplay *, float *, float *, float *);
	void (__cdecl *GetDisplayModes)(SDL_VideoDevice *, SDL_VideoDisplay *);
	int (__cdecl *SetDisplayMode)(SDL_VideoDevice *, SDL_VideoDisplay *, SDL_DisplayMode *);
	int (__cdecl *CreateWindowA)(SDL_VideoDevice *, SDL_Window *);
	int (__cdecl *CreateWindowFrom)(SDL_VideoDevice *, SDL_Window *, const void *);
	void (__cdecl *SetWindowTitle)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *SetWindowIcon)(SDL_VideoDevice *, SDL_Window *, SDL_Surface *);
	void (__cdecl *SetWindowPosition)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *SetWindowSize)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *SetWindowMinimumSize)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *SetWindowMaximumSize)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *ShowWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *HideWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *RaiseWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *MaximizeWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *MinimizeWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *RestoreWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *SetWindowBordered)(SDL_VideoDevice *, SDL_Window *, SDL_bool);
	void (__cdecl *SetWindowFullscreen)(SDL_VideoDevice *, SDL_Window *, SDL_VideoDisplay *, SDL_bool);
	int (__cdecl *SetWindowGammaRamp)(SDL_VideoDevice *, SDL_Window *, const unsigned __int16 *);
	int (__cdecl *GetWindowGammaRamp)(SDL_VideoDevice *, SDL_Window *, unsigned __int16 *);
	void (__cdecl *SetWindowGrab)(SDL_VideoDevice *, SDL_Window *, SDL_bool);
	void (__cdecl *DestroyWindow)(SDL_VideoDevice *, SDL_Window *);
	int (__cdecl *CreateWindowFramebuffer)(SDL_VideoDevice *, SDL_Window *, unsigned int *, void **, int *);
	int (__cdecl *UpdateWindowFramebuffer)(SDL_VideoDevice *, SDL_Window *, SDL_Rect *, int);
	void (__cdecl *DestroyWindowFramebuffer)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *OnWindowEnter)(SDL_VideoDevice *, SDL_Window *);
	SDL_ShapeDriver shape_driver;
	SDL_bool (__cdecl *GetWindowWMInfo)(SDL_VideoDevice *, SDL_Window *, SDL_SysWMinfo *);
	int (__cdecl *GL_LoadLibrary)(SDL_VideoDevice *, const char *);
	void *(__cdecl *GL_GetProcAddress)(SDL_VideoDevice *, const char *);
	void (__cdecl *GL_UnloadLibrary)(SDL_VideoDevice *);
	void *(__cdecl *GL_CreateContext)(SDL_VideoDevice *, SDL_Window *);
	int (__cdecl *GL_MakeCurrent)(SDL_VideoDevice *, SDL_Window *, void *);
	void (__cdecl *GL_GetDrawableSize)(SDL_VideoDevice *, SDL_Window *, int *, int *);
	int (__cdecl *GL_SetSwapInterval)(SDL_VideoDevice *, int);
	int (__cdecl *GL_GetSwapInterval)(SDL_VideoDevice *);
	void (__cdecl *GL_SwapWindow)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *GL_DeleteContext)(SDL_VideoDevice *, void *);
	void (__cdecl *PumpEvents)(SDL_VideoDevice *);
	void (__cdecl *SuspendScreenSaver)(SDL_VideoDevice *);
	void (__cdecl *StartTextInput)(SDL_VideoDevice *);
	void (__cdecl *StopTextInput)(SDL_VideoDevice *);
	void (__cdecl *SetTextInputRect)(SDL_VideoDevice *, SDL_Rect *);
	SDL_bool (__cdecl *HasScreenKeyboardSupport)(SDL_VideoDevice *);
	void (__cdecl *ShowScreenKeyboard)(SDL_VideoDevice *, SDL_Window *);
	void (__cdecl *HideScreenKeyboard)(SDL_VideoDevice *, SDL_Window *);
	SDL_bool (__cdecl *IsScreenKeyboardShown)(SDL_VideoDevice *, SDL_Window *);
	int (__cdecl *SetClipboardText)(SDL_VideoDevice *, const char *);
	char *(__cdecl *GetClipboardText)(SDL_VideoDevice *);
	SDL_bool (__cdecl *HasClipboardText)(SDL_VideoDevice *);
	int (__cdecl *ShowMessageBox)(SDL_VideoDevice *, SDL_MessageBoxData *, int *);
	int (__cdecl *SetWindowHitTest)(SDL_Window *, SDL_bool);
	SDL_bool suspend_screensaver;
	int num_displays;
	SDL_VideoDisplay *displays;
	SDL_Window *windows;
	SDL_Window *grabbed_window;
	char window_magic;
	unsigned int next_object_id;
	char *clipboard_text;
	$B384F519FE8089F07030757CCCD746CE gl_config;
	SDL_Window *current_glwin;
	void *current_glctx;
	unsigned int current_glwin_tls;
	unsigned int current_glctx_tls;
	void *driverdata;
	SDL_GLDriverData *gl_data;
	SDL_EGL_VideoData *egl_data;
	struct SDL_PrivateGLESData *gles_data;
	void (__cdecl *free)(SDL_VideoDevice *);
};

/* 7869 */
struct SDL_VideoDisplay
{
	char *name;
	int max_display_modes;
	int num_display_modes;
	SDL_DisplayMode *display_modes;
	SDL_DisplayMode desktop_mode;
	SDL_DisplayMode current_mode;
	SDL_Window *fullscreen_window;
	SDL_VideoDevice *device;
	void *driverdata;
};

/* 7872 */
struct SDL_GLDriverData
{
	SDL_bool HAS_WGL_ARB_pixel_format;
	SDL_bool HAS_WGL_EXT_swap_control_tear;
	SDL_bool HAS_WGL_EXT_create_context_es2_profile;
	SDL_bool HAS_WGL_ARB_context_flush_control;
	void *(__stdcall *wglGetProcAddress)(const char *);
	HGLRC__ *(__stdcall *wglCreateContext)(HDC__ *);
	int (__stdcall *wglDeleteContext)(HGLRC__ *);
	int (__stdcall *wglMakeCurrent)(HDC__ *, HGLRC__ *);
	int (__stdcall *wglShareLists)(HGLRC__ *, HGLRC__ *);
	int (__stdcall *wglChoosePixelFormatARB)(HDC__ *, const int *, const float *, unsigned int, int *, unsigned int *);
	int (__stdcall *wglGetPixelFormatAttribivARB)(HDC__ *, int, int, unsigned int, const int *, int *);
	int (__stdcall *wglSwapIntervalEXT)(int);
	int (__stdcall *wglGetSwapIntervalEXT)();
};

/* 7873 */
struct SDL_EGL_VideoData
{
	void *egl_dll_handle;
	void *dll_handle;
	void *egl_display;
	void *egl_config;
	int egl_swapinterval;
	void *(__stdcall *eglGetDisplay)(HDC__ *);
	unsigned int (__stdcall *eglInitialize)(void *, int *, int *);
	unsigned int (__stdcall *eglTerminate)(void *);
	void *(__stdcall *eglGetProcAddress)(const char *);
	unsigned int (__stdcall *eglChooseConfig)(void *, const int *, void **, int, int *);
	void *(__stdcall *eglCreateContext)(void *, void *, void *, const int *);
	unsigned int (__stdcall *eglDestroyContext)(void *, void *);
	void *(__stdcall *eglCreateWindowSurface)(void *, void *, HWND__ *, const int *);
	unsigned int (__stdcall *eglDestroySurface)(void *, void *);
	unsigned int (__stdcall *eglMakeCurrent)(void *, void *, void *, void *);
	unsigned int (__stdcall *eglSwapBuffers)(void *, void *);
	unsigned int (__stdcall *eglSwapInterval)(void *, int);
	const char *(__stdcall *eglQueryString)(void *, int);
	unsigned int (__stdcall *eglGetConfigAttrib)(void *, void *, int, int *);
	unsigned int (__stdcall *eglWaitNative)(int);
	unsigned int (__stdcall *eglWaitGL)();
	unsigned int (__stdcall *eglBindAPI)(unsigned int);
};

/* 7874 */
struct Float4X4
{
	$02F0D444D503B17D9D0C1A0866F044F6 ___u0;
};

/* 7875 */
struct SDL_hapticlist_item
{
	char *name;
	_SDL_Haptic *haptic;
	DIDEVICEINSTANCEW instance;
	DIDEVCAPS capabilities;
	SDL_bool bXInputHaptic;
	char userid;
	SDL_hapticlist_item *next;
};

/* 7876 */
struct IDirectInput8W
{
	IDirectInput8WVtbl *lpVtbl;
};

/* 7879 */
struct IDirectInput8WVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirectInput8W *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirectInput8W *);
	unsigned int (__stdcall *Release)(IDirectInput8W *);
	HRESULT (__stdcall *CreateDevice)(IDirectInput8W *, _GUID *const, IDirectInputDevice8W **, IUnknown *);
	HRESULT (__stdcall *EnumDevices)(IDirectInput8W *, unsigned int, int (__stdcall *)(DIDEVICEINSTANCEW *, void *), void *, unsigned int);
	HRESULT (__stdcall *GetDeviceStatus)(IDirectInput8W *, _GUID *const);
	HRESULT (__stdcall *RunControlPanel)(IDirectInput8W *, HWND__ *, unsigned int);
	HRESULT (__stdcall *Initialize)(IDirectInput8W *, HINSTANCE__ *, unsigned int);
	HRESULT (__stdcall *FindDevice)(IDirectInput8W *, _GUID *const, const wchar_t *, _GUID *);
	HRESULT (__stdcall *EnumDevicesBySemantics)(IDirectInput8W *, const wchar_t *, _DIACTIONFORMATW *, int (__stdcall *)(DIDEVICEINSTANCEW *, IDirectInputDevice8W *, unsigned int, unsigned int, void *), void *, unsigned int);
	HRESULT (__stdcall *ConfigureDevices)(IDirectInput8W *, int (__stdcall *)(IUnknown *, void *), _DICONFIGUREDEVICESPARAMSW *, unsigned int, void *);
};

/* 7877 */
struct _DICOLORSET
{
	unsigned int dwSize;
	unsigned int cTextFore;
	unsigned int cTextHighlight;
	unsigned int cCalloutLine;
	unsigned int cCalloutHighlight;
	unsigned int cBorder;
	unsigned int cControlFill;
	unsigned int cHighlightFill;
	unsigned int cAreaFill;
};

/* 7878 */
struct _DICONFIGUREDEVICESPARAMSW
{
	unsigned int dwSize;
	unsigned int dwcUsers;
	unsigned __int16 *lptszUserNames;
	unsigned int dwcFormats;
	_DIACTIONFORMATW *lprgFormats;
	HWND__ *hwnd;
	_DICOLORSET dics;
	IUnknown *lpUnkDDSTarget;
};

/* 7880 */
struct DIPROPDWORD
{
	DIPROPHEADER diph;
	unsigned int dwData;
};

/* 7881 */
struct DICUSTOMFORCE
{
	unsigned int cChannels;
	unsigned int dwSamplePeriod;
	unsigned int cSamples;
	int *rglForceData;
};

/* 7882 */
struct DICONDITION
{
	int lOffset;
	int lPositiveCoefficient;
	int lNegativeCoefficient;
	unsigned int dwPositiveSaturation;
	unsigned int dwNegativeSaturation;
	int lDeadBand;
};

/* 7883 */
struct DICONSTANTFORCE
{
	int lMagnitude;
};

/* 7884 */
struct DIRAMPFORCE
{
	int lStart;
	int lEnd;
};

/* 7885 */
struct DIPERIODIC
{
	unsigned int dwMagnitude;
	int lOffset;
	unsigned int dwPhase;
	unsigned int dwPeriod;
};

/* 7886 */
struct JoyStick_DeviceData
{
	SDL_JoystickGUID guid;
	char *joystickname;
	char send_add_event;
	int nInstanceID;
	SDL_bool bXInputDevice;
	char SubType;
	char XInputUserId;
	DIDEVICEINSTANCEW dxdevice;
	JoyStick_DeviceData *pNext;
};

/* 7887 */
struct DIJOYSTATE2
{
	int lX;
	int lY;
	int lZ;
	int lRx;
	int lRy;
	int lRz;
	int rglSlider[2];
	unsigned int rgdwPOV[4];
	char rgbButtons[128];
	int lVX;
	int lVY;
	int lVZ;
	int lVRx;
	int lVRy;
	int lVRz;
	int rglVSlider[2];
	int lAX;
	int lAY;
	int lAZ;
	int lARx;
	int lARy;
	int lARz;
	int rglASlider[2];
	int lFX;
	int lFY;
	int lFZ;
	int lFRx;
	int lFRy;
	int lFRz;
	int rglFSlider[2];
};

/* 7888 */
struct DIPROPRANGE
{
	DIPROPHEADER diph;
	int lMin;
	int lMax;
};

/* 7889 */
struct IDirectSound
{
	IDirectSoundVtbl *lpVtbl;
};

/* 7896 */
struct IDirectSoundVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirectSound *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirectSound *);
	unsigned int (__stdcall *Release)(IDirectSound *);
	HRESULT (__stdcall *CreateSoundBuffer)(IDirectSound *, _DSBUFFERDESC *, IDirectSoundBuffer **, IUnknown *);
	HRESULT (__stdcall *GetCaps)(IDirectSound *, _DSCAPS *);
	HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *, IDirectSoundBuffer *, IDirectSoundBuffer **);
	HRESULT (__stdcall *SetCooperativeLevel)(IDirectSound *, HWND__ *, unsigned int);
	HRESULT (__stdcall *Compact)(IDirectSound *);
	HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *, unsigned int *);
	HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *, unsigned int);
	HRESULT (__stdcall *Initialize)(IDirectSound *, _GUID *);
};

/* 7891 */
const struct _DSBUFFERDESC
{
	unsigned int dwSize;
	unsigned int dwFlags;
	unsigned int dwBufferBytes;
	unsigned int dwReserved;
	tWAVEFORMATEX *lpwfxFormat;
	_GUID guid3DAlgorithm;
};

/* 7892 */
struct IDirectSoundBuffer
{
	IDirectSoundBufferVtbl *lpVtbl;
};

/* 7895 */
struct _DSCAPS
{
	unsigned int dwSize;
	unsigned int dwFlags;
	unsigned int dwMinSecondarySampleRate;
	unsigned int dwMaxSecondarySampleRate;
	unsigned int dwPrimaryBuffers;
	unsigned int dwMaxHwMixingAllBuffers;
	unsigned int dwMaxHwMixingStaticBuffers;
	unsigned int dwMaxHwMixingStreamingBuffers;
	unsigned int dwFreeHwMixingAllBuffers;
	unsigned int dwFreeHwMixingStaticBuffers;
	unsigned int dwFreeHwMixingStreamingBuffers;
	unsigned int dwMaxHw3DAllBuffers;
	unsigned int dwMaxHw3DStaticBuffers;
	unsigned int dwMaxHw3DStreamingBuffers;
	unsigned int dwFreeHw3DAllBuffers;
	unsigned int dwFreeHw3DStaticBuffers;
	unsigned int dwFreeHw3DStreamingBuffers;
	unsigned int dwTotalHwMemBytes;
	unsigned int dwFreeHwMemBytes;
	unsigned int dwMaxContigFreeHwMemBytes;
	unsigned int dwUnlockTransferRateHwBuffers;
	unsigned int dwPlayCpuOverheadSwBuffers;
	unsigned int dwReserved1;
	unsigned int dwReserved2;
};

/* 7890 */
struct __unaligned __declspec(align(2)) tWAVEFORMATEX
{
	unsigned __int16 wFormatTag;
	unsigned __int16 nChannels;
	unsigned int nSamplesPerSec;
	unsigned int nAvgBytesPerSec;
	unsigned __int16 nBlockAlign;
	unsigned __int16 wBitsPerSample;
	unsigned __int16 cbSize;
};

/* 7894 */
struct IDirectSoundBufferVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirectSoundBuffer *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirectSoundBuffer *);
	unsigned int (__stdcall *Release)(IDirectSoundBuffer *);
	HRESULT (__stdcall *GetCaps)(IDirectSoundBuffer *, _DSBCAPS *);
	HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundBuffer *, unsigned int *, unsigned int *);
	HRESULT (__stdcall *GetFormat)(IDirectSoundBuffer *, tWAVEFORMATEX *, unsigned int, unsigned int *);
	HRESULT (__stdcall *GetVolume)(IDirectSoundBuffer *, int *);
	HRESULT (__stdcall *GetPan)(IDirectSoundBuffer *, int *);
	HRESULT (__stdcall *GetFrequency)(IDirectSoundBuffer *, unsigned int *);
	HRESULT (__stdcall *GetStatus)(IDirectSoundBuffer *, unsigned int *);
	HRESULT (__stdcall *Initialize)(IDirectSoundBuffer *, IDirectSound *, _DSBUFFERDESC *);
	HRESULT (__stdcall *Lock)(IDirectSoundBuffer *, unsigned int, unsigned int, void **, unsigned int *, void **, unsigned int *, unsigned int);
	HRESULT (__stdcall *Play)(IDirectSoundBuffer *, unsigned int, unsigned int, unsigned int);
	HRESULT (__stdcall *SetCurrentPosition)(IDirectSoundBuffer *, unsigned int);
	HRESULT (__stdcall *SetFormat)(IDirectSoundBuffer *, tWAVEFORMATEX *);
	HRESULT (__stdcall *SetVolume)(IDirectSoundBuffer *, int);
	HRESULT (__stdcall *SetPan)(IDirectSoundBuffer *, int);
	HRESULT (__stdcall *SetFrequency)(IDirectSoundBuffer *, unsigned int);
	HRESULT (__stdcall *Stop)(IDirectSoundBuffer *);
	HRESULT (__stdcall *Unlock)(IDirectSoundBuffer *, void *, unsigned int, void *, unsigned int);
	HRESULT (__stdcall *Restore)(IDirectSoundBuffer *);
};

/* 7893 */
struct _DSBCAPS
{
	unsigned int dwSize;
	unsigned int dwFlags;
	unsigned int dwBufferBytes;
	unsigned int dwUnlockTransferRate;
	unsigned int dwPlayCpuOverhead;
};

/* 7897 */
struct SDL_EventWatcher
{
	int (__cdecl *callback)(void *, SDL_Event *);
	void *userdata;
	SDL_EventWatcher *next;
};

/* 7898 */
struct SDL_DisabledEventBlock
{
	unsigned int bits[8];
};

/* 7899 */
struct _SDL_EventEntry
{
	SDL_Event event;
	SDL_SysWMmsg msg;
	_SDL_EventEntry *prev;
	_SDL_EventEntry *next;
};

/* 7900 */
struct _SDL_SysWMEntry
{
	SDL_SysWMmsg msg;
	_SDL_SysWMEntry *next;
};

/* 7901 */
struct $A84617D45D62046CA2A470DAAA7E9D05
{
	SDL_mutex *lock;
	SDL_bool active;
	volatile int count;
	volatile int max_events_seen;
	_SDL_EventEntry *head;
	_SDL_EventEntry *tail;
	_SDL_EventEntry *free;
	_SDL_SysWMEntry *wmmsg_used;
	_SDL_SysWMEntry *wmmsg_free;
};

/* 7902 */
struct _ControllerMapping_t
{
	SDL_JoystickGUID guid;
	char *name;
	char *mapping;
	_ControllerMapping_t *next;
};

/* 7903 */
struct SDL_FloatPoint
{
	float x;
	float y;
};

/* 7904 */
struct SDL_DollarPath
{
	float length;
	int numPoints;
	SDL_FloatPoint p[1024];
};

/* 7905 */
struct SDL_DollarTemplate
{
	SDL_FloatPoint path[64];
	unsigned int hash;
};

/* 7906 */
struct SDL_GestureTouch
{
	__int64 id;
	SDL_FloatPoint centroid;
	SDL_DollarPath dollarPath;
	unsigned __int16 numDownFingers;
	int numDollarTemplates;
	SDL_DollarTemplate *dollarTemplate;
	SDL_bool recording;
};

/* 7907 */
struct SDL_HintWatch
{
	void (__cdecl *callback)(void *, const char *, const char *, const char *);
	void *userdata;
	SDL_HintWatch *next;
};

/* 7908 */
struct SDL_Hint
{
	char *name;
	char *value;
	SDL_HintPriority priority;
	SDL_HintWatch *callbacks;
	SDL_Hint *next;
};

/* 7909 */
struct $B94E10C5CF587C65F94959D72EEC2F22
{
	const char *name;
	int format;
};

/* 7910 */
struct SDL_Keyboard
{
	SDL_Window *focus;
	unsigned __int16 modstate;
	char keystate[512];
	int keymap[512];
};

/* 7911 */
struct SDL_LogLevel
{
	int category;
	SDL_LogPriority priority;
	SDL_LogLevel *next;
};

/* 7912 */
struct __declspec(align(4)) SDL_MouseClickState
{
	int last_x;
	int last_y;
	unsigned int last_timestamp;
	char click_count;
};

/* 7913 */
struct SDL_Mouse
{
	SDL_Cursor *(__cdecl *CreateCursor)(SDL_Surface *, int, int);
	SDL_Cursor *(__cdecl *CreateSystemCursor)(SDL_SystemCursor);
	int (__cdecl *ShowCursor)(SDL_Cursor *);
	void (__cdecl *MoveCursor)(SDL_Cursor *);
	void (__cdecl *FreeCursor)(SDL_Cursor *);
	void (__cdecl *WarpMouse)(SDL_Window *, int, int);
	int (__cdecl *WarpMouseGlobal)(int, int);
	int (__cdecl *SetRelativeMouseMode)(SDL_bool);
	int (__cdecl *CaptureMouse)(SDL_Window *);
	unsigned int (__cdecl *GetGlobalMouseState)(int *, int *);
	unsigned int mouseID;
	SDL_Window *focus;
	int x;
	int y;
	int xdelta;
	int ydelta;
	int last_x;
	int last_y;
	unsigned int buttonstate;
	SDL_bool relative_mode;
	SDL_bool relative_mode_warp;
	int num_clickstates;
	SDL_MouseClickState *clickstate;
	SDL_Cursor *cursors;
	SDL_Cursor *def_cursor;
	SDL_Cursor *cur_cursor;
	SDL_bool cursor_shown;
	void *driverdata;
};

/* 7914 */
struct VideoBootStrap
{
	const char *name;
	const char *desc;
	int (__cdecl *available)();
	SDL_VideoDevice *(__cdecl *create)(int);
};

/* 7918 */
const struct SDL_FPoint
{
	float x;
	float y;
};

/* 7915 */
struct SDL_Renderer
{
	const void *magic;
	void (__cdecl *WindowEvent)(SDL_Renderer *, SDL_WindowEvent *);
	int (__cdecl *GetOutputSize)(SDL_Renderer *, int *, int *);
	int (__cdecl *CreateTexture)(SDL_Renderer *, SDL_Texture *);
	int (__cdecl *SetTextureColorMod)(SDL_Renderer *, SDL_Texture *);
	int (__cdecl *SetTextureAlphaMod)(SDL_Renderer *, SDL_Texture *);
	int (__cdecl *SetTextureBlendMode)(SDL_Renderer *, SDL_Texture *);
	int (__cdecl *UpdateTexture)(SDL_Renderer *, SDL_Texture *, SDL_Rect *, const void *, int);
	int (__cdecl *UpdateTextureYUV)(SDL_Renderer *, SDL_Texture *, SDL_Rect *, const char *, int, const char *, int, const char *, int);
	int (__cdecl *LockTexture)(SDL_Renderer *, SDL_Texture *, SDL_Rect *, void **, int *);
	void (__cdecl *UnlockTexture)(SDL_Renderer *, SDL_Texture *);
	int (__cdecl *SetRenderTarget)(SDL_Renderer *, SDL_Texture *);
	int (__cdecl *UpdateViewport)(SDL_Renderer *);
	int (__cdecl *UpdateClipRect)(SDL_Renderer *);
	int (__cdecl *RenderClear)(SDL_Renderer *);
	int (__cdecl *RenderDrawPoints)(SDL_Renderer *, SDL_FPoint *, int);
	int (__cdecl *RenderDrawLines)(SDL_Renderer *, SDL_FPoint *, int);
	int (__cdecl *RenderFillRects)(SDL_Renderer *, SDL_FRect *, int);
	int (__cdecl *RenderCopy)(SDL_Renderer *, SDL_Texture *, SDL_Rect *, SDL_FRect *);
	int (__cdecl *RenderCopyEx)(SDL_Renderer *, SDL_Texture *, SDL_Rect *, SDL_FRect *, const long double, SDL_FPoint *, SDL_RendererFlip);
	int (__cdecl *RenderReadPixels)(SDL_Renderer *, SDL_Rect *, unsigned int, void *, int);
	void (__cdecl *RenderPresent)(SDL_Renderer *);
	void (__cdecl *DestroyTexture)(SDL_Renderer *, SDL_Texture *);
	void (__cdecl *DestroyRenderer)(SDL_Renderer *);
	int (__cdecl *GL_BindTexture)(SDL_Renderer *, SDL_Texture *, float *, float *);
	int (__cdecl *GL_UnbindTexture)(SDL_Renderer *, SDL_Texture *);
	SDL_RendererInfo info;
	SDL_Window *window;
	SDL_bool hidden;
	int logical_w;
	int logical_h;
	int logical_w_backup;
	int logical_h_backup;
	SDL_Rect viewport;
	SDL_Rect viewport_backup;
	SDL_Rect clip_rect;
	SDL_Rect clip_rect_backup;
	SDL_bool clipping_enabled;
	SDL_bool clipping_enabled_backup;
	SDL_FPoint scale;
	SDL_FPoint scale_backup;
	SDL_Texture *textures;
	SDL_Texture *target;
	char r;
	char g;
	char b;
	char a;
	SDL_BlendMode blendMode;
	void *driverdata;
};

/* 7916 */
struct SDL_Texture
{
	const void *magic;
	unsigned int format;
	int access;
	int w;
	int h;
	int modMode;
	SDL_BlendMode blendMode;
	char r;
	char g;
	char b;
	char a;
	SDL_Renderer *renderer;
	SDL_Texture *native;
	SDL_SW_YUVTexture *yuv;
	void *pixels;
	int pitch;
	SDL_Rect locked_rect;
	void *driverdata;
	SDL_Texture *prev;
	SDL_Texture *next;
};

/* 7919 */
const struct SDL_FRect
{
	float x;
	float y;
	float w;
	float h;
};

/* 7917 */
struct SDL_SW_YUVTexture
{
	unsigned int format;
	unsigned int target_format;
	int w;
	int h;
	char *pixels;
	int *colortab;
	unsigned int *rgb_2_pix;
	void (__cdecl *Display1X)(int *, unsigned int *, char *, char *, char *, char *, int, int, int);
	void (__cdecl *Display2X)(int *, unsigned int *, char *, char *, char *, char *, int, int, int);
	unsigned __int16 pitches[3];
	char *planes[3];
	SDL_Surface *stretch;
	SDL_Surface *display;
};

/* 7920 */
struct SDL_RenderDriver
{
	SDL_Renderer *(__cdecl *CreateRenderer)(SDL_Window *, unsigned int);
	SDL_RendererInfo info;
};

/* 7921 */
struct IDirect3DVolume9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DVolume9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DVolume9 *);
	unsigned int (__stdcall *Release)(IDirect3DVolume9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DVolume9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DVolume9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DVolume9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DVolume9 *, _GUID *const);
	HRESULT (__stdcall *GetContainer)(IDirect3DVolume9 *, _GUID *const, void **);
	HRESULT (__stdcall *GetDesc)(IDirect3DVolume9 *, _D3DVOLUME_DESC *);
	HRESULT (__stdcall *LockBox)(IDirect3DVolume9 *, _D3DLOCKED_BOX *, _D3DBOX *, unsigned int);
	HRESULT (__stdcall *UnlockBox)(IDirect3DVolume9 *);
	const wchar_t *Name;
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int Usage;
	_D3DFORMAT Format;
	_D3DPOOL Pool;
	unsigned int LockCount;
	const wchar_t *CreationCallStack;
};

/* 11259 */
enum _D3DQUERYTYPE
{
	D3DQUERYTYPE_VCACHE = 0x4,
	D3DQUERYTYPE_RESOURCEMANAGER = 0x5,
	D3DQUERYTYPE_VERTEXSTATS = 0x6,
	D3DQUERYTYPE_EVENT = 0x8,
	D3DQUERYTYPE_OCCLUSION = 0x9,
	D3DQUERYTYPE_TIMESTAMP = 0xA,
	D3DQUERYTYPE_TIMESTAMPDISJOINT = 0xB,
	D3DQUERYTYPE_TIMESTAMPFREQ = 0xC,
	D3DQUERYTYPE_PIPELINETIMINGS = 0xD,
	D3DQUERYTYPE_INTERFACETIMINGS = 0xE,
	D3DQUERYTYPE_VERTEXTIMINGS = 0xF,
	D3DQUERYTYPE_PIXELTIMINGS = 0x10,
	D3DQUERYTYPE_BANDWIDTHTIMINGS = 0x11,
	D3DQUERYTYPE_CACHEUTILIZATION = 0x12,
	D3DQUERYTYPE_MEMORYPRESSURE = 0x13,
};

/* 7922 */
struct IDirect3DQuery9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DQuery9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DQuery9 *);
	unsigned int (__stdcall *Release)(IDirect3DQuery9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DQuery9 *, IDirect3DDevice9 **);
	_D3DQUERYTYPE (__stdcall *GetType)(IDirect3DQuery9 *);
	unsigned int (__stdcall *GetDataSize)(IDirect3DQuery9 *);
	HRESULT (__stdcall *Issue)(IDirect3DQuery9 *, unsigned int);
	HRESULT (__stdcall *GetData)(IDirect3DQuery9 *, void *, unsigned int, unsigned int);
	_D3DQUERYTYPE Type;
	unsigned int DataSize;
	const wchar_t *CreationCallStack;
};

/* 11260 */
enum _D3DTEXTUREFILTERTYPE
{
	D3DTEXF_NONE = 0x0,
	D3DTEXF_POINT = 0x1,
	D3DTEXF_LINEAR = 0x2,
	D3DTEXF_ANISOTROPIC = 0x3,
	D3DTEXF_PYRAMIDALQUAD = 0x6,
	D3DTEXF_GAUSSIANQUAD = 0x7,
	D3DTEXF_CONVOLUTIONMONO = 0x8,
	D3DTEXF_FORCE_DWORD = 0x7FFFFFFF,
};

/* 7923 */
struct IDirect3DCubeTexture9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DCubeTexture9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DCubeTexture9 *);
	unsigned int (__stdcall *Release)(IDirect3DCubeTexture9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DCubeTexture9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DCubeTexture9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DCubeTexture9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DCubeTexture9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DCubeTexture9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DCubeTexture9 *);
	void (__stdcall *PreLoad)(IDirect3DCubeTexture9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DCubeTexture9 *);
	unsigned int (__stdcall *SetLOD)(IDirect3DCubeTexture9 *, unsigned int);
	unsigned int (__stdcall *GetLOD)(IDirect3DCubeTexture9 *);
	unsigned int (__stdcall *GetLevelCount)(IDirect3DCubeTexture9 *);
	HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DCubeTexture9 *, _D3DTEXTUREFILTERTYPE);
	_D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DCubeTexture9 *);
	void (__stdcall *GenerateMipSubLevels)(IDirect3DCubeTexture9 *);
	HRESULT (__stdcall *GetLevelDesc)(IDirect3DCubeTexture9 *, unsigned int, _D3DSURFACE_DESC *);
	HRESULT (__stdcall *GetCubeMapSurface)(IDirect3DCubeTexture9 *, _D3DCUBEMAP_FACES, unsigned int, IDirect3DSurface9 **);
	HRESULT (__stdcall *LockRect)(IDirect3DCubeTexture9 *, _D3DCUBEMAP_FACES, unsigned int, _D3DLOCKED_RECT *, tagRECT *, unsigned int);
	HRESULT (__stdcall *UnlockRect)(IDirect3DCubeTexture9 *, _D3DCUBEMAP_FACES, unsigned int);
	HRESULT (__stdcall *AddDirtyRect)(IDirect3DCubeTexture9 *, _D3DCUBEMAP_FACES, tagRECT *);
	const wchar_t *Name;
	unsigned int Width;
	unsigned int Height;
	unsigned int Levels;
	unsigned int Usage;
	_D3DFORMAT Format;
	_D3DPOOL Pool;
	unsigned int Priority;
	unsigned int LOD;
	_D3DTEXTUREFILTERTYPE FilterType;
	unsigned int LockCount;
	const wchar_t *CreationCallStack;
};

/* 7924 */
struct IDirect3DVertexDeclaration9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DVertexDeclaration9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DVertexDeclaration9 *);
	unsigned int (__stdcall *Release)(IDirect3DVertexDeclaration9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DVertexDeclaration9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *GetDeclaration)(IDirect3DVertexDeclaration9 *, _D3DVERTEXELEMENT9 *, unsigned int *);
	const wchar_t *CreationCallStack;
};

/* 7925 */
struct IDirect3DVolumeTexture9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DVolumeTexture9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DVolumeTexture9 *);
	unsigned int (__stdcall *Release)(IDirect3DVolumeTexture9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DVolumeTexture9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DVolumeTexture9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DVolumeTexture9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DVolumeTexture9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DVolumeTexture9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DVolumeTexture9 *);
	void (__stdcall *PreLoad)(IDirect3DVolumeTexture9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DVolumeTexture9 *);
	unsigned int (__stdcall *SetLOD)(IDirect3DVolumeTexture9 *, unsigned int);
	unsigned int (__stdcall *GetLOD)(IDirect3DVolumeTexture9 *);
	unsigned int (__stdcall *GetLevelCount)(IDirect3DVolumeTexture9 *);
	HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DVolumeTexture9 *, _D3DTEXTUREFILTERTYPE);
	_D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DVolumeTexture9 *);
	void (__stdcall *GenerateMipSubLevels)(IDirect3DVolumeTexture9 *);
	HRESULT (__stdcall *GetLevelDesc)(IDirect3DVolumeTexture9 *, unsigned int, _D3DVOLUME_DESC *);
	HRESULT (__stdcall *GetVolumeLevel)(IDirect3DVolumeTexture9 *, unsigned int, IDirect3DVolume9 **);
	HRESULT (__stdcall *LockBox)(IDirect3DVolumeTexture9 *, unsigned int, _D3DLOCKED_BOX *, _D3DBOX *, unsigned int);
	HRESULT (__stdcall *UnlockBox)(IDirect3DVolumeTexture9 *, unsigned int);
	HRESULT (__stdcall *AddDirtyBox)(IDirect3DVolumeTexture9 *, _D3DBOX *);
	const wchar_t *Name;
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int Levels;
	unsigned int Usage;
	_D3DFORMAT Format;
	_D3DPOOL Pool;
	unsigned int Priority;
	unsigned int LOD;
	_D3DTEXTUREFILTERTYPE FilterType;
	unsigned int LockCount;
	const wchar_t *CreationCallStack;
};

/* 7926 */
struct IDirect3DVertexBuffer9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DVertexBuffer9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DVertexBuffer9 *);
	unsigned int (__stdcall *Release)(IDirect3DVertexBuffer9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DVertexBuffer9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DVertexBuffer9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DVertexBuffer9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DVertexBuffer9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DVertexBuffer9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DVertexBuffer9 *);
	void (__stdcall *PreLoad)(IDirect3DVertexBuffer9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DVertexBuffer9 *);
	HRESULT (__stdcall *Lock)(IDirect3DVertexBuffer9 *, unsigned int, unsigned int, void **, unsigned int);
	HRESULT (__stdcall *Unlock)(IDirect3DVertexBuffer9 *);
	HRESULT (__stdcall *GetDesc)(IDirect3DVertexBuffer9 *, _D3DVERTEXBUFFER_DESC *);
	const wchar_t *Name;
	unsigned int Length;
	unsigned int Usage;
	unsigned int FVF;
	_D3DPOOL Pool;
	unsigned int Priority;
	unsigned int LockCount;
	const wchar_t *CreationCallStack;
};

/* 7927 */
struct IDirect3DPixelShader9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DPixelShader9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DPixelShader9 *);
	unsigned int (__stdcall *Release)(IDirect3DPixelShader9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DPixelShader9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *GetFunction)(IDirect3DPixelShader9 *, void *, unsigned int *);
	unsigned int Version;
	const wchar_t *CreationCallStack;
};

/* 7928 */
struct IDirect3D9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3D9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3D9 *);
	unsigned int (__stdcall *Release)(IDirect3D9 *);
	HRESULT (__stdcall *RegisterSoftwareDevice)(IDirect3D9 *, void *);
	unsigned int (__stdcall *GetAdapterCount)(IDirect3D9 *);
	HRESULT (__stdcall *GetAdapterIdentifier)(IDirect3D9 *, unsigned int, unsigned int, _D3DADAPTER_IDENTIFIER9 *);
	unsigned int (__stdcall *GetAdapterModeCount)(IDirect3D9 *, unsigned int, _D3DFORMAT);
	HRESULT (__stdcall *EnumAdapterModes)(IDirect3D9 *, unsigned int, _D3DFORMAT, unsigned int, _D3DDISPLAYMODE *);
	HRESULT (__stdcall *GetAdapterDisplayMode)(IDirect3D9 *, unsigned int, _D3DDISPLAYMODE *);
	HRESULT (__stdcall *CheckDeviceType)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT, int);
	HRESULT (__stdcall *CheckDeviceFormat)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, _D3DFORMAT, unsigned int, _D3DRESOURCETYPE, _D3DFORMAT);
	HRESULT (__stdcall *CheckDeviceMultiSampleType)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, _D3DFORMAT, int, _D3DMULTISAMPLE_TYPE, unsigned int *);
	HRESULT (__stdcall *CheckDepthStencilMatch)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT, _D3DFORMAT);
	HRESULT (__stdcall *CheckDeviceFormatConversion)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT);
	HRESULT (__stdcall *GetDeviceCaps)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, _D3DCAPS9 *);
	HMONITOR__ *(__stdcall *GetAdapterMonitor)(IDirect3D9 *, unsigned int);
	HRESULT (__stdcall *CreateDevice)(IDirect3D9 *, unsigned int, _D3DDEVTYPE, HWND__ *, unsigned int, _D3DPRESENT_PARAMETERS_ *, IDirect3DDevice9 **);
	const wchar_t *Version;
};

/* 7929 */
struct IDirect3DBaseTexture9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DBaseTexture9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DBaseTexture9 *);
	unsigned int (__stdcall *Release)(IDirect3DBaseTexture9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DBaseTexture9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DBaseTexture9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DBaseTexture9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DBaseTexture9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DBaseTexture9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DBaseTexture9 *);
	void (__stdcall *PreLoad)(IDirect3DBaseTexture9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DBaseTexture9 *);
	unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *, unsigned int);
	unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *);
	unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *);
	HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *, _D3DTEXTUREFILTERTYPE);
	_D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *);
	void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *);
};

/* 7930 */
struct IDirect3DSwapChain9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DSwapChain9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DSwapChain9 *);
	unsigned int (__stdcall *Release)(IDirect3DSwapChain9 *);
	HRESULT (__stdcall *Present)(IDirect3DSwapChain9 *, tagRECT *, tagRECT *, HWND__ *, _RGNDATA *, unsigned int);
	HRESULT (__stdcall *GetFrontBufferData)(IDirect3DSwapChain9 *, IDirect3DSurface9 *);
	HRESULT (__stdcall *GetBackBuffer)(IDirect3DSwapChain9 *, unsigned int, _D3DBACKBUFFER_TYPE, IDirect3DSurface9 **);
	HRESULT (__stdcall *GetRasterStatus)(IDirect3DSwapChain9 *, _D3DRASTER_STATUS *);
	HRESULT (__stdcall *GetDisplayMode)(IDirect3DSwapChain9 *, _D3DDISPLAYMODE *);
	HRESULT (__stdcall *GetDevice)(IDirect3DSwapChain9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *GetPresentParameters)(IDirect3DSwapChain9 *, _D3DPRESENT_PARAMETERS_ *);
	_D3DPRESENT_PARAMETERS_ PresentParameters;
	_D3DDISPLAYMODE DisplayMode;
	const wchar_t *CreationCallStack;
};

/* 7931 */
struct IDirect3DIndexBuffer9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DIndexBuffer9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DIndexBuffer9 *);
	unsigned int (__stdcall *Release)(IDirect3DIndexBuffer9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DIndexBuffer9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DIndexBuffer9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DIndexBuffer9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DIndexBuffer9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DIndexBuffer9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DIndexBuffer9 *);
	void (__stdcall *PreLoad)(IDirect3DIndexBuffer9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DIndexBuffer9 *);
	HRESULT (__stdcall *Lock)(IDirect3DIndexBuffer9 *, unsigned int, unsigned int, void **, unsigned int);
	HRESULT (__stdcall *Unlock)(IDirect3DIndexBuffer9 *);
	HRESULT (__stdcall *GetDesc)(IDirect3DIndexBuffer9 *, _D3DINDEXBUFFER_DESC *);
	const wchar_t *Name;
	unsigned int Length;
	unsigned int Usage;
	_D3DFORMAT Format;
	_D3DPOOL Pool;
	unsigned int Priority;
	unsigned int LockCount;
	const wchar_t *CreationCallStack;
};

/* 7932 */
struct Vertex
{
	float x;
	float y;
	float z;
	unsigned int color;
	float u;
	float v;
};

/* 7933 */
struct D3D_TextureRep
{
	SDL_bool dirty;
	int w;
	int h;
	unsigned int usage;
	unsigned int format;
	IDirect3DTexture9 *texture;
	IDirect3DTexture9 *staging;
};

/* 7934 */
struct D3D_TextureData
{
	D3D_TextureRep texture;
	_D3DTEXTUREFILTERTYPE scaleMode;
	SDL_bool yuv;
	D3D_TextureRep utexture;
	D3D_TextureRep vtexture;
	char *pixels;
	int pitch;
	SDL_Rect locked_rect;
};

/* 7935 */
struct IDirect3DVertexShader9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DVertexShader9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DVertexShader9 *);
	unsigned int (__stdcall *Release)(IDirect3DVertexShader9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DVertexShader9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *GetFunction)(IDirect3DVertexShader9 *, void *, unsigned int *);
	unsigned int Version;
	const wchar_t *CreationCallStack;
};

/* 7936 */
struct IDirect3DStateBlock9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DStateBlock9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DStateBlock9 *);
	unsigned int (__stdcall *Release)(IDirect3DStateBlock9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DStateBlock9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *Capture)(IDirect3DStateBlock9 *);
	HRESULT (__stdcall *Apply)(IDirect3DStateBlock9 *);
	const wchar_t *CreationCallStack;
};

/* 7937 */
struct IDirect3DTexture9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DTexture9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DTexture9 *);
	unsigned int (__stdcall *Release)(IDirect3DTexture9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DTexture9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DTexture9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DTexture9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DTexture9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DTexture9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DTexture9 *);
	void (__stdcall *PreLoad)(IDirect3DTexture9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DTexture9 *);
	unsigned int (__stdcall *SetLOD)(IDirect3DTexture9 *, unsigned int);
	unsigned int (__stdcall *GetLOD)(IDirect3DTexture9 *);
	unsigned int (__stdcall *GetLevelCount)(IDirect3DTexture9 *);
	HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DTexture9 *, _D3DTEXTUREFILTERTYPE);
	_D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DTexture9 *);
	void (__stdcall *GenerateMipSubLevels)(IDirect3DTexture9 *);
	HRESULT (__stdcall *GetLevelDesc)(IDirect3DTexture9 *, unsigned int, _D3DSURFACE_DESC *);
	HRESULT (__stdcall *GetSurfaceLevel)(IDirect3DTexture9 *, unsigned int, IDirect3DSurface9 **);
	HRESULT (__stdcall *LockRect)(IDirect3DTexture9 *, unsigned int, _D3DLOCKED_RECT *, tagRECT *, unsigned int);
	HRESULT (__stdcall *UnlockRect)(IDirect3DTexture9 *, unsigned int);
	HRESULT (__stdcall *AddDirtyRect)(IDirect3DTexture9 *, tagRECT *);
	const wchar_t *Name;
	unsigned int Width;
	unsigned int Height;
	unsigned int Levels;
	unsigned int Usage;
	_D3DFORMAT Format;
	_D3DPOOL Pool;
	unsigned int Priority;
	unsigned int LOD;
	_D3DTEXTUREFILTERTYPE FilterType;
	unsigned int LockCount;
	const wchar_t *CreationCallStack;
};

/* 7938 */
struct IDirect3DDevice9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DDevice9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DDevice9 *);
	unsigned int (__stdcall *Release)(IDirect3DDevice9 *);
	HRESULT (__stdcall *TestCooperativeLevel)(IDirect3DDevice9 *);
	unsigned int (__stdcall *GetAvailableTextureMem)(IDirect3DDevice9 *);
	HRESULT (__stdcall *EvictManagedResources)(IDirect3DDevice9 *);
	HRESULT (__stdcall *GetDirect3D)(IDirect3DDevice9 *, IDirect3D9 **);
	HRESULT (__stdcall *GetDeviceCaps)(IDirect3DDevice9 *, _D3DCAPS9 *);
	HRESULT (__stdcall *GetDisplayMode)(IDirect3DDevice9 *, unsigned int, _D3DDISPLAYMODE *);
	HRESULT (__stdcall *GetCreationParameters)(IDirect3DDevice9 *, _D3DDEVICE_CREATION_PARAMETERS *);
	HRESULT (__stdcall *SetCursorProperties)(IDirect3DDevice9 *, unsigned int, unsigned int, IDirect3DSurface9 *);
	void (__stdcall *SetCursorPosition)(IDirect3DDevice9 *, int, int, unsigned int);
	int (__stdcall *ShowCursor)(IDirect3DDevice9 *, int);
	HRESULT (__stdcall *CreateAdditionalSwapChain)(IDirect3DDevice9 *, _D3DPRESENT_PARAMETERS_ *, IDirect3DSwapChain9 **);
	HRESULT (__stdcall *GetSwapChain)(IDirect3DDevice9 *, unsigned int, IDirect3DSwapChain9 **);
	unsigned int (__stdcall *GetNumberOfSwapChains)(IDirect3DDevice9 *);
	HRESULT (__stdcall *Reset)(IDirect3DDevice9 *, _D3DPRESENT_PARAMETERS_ *);
	HRESULT (__stdcall *Present)(IDirect3DDevice9 *, tagRECT *, tagRECT *, HWND__ *, _RGNDATA *);
	HRESULT (__stdcall *GetBackBuffer)(IDirect3DDevice9 *, unsigned int, unsigned int, _D3DBACKBUFFER_TYPE, IDirect3DSurface9 **);
	HRESULT (__stdcall *GetRasterStatus)(IDirect3DDevice9 *, unsigned int, _D3DRASTER_STATUS *);
	HRESULT (__stdcall *SetDialogBoxMode)(IDirect3DDevice9 *, int);
	void (__stdcall *SetGammaRamp)(IDirect3DDevice9 *, unsigned int, unsigned int, _D3DGAMMARAMP *);
	void (__stdcall *GetGammaRamp)(IDirect3DDevice9 *, unsigned int, _D3DGAMMARAMP *);
	HRESULT (__stdcall *CreateTexture)(IDirect3DDevice9 *, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DTexture9 **, void **);
	HRESULT (__stdcall *CreateVolumeTexture)(IDirect3DDevice9 *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DVolumeTexture9 **, void **);
	HRESULT (__stdcall *CreateCubeTexture)(IDirect3DDevice9 *, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DCubeTexture9 **, void **);
	HRESULT (__stdcall *CreateVertexBuffer)(IDirect3DDevice9 *, unsigned int, unsigned int, unsigned int, _D3DPOOL, IDirect3DVertexBuffer9 **, void **);
	HRESULT (__stdcall *CreateIndexBuffer)(IDirect3DDevice9 *, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DIndexBuffer9 **, void **);
	HRESULT (__stdcall *CreateRenderTarget)(IDirect3DDevice9 *, unsigned int, unsigned int, _D3DFORMAT, _D3DMULTISAMPLE_TYPE, unsigned int, int, IDirect3DSurface9 **, void **);
	HRESULT (__stdcall *CreateDepthStencilSurface)(IDirect3DDevice9 *, unsigned int, unsigned int, _D3DFORMAT, _D3DMULTISAMPLE_TYPE, unsigned int, int, IDirect3DSurface9 **, void **);
	HRESULT (__stdcall *UpdateSurface)(IDirect3DDevice9 *, IDirect3DSurface9 *, tagRECT *, IDirect3DSurface9 *, tagPOINT *);
	HRESULT (__stdcall *UpdateTexture)(IDirect3DDevice9 *, IDirect3DBaseTexture9 *, IDirect3DBaseTexture9 *);
	HRESULT (__stdcall *GetRenderTargetData)(IDirect3DDevice9 *, IDirect3DSurface9 *, IDirect3DSurface9 *);
	HRESULT (__stdcall *GetFrontBufferData)(IDirect3DDevice9 *, unsigned int, IDirect3DSurface9 *);
	HRESULT (__stdcall *StretchRect)(IDirect3DDevice9 *, IDirect3DSurface9 *, tagRECT *, IDirect3DSurface9 *, tagRECT *, _D3DTEXTUREFILTERTYPE);
	HRESULT (__stdcall *ColorFill)(IDirect3DDevice9 *, IDirect3DSurface9 *, tagRECT *, unsigned int);
	HRESULT (__stdcall *CreateOffscreenPlainSurface)(IDirect3DDevice9 *, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DSurface9 **, void **);
	HRESULT (__stdcall *SetRenderTarget)(IDirect3DDevice9 *, unsigned int, IDirect3DSurface9 *);
	HRESULT (__stdcall *GetRenderTarget)(IDirect3DDevice9 *, unsigned int, IDirect3DSurface9 **);
	HRESULT (__stdcall *SetDepthStencilSurface)(IDirect3DDevice9 *, IDirect3DSurface9 *);
	HRESULT (__stdcall *GetDepthStencilSurface)(IDirect3DDevice9 *, IDirect3DSurface9 **);
	HRESULT (__stdcall *BeginScene)(IDirect3DDevice9 *);
	HRESULT (__stdcall *EndScene)(IDirect3DDevice9 *);
	HRESULT (__stdcall *Clear)(IDirect3DDevice9 *, unsigned int, _D3DRECT *, unsigned int, unsigned int, float, unsigned int);
	HRESULT (__stdcall *SetTransform)(IDirect3DDevice9 *, _D3DTRANSFORMSTATETYPE, _D3DMATRIX *);
	HRESULT (__stdcall *GetTransform)(IDirect3DDevice9 *, _D3DTRANSFORMSTATETYPE, _D3DMATRIX *);
	HRESULT (__stdcall *MultiplyTransform)(IDirect3DDevice9 *, _D3DTRANSFORMSTATETYPE, _D3DMATRIX *);
	HRESULT (__stdcall *SetViewport)(IDirect3DDevice9 *, _D3DVIEWPORT9 *);
	HRESULT (__stdcall *GetViewport)(IDirect3DDevice9 *, _D3DVIEWPORT9 *);
	HRESULT (__stdcall *SetMaterial)(IDirect3DDevice9 *, _D3DMATERIAL9 *);
	HRESULT (__stdcall *GetMaterial)(IDirect3DDevice9 *, _D3DMATERIAL9 *);
	HRESULT (__stdcall *SetLight)(IDirect3DDevice9 *, unsigned int, _D3DLIGHT9 *);
	HRESULT (__stdcall *GetLight)(IDirect3DDevice9 *, unsigned int, _D3DLIGHT9 *);
	HRESULT (__stdcall *LightEnable)(IDirect3DDevice9 *, unsigned int, int);
	HRESULT (__stdcall *GetLightEnable)(IDirect3DDevice9 *, unsigned int, int *);
	HRESULT (__stdcall *SetClipPlane)(IDirect3DDevice9 *, unsigned int, const float *);
	HRESULT (__stdcall *GetClipPlane)(IDirect3DDevice9 *, unsigned int, float *);
	HRESULT (__stdcall *SetRenderState)(IDirect3DDevice9 *, _D3DRENDERSTATETYPE, unsigned int);
	HRESULT (__stdcall *GetRenderState)(IDirect3DDevice9 *, _D3DRENDERSTATETYPE, unsigned int *);
	HRESULT (__stdcall *CreateStateBlock)(IDirect3DDevice9 *, _D3DSTATEBLOCKTYPE, IDirect3DStateBlock9 **);
	HRESULT (__stdcall *BeginStateBlock)(IDirect3DDevice9 *);
	HRESULT (__stdcall *EndStateBlock)(IDirect3DDevice9 *, IDirect3DStateBlock9 **);
	HRESULT (__stdcall *SetClipStatus)(IDirect3DDevice9 *, _D3DCLIPSTATUS9 *);
	HRESULT (__stdcall *GetClipStatus)(IDirect3DDevice9 *, _D3DCLIPSTATUS9 *);
	HRESULT (__stdcall *GetTexture)(IDirect3DDevice9 *, unsigned int, IDirect3DBaseTexture9 **);
	HRESULT (__stdcall *SetTexture)(IDirect3DDevice9 *, unsigned int, IDirect3DBaseTexture9 *);
	HRESULT (__stdcall *GetTextureStageState)(IDirect3DDevice9 *, unsigned int, _D3DTEXTURESTAGESTATETYPE, unsigned int *);
	HRESULT (__stdcall *SetTextureStageState)(IDirect3DDevice9 *, unsigned int, _D3DTEXTURESTAGESTATETYPE, unsigned int);
	HRESULT (__stdcall *GetSamplerState)(IDirect3DDevice9 *, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int *);
	HRESULT (__stdcall *SetSamplerState)(IDirect3DDevice9 *, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int);
	HRESULT (__stdcall *ValidateDevice)(IDirect3DDevice9 *, unsigned int *);
	HRESULT (__stdcall *SetPaletteEntries)(IDirect3DDevice9 *, unsigned int, tagPALETTEENTRY *);
	HRESULT (__stdcall *GetPaletteEntries)(IDirect3DDevice9 *, unsigned int, tagPALETTEENTRY *);
	HRESULT (__stdcall *SetCurrentTexturePalette)(IDirect3DDevice9 *, unsigned int);
	HRESULT (__stdcall *GetCurrentTexturePalette)(IDirect3DDevice9 *, unsigned int *);
	HRESULT (__stdcall *SetScissorRect)(IDirect3DDevice9 *, tagRECT *);
	HRESULT (__stdcall *GetScissorRect)(IDirect3DDevice9 *, tagRECT *);
	HRESULT (__stdcall *SetSoftwareVertexProcessing)(IDirect3DDevice9 *, int);
	int (__stdcall *GetSoftwareVertexProcessing)(IDirect3DDevice9 *);
	HRESULT (__stdcall *SetNPatchMode)(IDirect3DDevice9 *, float);
	float (__stdcall *GetNPatchMode)(IDirect3DDevice9 *);
	HRESULT (__stdcall *DrawPrimitive)(IDirect3DDevice9 *, _D3DPRIMITIVETYPE, unsigned int, unsigned int);
	HRESULT (__stdcall *DrawIndexedPrimitive)(IDirect3DDevice9 *, _D3DPRIMITIVETYPE, int, unsigned int, unsigned int, unsigned int, unsigned int);
	HRESULT (__stdcall *DrawPrimitiveUP)(IDirect3DDevice9 *, _D3DPRIMITIVETYPE, unsigned int, const void *, unsigned int);
	HRESULT (__stdcall *DrawIndexedPrimitiveUP)(IDirect3DDevice9 *, _D3DPRIMITIVETYPE, unsigned int, unsigned int, unsigned int, const void *, _D3DFORMAT, const void *, unsigned int);
	HRESULT (__stdcall *ProcessVertices)(IDirect3DDevice9 *, unsigned int, unsigned int, unsigned int, IDirect3DVertexBuffer9 *, IDirect3DVertexDeclaration9 *, unsigned int);
	HRESULT (__stdcall *CreateVertexDeclaration)(IDirect3DDevice9 *, _D3DVERTEXELEMENT9 *, IDirect3DVertexDeclaration9 **);
	HRESULT (__stdcall *SetVertexDeclaration)(IDirect3DDevice9 *, IDirect3DVertexDeclaration9 *);
	HRESULT (__stdcall *GetVertexDeclaration)(IDirect3DDevice9 *, IDirect3DVertexDeclaration9 **);
	HRESULT (__stdcall *SetFVF)(IDirect3DDevice9 *, unsigned int);
	HRESULT (__stdcall *GetFVF)(IDirect3DDevice9 *, unsigned int *);
	HRESULT (__stdcall *CreateVertexShader)(IDirect3DDevice9 *, const unsigned int *, IDirect3DVertexShader9 **);
	HRESULT (__stdcall *SetVertexShader)(IDirect3DDevice9 *, IDirect3DVertexShader9 *);
	HRESULT (__stdcall *GetVertexShader)(IDirect3DDevice9 *, IDirect3DVertexShader9 **);
	HRESULT (__stdcall *SetVertexShaderConstantF)(IDirect3DDevice9 *, unsigned int, const float *, unsigned int);
	HRESULT (__stdcall *GetVertexShaderConstantF)(IDirect3DDevice9 *, unsigned int, float *, unsigned int);
	HRESULT (__stdcall *SetVertexShaderConstantI)(IDirect3DDevice9 *, unsigned int, const int *, unsigned int);
	HRESULT (__stdcall *GetVertexShaderConstantI)(IDirect3DDevice9 *, unsigned int, int *, unsigned int);
	HRESULT (__stdcall *SetVertexShaderConstantB)(IDirect3DDevice9 *, unsigned int, const int *, unsigned int);
	HRESULT (__stdcall *GetVertexShaderConstantB)(IDirect3DDevice9 *, unsigned int, int *, unsigned int);
	HRESULT (__stdcall *SetStreamSource)(IDirect3DDevice9 *, unsigned int, IDirect3DVertexBuffer9 *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetStreamSource)(IDirect3DDevice9 *, unsigned int, IDirect3DVertexBuffer9 **, unsigned int *, unsigned int *);
	HRESULT (__stdcall *SetStreamSourceFreq)(IDirect3DDevice9 *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetStreamSourceFreq)(IDirect3DDevice9 *, unsigned int, unsigned int *);
	HRESULT (__stdcall *SetIndices)(IDirect3DDevice9 *, IDirect3DIndexBuffer9 *);
	HRESULT (__stdcall *GetIndices)(IDirect3DDevice9 *, IDirect3DIndexBuffer9 **);
	HRESULT (__stdcall *CreatePixelShader)(IDirect3DDevice9 *, const unsigned int *, IDirect3DPixelShader9 **);
	HRESULT (__stdcall *SetPixelShader)(IDirect3DDevice9 *, IDirect3DPixelShader9 *);
	HRESULT (__stdcall *GetPixelShader)(IDirect3DDevice9 *, IDirect3DPixelShader9 **);
	HRESULT (__stdcall *SetPixelShaderConstantF)(IDirect3DDevice9 *, unsigned int, const float *, unsigned int);
	HRESULT (__stdcall *GetPixelShaderConstantF)(IDirect3DDevice9 *, unsigned int, float *, unsigned int);
	HRESULT (__stdcall *SetPixelShaderConstantI)(IDirect3DDevice9 *, unsigned int, const int *, unsigned int);
	HRESULT (__stdcall *GetPixelShaderConstantI)(IDirect3DDevice9 *, unsigned int, int *, unsigned int);
	HRESULT (__stdcall *SetPixelShaderConstantB)(IDirect3DDevice9 *, unsigned int, const int *, unsigned int);
	HRESULT (__stdcall *GetPixelShaderConstantB)(IDirect3DDevice9 *, unsigned int, int *, unsigned int);
	HRESULT (__stdcall *DrawRectPatch)(IDirect3DDevice9 *, unsigned int, const float *, _D3DRECTPATCH_INFO *);
	HRESULT (__stdcall *DrawTriPatch)(IDirect3DDevice9 *, unsigned int, const float *, _D3DTRIPATCH_INFO *);
	HRESULT (__stdcall *DeletePatch)(IDirect3DDevice9 *, unsigned int);
	HRESULT (__stdcall *CreateQuery)(IDirect3DDevice9 *, _D3DQUERYTYPE, IDirect3DQuery9 **);
	_D3DDEVICE_CREATION_PARAMETERS CreationParameters;
	_D3DPRESENT_PARAMETERS_ PresentParameters;
	_D3DDISPLAYMODE DisplayMode;
	_D3DCAPS9 Caps;
	unsigned int AvailableTextureMem;
	unsigned int SwapChains;
	unsigned int Textures;
	unsigned int VertexBuffers;
	unsigned int IndexBuffers;
	unsigned int VertexShaders;
	unsigned int PixelShaders;
	_D3DVIEWPORT9 Viewport;
	_D3DMATRIX ProjectionMatrix;
	_D3DMATRIX ViewMatrix;
	_D3DMATRIX WorldMatrix;
	_D3DMATRIX TextureMatrices[8];
	unsigned int FVF;
	unsigned int VertexSize;
	unsigned int VertexShaderVersion;
	unsigned int PixelShaderVersion;
	int SoftwareVertexProcessing;
	_D3DMATERIAL9 Material;
	_D3DLIGHT9 Lights[16];
	int LightsEnabled[16];
	_D3DGAMMARAMP GammaRamp;
	tagRECT ScissorRect;
	int DialogBoxMode;
};

/* 7939 */
struct IDirect3DSurface9Vtbl
{
	HRESULT (__stdcall *QueryInterface)(IDirect3DSurface9 *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDirect3DSurface9 *);
	unsigned int (__stdcall *Release)(IDirect3DSurface9 *);
	HRESULT (__stdcall *GetDevice)(IDirect3DSurface9 *, IDirect3DDevice9 **);
	HRESULT (__stdcall *SetPrivateData)(IDirect3DSurface9 *, _GUID *const, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetPrivateData)(IDirect3DSurface9 *, _GUID *const, void *, unsigned int *);
	HRESULT (__stdcall *FreePrivateData)(IDirect3DSurface9 *, _GUID *const);
	unsigned int (__stdcall *SetPriority)(IDirect3DSurface9 *, unsigned int);
	unsigned int (__stdcall *GetPriority)(IDirect3DSurface9 *);
	void (__stdcall *PreLoad)(IDirect3DSurface9 *);
	_D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DSurface9 *);
	HRESULT (__stdcall *GetContainer)(IDirect3DSurface9 *, _GUID *const, void **);
	HRESULT (__stdcall *GetDesc)(IDirect3DSurface9 *, _D3DSURFACE_DESC *);
	HRESULT (__stdcall *LockRect)(IDirect3DSurface9 *, _D3DLOCKED_RECT *, tagRECT *, unsigned int);
	HRESULT (__stdcall *UnlockRect)(IDirect3DSurface9 *);
	HRESULT (__stdcall *GetDC)(IDirect3DSurface9 *, HDC__ **);
	HRESULT (__stdcall *ReleaseDC)(IDirect3DSurface9 *, HDC__ *);
	const wchar_t *Name;
	unsigned int Width;
	unsigned int Height;
	unsigned int Usage;
	_D3DFORMAT Format;
	_D3DPOOL Pool;
	_D3DMULTISAMPLE_TYPE MultiSampleType;
	unsigned int MultiSampleQuality;
	unsigned int Priority;
	unsigned int LockCount;
	unsigned int DCCount;
	const wchar_t *CreationCallStack;
};

/* 7940 */
struct D3D_RenderData
{
	void *d3dDLL;
	IDirect3D9 *d3d;
	IDirect3DDevice9 *device;
	unsigned int adapter;
	_D3DPRESENT_PARAMETERS_ pparams;
	SDL_bool updateSize;
	SDL_bool beginScene;
	SDL_bool enableSeparateAlphaBlend;
	_D3DTEXTUREFILTERTYPE scaleMode[8];
	IDirect3DSurface9 *defaultRenderTarget;
	IDirect3DSurface9 *currentRenderTarget;
	void *d3dxDLL;
	IDirect3DPixelShader9 *ps_yuv;
};

/* 7941 */
struct GL_FBOList
{
	unsigned int w;
	unsigned int h;
	unsigned int FBO;
	GL_FBOList *next;
};

/* 7942 */
struct $47DE7ADC0382DFF2F1639B1F6DCAF95D
{
	GL_Shader shader;
	unsigned int color;
	int blendMode;
};

/* 7943 */
struct GL_ShaderData
{
	unsigned int program;
	unsigned int vert_shader;
	unsigned int frag_shader;
};

/* 7944 */
struct GL_ShaderContext
{
	unsigned int (__cdecl *glGetError)();
	void (__stdcall *glAttachObjectARB)(unsigned int, unsigned int);
	void (__stdcall *glCompileShaderARB)(unsigned int);
	unsigned int (__stdcall *glCreateProgramObjectARB)();
	unsigned int (__stdcall *glCreateShaderObjectARB)(unsigned int);
	void (__stdcall *glDeleteObjectARB)(unsigned int);
	void (__stdcall *glGetInfoLogARB)(unsigned int, int, int *, char *);
	void (__stdcall *glGetObjectParameterivARB)(unsigned int, unsigned int, int *);
	int (__stdcall *glGetUniformLocationARB)(unsigned int, const char *);
	void (__stdcall *glLinkProgramARB)(unsigned int);
	void (__stdcall *glShaderSourceARB)(unsigned int, int, const char **, const int *);
	void (__stdcall *glUniform1iARB)(int, int);
	void (__stdcall *glUniform1fARB)(int, float);
	void (__stdcall *glUseProgramObjectARB)(unsigned int);
	SDL_bool GL_ARB_texture_rectangle_supported;
	GL_ShaderData shaders[6];
};

/* 7945 */
struct GL_RenderData
{
	void *context;
	SDL_bool debug_enabled;
	SDL_bool GL_ARB_debug_output_supported;
	int errors;
	char **error_messages;
	void (__stdcall *next_error_callback)(unsigned int, unsigned int, unsigned int, unsigned int, int, const char *, const void *);
	void *next_error_userparam;
	SDL_bool GL_ARB_texture_non_power_of_two_supported;
	SDL_bool GL_ARB_texture_rectangle_supported;
	$47DE7ADC0382DFF2F1639B1F6DCAF95D current;
	SDL_bool GL_EXT_framebuffer_object_supported;
	GL_FBOList *framebuffers;
	void (__stdcall *glBegin)(unsigned int);
	void (__stdcall *glBindTexture)(unsigned int, unsigned int);
	void (__stdcall *glBlendFunc)(unsigned int, unsigned int);
	void (__stdcall *glBlendFuncSeparate)(unsigned int, unsigned int, unsigned int, unsigned int);
	void (__stdcall *glClear)(unsigned int);
	void (__stdcall *glClearColor)(float, float, float, float);
	void (__stdcall *glColor3fv)(const float *);
	void (__stdcall *glColor4f)(float, float, float, float);
	void (__stdcall *glDeleteTextures)(int, const unsigned int *);
	void (__stdcall *glDepthFunc)(unsigned int);
	void (__stdcall *glDisable)(unsigned int);
	void (__stdcall *glDrawPixels)(int, int, unsigned int, unsigned int, const void *);
	void (__stdcall *glEnable)(unsigned int);
	void (__stdcall *glEnd)();
	void (__stdcall *glGenTextures)(int, unsigned int *);
	unsigned int (__stdcall *glGetError)();
	void (__stdcall *glGetIntegerv)(unsigned int, int *);
	void (__stdcall *glGetPointerv)(unsigned int, void **);
	const char *(__stdcall *glGetString)(unsigned int);
	void (__stdcall *glLineWidth)(float);
	void (__stdcall *glLoadIdentity)();
	void (__stdcall *glMatrixMode)(unsigned int);
	void (__stdcall *glOrtho)(long double, long double, long double, long double, long double, long double);
	void (__stdcall *glPixelStorei)(unsigned int, int);
	void (__stdcall *glPointSize)(float);
	void (__stdcall *glPopMatrix)();
	void (__stdcall *glPushMatrix)();
	void (__stdcall *glRasterPos2i)(int, int);
	void (__stdcall *glReadBuffer)(unsigned int);
	void (__stdcall *glReadPixels)(int, int, int, int, unsigned int, unsigned int, void *);
	void (__stdcall *glRectf)(float, float, float, float);
	void (__stdcall *glRotated)(long double, long double, long double, long double);
	void (__stdcall *glRotatef)(float, float, float, float);
	void (__stdcall *glScissor)(int, int, int, int);
	void (__stdcall *glShadeModel)(unsigned int);
	void (__stdcall *glTexCoord2f)(float, float);
	void (__stdcall *glTexEnvf)(unsigned int, unsigned int, float);
	void (__stdcall *glTexImage2D)(unsigned int, int, int, int, int, int, unsigned int, unsigned int, const void *);
	void (__stdcall *glTexParameteri)(unsigned int, unsigned int, int);
	void (__stdcall *glTexSubImage2D)(unsigned int, int, int, int, int, int, unsigned int, unsigned int, const void *);
	void (__stdcall *glTranslatef)(float, float, float);
	void (__stdcall *glVertex2f)(float, float);
	void (__stdcall *glVertex3fv)(const float *);
	void (__stdcall *glViewport)(int, int, int, int);
	SDL_bool GL_ARB_multitexture_supported;
	void (__stdcall *glActiveTextureARB)(unsigned int);
	int num_texture_units;
	void (__stdcall *glGenFramebuffersEXT)(int, unsigned int *);
	void (__stdcall *glDeleteFramebuffersEXT)(int, const unsigned int *);
	void (__stdcall *glFramebufferTexture2DEXT)(unsigned int, unsigned int, unsigned int, unsigned int, int);
	void (__stdcall *glBindFramebufferEXT)(unsigned int, unsigned int);
	unsigned int (__stdcall *glCheckFramebufferStatusEXT)(unsigned int);
	GL_ShaderContext *shaders;
};

/* 7946 */
struct GL_TextureData
{
	unsigned int texture;
	unsigned int type;
	float texw;
	float texh;
	unsigned int format;
	unsigned int formattype;
	void *pixels;
	int pitch;
	SDL_Rect locked_rect;
	SDL_bool yuv;
	SDL_bool nv12;
	unsigned int utexture;
	unsigned int vtexture;
	GL_FBOList *fbo;
};

/* 7947 */
struct GLES2_ShaderInstance
{
	unsigned int type;
	unsigned int format;
	int length;
	const void *data;
};

/* 7948 */
struct GLES2_ShaderCacheEntry
{
	unsigned int id;
	GLES2_ShaderType type;
	GLES2_ShaderInstance *instance;
	int references;
	char modulation_r;
	char modulation_g;
	char modulation_b;
	char modulation_a;
	GLES2_ShaderCacheEntry *prev;
	GLES2_ShaderCacheEntry *next;
};

/* 7949 */
struct GLES2_ProgramCacheEntry
{
	unsigned int id;
	SDL_BlendMode blend_mode;
	GLES2_ShaderCacheEntry *vertex_shader;
	GLES2_ShaderCacheEntry *fragment_shader;
	unsigned int uniform_locations[16];
	char color_r;
	char color_g;
	char color_b;
	char color_a;
	char modulation_r;
	char modulation_g;
	char modulation_b;
	char modulation_a;
	float projection[4][4];
	GLES2_ProgramCacheEntry *prev;
	GLES2_ProgramCacheEntry *next;
};

/* 7950 */
struct GLES2_ProgramCache
{
	int count;
	GLES2_ProgramCacheEntry *head;
	GLES2_ProgramCacheEntry *tail;
};

/* 7951 */
struct GLES2_Shader
{
	int instance_count;
	GLES2_ShaderInstance *instances[4];
};

/* 7952 */
struct GLES2_ShaderCache
{
	int count;
	GLES2_ShaderCacheEntry *head;
};

/* 7953 */
struct $F419898B0AA6CCB4CAF7A86ED923B0AA
{
	int blendMode;
	SDL_bool tex_coords;
};

/* 7954 */
struct GLES2_FBOList
{
	unsigned int w;
	unsigned int h;
	unsigned int FBO;
	GLES2_FBOList *next;
};

/* 7955 */
struct GLES2_DriverContext
{
	void **context;
	SDL_bool debug_enabled;
	$F419898B0AA6CCB4CAF7A86ED923B0AA current;
	void (__stdcall *glActiveTexture)(unsigned int);
	void (__stdcall *glAttachShader)(unsigned int, unsigned int);
	void (__stdcall *glBindAttribLocation)(unsigned int, unsigned int, const char *);
	void (__stdcall *glBindTexture)(unsigned int, unsigned int);
	void (__stdcall *glBlendFuncSeparate)(unsigned int, unsigned int, unsigned int, unsigned int);
	void (__stdcall *glClear)(unsigned int);
	void (__stdcall *glClearColor)(float, float, float, float);
	void (__stdcall *glCompileShader)(unsigned int);
	unsigned int (__stdcall *glCreateProgram)();
	unsigned int (__stdcall *glCreateShader)(unsigned int);
	void (__stdcall *glDeleteProgram)(unsigned int);
	void (__stdcall *glDeleteShader)(unsigned int);
	void (__stdcall *glDeleteTextures)(int, const unsigned int *);
	void (__stdcall *glDisable)(unsigned int);
	void (__stdcall *glDisableVertexAttribArray)(unsigned int);
	void (__stdcall *glDrawArrays)(unsigned int, int, int);
	void (__stdcall *glEnable)(unsigned int);
	void (__stdcall *glEnableVertexAttribArray)(unsigned int);
	void (__stdcall *glFinish)();
	void (__stdcall *glGenFramebuffers)(int, unsigned int *);
	void (__stdcall *glGenTextures)(int, unsigned int *);
	void (__stdcall *glGetBooleanv)(unsigned int, char *);
	const char *(__stdcall *glGetString)(unsigned int);
	unsigned int (__stdcall *glGetError)();
	void (__stdcall *glGetIntegerv)(unsigned int, int *);
	void (__stdcall *glGetProgramiv)(unsigned int, unsigned int, int *);
	void (__stdcall *glGetShaderInfoLog)(unsigned int, int, int *, char *);
	void (__stdcall *glGetShaderiv)(unsigned int, unsigned int, int *);
	int (__stdcall *glGetUniformLocation)(unsigned int, const char *);
	void (__stdcall *glLinkProgram)(unsigned int);
	void (__stdcall *glPixelStorei)(unsigned int, int);
	void (__stdcall *glReadPixels)(int, int, int, int, unsigned int, unsigned int, void *);
	void (__stdcall *glScissor)(int, int, int, int);
	void (__stdcall *glShaderBinary)(int, const unsigned int *, unsigned int, const void *, int);
	void (__stdcall *glShaderSource)(unsigned int, int, const char *const *, const int *);
	void (__stdcall *glTexImage2D)(unsigned int, int, int, int, int, int, unsigned int, unsigned int, const void *);
	void (__stdcall *glTexParameteri)(unsigned int, unsigned int, int);
	void (__stdcall *glTexSubImage2D)(unsigned int, int, int, int, int, int, unsigned int, unsigned int, const void *);
	void (__stdcall *glUniform1i)(int, int);
	void (__stdcall *glUniform4f)(int, float, float, float, float);
	void (__stdcall *glUniformMatrix4fv)(int, int, char, const float *);
	void (__stdcall *glUseProgram)(unsigned int);
	void (__stdcall *glVertexAttribPointer)(unsigned int, int, unsigned int, char, int, const void *);
	void (__stdcall *glViewport)(int, int, int, int);
	void (__stdcall *glBindFramebuffer)(unsigned int, unsigned int);
	void (__stdcall *glFramebufferTexture2D)(unsigned int, unsigned int, unsigned int, unsigned int, int);
	unsigned int (__stdcall *glCheckFramebufferStatus)(unsigned int);
	void (__stdcall *glDeleteFramebuffers)(int, const unsigned int *);
	int (__stdcall *glGetAttribLocation)(unsigned int, const char *);
	void (__stdcall *glGetProgramInfoLog)(unsigned int, int, int *, char *);
	void (__stdcall *glGenBuffers)(int, unsigned int *);
	void (__stdcall *glBindBuffer)(unsigned int, unsigned int);
	void (__stdcall *glBufferData)(unsigned int, int, const void *, unsigned int);
	void (__stdcall *glBufferSubData)(unsigned int, int, int, const void *);
	GLES2_FBOList *framebuffers;
	unsigned int window_framebuffer;
	int shader_format_count;
	unsigned int *shader_formats;
	GLES2_ShaderCache shader_cache;
	GLES2_ProgramCache program_cache;
	GLES2_ProgramCacheEntry *current_program;
	char clear_r;
	char clear_g;
	char clear_b;
	char clear_a;
};

/* 7956 */
struct GLES2_TextureData
{
	unsigned int texture;
	unsigned int texture_type;
	unsigned int pixel_format;
	unsigned int pixel_type;
	void *pixel_data;
	int pitch;
	SDL_bool yuv;
	SDL_bool nv12;
	unsigned int texture_v;
	unsigned int texture_u;
	GLES2_FBOList *fbo;
};

/* 7957 */
struct SW_RenderData
{
	SDL_Surface *surface;
	SDL_Surface *window;
};

/* 7958 */
struct RLEDestFormat
{
	char BytesPerPixel;
	char padding[3];
	unsigned int Rmask;
	unsigned int Gmask;
	unsigned int Bmask;
	unsigned int Amask;
	char Rloss;
	char Gloss;
	char Bloss;
	char Aloss;
	char Rshift;
	char Gshift;
	char Bshift;
	char Ashift;
};

/* 7959 */
struct tColorRGBA
{
	char r;
	char g;
	char b;
	char a;
};

/* 7960 */
struct tColorY
{
	char y;
};

/* 7963 */
struct SDL_QuadTreeChildren
{
	SDL_ShapeTree *upleft;
	SDL_ShapeTree *upright;
	SDL_ShapeTree *downleft;
	SDL_ShapeTree *downright;
};

/* 7961 */
union SDL_ShapeUnion
{
	SDL_QuadTreeChildren children;
	SDL_Rect shape;
};

/* 7962 */
struct __unaligned __declspec(align(4)) SDL_ShapeTree
{
	SDL_ShapeKind kind;
	SDL_ShapeUnion data;
};

/* 7964 */
struct SDL_FormatInfo
{
	SDL_bool left_justify;
	SDL_bool force_sign;
	SDL_bool force_type;
	SDL_bool pad_zeroes;
	SDL_letter_case force_case;
	int width;
	int radix;
	int precision;
};

/* 7965 */
struct SDL_cond
{
	SDL_mutex *lock;
	int waiting;
	int signals;
	SDL_semaphore *wait_sem;
	SDL_semaphore *wait_done;
};

/* 7966 */
struct ThreadStartParms
{
	void *args;
	void (__cdecl *pfnCurrentEndThread)(unsigned int);
};

/* 7967 */
struct $9C766896C1AFE3BBE27CF025E1158B1D
{
	void *data;
	void (__cdecl *destructor)(void *);
};

/* 7968 */
struct SDL_TLSData
{
	unsigned int limit;
	$9C766896C1AFE3BBE27CF025E1158B1D array[1];
};

/* 7969 */
struct SDL_TLSEntry
{
	unsigned int thread;
	SDL_TLSData *storage;
	SDL_TLSEntry *next;
};

/* 7970 */
struct thread_args
{
	int (__cdecl *func)(void *);
	void *data;
	SDL_Thread *info;
	SDL_semaphore *wait;
};

/* 7971 */
struct _SDL_Timer
{
	int timerID;
	unsigned int (__cdecl *callback)(unsigned int, void *);
	void *param;
	unsigned int interval;
	unsigned int scheduled;
	SDL_bool canceled;
	_SDL_Timer *next;
};

/* 7972 */
struct _SDL_TimerMap
{
	int timerID;
	_SDL_Timer *timer;
	_SDL_TimerMap *next;
};

/* 7973 */
struct SDL_TimerData
{
	SDL_Thread *thread;
	SDL_atomic_t nextID;
	_SDL_TimerMap *timermap;
	SDL_mutex *timermap_lock;
	char cache_pad[128];
	int lock;
	SDL_semaphore *sem;
	_SDL_Timer *volatile pending;
	_SDL_Timer *volatile freelist;
	SDL_bool active;
	_SDL_Timer *timers;
};

/* 7974 */
struct __declspec(align(8)) SDL_Touch
{
	__int64 id;
	int num_fingers;
	int max_fingers;
	SDL_Finger **fingers;
};

/* 7975 */
struct SDL_WindowTextureData
{
	SDL_Renderer *renderer;
	SDL_Texture *texture;
	void *pixels;
	int pitch;
	int bytes_per_pixel;
};

/* 7976 */
struct IEnumSTATSTGVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumSTATSTG *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumSTATSTG *);
	unsigned int (__stdcall *Release)(IEnumSTATSTG *);
	HRESULT (__stdcall *Next)(IEnumSTATSTG *, unsigned int, tagSTATSTG *, unsigned int *);
	HRESULT (__stdcall *Skip)(IEnumSTATSTG *, unsigned int);
	HRESULT (__stdcall *Reset)(IEnumSTATSTG *);
	HRESULT (__stdcall *Clone)(IEnumSTATSTG *, IEnumSTATSTG **);
};

/* 7977 */
struct IStorageVtbl
{
	HRESULT (__stdcall *QueryInterface)(IStorage *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IStorage *);
	unsigned int (__stdcall *Release)(IStorage *);
	HRESULT (__stdcall *CreateStream)(IStorage *, const wchar_t *, unsigned int, unsigned int, unsigned int, IStream **);
	HRESULT (__stdcall *OpenStream)(IStorage *, const wchar_t *, void *, unsigned int, unsigned int, IStream **);
	HRESULT (__stdcall *CreateStorage)(IStorage *, const wchar_t *, unsigned int, unsigned int, unsigned int, IStorage **);
	HRESULT (__stdcall *OpenStorage)(IStorage *, const wchar_t *, IStorage *, unsigned int, unsigned __int16 **, unsigned int, IStorage **);
	HRESULT (__stdcall *CopyTo)(IStorage *, unsigned int, _GUID *, unsigned __int16 **, IStorage *);
	HRESULT (__stdcall *MoveElementTo)(IStorage *, const wchar_t *, IStorage *, const wchar_t *, unsigned int);
	HRESULT (__stdcall *Commit)(IStorage *, unsigned int);
	HRESULT (__stdcall *Revert)(IStorage *);
	HRESULT (__stdcall *EnumElements)(IStorage *, unsigned int, void *, unsigned int, IEnumSTATSTG **);
	HRESULT (__stdcall *DestroyElement)(IStorage *, const wchar_t *);
	HRESULT (__stdcall *RenameElement)(IStorage *, const wchar_t *, const wchar_t *);
	HRESULT (__stdcall *SetElementTimes)(IStorage *, const wchar_t *, _FILETIME *, _FILETIME *, _FILETIME *);
	HRESULT (__stdcall *SetClass)(IStorage *, _GUID *const);
	HRESULT (__stdcall *SetStateBits)(IStorage *, unsigned int, unsigned int);
	HRESULT (__stdcall *Stat)(IStorage *, tagSTATSTG *, unsigned int);
};

/* 7978 */
union $D5D6745C75B8B3A3644189CDC8B1B8EA
{
	HBITMAP__ *hBitmap;
	void *hMetaFilePict;
	HENHMETAFILE__ *hEnhMetaFile;
	void *hGlobal;
	unsigned __int16 *lpszFileName;
	IStream *pstm;
	IStorage *pstg;
};

/* 7979 */
struct tagSTGMEDIUM
{
	unsigned int tymed;
	$D5D6745C75B8B3A3644189CDC8B1B8EA ___u1;
	IUnknown *pUnkForRelease;
};

/* 7980 */
struct __declspec(align(4)) tagDVTARGETDEVICE
{
	unsigned int tdSize;
	unsigned __int16 tdDriverNameOffset;
	unsigned __int16 tdDeviceNameOffset;
	unsigned __int16 tdPortNameOffset;
	unsigned __int16 tdExtDevmodeOffset;
	char tdData[1];
};

/* 7981 */
struct tagFORMATETC
{
	unsigned __int16 cfFormat;
	tagDVTARGETDEVICE *ptd;
	unsigned int dwAspect;
	int lindex;
	unsigned int tymed;
};

/* 7982 */
struct IAdviseSink
{
	IAdviseSinkVtbl *lpVtbl;
};

/* 7983 */
struct IAdviseSinkVtbl
{
	HRESULT (__stdcall *QueryInterface)(IAdviseSink *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IAdviseSink *);
	unsigned int (__stdcall *Release)(IAdviseSink *);
	void (__stdcall *OnDataChange)(IAdviseSink *, tagFORMATETC *, tagSTGMEDIUM *);
	void (__stdcall *OnViewChange)(IAdviseSink *, unsigned int, int);
	void (__stdcall *OnRename)(IAdviseSink *, IMoniker *);
	void (__stdcall *OnSave)(IAdviseSink *);
	void (__stdcall *OnClose)(IAdviseSink *);
};

/* 7984 */
struct tagSTATDATA
{
	tagFORMATETC formatetc;
	unsigned int advf;
	IAdviseSink *pAdvSink;
	unsigned int dwConnection;
};

/* 7985 */
struct IEnumFORMATETC
{
	IEnumFORMATETCVtbl *lpVtbl;
};

/* 7986 */
struct IEnumFORMATETCVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumFORMATETC *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumFORMATETC *);
	unsigned int (__stdcall *Release)(IEnumFORMATETC *);
	HRESULT (__stdcall *Next)(IEnumFORMATETC *, unsigned int, tagFORMATETC *, unsigned int *);
	HRESULT (__stdcall *Skip)(IEnumFORMATETC *, unsigned int);
	HRESULT (__stdcall *Reset)(IEnumFORMATETC *);
	HRESULT (__stdcall *Clone)(IEnumFORMATETC *, IEnumFORMATETC **);
};

/* 7987 */
struct ITypeLibVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITypeLib *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITypeLib *);
	unsigned int (__stdcall *Release)(ITypeLib *);
	unsigned int (__stdcall *GetTypeInfoCount)(ITypeLib *);
	HRESULT (__stdcall *GetTypeInfo)(ITypeLib *, unsigned int, ITypeInfo **);
	HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *, unsigned int, tagTYPEKIND *);
	HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *, _GUID *const, ITypeInfo **);
	HRESULT (__stdcall *GetLibAttr)(ITypeLib *, tagTLIBATTR **);
	HRESULT (__stdcall *GetTypeComp)(ITypeLib *, ITypeComp **);
	HRESULT (__stdcall *GetDocumentation)(ITypeLib *, int, unsigned __int16 **, unsigned __int16 **, unsigned int *, unsigned __int16 **);
	HRESULT (__stdcall *IsName)(ITypeLib *, unsigned __int16 *, unsigned int, int *);
	HRESULT (__stdcall *FindName)(ITypeLib *, unsigned __int16 *, unsigned int, ITypeInfo **, int *, unsigned __int16 *);
	void (__stdcall *ReleaseTLibAttr)(ITypeLib *, tagTLIBATTR *);
};

/* 7988 */
struct IEnumSTATDATA
{
	IEnumSTATDATAVtbl *lpVtbl;
};

/* 7989 */
struct IEnumSTATDATAVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumSTATDATA *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumSTATDATA *);
	unsigned int (__stdcall *Release)(IEnumSTATDATA *);
	HRESULT (__stdcall *Next)(IEnumSTATDATA *, unsigned int, tagSTATDATA *, unsigned int *);
	HRESULT (__stdcall *Skip)(IEnumSTATDATA *, unsigned int);
	HRESULT (__stdcall *Reset)(IEnumSTATDATA *);
	HRESULT (__stdcall *Clone)(IEnumSTATDATA *, IEnumSTATDATA **);
};

/* 7990 */
struct ITypeCompVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITypeComp *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITypeComp *);
	unsigned int (__stdcall *Release)(ITypeComp *);
	HRESULT (__stdcall *Bind)(ITypeComp *, unsigned __int16 *, unsigned int, unsigned __int16, ITypeInfo **, tagDESCKIND *, tagBINDPTR *);
	HRESULT (__stdcall *BindType)(ITypeComp *, unsigned __int16 *, unsigned int, ITypeInfo **, ITypeComp **);
};

/* 7991 */
struct IDataObject
{
	IDataObjectVtbl *lpVtbl;
};

/* 7992 */
struct IDataObjectVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDataObject *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDataObject *);
	unsigned int (__stdcall *Release)(IDataObject *);
	HRESULT (__stdcall *GetData)(IDataObject *, tagFORMATETC *, tagSTGMEDIUM *);
	HRESULT (__stdcall *GetDataHere)(IDataObject *, tagFORMATETC *, tagSTGMEDIUM *);
	HRESULT (__stdcall *QueryGetData)(IDataObject *, tagFORMATETC *);
	HRESULT (__stdcall *GetCanonicalFormatEtc)(IDataObject *, tagFORMATETC *, tagFORMATETC *);
	HRESULT (__stdcall *SetData)(IDataObject *, tagFORMATETC *, tagSTGMEDIUM *, int);
	HRESULT (__stdcall *EnumFormatEtc)(IDataObject *, unsigned int, IEnumFORMATETC **);
	HRESULT (__stdcall *DAdvise)(IDataObject *, tagFORMATETC *, unsigned int, IAdviseSink *, unsigned int *);
	HRESULT (__stdcall *DUnadvise)(IDataObject *, unsigned int);
	HRESULT (__stdcall *EnumDAdvise)(IDataObject *, IEnumSTATDATA **);
};

/* 7993 */
struct IStreamVtbl
{
	HRESULT (__stdcall *QueryInterface)(IStream *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IStream *);
	unsigned int (__stdcall *Release)(IStream *);
	HRESULT (__stdcall *Read)(IStream *, void *, unsigned int, unsigned int *);
	HRESULT (__stdcall *Write)(IStream *, const void *, unsigned int, unsigned int *);
	HRESULT (__stdcall *Seek)(IStream *, _LARGE_INTEGER, unsigned int, _ULARGE_INTEGER *);
	HRESULT (__stdcall *SetSize)(IStream *, _ULARGE_INTEGER);
	HRESULT (__stdcall *CopyTo)(IStream *, IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
	HRESULT (__stdcall *Commit)(IStream *, unsigned int);
	HRESULT (__stdcall *Revert)(IStream *);
	HRESULT (__stdcall *LockRegion)(IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
	HRESULT (__stdcall *UnlockRegion)(IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
	HRESULT (__stdcall *Stat)(IStream *, tagSTATSTG *, unsigned int);
	HRESULT (__stdcall *Clone)(IStream *, IStream **);
};

/* 7994 */
struct IDispatchVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDispatch *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDispatch *);
	unsigned int (__stdcall *Release)(IDispatch *);
	HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *, unsigned int *);
	HRESULT (__stdcall *GetTypeInfo)(IDispatch *, unsigned int, unsigned int, ITypeInfo **);
	HRESULT (__stdcall *GetIDsOfNames)(IDispatch *, _GUID *const, unsigned __int16 **, unsigned int, unsigned int, int *);
	HRESULT (__stdcall *Invoke)(IDispatch *, int, _GUID *const, unsigned int, unsigned __int16, tagDISPPARAMS *, tagVARIANT *, tagEXCEPINFO *, unsigned int *);
};

/* 7995 */
struct ITfRange
{
	ITfRangeVtbl *lpVtbl;
};

/* 11261 */
enum __MIDL___MIDL_itf_msctf_0000_0000_0001
{
	TF_ANCHOR_START = 0x0,
	TF_ANCHOR_END = 0x1,
};

/* 8024 */
struct ITfRangeVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfRange *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfRange *);
	unsigned int (__stdcall *Release)(ITfRange *);
	HRESULT (__stdcall *GetText)(ITfRange *, unsigned int, unsigned int, unsigned __int16 *, unsigned int, unsigned int *);
	HRESULT (__stdcall *SetText)(ITfRange *, unsigned int, unsigned int, const wchar_t *, int);
	HRESULT (__stdcall *GetFormattedText)(ITfRange *, unsigned int, IDataObject **);
	HRESULT (__stdcall *GetEmbedded)(ITfRange *, unsigned int, _GUID *const, _GUID *const, IUnknown **);
	HRESULT (__stdcall *InsertEmbedded)(ITfRange *, unsigned int, unsigned int, IDataObject *);
	HRESULT (__stdcall *ShiftStart)(ITfRange *, unsigned int, int, int *, TF_HALTCOND *);
	HRESULT (__stdcall *ShiftEnd)(ITfRange *, unsigned int, int, int *, TF_HALTCOND *);
	HRESULT (__stdcall *ShiftStartToRange)(ITfRange *, unsigned int, ITfRange *, __MIDL___MIDL_itf_msctf_0000_0000_0001);
	HRESULT (__stdcall *ShiftEndToRange)(ITfRange *, unsigned int, ITfRange *, __MIDL___MIDL_itf_msctf_0000_0000_0001);
	HRESULT (__stdcall *ShiftStartRegion)(ITfRange *, unsigned int, __MIDL_ITfRange_0002, int *);
	HRESULT (__stdcall *ShiftEndRegion)(ITfRange *, unsigned int, __MIDL_ITfRange_0002, int *);
	HRESULT (__stdcall *IsEmpty)(ITfRange *, unsigned int, int *);
	HRESULT (__stdcall *Collapse)(ITfRange *, unsigned int, __MIDL___MIDL_itf_msctf_0000_0000_0001);
	HRESULT (__stdcall *IsEqualStart)(ITfRange *, unsigned int, ITfRange *, __MIDL___MIDL_itf_msctf_0000_0000_0001, int *);
	HRESULT (__stdcall *IsEqualEnd)(ITfRange *, unsigned int, ITfRange *, __MIDL___MIDL_itf_msctf_0000_0000_0001, int *);
	HRESULT (__stdcall *CompareStart)(ITfRange *, unsigned int, ITfRange *, __MIDL___MIDL_itf_msctf_0000_0000_0001, int *);
	HRESULT (__stdcall *CompareEnd)(ITfRange *, unsigned int, ITfRange *, __MIDL___MIDL_itf_msctf_0000_0000_0001, int *);
	HRESULT (__stdcall *AdjustForInsert)(ITfRange *, unsigned int, unsigned int, int *);
	HRESULT (__stdcall *GetGravity)(ITfRange *, __MIDL_ITfRange_0001 *, __MIDL_ITfRange_0001 *);
	HRESULT (__stdcall *SetGravity)(ITfRange *, unsigned int, __MIDL_ITfRange_0001, __MIDL_ITfRange_0001);
	HRESULT (__stdcall *Clone)(ITfRange *, ITfRange **);
	HRESULT (__stdcall *GetContext)(ITfRange *, ITfContext **);
};

/* 7996 */
const struct TF_HALTCOND
{
	ITfRange *pHaltRange;
	__MIDL___MIDL_itf_msctf_0000_0000_0001 aHaltPos;
	unsigned int dwFlags;
};

/* 7997 */
struct ITfContext
{
	ITfContextVtbl *lpVtbl;
};

/* 8023 */
struct ITfContextVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfContext *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfContext *);
	unsigned int (__stdcall *Release)(ITfContext *);
	HRESULT (__stdcall *RequestEditSession)(ITfContext *, unsigned int, ITfEditSession *, unsigned int, HRESULT *);
	HRESULT (__stdcall *InWriteSession)(ITfContext *, unsigned int, int *);
	HRESULT (__stdcall *GetSelection)(ITfContext *, unsigned int, unsigned int, unsigned int, TF_SELECTION *, unsigned int *);
	HRESULT (__stdcall *SetSelection)(ITfContext *, unsigned int, unsigned int, TF_SELECTION *);
	HRESULT (__stdcall *GetStart)(ITfContext *, unsigned int, ITfRange **);
	HRESULT (__stdcall *GetEnd)(ITfContext *, unsigned int, ITfRange **);
	HRESULT (__stdcall *GetActiveView)(ITfContext *, ITfContextView **);
	HRESULT (__stdcall *EnumViews)(ITfContext *, IEnumTfContextViews **);
	HRESULT (__stdcall *GetStatus)(ITfContext *, TS_STATUS *);
	HRESULT (__stdcall *GetProperty)(ITfContext *, _GUID *const, ITfProperty **);
	HRESULT (__stdcall *GetAppProperty)(ITfContext *, _GUID *const, ITfReadOnlyProperty **);
	HRESULT (__stdcall *TrackProperties)(ITfContext *, _GUID **, unsigned int, _GUID **, unsigned int, ITfReadOnlyProperty **);
	HRESULT (__stdcall *EnumProperties)(ITfContext *, IEnumTfProperties **);
	HRESULT (__stdcall *GetDocumentMgr)(ITfContext *, ITfDocumentMgr **);
	HRESULT (__stdcall *CreateRangeBackup)(ITfContext *, unsigned int, ITfRange *, ITfRangeBackup **);
};

/* 7998 */
struct ITfEditSession
{
	ITfEditSessionVtbl *lpVtbl;
};

/* 11262 */
enum __MIDL_ITfContext_0001
{
	TF_AE_NONE = 0x0,
	TF_AE_START = 0x1,
	TF_AE_END = 0x2,
};

/* 8000 */
struct TF_SELECTIONSTYLE
{
	__MIDL_ITfContext_0001 ase;
	int fInterimChar;
};

/* 8001 */
struct TF_SELECTION
{
	ITfRange *range;
	TF_SELECTIONSTYLE style;
};

/* 8002 */
struct ITfContextView
{
	ITfContextViewVtbl *lpVtbl;
};

/* 8004 */
struct IEnumTfContextViews
{
	IEnumTfContextViewsVtbl *lpVtbl;
};

/* 8006 */
struct TS_STATUS
{
	unsigned int dwDynamicFlags;
	unsigned int dwStaticFlags;
};

/* 8007 */
struct ITfProperty
{
	ITfPropertyVtbl *lpVtbl;
};

/* 8013 */
struct ITfReadOnlyProperty
{
	ITfReadOnlyPropertyVtbl *lpVtbl;
};

/* 8015 */
struct IEnumTfProperties
{
	IEnumTfPropertiesVtbl *lpVtbl;
};

/* 8017 */
struct ITfDocumentMgr
{
	ITfDocumentMgrVtbl *lpVtbl;
};

/* 8021 */
struct ITfRangeBackup
{
	ITfRangeBackupVtbl *lpVtbl;
};

/* 7999 */
struct ITfEditSessionVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfEditSession *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfEditSession *);
	unsigned int (__stdcall *Release)(ITfEditSession *);
	HRESULT (__stdcall *DoEditSession)(ITfEditSession *, unsigned int);
};

/* 8003 */
struct ITfContextViewVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfContextView *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfContextView *);
	unsigned int (__stdcall *Release)(ITfContextView *);
	HRESULT (__stdcall *GetRangeFromPoint)(ITfContextView *, unsigned int, tagPOINT *, unsigned int, ITfRange **);
	HRESULT (__stdcall *GetTextExt)(ITfContextView *, unsigned int, ITfRange *, tagRECT *, int *);
	HRESULT (__stdcall *GetScreenExt)(ITfContextView *, tagRECT *);
	HRESULT (__stdcall *GetWnd)(ITfContextView *, HWND__ **);
};

/* 8005 */
struct IEnumTfContextViewsVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfContextViews *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfContextViews *);
	unsigned int (__stdcall *Release)(IEnumTfContextViews *);
	HRESULT (__stdcall *Clone)(IEnumTfContextViews *, IEnumTfContextViews **);
	HRESULT (__stdcall *Next)(IEnumTfContextViews *, unsigned int, ITfContextView **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfContextViews *);
	HRESULT (__stdcall *Skip)(IEnumTfContextViews *, unsigned int);
};

/* 8012 */
struct ITfPropertyVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfProperty *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfProperty *);
	unsigned int (__stdcall *Release)(ITfProperty *);
	HRESULT (__stdcall *GetType)(ITfProperty *, _GUID *);
	HRESULT (__stdcall *EnumRanges)(ITfProperty *, unsigned int, IEnumTfRanges **, ITfRange *);
	HRESULT (__stdcall *GetValue)(ITfProperty *, unsigned int, ITfRange *, tagVARIANT *);
	HRESULT (__stdcall *GetContext)(ITfProperty *, ITfContext **);
	HRESULT (__stdcall *FindRange)(ITfProperty *, unsigned int, ITfRange *, ITfRange **, __MIDL___MIDL_itf_msctf_0000_0000_0001);
	HRESULT (__stdcall *SetValueStore)(ITfProperty *, unsigned int, ITfRange *, ITfPropertyStore *);
	HRESULT (__stdcall *SetValue)(ITfProperty *, unsigned int, ITfRange *, tagVARIANT *);
	HRESULT (__stdcall *Clear)(ITfProperty *, unsigned int, ITfRange *);
};

/* 8014 */
struct ITfReadOnlyPropertyVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfReadOnlyProperty *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfReadOnlyProperty *);
	unsigned int (__stdcall *Release)(ITfReadOnlyProperty *);
	HRESULT (__stdcall *GetType)(ITfReadOnlyProperty *, _GUID *);
	HRESULT (__stdcall *EnumRanges)(ITfReadOnlyProperty *, unsigned int, IEnumTfRanges **, ITfRange *);
	HRESULT (__stdcall *GetValue)(ITfReadOnlyProperty *, unsigned int, ITfRange *, tagVARIANT *);
	HRESULT (__stdcall *GetContext)(ITfReadOnlyProperty *, ITfContext **);
};

/* 8016 */
struct IEnumTfPropertiesVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfProperties *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfProperties *);
	unsigned int (__stdcall *Release)(IEnumTfProperties *);
	HRESULT (__stdcall *Clone)(IEnumTfProperties *, IEnumTfProperties **);
	HRESULT (__stdcall *Next)(IEnumTfProperties *, unsigned int, ITfProperty **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfProperties *);
	HRESULT (__stdcall *Skip)(IEnumTfProperties *, unsigned int);
};

/* 8020 */
struct ITfDocumentMgrVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfDocumentMgr *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfDocumentMgr *);
	unsigned int (__stdcall *Release)(ITfDocumentMgr *);
	HRESULT (__stdcall *CreateContext)(ITfDocumentMgr *, unsigned int, unsigned int, IUnknown *, ITfContext **, unsigned int *);
	HRESULT (__stdcall *Push)(ITfDocumentMgr *, ITfContext *);
	HRESULT (__stdcall *Pop)(ITfDocumentMgr *, unsigned int);
	HRESULT (__stdcall *GetTop)(ITfDocumentMgr *, ITfContext **);
	HRESULT (__stdcall *GetBase)(ITfDocumentMgr *, ITfContext **);
	HRESULT (__stdcall *EnumContexts)(ITfDocumentMgr *, IEnumTfContexts **);
};

/* 8022 */
struct ITfRangeBackupVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfRangeBackup *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfRangeBackup *);
	unsigned int (__stdcall *Release)(ITfRangeBackup *);
	HRESULT (__stdcall *Restore)(ITfRangeBackup *, unsigned int, ITfRange *);
};

/* 8008 */
struct IEnumTfRanges
{
	IEnumTfRangesVtbl *lpVtbl;
};

/* 8010 */
struct ITfPropertyStore
{
	ITfPropertyStoreVtbl *lpVtbl;
};

/* 8018 */
struct IEnumTfContexts
{
	IEnumTfContextsVtbl *lpVtbl;
};

/* 8009 */
struct IEnumTfRangesVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfRanges *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfRanges *);
	unsigned int (__stdcall *Release)(IEnumTfRanges *);
	HRESULT (__stdcall *Clone)(IEnumTfRanges *, IEnumTfRanges **);
	HRESULT (__stdcall *Next)(IEnumTfRanges *, unsigned int, ITfRange **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfRanges *);
	HRESULT (__stdcall *Skip)(IEnumTfRanges *, unsigned int);
};

/* 8011 */
struct ITfPropertyStoreVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfPropertyStore *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfPropertyStore *);
	unsigned int (__stdcall *Release)(ITfPropertyStore *);
	HRESULT (__stdcall *GetType)(ITfPropertyStore *, _GUID *);
	HRESULT (__stdcall *GetDataType)(ITfPropertyStore *, unsigned int *);
	HRESULT (__stdcall *GetData)(ITfPropertyStore *, tagVARIANT *);
	HRESULT (__stdcall *OnTextUpdated)(ITfPropertyStore *, unsigned int, ITfRange *, int *);
	HRESULT (__stdcall *Shrink)(ITfPropertyStore *, ITfRange *, int *);
	HRESULT (__stdcall *Divide)(ITfPropertyStore *, ITfRange *, ITfRange *, ITfPropertyStore **);
	HRESULT (__stdcall *Clone)(ITfPropertyStore *, ITfPropertyStore **);
	HRESULT (__stdcall *GetPropertyRangeCreator)(ITfPropertyStore *, _GUID *);
	HRESULT (__stdcall *Serialize)(ITfPropertyStore *, IStream *, unsigned int *);
};

/* 8019 */
struct IEnumTfContextsVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfContexts *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfContexts *);
	unsigned int (__stdcall *Release)(IEnumTfContexts *);
	HRESULT (__stdcall *Clone)(IEnumTfContexts *, IEnumTfContexts **);
	HRESULT (__stdcall *Next)(IEnumTfContexts *, unsigned int, ITfContext **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfContexts *);
	HRESULT (__stdcall *Skip)(IEnumTfContexts *, unsigned int);
};

/* 8025 */
struct ITypeInfoVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITypeInfo *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITypeInfo *);
	unsigned int (__stdcall *Release)(ITypeInfo *);
	HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *, tagTYPEATTR **);
	HRESULT (__stdcall *GetTypeComp)(ITypeInfo *, ITypeComp **);
	HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *, unsigned int, tagFUNCDESC **);
	HRESULT (__stdcall *GetVarDesc)(ITypeInfo *, unsigned int, tagVARDESC **);
	HRESULT (__stdcall *GetNames)(ITypeInfo *, int, unsigned __int16 **, unsigned int, unsigned int *);
	HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *, unsigned int, unsigned int *);
	HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *, unsigned int, int *);
	HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *, unsigned __int16 **, unsigned int, int *);
	HRESULT (__stdcall *Invoke)(ITypeInfo *, void *, int, unsigned __int16, tagDISPPARAMS *, tagVARIANT *, tagEXCEPINFO *, unsigned int *);
	HRESULT (__stdcall *GetDocumentation)(ITypeInfo *, int, unsigned __int16 **, unsigned __int16 **, unsigned int *, unsigned __int16 **);
	HRESULT (__stdcall *GetDllEntry)(ITypeInfo *, int, tagINVOKEKIND, unsigned __int16 **, unsigned __int16 **, unsigned __int16 *);
	HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *, unsigned int, ITypeInfo **);
	HRESULT (__stdcall *AddressOfMember)(ITypeInfo *, int, tagINVOKEKIND, void **);
	HRESULT (__stdcall *CreateInstance)(ITypeInfo *, IUnknown *, _GUID *const, void **);
	HRESULT (__stdcall *GetMops)(ITypeInfo *, int, unsigned __int16 **);
	HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *, ITypeLib **, unsigned int *);
	void (__stdcall *ReleaseTypeAttr)(ITypeInfo *, tagTYPEATTR *);
	void (__stdcall *ReleaseFuncDesc)(ITypeInfo *, tagFUNCDESC *);
	void (__stdcall *ReleaseVarDesc)(ITypeInfo *, tagVARDESC *);
};

/* 8026 */
struct IRecordInfoVtbl
{
	HRESULT (__stdcall *QueryInterface)(IRecordInfo *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IRecordInfo *);
	unsigned int (__stdcall *Release)(IRecordInfo *);
	HRESULT (__stdcall *RecordInit)(IRecordInfo *, void *);
	HRESULT (__stdcall *RecordClear)(IRecordInfo *, void *);
	HRESULT (__stdcall *RecordCopy)(IRecordInfo *, void *, void *);
	HRESULT (__stdcall *GetGuid)(IRecordInfo *, _GUID *);
	HRESULT (__stdcall *GetName)(IRecordInfo *, unsigned __int16 **);
	HRESULT (__stdcall *GetSize)(IRecordInfo *, unsigned int *);
	HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *, ITypeInfo **);
	HRESULT (__stdcall *GetField)(IRecordInfo *, void *, const wchar_t *, tagVARIANT *);
	HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *, void *, const wchar_t *, tagVARIANT *, void **);
	HRESULT (__stdcall *PutField)(IRecordInfo *, unsigned int, void *, const wchar_t *, tagVARIANT *);
	HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *, unsigned int, void *, const wchar_t *, tagVARIANT *);
	HRESULT (__stdcall *GetFieldNames)(IRecordInfo *, unsigned int *, unsigned __int16 **);
	int (__stdcall *IsMatchingType)(IRecordInfo *, IRecordInfo *);
	void *(__stdcall *RecordCreate)(IRecordInfo *);
	HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *, void *, void **);
	HRESULT (__stdcall *RecordDestroy)(IRecordInfo *, void *);
};

/* 8027 */
struct IEnumGUID
{
	IEnumGUIDVtbl *lpVtbl;
};

/* 8028 */
struct IEnumGUIDVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumGUID *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumGUID *);
	unsigned int (__stdcall *Release)(IEnumGUID *);
	HRESULT (__stdcall *Next)(IEnumGUID *, unsigned int, _GUID *, unsigned int *);
	HRESULT (__stdcall *Skip)(IEnumGUID *, unsigned int);
	HRESULT (__stdcall *Reset)(IEnumGUID *);
	HRESULT (__stdcall *Clone)(IEnumGUID *, IEnumGUID **);
};

/* 8029 */
struct ITfCompartment
{
	ITfCompartmentVtbl *lpVtbl;
};

/* 8030 */
struct ITfCompartmentVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfCompartment *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfCompartment *);
	unsigned int (__stdcall *Release)(ITfCompartment *);
	HRESULT (__stdcall *SetValue)(ITfCompartment *, unsigned int, tagVARIANT *);
	HRESULT (__stdcall *GetValue)(ITfCompartment *, tagVARIANT *);
};

/* 8031 */
struct IEnumTfDocumentMgrs
{
	IEnumTfDocumentMgrsVtbl *lpVtbl;
};

/* 8032 */
struct IEnumTfDocumentMgrsVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfDocumentMgrs *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfDocumentMgrs *);
	unsigned int (__stdcall *Release)(IEnumTfDocumentMgrs *);
	HRESULT (__stdcall *Clone)(IEnumTfDocumentMgrs *, IEnumTfDocumentMgrs **);
	HRESULT (__stdcall *Next)(IEnumTfDocumentMgrs *, unsigned int, ITfDocumentMgr **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfDocumentMgrs *);
	HRESULT (__stdcall *Skip)(IEnumTfDocumentMgrs *, unsigned int);
};

/* 8033 */
struct ITfThreadMgrVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfThreadMgr *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfThreadMgr *);
	unsigned int (__stdcall *Release)(ITfThreadMgr *);
	HRESULT (__stdcall *Activate)(ITfThreadMgr *, unsigned int *);
	HRESULT (__stdcall *Deactivate)(ITfThreadMgr *);
	HRESULT (__stdcall *CreateDocumentMgr)(ITfThreadMgr *, ITfDocumentMgr **);
	HRESULT (__stdcall *EnumDocumentMgrs)(ITfThreadMgr *, IEnumTfDocumentMgrs **);
	HRESULT (__stdcall *GetFocus)(ITfThreadMgr *, ITfDocumentMgr **);
	HRESULT (__stdcall *SetFocus)(ITfThreadMgr *, ITfDocumentMgr *);
	HRESULT (__stdcall *AssociateFocus)(ITfThreadMgr *, HWND__ *, ITfDocumentMgr *, ITfDocumentMgr **);
	HRESULT (__stdcall *IsThreadFocus)(ITfThreadMgr *, int *);
	HRESULT (__stdcall *GetFunctionProvider)(ITfThreadMgr *, _GUID *const, ITfFunctionProvider **);
	HRESULT (__stdcall *EnumFunctionProviders)(ITfThreadMgr *, IEnumTfFunctionProviders **);
	HRESULT (__stdcall *GetGlobalCompartment)(ITfThreadMgr *, ITfCompartmentMgr **);
};

/* 8034 */
struct ITfThreadMgr
{
	ITfThreadMgrVtbl *lpVtbl;
};

/* 8035 */
struct ITfFunctionProvider
{
	ITfFunctionProviderVtbl *lpVtbl;
};

/* 8037 */
struct IEnumTfFunctionProviders
{
	IEnumTfFunctionProvidersVtbl *lpVtbl;
};

/* 8039 */
struct ITfCompartmentMgr
{
	ITfCompartmentMgrVtbl *lpVtbl;
};

/* 8036 */
struct ITfFunctionProviderVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfFunctionProvider *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfFunctionProvider *);
	unsigned int (__stdcall *Release)(ITfFunctionProvider *);
	HRESULT (__stdcall *GetType)(ITfFunctionProvider *, _GUID *);
	HRESULT (__stdcall *GetDescription)(ITfFunctionProvider *, unsigned __int16 **);
	HRESULT (__stdcall *GetFunction)(ITfFunctionProvider *, _GUID *const, _GUID *const, IUnknown **);
};

/* 8038 */
struct IEnumTfFunctionProvidersVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfFunctionProviders *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfFunctionProviders *);
	unsigned int (__stdcall *Release)(IEnumTfFunctionProviders *);
	HRESULT (__stdcall *Clone)(IEnumTfFunctionProviders *, IEnumTfFunctionProviders **);
	HRESULT (__stdcall *Next)(IEnumTfFunctionProviders *, unsigned int, ITfFunctionProvider **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfFunctionProviders *);
	HRESULT (__stdcall *Skip)(IEnumTfFunctionProviders *, unsigned int);
};

/* 8040 */
struct ITfCompartmentMgrVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfCompartmentMgr *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfCompartmentMgr *);
	unsigned int (__stdcall *Release)(ITfCompartmentMgr *);
	HRESULT (__stdcall *GetCompartment)(ITfCompartmentMgr *, _GUID *const, ITfCompartment **);
	HRESULT (__stdcall *ClearCompartment)(ITfCompartmentMgr *, unsigned int, _GUID *const);
	HRESULT (__stdcall *EnumCompartments)(ITfCompartmentMgr *, IEnumGUID **);
};

/* 8041 */
struct ITfThreadMgrExVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfThreadMgrEx *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfThreadMgrEx *);
	unsigned int (__stdcall *Release)(ITfThreadMgrEx *);
	HRESULT (__stdcall *Activate)(ITfThreadMgrEx *, unsigned int *);
	HRESULT (__stdcall *Deactivate)(ITfThreadMgrEx *);
	HRESULT (__stdcall *CreateDocumentMgr)(ITfThreadMgrEx *, ITfDocumentMgr **);
	HRESULT (__stdcall *EnumDocumentMgrs)(ITfThreadMgrEx *, IEnumTfDocumentMgrs **);
	HRESULT (__stdcall *GetFocus)(ITfThreadMgrEx *, ITfDocumentMgr **);
	HRESULT (__stdcall *SetFocus)(ITfThreadMgrEx *, ITfDocumentMgr *);
	HRESULT (__stdcall *AssociateFocus)(ITfThreadMgrEx *, HWND__ *, ITfDocumentMgr *, ITfDocumentMgr **);
	HRESULT (__stdcall *IsThreadFocus)(ITfThreadMgrEx *, int *);
	HRESULT (__stdcall *GetFunctionProvider)(ITfThreadMgrEx *, _GUID *const, ITfFunctionProvider **);
	HRESULT (__stdcall *EnumFunctionProviders)(ITfThreadMgrEx *, IEnumTfFunctionProviders **);
	HRESULT (__stdcall *GetGlobalCompartment)(ITfThreadMgrEx *, ITfCompartmentMgr **);
	HRESULT (__stdcall *ActivateEx)(ITfThreadMgrEx *, unsigned int *, unsigned int);
	HRESULT (__stdcall *GetActiveFlags)(ITfThreadMgrEx *, unsigned int *);
};

/* 8042 */
struct ITfThreadMgrEx
{
	ITfThreadMgrExVtbl *lpVtbl;
};

/* 8043 */
struct _TOUCHINPUT
{
	int x;
	int y;
	void *hSource;
	unsigned int dwID;
	unsigned int dwFlags;
	unsigned int dwMask;
	unsigned int dwTime;
	unsigned int dwExtraInfo;
	unsigned int cxContact;
	unsigned int cyContact;
};

/* 8044 */
union $69B25F63CC344DF5027D34D379C3286A
{
	tagLOGFONTA A;
	tagLOGFONTW W;
};

/* 8045 */
struct tagINPUTCONTEXT2
{
	HWND__ *hWnd;
	int fOpen;
	tagPOINT ptStatusWndPos;
	tagPOINT ptSoftKbdPos;
	unsigned int fdwConversion;
	unsigned int fdwSentence;
	$69B25F63CC344DF5027D34D379C3286A lfFont;
	tagCOMPOSITIONFORM cfCompForm;
	tagCANDIDATEFORM cfCandForm[4];
	HIMCC__ *hCompStr;
	HIMCC__ *hCandInfo;
	HIMCC__ *hGuideLine;
	HIMCC__ *hPrivate;
	unsigned int dwNumMsgBuf;
	HIMCC__ *hMsgBuf;
	unsigned int fdwInit;
	unsigned int dwReserve[3];
};

/* 8046 */
struct TSFSink
{
	void **lpVtbl;
	int refcount;
	void *data;
};

/* 8047 */
struct SDL_VideoData
{
	int render;
	unsigned int clipboard_count;
	void *userDLL;
	int (__stdcall *CloseTouchInputHandle)(HTOUCHINPUT__ *);
	int (__stdcall *GetTouchInputInfo)(HTOUCHINPUT__ *, unsigned int, _TOUCHINPUT *, int);
	int (__stdcall *RegisterTouchWindow)(HWND__ *, unsigned int);
	int (__stdcall *GetGestureInfo)(HGESTUREINFO__ *, tagGESTUREINFO *);
	int (__stdcall *SetGestureConfig)(HWND__ *, unsigned int, unsigned int, tagGESTURECONFIG *, unsigned int);
	void *shcoreDLL;
	HRESULT (__stdcall *GetDpiForMonitor)(HMONITOR__ *, MONITOR_DPI_TYPE, unsigned int *, unsigned int *);
	SDL_bool ime_com_initialized;
	ITfThreadMgr *ime_threadmgr;
	SDL_bool ime_initialized;
	SDL_bool ime_enabled;
	SDL_bool ime_available;
	HWND__ *ime_hwnd_main;
	HWND__ *ime_hwnd_current;
	HIMC__ *ime_himc;
	wchar_t ime_composition[32];
	wchar_t ime_readingstring[16];
	int ime_cursor;
	SDL_bool ime_candlist;
	wchar_t ime_candidates[10][256];
	unsigned int ime_candcount;
	unsigned int ime_candref;
	unsigned int ime_candsel;
	unsigned int ime_candpgsize;
	int ime_candlistindexbase;
	SDL_bool ime_candvertical;
	SDL_bool ime_dirty;
	SDL_Rect ime_rect;
	SDL_Rect ime_candlistrect;
	int ime_winwidth;
	int ime_winheight;
	HKL__ *ime_hkl;
	void *ime_himm32;
	unsigned int (__stdcall *GetReadingString)(HIMC__ *, unsigned int, unsigned __int16 *, int *, int *, unsigned int *);
	int (__stdcall *ShowReadingWindow)(HIMC__ *, int);
	tagINPUTCONTEXT2 *(__stdcall *ImmLockIMC)(HIMC__ *);
	int (__stdcall *ImmUnlockIMC)(HIMC__ *);
	void *(__stdcall *ImmLockIMCC)(HIMCC__ *);
	int (__stdcall *ImmUnlockIMCC)(HIMCC__ *);
	SDL_bool ime_uiless;
	ITfThreadMgrEx *ime_threadmgrex;
	unsigned int ime_uielemsinkcookie;
	unsigned int ime_alpnsinkcookie;
	unsigned int ime_openmodesinkcookie;
	unsigned int ime_convmodesinkcookie;
	TSFSink *ime_uielemsink;
	TSFSink *ime_ippasink;
};

/* 8048 */
struct SDL_WindowData
{
	SDL_Window *window;
	HWND__ *hwnd;
	HDC__ *hdc;
	HDC__ *mdc;
	HBITMAP__ *hbm;
	int (__stdcall *wndproc)(HWND__ *, unsigned int, unsigned int, int);
	SDL_bool created;
	unsigned int mouse_button_flags;
	SDL_bool initializing;
	SDL_bool expected_resize;
	SDL_bool in_border_change;
	SDL_bool in_title_click;
	SDL_bool focus_click_pending;
	SDL_bool windowed_mode_was_maximized;
	SDL_bool in_window_deactivation;
	SDL_VideoData *videodata;
	void *egl_surface;
};

/* 8049 */
struct HDROP__
{
	int unused;
};

/* 8050 */
struct _XINPUT_GAMEPAD
{
	unsigned __int16 wButtons;
	char bLeftTrigger;
	char bRightTrigger;
	__int16 sThumbLX;
	__int16 sThumbLY;
	__int16 sThumbRX;
	__int16 sThumbRY;
};

/* 8051 */
struct _XINPUT_CAPABILITIES
{
	char Type;
	char SubType;
	unsigned __int16 Flags;
	_XINPUT_GAMEPAD Gamepad;
	_XINPUT_VIBRATION Vibration;
};

/* 8052 */
struct __declspec(align(4)) _DEV_BROADCAST_DEVICEINTERFACE_W
{
	unsigned int dbcc_size;
	unsigned int dbcc_devicetype;
	unsigned int dbcc_reserved;
	_GUID dbcc_classguid;
	wchar_t dbcc_name[1];
};

/* 8053 */
struct SDL_DeviceNotificationData
{
	HRESULT coinitialized;
	tagWNDCLASSEXW wincl;
	HWND__ *messageWindow;
	void *hNotify;
};

/* 8054 */
struct _DEV_BROADCAST_HDR
{
	unsigned int dbch_size;
	unsigned int dbch_devicetype;
	unsigned int dbch_reserved;
};

/* 8055 */
struct ITfUIElementMgr
{
	ITfUIElementMgrVtbl *lpVtbl;
};

/* 8060 */
struct ITfUIElementMgrVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfUIElementMgr *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfUIElementMgr *);
	unsigned int (__stdcall *Release)(ITfUIElementMgr *);
	HRESULT (__stdcall *BeginUIElement)(ITfUIElementMgr *, ITfUIElement *, int *, unsigned int *);
	HRESULT (__stdcall *UpdateUIElement)(ITfUIElementMgr *, unsigned int);
	HRESULT (__stdcall *EndUIElement)(ITfUIElementMgr *, unsigned int);
	HRESULT (__stdcall *GetUIElement)(ITfUIElementMgr *, unsigned int, ITfUIElement **);
	HRESULT (__stdcall *EnumUIElements)(ITfUIElementMgr *, IEnumTfUIElements **);
};

/* 8056 */
struct ITfUIElement
{
	ITfUIElementVtbl *lpVtbl;
};

/* 8058 */
struct IEnumTfUIElements
{
	IEnumTfUIElementsVtbl *lpVtbl;
};

/* 8057 */
struct ITfUIElementVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfUIElement *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfUIElement *);
	unsigned int (__stdcall *Release)(ITfUIElement *);
	HRESULT (__stdcall *GetDescription)(ITfUIElement *, unsigned __int16 **);
	HRESULT (__stdcall *GetGUID)(ITfUIElement *, _GUID *);
	HRESULT (__stdcall *Show)(ITfUIElement *, int);
	HRESULT (__stdcall *IsShown)(ITfUIElement *, int *);
};

/* 8059 */
struct IEnumTfUIElementsVtbl
{
	HRESULT (__stdcall *QueryInterface)(IEnumTfUIElements *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IEnumTfUIElements *);
	unsigned int (__stdcall *Release)(IEnumTfUIElements *);
	HRESULT (__stdcall *Clone)(IEnumTfUIElements *, IEnumTfUIElements **);
	HRESULT (__stdcall *Next)(IEnumTfUIElements *, unsigned int, ITfUIElement **, unsigned int *);
	HRESULT (__stdcall *Reset)(IEnumTfUIElements *);
	HRESULT (__stdcall *Skip)(IEnumTfUIElements *, unsigned int);
};

/* 8061 */
struct ITfCandidateListUIElement
{
	ITfCandidateListUIElementVtbl *lpVtbl;
};

/* 8062 */
struct ITfCandidateListUIElementVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfCandidateListUIElement *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfCandidateListUIElement *);
	unsigned int (__stdcall *Release)(ITfCandidateListUIElement *);
	HRESULT (__stdcall *GetDescription)(ITfCandidateListUIElement *, unsigned __int16 **);
	HRESULT (__stdcall *GetGUID)(ITfCandidateListUIElement *, _GUID *);
	HRESULT (__stdcall *Show)(ITfCandidateListUIElement *, int);
	HRESULT (__stdcall *IsShown)(ITfCandidateListUIElement *, int *);
	HRESULT (__stdcall *GetUpdatedFlags)(ITfCandidateListUIElement *, unsigned int *);
	HRESULT (__stdcall *GetDocumentMgr)(ITfCandidateListUIElement *, ITfDocumentMgr **);
	HRESULT (__stdcall *GetCount)(ITfCandidateListUIElement *, unsigned int *);
	HRESULT (__stdcall *GetSelection)(ITfCandidateListUIElement *, unsigned int *);
	HRESULT (__stdcall *GetString)(ITfCandidateListUIElement *, unsigned int, unsigned __int16 **);
	HRESULT (__stdcall *GetPageIndex)(ITfCandidateListUIElement *, unsigned int *, unsigned int, unsigned int *);
	HRESULT (__stdcall *SetPageIndex)(ITfCandidateListUIElement *, unsigned int *, unsigned int);
	HRESULT (__stdcall *GetCurrentPage)(ITfCandidateListUIElement *, unsigned int *);
};

/* 8063 */
struct ITfReadingInformationUIElementVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfReadingInformationUIElement *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfReadingInformationUIElement *);
	unsigned int (__stdcall *Release)(ITfReadingInformationUIElement *);
	HRESULT (__stdcall *GetDescription)(ITfReadingInformationUIElement *, unsigned __int16 **);
	HRESULT (__stdcall *GetGUID)(ITfReadingInformationUIElement *, _GUID *);
	HRESULT (__stdcall *Show)(ITfReadingInformationUIElement *, int);
	HRESULT (__stdcall *IsShown)(ITfReadingInformationUIElement *, int *);
	HRESULT (__stdcall *GetUpdatedFlags)(ITfReadingInformationUIElement *, unsigned int *);
	HRESULT (__stdcall *GetContext)(ITfReadingInformationUIElement *, ITfContext **);
	HRESULT (__stdcall *GetString)(ITfReadingInformationUIElement *, unsigned __int16 **);
	HRESULT (__stdcall *GetMaxReadingStringLength)(ITfReadingInformationUIElement *, unsigned int *);
	HRESULT (__stdcall *GetErrorIndex)(ITfReadingInformationUIElement *, unsigned int *);
	HRESULT (__stdcall *IsVerticalOrderPreferred)(ITfReadingInformationUIElement *, int *);
};

/* 8064 */
struct ITfReadingInformationUIElement
{
	ITfReadingInformationUIElementVtbl *lpVtbl;
};

/* 8065 */
struct ITfSourceVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfSource *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfSource *);
	unsigned int (__stdcall *Release)(ITfSource *);
	HRESULT (__stdcall *AdviseSink)(ITfSource *, _GUID *const, IUnknown *, unsigned int *);
	HRESULT (__stdcall *UnadviseSink)(ITfSource *, unsigned int);
};

/* 8066 */
struct ITfSource
{
	ITfSourceVtbl *lpVtbl;
};

/* 8067 */
struct ITfUIElementSink
{
	ITfUIElementSinkVtbl *lpVtbl;
};

/* 8068 */
struct ITfUIElementSinkVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfUIElementSink *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfUIElementSink *);
	unsigned int (__stdcall *Release)(ITfUIElementSink *);
	HRESULT (__stdcall *BeginUIElement)(ITfUIElementSink *, unsigned int, int *);
	HRESULT (__stdcall *UpdateUIElement)(ITfUIElementSink *, unsigned int);
	HRESULT (__stdcall *EndUIElement)(ITfUIElementSink *, unsigned int);
};

/* 8069 */
struct ITfInputProcessorProfileActivationSinkVtbl
{
	HRESULT (__stdcall *QueryInterface)(ITfInputProcessorProfileActivationSink *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(ITfInputProcessorProfileActivationSink *);
	unsigned int (__stdcall *Release)(ITfInputProcessorProfileActivationSink *);
	HRESULT (__stdcall *OnActivated)(ITfInputProcessorProfileActivationSink *, unsigned int, unsigned __int16, _GUID *const, _GUID *const, _GUID *const, HKL__ *, unsigned int);
};

/* 8070 */
struct ITfInputProcessorProfileActivationSink
{
	ITfInputProcessorProfileActivationSinkVtbl *lpVtbl;
};

/* 8071 */
struct __unaligned __declspec(align(2)) DLGTEMPLATEEX
{
	unsigned __int16 dlgVer;
	unsigned __int16 signature;
	unsigned int helpID;
	unsigned int exStyle;
	unsigned int style;
	unsigned __int16 cDlgItems;
	__int16 x;
	__int16 y;
	__int16 cx;
	__int16 cy;
};

/* 8072 */
struct DLGITEMTEMPLATEEX
{
	unsigned int helpID;
	unsigned int exStyle;
	unsigned int style;
	__int16 x;
	__int16 y;
	__int16 cx;
	__int16 cy;
	unsigned int id;
};

/* 8073 */
struct WIN_DialogData
{
	DLGTEMPLATEEX *lpDialog;
	char *data;
	unsigned int size;
	unsigned int used;
};

/* 8074 */
struct SDL_DisplayData
{
	wchar_t DeviceName[32];
};

/* 8075 */
struct SDL_DisplayModeData
{
	_devicemodeW DeviceMode;
	float ScaleX;
	float ScaleY;
	float DiagDPI;
	float HorzDPI;
	float VertDPI;
};

/* 8076 */
struct _WIN_GetMonitorDPIData
{
	SDL_VideoData *vid_data;
	SDL_DisplayMode *mode;
	SDL_DisplayModeData *mode_data;
};

/* 8077 */
struct SDL_ShapeData
{
	SDL_ShapeTree *mask_tree;
};

/* 8078 */
struct DXGI_MAPPED_RECT
{
	int Pitch;
	char *pBits;
};

/* 8079 */
struct DXGI_SAMPLE_DESC
{
	unsigned int Count;
	unsigned int Quality;
};

/* 11263 */
enum DXGI_FORMAT
{
	DXGI_FORMAT_UNKNOWN = 0x0,
	DXGI_FORMAT_R32G32B32A32_TYPELESS = 0x1,
	DXGI_FORMAT_R32G32B32A32_FLOAT = 0x2,
	DXGI_FORMAT_R32G32B32A32_UINT = 0x3,
	DXGI_FORMAT_R32G32B32A32_SINT = 0x4,
	DXGI_FORMAT_R32G32B32_TYPELESS = 0x5,
	DXGI_FORMAT_R32G32B32_FLOAT = 0x6,
	DXGI_FORMAT_R32G32B32_UINT = 0x7,
	DXGI_FORMAT_R32G32B32_SINT = 0x8,
	DXGI_FORMAT_R16G16B16A16_TYPELESS = 0x9,
	DXGI_FORMAT_R16G16B16A16_FLOAT = 0xA,
	DXGI_FORMAT_R16G16B16A16_UNORM = 0xB,
	DXGI_FORMAT_R16G16B16A16_UINT = 0xC,
	DXGI_FORMAT_R16G16B16A16_SNORM = 0xD,
	DXGI_FORMAT_R16G16B16A16_SINT = 0xE,
	DXGI_FORMAT_R32G32_TYPELESS = 0xF,
	DXGI_FORMAT_R32G32_FLOAT = 0x10,
	DXGI_FORMAT_R32G32_UINT = 0x11,
	DXGI_FORMAT_R32G32_SINT = 0x12,
	DXGI_FORMAT_R32G8X24_TYPELESS = 0x13,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 0x14,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 0x15,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 0x16,
	DXGI_FORMAT_R10G10B10A2_TYPELESS = 0x17,
	DXGI_FORMAT_R10G10B10A2_UNORM = 0x18,
	DXGI_FORMAT_R10G10B10A2_UINT = 0x19,
	DXGI_FORMAT_R11G11B10_FLOAT = 0x1A,
	DXGI_FORMAT_R8G8B8A8_TYPELESS = 0x1B,
	DXGI_FORMAT_R8G8B8A8_UNORM = 0x1C,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 0x1D,
	DXGI_FORMAT_R8G8B8A8_UINT = 0x1E,
	DXGI_FORMAT_R8G8B8A8_SNORM = 0x1F,
	DXGI_FORMAT_R8G8B8A8_SINT = 0x20,
	DXGI_FORMAT_R16G16_TYPELESS = 0x21,
	DXGI_FORMAT_R16G16_FLOAT = 0x22,
	DXGI_FORMAT_R16G16_UNORM = 0x23,
	DXGI_FORMAT_R16G16_UINT = 0x24,
	DXGI_FORMAT_R16G16_SNORM = 0x25,
	DXGI_FORMAT_R16G16_SINT = 0x26,
	DXGI_FORMAT_R32_TYPELESS = 0x27,
	DXGI_FORMAT_D32_FLOAT = 0x28,
	DXGI_FORMAT_R32_FLOAT = 0x29,
	DXGI_FORMAT_R32_UINT = 0x2A,
	DXGI_FORMAT_R32_SINT = 0x2B,
	DXGI_FORMAT_R24G8_TYPELESS = 0x2C,
	DXGI_FORMAT_D24_UNORM_S8_UINT = 0x2D,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 0x2E,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT = 0x2F,
	DXGI_FORMAT_R8G8_TYPELESS = 0x30,
	DXGI_FORMAT_R8G8_UNORM = 0x31,
	DXGI_FORMAT_R8G8_UINT = 0x32,
	DXGI_FORMAT_R8G8_SNORM = 0x33,
	DXGI_FORMAT_R8G8_SINT = 0x34,
	DXGI_FORMAT_R16_TYPELESS = 0x35,
	DXGI_FORMAT_R16_FLOAT = 0x36,
	DXGI_FORMAT_D16_UNORM = 0x37,
	DXGI_FORMAT_R16_UNORM = 0x38,
	DXGI_FORMAT_R16_UINT = 0x39,
	DXGI_FORMAT_R16_SNORM = 0x3A,
	DXGI_FORMAT_R16_SINT = 0x3B,
	DXGI_FORMAT_R8_TYPELESS = 0x3C,
	DXGI_FORMAT_R8_UNORM = 0x3D,
	DXGI_FORMAT_R8_UINT = 0x3E,
	DXGI_FORMAT_R8_SNORM = 0x3F,
	DXGI_FORMAT_R8_SINT = 0x40,
	DXGI_FORMAT_A8_UNORM = 0x41,
	DXGI_FORMAT_R1_UNORM = 0x42,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 0x43,
	DXGI_FORMAT_R8G8_B8G8_UNORM = 0x44,
	DXGI_FORMAT_G8R8_G8B8_UNORM = 0x45,
	DXGI_FORMAT_BC1_TYPELESS = 0x46,
	DXGI_FORMAT_BC1_UNORM = 0x47,
	DXGI_FORMAT_BC1_UNORM_SRGB = 0x48,
	DXGI_FORMAT_BC2_TYPELESS = 0x49,
	DXGI_FORMAT_BC2_UNORM = 0x4A,
	DXGI_FORMAT_BC2_UNORM_SRGB = 0x4B,
	DXGI_FORMAT_BC3_TYPELESS = 0x4C,
	DXGI_FORMAT_BC3_UNORM = 0x4D,
	DXGI_FORMAT_BC3_UNORM_SRGB = 0x4E,
	DXGI_FORMAT_BC4_TYPELESS = 0x4F,
	DXGI_FORMAT_BC4_UNORM = 0x50,
	DXGI_FORMAT_BC4_SNORM = 0x51,
	DXGI_FORMAT_BC5_TYPELESS = 0x52,
	DXGI_FORMAT_BC5_UNORM = 0x53,
	DXGI_FORMAT_BC5_SNORM = 0x54,
	DXGI_FORMAT_B5G6R5_UNORM = 0x55,
	DXGI_FORMAT_B5G5R5A1_UNORM = 0x56,
	DXGI_FORMAT_B8G8R8A8_UNORM = 0x57,
	DXGI_FORMAT_B8G8R8X8_UNORM = 0x58,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 0x59,
	DXGI_FORMAT_B8G8R8A8_TYPELESS = 0x5A,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 0x5B,
	DXGI_FORMAT_B8G8R8X8_TYPELESS = 0x5C,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 0x5D,
	DXGI_FORMAT_BC6H_TYPELESS = 0x5E,
	DXGI_FORMAT_BC6H_UF16 = 0x5F,
	DXGI_FORMAT_BC6H_SF16 = 0x60,
	DXGI_FORMAT_BC7_TYPELESS = 0x61,
	DXGI_FORMAT_BC7_UNORM = 0x62,
	DXGI_FORMAT_BC7_UNORM_SRGB = 0x63,
	DXGI_FORMAT_FORCE_UINT = 0xFFFFFFFF,
};

/* 8080 */
struct DXGI_SURFACE_DESC
{
	unsigned int Width;
	unsigned int Height;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
};

/* 8081 */
struct DXGI_RGB
{
	float Red;
	float Green;
	float Blue;
};

/* 8082 */
struct DXGI_RATIONAL
{
	unsigned int Numerator;
	unsigned int Denominator;
};

/* 8083 */
struct __cppobj IDXGIObject : IUnknown
{
};

/* 8084 */
struct __cppobj IDXGIDeviceSubObject : IDXGIObject
{
};

/* 8085 */
struct __cppobj IDXGISurface : IDXGIDeviceSubObject
{
};

/* 8086 */
struct IDXGISurfaceVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDXGISurface *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDXGISurface *);
	unsigned int (__stdcall *Release)(IDXGISurface *);
	HRESULT (__stdcall *SetPrivateData)(IDXGISurface *, _GUID *const, unsigned int, const void *);
	HRESULT (__stdcall *SetPrivateDataInterface)(IDXGISurface *, _GUID *const, IUnknown *);
	HRESULT (__stdcall *GetPrivateData)(IDXGISurface *, _GUID *const, unsigned int *, void *);
	HRESULT (__stdcall *GetParent)(IDXGISurface *, _GUID *const, void **);
	HRESULT (__stdcall *GetDevice)(IDXGISurface *, _GUID *const, void **);
	HRESULT (__stdcall *GetDesc)(IDXGISurface *, DXGI_SURFACE_DESC *);
	HRESULT (__stdcall *Map)(IDXGISurface *, DXGI_MAPPED_RECT *, unsigned int);
	HRESULT (__stdcall *Unmap)(IDXGISurface *);
};

/* 8087 */
struct DXGI_ADAPTER_DESC
{
	wchar_t Description[128];
	unsigned int VendorId;
	unsigned int DeviceId;
	unsigned int SubSysId;
	unsigned int Revision;
	unsigned int DedicatedVideoMemory;
	unsigned int DedicatedSystemMemory;
	unsigned int SharedSystemMemory;
	_LUID AdapterLuid;
};

/* 8088 */
struct DXGI_GAMMA_CONTROL
{
	DXGI_RGB Scale;
	DXGI_RGB Offset;
	DXGI_RGB GammaCurve[1025];
};

/* 8089 */
struct IDXGIAdapter
{
	IDXGIAdapterVtbl *lpVtbl;
};

/* 8096 */
struct IDXGIAdapterVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDXGIAdapter *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDXGIAdapter *);
	unsigned int (__stdcall *Release)(IDXGIAdapter *);
	HRESULT (__stdcall *SetPrivateData)(IDXGIAdapter *, _GUID *const, unsigned int, const void *);
	HRESULT (__stdcall *SetPrivateDataInterface)(IDXGIAdapter *, _GUID *const, IUnknown *);
	HRESULT (__stdcall *GetPrivateData)(IDXGIAdapter *, _GUID *const, unsigned int *, void *);
	HRESULT (__stdcall *GetParent)(IDXGIAdapter *, _GUID *const, void **);
	HRESULT (__stdcall *EnumOutputs)(IDXGIAdapter *, unsigned int, IDXGIOutput **);
	HRESULT (__stdcall *GetDesc)(IDXGIAdapter *, DXGI_ADAPTER_DESC *);
	HRESULT (__stdcall *CheckInterfaceSupport)(IDXGIAdapter *, _GUID *const, _LARGE_INTEGER *);
};

/* 8090 */
struct IDXGIOutput
{
	IDXGIOutputVtbl *lpVtbl;
};

/* 8095 */
struct IDXGIOutputVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDXGIOutput *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDXGIOutput *);
	unsigned int (__stdcall *Release)(IDXGIOutput *);
	HRESULT (__stdcall *SetPrivateData)(IDXGIOutput *, _GUID *const, unsigned int, const void *);
	HRESULT (__stdcall *SetPrivateDataInterface)(IDXGIOutput *, _GUID *const, IUnknown *);
	HRESULT (__stdcall *GetPrivateData)(IDXGIOutput *, _GUID *const, unsigned int *, void *);
	HRESULT (__stdcall *GetParent)(IDXGIOutput *, _GUID *const, void **);
	HRESULT (__stdcall *GetDesc)(IDXGIOutput *, DXGI_OUTPUT_DESC *);
	HRESULT (__stdcall *GetDisplayModeList)(IDXGIOutput *, DXGI_FORMAT, unsigned int, unsigned int *, DXGI_MODE_DESC *);
	HRESULT (__stdcall *FindClosestMatchingMode)(IDXGIOutput *, DXGI_MODE_DESC *, DXGI_MODE_DESC *, IUnknown *);
	HRESULT (__stdcall *WaitForVBlank)(IDXGIOutput *);
	HRESULT (__stdcall *TakeOwnership)(IDXGIOutput *, IUnknown *, int);
	void (__stdcall *ReleaseOwnership)(IDXGIOutput *);
	HRESULT (__stdcall *GetGammaControlCapabilities)(IDXGIOutput *, DXGI_GAMMA_CONTROL_CAPABILITIES *);
	HRESULT (__stdcall *SetGammaControl)(IDXGIOutput *, DXGI_GAMMA_CONTROL *);
	HRESULT (__stdcall *GetGammaControl)(IDXGIOutput *, DXGI_GAMMA_CONTROL *);
	HRESULT (__stdcall *SetDisplaySurface)(IDXGIOutput *, IDXGISurface *);
	HRESULT (__stdcall *GetDisplaySurfaceData)(IDXGIOutput *, IDXGISurface *);
	HRESULT (__stdcall *GetFrameStatistics)(IDXGIOutput *, DXGI_FRAME_STATISTICS *);
};

/* 11235 */
enum DXGI_MODE_ROTATION
{
	DXGI_MODE_ROTATION_UNSPECIFIED = 0x0,
	DXGI_MODE_ROTATION_IDENTITY = 0x1,
	DXGI_MODE_ROTATION_ROTATE90 = 0x2,
	DXGI_MODE_ROTATION_ROTATE180 = 0x3,
	DXGI_MODE_ROTATION_ROTATE270 = 0x4,
};

/* 8091 */
struct DXGI_OUTPUT_DESC
{
	wchar_t DeviceName[32];
	tagRECT DesktopCoordinates;
	int AttachedToDesktop;
	DXGI_MODE_ROTATION Rotation;
	HMONITOR__ *Monitor;
};

/* 11264 */
enum DXGI_MODE_SCANLINE_ORDER
{
	DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0x0,
	DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 0x1,
	DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 0x2,
	DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 0x3,
};

/* 11265 */
enum DXGI_MODE_SCALING
{
	DXGI_MODE_SCALING_UNSPECIFIED = 0x0,
	DXGI_MODE_SCALING_CENTERED = 0x1,
	DXGI_MODE_SCALING_STRETCHED = 0x2,
};

/* 8092 */
struct DXGI_MODE_DESC
{
	unsigned int Width;
	unsigned int Height;
	DXGI_RATIONAL RefreshRate;
	DXGI_FORMAT Format;
	DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
	DXGI_MODE_SCALING Scaling;
};

/* 8093 */
struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
	int ScaleAndOffsetSupported;
	float MaxConvertedValue;
	float MinConvertedValue;
	unsigned int NumGammaControlPoints;
	float ControlPointPositions[1025];
};

/* 8094 */
struct DXGI_FRAME_STATISTICS
{
	unsigned int PresentCount;
	unsigned int PresentRefreshCount;
	unsigned int SyncRefreshCount;
	_LARGE_INTEGER SyncQPCTime;
	_LARGE_INTEGER SyncGPUTime;
};

/* 11266 */
enum DXGI_SWAP_EFFECT
{
	DXGI_SWAP_EFFECT_DISCARD = 0x0,
	DXGI_SWAP_EFFECT_SEQUENTIAL = 0x1,
};

/* 8097 */
struct DXGI_SWAP_CHAIN_DESC
{
	DXGI_MODE_DESC BufferDesc;
	DXGI_SAMPLE_DESC SampleDesc;
	unsigned int BufferUsage;
	unsigned int BufferCount;
	HWND__ *OutputWindow;
	int Windowed;
	DXGI_SWAP_EFFECT SwapEffect;
	unsigned int Flags;
};

/* 8098 */
struct IDXGISwapChain
{
	IDXGISwapChainVtbl *lpVtbl;
};

/* 8099 */
struct IDXGISwapChainVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDXGISwapChain *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDXGISwapChain *);
	unsigned int (__stdcall *Release)(IDXGISwapChain *);
	HRESULT (__stdcall *SetPrivateData)(IDXGISwapChain *, _GUID *const, unsigned int, const void *);
	HRESULT (__stdcall *SetPrivateDataInterface)(IDXGISwapChain *, _GUID *const, IUnknown *);
	HRESULT (__stdcall *GetPrivateData)(IDXGISwapChain *, _GUID *const, unsigned int *, void *);
	HRESULT (__stdcall *GetParent)(IDXGISwapChain *, _GUID *const, void **);
	HRESULT (__stdcall *GetDevice)(IDXGISwapChain *, _GUID *const, void **);
	HRESULT (__stdcall *Present)(IDXGISwapChain *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetBuffer)(IDXGISwapChain *, unsigned int, _GUID *const, void **);
	HRESULT (__stdcall *SetFullscreenState)(IDXGISwapChain *, int, IDXGIOutput *);
	HRESULT (__stdcall *GetFullscreenState)(IDXGISwapChain *, int *, IDXGIOutput **);
	HRESULT (__stdcall *GetDesc)(IDXGISwapChain *, DXGI_SWAP_CHAIN_DESC *);
	HRESULT (__stdcall *ResizeBuffers)(IDXGISwapChain *, unsigned int, unsigned int, unsigned int, DXGI_FORMAT, unsigned int);
	HRESULT (__stdcall *ResizeTarget)(IDXGISwapChain *, DXGI_MODE_DESC *);
	HRESULT (__stdcall *GetContainingOutput)(IDXGISwapChain *, IDXGIOutput **);
	HRESULT (__stdcall *GetFrameStatistics)(IDXGISwapChain *, DXGI_FRAME_STATISTICS *);
	HRESULT (__stdcall *GetLastPresentCount)(IDXGISwapChain *, unsigned int *);
};

/* 8100 */
struct IDXGIFactoryVtbl
{
	HRESULT (__stdcall *QueryInterface)(IDXGIFactory *, _GUID *const, void **);
	unsigned int (__stdcall *AddRef)(IDXGIFactory *);
	unsigned int (__stdcall *Release)(IDXGIFactory *);
	HRESULT (__stdcall *SetPrivateData)(IDXGIFactory *, _GUID *const, unsigned int, const void *);
	HRESULT (__stdcall *SetPrivateDataInterface)(IDXGIFactory *, _GUID *const, IUnknown *);
	HRESULT (__stdcall *GetPrivateData)(IDXGIFactory *, _GUID *const, unsigned int *, void *);
	HRESULT (__stdcall *GetParent)(IDXGIFactory *, _GUID *const, void **);
	HRESULT (__stdcall *EnumAdapters)(IDXGIFactory *, unsigned int, IDXGIAdapter **);
	HRESULT (__stdcall *MakeWindowAssociation)(IDXGIFactory *, HWND__ *, unsigned int);
	HRESULT (__stdcall *GetWindowAssociation)(IDXGIFactory *, HWND__ **);
	HRESULT (__stdcall *CreateSwapChain)(IDXGIFactory *, IUnknown *, DXGI_SWAP_CHAIN_DESC *, IDXGISwapChain **);
	HRESULT (__stdcall *CreateSoftwareAdapter)(IDXGIFactory *, HINSTANCE__ *, IDXGIAdapter **);
};

/* 8101 */
struct IDXGIFactory
{
	IDXGIFactoryVtbl *lpVtbl;
};

/* 8102 */
struct tagWAVEOUTCAPSW
{
	unsigned __int16 wMid;
	unsigned __int16 wPid;
	unsigned int vDriverVersion;
	wchar_t szPname[32];
	unsigned int dwFormats;
	unsigned __int16 wChannels;
	unsigned __int16 wReserved1;
	unsigned int dwSupport;
};

/* 8103 */
struct tagWAVEINCAPSW
{
	unsigned __int16 wMid;
	unsigned __int16 wPid;
	unsigned int vDriverVersion;
	wchar_t szPname[32];
	unsigned int dwFormats;
	unsigned __int16 wChannels;
	unsigned __int16 wReserved1;
};

/* 8104 */
struct XINPUT_GAMEPAD_EX
{
	unsigned __int16 wButtons;
	char bLeftTrigger;
	char bRightTrigger;
	__int16 sThumbLX;
	__int16 sThumbLY;
	__int16 sThumbRX;
	__int16 sThumbRY;
	unsigned int dwPaddingReserved;
};

/* 8105 */
struct XINPUT_STATE_EX
{
	unsigned int dwPacketNumber;
	XINPUT_GAMEPAD_EX Gamepad;
};

/* 8106 */
struct XINPUT_BATTERY_INFORMATION_EX
{
	char BatteryType;
	char BatteryLevel;
};

/* 8107 */
struct ogg_iovec_t
{
	void *iov_base;
	unsigned int iov_len;
};

/* 8108 */
struct ogg_page
{
	char *header;
	int header_len;
	char *body;
	int body_len;
};

/* 8109 */
struct mdct_lookup
{
	int n;
	int log2n;
	float *trig;
	int *bitrev;
	float scale;
};

/* 8110 */
struct highlevel_byblocktype
{
	long double tone_mask_setting;
	long double tone_peaklimit_setting;
	long double noise_bias_setting;
	long double noise_compand_setting;
};

/* 8111 */
struct envelope_filter_state
{
	float ampbuf[17];
	int ampptr;
	float nearDC[15];
	float nearDC_acc;
	float nearDC_partialacc;
	int nearptr;
};

/* 8112 */
struct bitrate_manager_info
{
	int avg_rate;
	int min_rate;
	int max_rate;
	int reservoir_bits;
	long double reservoir_bias;
	long double slew_damp;
};

/* 8113 */
struct vorbis_info_psy_global
{
	int eighth_octave_lines;
	float preecho_thresh[7];
	float postecho_thresh[7];
	float stretch_penalty;
	float preecho_minenergy;
	float ampmax_att_per_sec;
	int coupling_pkHz[15];
	int coupling_pointlimit[2][15];
	int coupling_prepointamp[15];
	int coupling_postpointamp[15];
	int sliding_lowpass[2][15];
};

/* 8114 */
struct envelope_band
{
	int begin;
	int end;
	float *window;
	float total;
};

/* 8115 */
struct envelope_lookup
{
	int ch;
	int winlength;
	int searchstep;
	float minenergy;
	mdct_lookup mdct;
	float *mdct_win;
	envelope_band band[7];
	envelope_filter_state *filter;
	int stretch;
	int *mark;
	int storage;
	int current;
	int curmark;
	int cursor;
};

/* 8116 */
struct drft_lookup
{
	int n;
	float *trigcache;
	int *splitcache;
};

/* 8117 */
struct vorbis_info_psy
{
	int blockflag;
	float ath_adjatt;
	float ath_maxatt;
	float tone_masteratt[3];
	float tone_centerboost;
	float tone_decay;
	float tone_abs_limit;
	float toneatt[17];
	int noisemaskp;
	float noisemaxsupp;
	float noisewindowlo;
	float noisewindowhi;
	int noisewindowlomin;
	int noisewindowhimin;
	int noisewindowfixed;
	float noiseoff[3][17];
	float noisecompand[40];
	float max_curve_dB;
	int normal_p;
	int normal_start;
	int normal_partition;
	long double normal_thresh;
};

/* 8118 */
struct vorbis_look_psy
{
	int n;
	vorbis_info_psy *vi;
	float ***tonecurves;
	float **noiseoffset;
	float *ath;
	int *octave;
	int *bark;
	int firstoc;
	int shiftoc;
	int eighth_octave_lines;
	int total_octave_lines;
	int rate;
	float m_val;
};

/* 8119 */
struct vorbis_look_psy_global
{
	float ampmax;
	int channels;
	vorbis_info_psy_global *gi;
	int coupling_pointlimit[2][3];
};

/* 8120 */
struct bitrate_manager_state
{
	int managed;
	int avg_reservoir;
	int minmax_reservoir;
	int avg_bitsper;
	int min_bitsper;
	int max_bitsper;
	int short_per_long;
	long double avgfloat;
	vorbis_block *vb;
	int choice;
};

/* 8121 */
struct private_state
{
	envelope_lookup *ve;
	int window[2];
	void **transform[2];
	drft_lookup fft_look[2];
	int modebits;
	void **flr;
	void **residue;
	vorbis_look_psy *psy;
	vorbis_look_psy_global *psy_g_look;
	char *header;
	char *header1;
	char *header2;
	bitrate_manager_state bms;
	__int64 sample_count;
};

/* 8122 */
struct static_codebook
{
	int dim;
	int entries;
	int *lengthlist;
	int maptype;
	int q_min;
	int q_delta;
	int q_quant;
	int q_sequencep;
	int *quantlist;
	int allocedp;
};

/* 8123 */
struct vorbis_block_internal
{
	float **pcmdelay;
	float ampmax;
	int blocktype;
	oggpack_buffer *packetblob[15];
};

/* 8124 */
struct vorbis_info_mode
{
	int blockflag;
	int windowtype;
	int transformtype;
	int mapping;
};

/* 8125 */
struct codebook
{
	int dim;
	int entries;
	int used_entries;
	static_codebook *c;
	float *valuelist;
	unsigned int *codelist;
	int *dec_index;
	char *dec_codelengths;
	unsigned int *dec_firsttable;
	int dec_firsttablen;
	int dec_maxlength;
	int quantvals;
	int minval;
	int delta;
};

/* 8126 */
struct highlevel_encode_setup
{
	int set_in_stone;
	const void *setup;
	long double base_setting;
	long double impulse_noisetune;
	float req;
	int managed;
	int bitrate_min;
	int bitrate_av;
	long double bitrate_av_damp;
	int bitrate_max;
	int bitrate_reservoir;
	long double bitrate_reservoir_bias;
	int impulse_block_p;
	int noise_normalize_p;
	int coupling_p;
	long double stereo_point_setting;
	long double lowpass_kHz;
	int lowpass_altered;
	long double ath_floating_dB;
	long double ath_absolute_dB;
	long double amplitude_track_dBpersec;
	long double trigger_setting;
	highlevel_byblocktype block[4];
};

/* 8127 */
struct __declspec(align(8)) codec_setup_info
{
	int blocksizes[2];
	int modes;
	int maps;
	int floors;
	int residues;
	int books;
	int psys;
	vorbis_info_mode *mode_param[64];
	int map_type[64];
	void *map_param[64];
	int floor_type[64];
	void *floor_param[64];
	int residue_type[64];
	void *residue_param[64];
	static_codebook *book_param[256];
	codebook *fullbooks;
	vorbis_info_psy *psy_param[4];
	vorbis_info_psy_global psy_g_param;
	bitrate_manager_info bi;
	highlevel_encode_setup hi;
	int halfrate_flag;
};

/* 8128 */
struct vorbis_func_floor
{
	void (__cdecl *pack)(void *, oggpack_buffer *);
	void *(__cdecl *unpack)(vorbis_info *, oggpack_buffer *);
	void *(__cdecl *look)(vorbis_dsp_state *, void *);
	void (__cdecl *free_info)(void *);
	void (__cdecl *free_look)(void *);
	void *(__cdecl *inverse1)(vorbis_block *, void *);
	int (__cdecl *inverse2)(vorbis_block *, void *, void *, float *);
};

/* 8129 */
struct vorbis_func_residue
{
	void (__cdecl *pack)(void *, oggpack_buffer *);
	void *(__cdecl *unpack)(vorbis_info *, oggpack_buffer *);
	void *(__cdecl *look)(vorbis_dsp_state *, void *);
	void (__cdecl *free_info)(void *);
	void (__cdecl *free_look)(void *);
	int **(__cdecl *class)(vorbis_block *, void *, int **, int *, int);
	int (__cdecl *forward)(oggpack_buffer *, vorbis_block *, void *, int **, int *, int, int **, int);
	int (__cdecl *inverse)(vorbis_block *, void *, float **, int *, int);
};

/* 8130 */
struct vorbis_info_floor0
{
	int order;
	int rate;
	int barkmap;
	int ampbits;
	int ampdB;
	int numbooks;
	int books[16];
	float lessthan;
	float greaterthan;
};

/* 8131 */
struct vorbis_look_floor0
{
	int ln;
	int m;
	int **linearmap;
	int n[2];
	vorbis_info_floor0 *vi;
	int bits;
	int frames;
};

/* 8132 */
struct lsfit_acc
{
	int x0;
	int x1;
	int xa;
	int ya;
	int x2a;
	int y2a;
	int xya;
	int an;
	int xb;
	int yb;
	int x2b;
	int y2b;
	int xyb;
	int bn;
};

/* 8133 */
struct vorbis_info_floor1
{
	int partitions;
	int partitionclass[31];
	int class_dim[16];
	int class_subs[16];
	int class_book[16];
	int class_subbook[16][8];
	int mult;
	int postlist[65];
	float maxover;
	float maxunder;
	float maxerr;
	float twofitweight;
	float twofitatten;
	int n;
};

/* 8134 */
struct vorbis_look_floor1
{
	int sorted_index[65];
	int forward_index[65];
	int reverse_index[65];
	int hineighbor[63];
	int loneighbor[63];
	int posts;
	int n;
	int quant_q;
	vorbis_info_floor1 *vi;
	int phrasebits;
	int postbits;
	int frames;
};

/* 8135 */
struct vorbis_func_mapping
{
	void (__cdecl *pack)(vorbis_info *, void *, oggpack_buffer *);
	void *(__cdecl *unpack)(vorbis_info *, oggpack_buffer *);
	void (__cdecl *free_info)(void *);
	int (__cdecl *forward)(vorbis_block *);
	int (__cdecl *inverse)(vorbis_block *, void *);
};

/* 8136 */
struct vorbis_info_mapping0
{
	int submaps;
	int chmuxlist[256];
	int floorsubmap[16];
	int residuesubmap[16];
	int coupling_steps;
	int coupling_mag[256];
	int coupling_ang[256];
};

/* 8137 */
struct vorbis_info_residue0
{
	int begin;
	int end;
	int grouping;
	int partitions;
	int partvals;
	int groupbook;
	int secondstages[64];
	int booklist[512];
	const int classmetric1[64];
	const int classmetric2[64];
};

/* 8138 */
struct vorbis_look_residue0
{
	vorbis_info_residue0 *info;
	int parts;
	int stages;
	codebook *fullbooks;
	codebook *phrasebook;
	codebook ***partbooks;
	int partvals;
	int **decodemap;
	int postbits;
	int phrasebits;
	int frames;
};

/* 8139 */
struct hlist_item
{
	hlist_item *next;
	hlist_item **prev;
};

/* 8140 */
struct hlist_head
{
	hlist_item *next;
};

/* 8141 */
struct hblock
{
	int magic;
	hlist_item siblings;
	hlist_head children;
	long double data[1];
};

/* 8142 */
struct __declspec(align(8)) saved_state
{
	__int64 stream_offset;
	list_node *ancestor;
	unsigned __int64 last_id;
	unsigned __int64 last_size;
	int last_valid;
};

/* 8143 */
struct video
{
	ebml_type stereo_mode;
	ebml_type alpha_mode;
	ebml_type pixel_width;
	ebml_type pixel_height;
	ebml_type pixel_crop_bottom;
	ebml_type pixel_crop_top;
	ebml_type pixel_crop_left;
	ebml_type pixel_crop_right;
	ebml_type display_width;
	ebml_type display_height;
};

/* 8144 */
struct audio
{
	ebml_type sampling_frequency;
	ebml_type channels;
	ebml_type bit_depth;
};

/* 8145 */
struct track_entry
{
	ebml_type number;
	ebml_type uid;
	ebml_type type;
	ebml_type flag_enabled;
	ebml_type flag_default;
	ebml_type flag_lacing;
	ebml_type track_timecode_scale;
	ebml_type language;
	ebml_type codec_id;
	ebml_type codec_private;
	ebml_type codec_delay;
	ebml_type seek_preroll;
	ebml_type default_duration;
	video video;
	audio audio;
};

/* 8146 */
struct sniff_buffer
{
	const char *buffer;
	unsigned int length;
	__int64 offset;
};

/* 8147 */
struct cluster
{
	ebml_type timecode;
	ebml_list block_group;
};

/* 8148 */
struct cue_track_positions
{
	ebml_type track;
	ebml_type cluster_position;
	ebml_type block_number;
};

/* 8149 */
struct cue_point
{
	ebml_type time;
	ebml_list cue_track_positions;
};

/* 8150 */
struct seek
{
	ebml_type id;
	ebml_type position;
};

/* 8151 */
union $B0672015223DAE45AB7FBA432DF2D15A
{
	unsigned __int64 u;
	float f;
	long double d;
};

/* 8152 */
union $0BD1D6F9CC3F9A31C27E2AFCF271B0B7
{
	void (__cdecl *HandlerAddress)();
	void (__fastcall *FinallyFunc)(int);
};

/* 8153 */
struct _EH4_SCOPETABLE_RECORD
{
	int EnclosingLevel;
	void *FilterFunc;
	void *HandlerFunc;
};

/* 8154 */
struct _EH4_EXCEPTION_REGISTRATION_RECORD
{
	void *SavedESP;
	_EXCEPTION_POINTERS *ExceptionPointers;
	_EXCEPTION_REGISTRATION_RECORD SubRecord;
	unsigned int EncodedScopeTable;
	unsigned int TryLevel;
};

/* 10058 */
typedef unsigned int DWORD;

/* 8155 */
struct _EH4_SCOPETABLE
{
	DWORD GSCookieOffset;
	DWORD GSCookieXOROffset;
	DWORD EHCookieOffset;
	DWORD EHCookieXOROffset;
	struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 8156 */
struct _VALID_PAGE_CACHE
{
	char *pPage;
	char *pImageBase;
};

/* 8157 */
struct _SCOPETABLE_ENTRY
{
	int EnclosingLevel;
	void *FilterFunc;
	void *HandlerFunc;
};

/* 9105 */
typedef void *PVOID;

/* 9239 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 8158 */
struct _EH3_EXCEPTION_REGISTRATION
{
	struct _EH3_EXCEPTION_REGISTRATION *Next;
	PVOID ExceptionHandler;
	PSCOPETABLE_ENTRY ScopeTable;
	DWORD TryLevel;
};

/* 8159 */
struct __declspec(align(32)) _JMP_BUF
{
	unsigned int saved_ebp;
	unsigned int saved_ebx;
	unsigned int saved_edi;
	unsigned int saved_esi;
	unsigned int saved_esp;
	unsigned int saved_return;
	unsigned int saved_xregistration;
	unsigned int saved_trylevel;
	unsigned int version_cookie;
	unsigned int unwind_func;
	unsigned int unwind_data;
};

/* 8160 */
struct _NLG_INFO
{
	unsigned int dwSig;
	unsigned int uoffDestination;
	unsigned int dwCode;
	unsigned int uoffFramePointer;
};

/* 8161 */
struct __declspec(align(16)) _EXCEPTION_RECORD_CRT
{
	unsigned int exception_number;
	unsigned int exception_flags;
	unsigned int exception_record;
	unsigned int exception_address;
	unsigned int number_parameters;
	unsigned int exception_information;
	_BYTE gap18[56];
};

/* 8162 */
struct _EXCEPTION_REGISTRATION_COMMON
{
	_BYTE gap0[8];
	unsigned int scopetable;
	unsigned int trylevel;
};

/* 8163 */
struct _EXCEPTION_REGISTRATION
{
	unsigned int prev;
	unsigned int handler;
};

/* 8164 */
struct _EXCEPTION_POINTERS_CRT
{
	unsigned int ep_xrecord;
	unsigned int ep_context;
};

/* 8165 */
struct _C9_EXCEPTION_REGISTRATION
{
	unsigned int er_prev;
	unsigned int er_handler;
	unsigned int scopetable;
	unsigned int trylevel;
};

/* 8166 */
struct __declspec(align(16)) ExceptionRecordStruct
{
	unsigned int ExceptionCode;
	unsigned int ExceptionFlags;
	unsigned int ExceptionRecord_;
	unsigned int ExceptionAddress;
	unsigned int NumberParameters;
	unsigned int ExceptionInfo;
	_BYTE gap18[56];
};

/* 8167 */
struct RegistrationNode
{
	unsigned int Next;
	unsigned int Handler;
	unsigned int EH4ScopeTable;
	unsigned int TryLevel;
};

/* 8168 */
union $0E3F8CB7D65B38BD22FD7A6AB8ED9E74
{
	unsigned int HandlerAddress;
	unsigned int FinallyFunc;
};

/* 8169 */
struct ScopeTableRecord
{
	unsigned int EnclosingLevel;
	unsigned int FilterFunc;
	$0E3F8CB7D65B38BD22FD7A6AB8ED9E74 ___u2;
};

/* 8170 */
struct UnwindGuardNode
{
	unsigned int Next;
	unsigned int Handler;
	unsigned int SecurityCookie;
	unsigned int OrigTargetLevel;
	unsigned int OrigEstablisher;
	unsigned int OrigCookiePointer;
	unsigned int FramePointer;
};

/* 8171 */
struct ScopeTable
{
	unsigned int GSCookieOffset;
	unsigned int GSCookieXOROffset;
	unsigned int EHCookieOffset;
	unsigned int EHCookieXOROffset;
	unsigned int ScopeRecord;
};

/* 8172 */
struct _strflt
{
	int sign;
	int decpt;
	int flag;
	char *mantissa;
};

/* 8173 */
struct errentry
{
	unsigned int oscode;
	int errnocode;
};

/* 8174 */
struct setloc_downlevel_struct
{
	int iLcidState;
	unsigned int lcidLanguage;
	unsigned int lcidCountry;
};

/* 8175 */
struct _is_ctype_compatible
{
	unsigned int id;
	int is_clike;
};

/* 8176 */
struct __declspec(align(4)) setloc_struct
{
	wchar_t *pchLanguage;
	wchar_t *pchCountry;
	int iLocState;
	int iPrimaryLen;
	int bAbbrevLanguage;
	int bAbbrevCountry;
	unsigned int _cachecp;
	wchar_t _cachein[131];
	wchar_t _cacheout[131];
	_is_ctype_compatible _Loc_c[5];
	wchar_t _cacheLocaleName[85];
};

/* 8177 */
struct _tiddata
{
	unsigned int _tid;
	unsigned int _thandle;
	int _terrno;
	unsigned int _tdoserrno;
	unsigned int _fpds;
	unsigned int _holdrand;
	char *_token;
	wchar_t *_wtoken;
	char *_mtoken;
	char *_errmsg;
	wchar_t *_werrmsg;
	char *_namebuf0;
	wchar_t *_wnamebuf0;
	char *_namebuf1;
	wchar_t *_wnamebuf1;
	char *_asctimebuf;
	wchar_t *_wasctimebuf;
	void *_gmtimebuf;
	char *_cvtbuf;
	char _con_ch_buf[5];
	unsigned __int16 _ch_buf_used;
	void *_initaddr;
	void *_initarg;
	void *_pxcptacttab;
	void *_tpxcptinfoptrs;
	int _tfpecode;
	threadmbcinfostruct *ptmbcinfo;
	threadlocaleinfostruct *ptlocinfo;
	int _ownlocale;
	unsigned int _NLG_dwCode;
	void *_terminate;
	void *_unexpected;
	void *_translator;
	void *_purecall;
	void *_curexception;
	void *_curcontext;
	int _ProcessingThrow;
	void *_curexcspec;
	void *_pFrameInfoChain;
	setloc_struct _setloc_data;
	void *_reserved1;
	void *_reserved2;
	void *_reserved3;
	void *_reserved4;
	void *_reserved5;
	int _cxxReThrow;
	unsigned int __initDomain;
	int _initapartment;
	setloc_downlevel_struct *_setloc_downlevel_data;
};

/* 8178 */
struct __declspec(align(8)) ioinfo
{
	int osfhnd;
	char osfile;
	char pipech;
	int lockinitflag;
	_RTL_CRITICAL_SECTION lock;
	__int8 textmode : 7;
	__int8 unicode : 1;
	char pipech2[2];
	__int64 startpos;
	int utf8translations;
	char dbcsBuffer;
	int dbcsBufferUsed;
};

/* 8179 */
struct _CREATEFILE2_EXTENDED_PARAMETERS
{
	unsigned int dwSize;
	unsigned int dwFileAttributes;
	unsigned int dwFileFlags;
	unsigned int dwSecurityQosFlags;
	_SECURITY_ATTRIBUTES *lpSecurityAttributes;
	void *hTemplateFile;
};

/* 8180 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32_2
{
	unsigned int Size;
	unsigned int TimeDateStamp;
	unsigned __int16 MajorVersion;
	unsigned __int16 MinorVersion;
	unsigned int GlobalFlagsClear;
	unsigned int GlobalFlagsSet;
	unsigned int CriticalSectionDefaultTimeout;
	unsigned int DeCommitFreeBlockThreshold;
	unsigned int DeCommitTotalFreeThreshold;
	unsigned int LockPrefixTable;
	unsigned int MaximumAllocationSize;
	unsigned int VirtualMemoryThreshold;
	unsigned int ProcessHeapFlags;
	unsigned int ProcessAffinityMask;
	unsigned __int16 CSDVersion;
	unsigned __int16 Reserved1;
	unsigned int EditList;
	unsigned int *SecurityCookie;
	void **SEHandlerTable;
	unsigned int SEHandlerCount;
};

/* 8181 */
struct tagLC_STRINGS
{
	wchar_t szLanguage[64];
	wchar_t szCountry[64];
	wchar_t szCodePage[16];
	wchar_t szLocaleName[85];
};

/* 8182 */
struct tagLOCALETAB
{
	unsigned __int16 *szName;
	wchar_t chAbbrev[4];
};

/* 8183 */
union FT
{
	unsigned __int64 ft_scalar;
	_FILETIME ft_struct;
};

/* 8184 */
struct _XCPT_ACTION
{
	unsigned int XcptNum;
	int SigNum;
	void (__cdecl *XcptAction)(int);
};

/* 8185 */
struct LcidToLocaleName
{
	unsigned int lcid;
	unsigned __int16 *localeName;
};

/* 8186 */
struct LocaleNameIndex
{
	unsigned __int16 *name;
	int index;
};

/* 8187 */
struct $48B1398561141F4BBBBBC2E8279F8D06
{
	const wchar_t *catname;
	unsigned __int16 *locale;
	int (__cdecl *init)(threadlocaleinfostruct *);
};

/* 8188 */
const struct $7268E92ECBE9040C662AE2F269230507
{
	const wchar_t *catname;
	unsigned __int16 *locale;
	int (__cdecl *init)(threadlocaleinfostruct *);
};

/* 8189 */
struct _MessageBoxArgsW
{
	int (__stdcall *dpfnMessageBox)(HWND__ *, const wchar_t *, const wchar_t *, unsigned int);
	const wchar_t *lpText;
	const wchar_t *lpCaption;
	unsigned int uType;
	int iMsgBoxReturn;
};

/* 8190 */
struct _FILEX
{
	_iobuf f;
	_RTL_CRITICAL_SECTION lock;
};

/* 8191 */
struct transitiondate
{
	int yr;
	int yd;
	int ms;
};

/* 8192 */
struct __cppobj <CrtImplementationDetails>::NativeDll
{
};

/* 8193 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_8
{
	_s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
	_BYTE gap8[1];
};

/* 8194 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_4
{
	_s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
	_BYTE gap4[1];
};

/* 8195 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_31
{
	const void *pVFTable;
	void *spare;
	char name[31];
};

/* 8196 */
struct __cppobj __declspec(align(4)) _LocaleUpdate
{
	localeinfo_struct localeinfo;
	_tiddata *ptd;
	bool updated;
};

/* 8197 */
struct _flt
{
	int flags;
	int nbytes;
	int lval;
	long double dval;
};

/* 8198 */
struct code_page_info
{
	int code_page;
	unsigned __int16 mbulinfo[6];
	char rgrange[4][8];
};

/* 8199 */
union $C8014B43F160BFD769FAE3F15553333C
{
	char sz[512];
};

/* 8200 */
union $12F061FBE778B92DEB8200A0ACF7A038
{
	char *sz;
	wchar_t *wz;
};

/* 8201 */
struct _output_l::__l77::_count_string
{
	__int16 Length;
	__int16 MaximumLength;
	char *Buffer;
};

/* 8202 */
struct positional_paramA
{
	ARG_TYPE arg_type;
	char *arg_ptr;
	char type;
	int flags;
};

/* 8203 */
struct _output_s_l::__l83::_count_string
{
	__int16 Length;
	__int16 MaximumLength;
	char *Buffer;
};

/* 8204 */
union $B4FF2100EA110D8CD0B9C89F852FB035
{
	char sz[512];
	wchar_t wz[512];
};

/* 8205 */
struct _woutput_l::__l66::_count_string
{
	__int16 Length;
	__int16 MaximumLength;
	char *Buffer;
};

/* 8206 */
struct positional_paramW
{
	ARG_TYPE arg_type;
	char *arg_ptr;
	wchar_t type;
	int flags;
};

/* 8207 */
struct _woutput_s_l::__l72::_count_string
{
	__int16 Length;
	__int16 MaximumLength;
	char *Buffer;
};

/* 8208 */
struct rterrmsgs
{
	int rterrno;
	const wchar_t *rterrtxt;
};

/* 8209 */
struct $F9FDFFDA61A99C4CC7524C45865A103B
{
	_RTL_CRITICAL_SECTION *lock;
	$1DD7A03358E0D01DD359262876E6A0F0 kind;
};

/* 8210 */
struct $81FF3B5A01E2ACE59F672A6F9CB6F2F8
{
	unsigned __int64 mantissa : 52;
	unsigned __int64 exponent : 11;
	unsigned __int64 sign : 1;
};

/* 8211 */
union _CRT_DOUBLE_COMPONENTS
{
	long double d;
	$81FF3B5A01E2ACE59F672A6F9CB6F2F8 __s1;
};

/* 8212 */
struct _FloatOutStruct
{
	__int16 exp;
	char sign;
	char ManLen;
	char man[22];
};

/* 8213 */
struct FpFormatDescriptor
{
	int max_exp;
	int min_exp;
	int precision;
	int exp_width;
	int format_width;
	int bias;
};

/* 8214 */
struct __unaligned __declspec(align(2)) DispLocals
{
	unsigned __int16 wUser1;
	unsigned __int16 wUser2;
	unsigned __int16 savCntrl;
	unsigned __int16 setCntrl;
	unsigned __int16 StatusWord;
	_TBYTE Fac;
	unsigned int Function;
	char ErrorType;
	char bUser3;
	unsigned int typ;
	unsigned int nam;
	unsigned __int64 arg1;
	unsigned __int64 arg2;
	unsigned __int64 retval;
	char savebuf;
	_BYTE gap3B[107];
};

/* 8215 */
struct __declspec(align(2)) funtab
{
	char fnamlen;
	char fnam;
	_BYTE gap2[5];
	char fuseval;
	_BYTE gap8[5];
	char fnumarg;
	char fnumber;
};

/* 8216 */
struct __unaligned __declspec(align(1)) MTStackFrame
{
	unsigned __int64 MTS_LocalFac;
	char MTS_cdispflags;
};

/* 8217 */
struct _U32ARRAY
{
	unsigned int W[4];
};

/* 8218 */
struct _U64
{
	unsigned int W[2];
};

/* 8219 */
struct _FP128
{
	unsigned int W[4];
};

/* 8220 */
struct _FPIEEE_EXCEPTION_FLAGS
{
	unsigned __int32 Inexact : 1;
	unsigned __int32 Underflow : 1;
	unsigned __int32 Overflow : 1;
	unsigned __int32 ZeroDivide : 1;
	unsigned __int32 InvalidOperation : 1;
};

/* 8221 */
struct _FP80
{
	unsigned __int16 W[5];
};

/* 8222 */
struct _I64
{
	unsigned int W[2];
};

/* 8223 */
struct _BCD80
{
	unsigned __int16 W[5];
};

/* 8224 */
struct _FPQ64
{
	__int64 W[2];
};

/* 8225 */
union $42B3ED9F57DC1A75EF3BD0175A57AA1A
{
	float Fp32Value;
	long double Fp64Value;
	_FP80 Fp80Value;
	_FP128 Fp128Value;
	__int16 I16Value;
	int I32Value;
	_I64 I64Value;
	unsigned __int16 U16Value;
	unsigned int U32Value;
	_U64 U64Value;
	_BCD80 Bcd80Value;
	char *StringValue;
	int CompareValue;
	_U32ARRAY U32ArrayValue;
	__int64 Q64Value;
	_FPQ64 Fpq64Value;
};

/* 8226 */
struct __declspec(align(16)) _FPIEEE_VALUE
{
	$42B3ED9F57DC1A75EF3BD0175A57AA1A Value;
	unsigned __int32 OperandValid : 1;
	unsigned __int32 Format : 4;
};

/* 8227 */
struct _FPIEEE_RECORD
{
	unsigned __int32 RoundingMode : 2;
	unsigned __int32 Precision : 3;
	unsigned __int32 Operation : 12;
	_FPIEEE_EXCEPTION_FLAGS Cause;
	_FPIEEE_EXCEPTION_FLAGS Enable;
	_FPIEEE_EXCEPTION_FLAGS Status;
	_FPIEEE_VALUE Operand1;
	_FPIEEE_VALUE Operand2;
	_FPIEEE_VALUE Result;
};

/* 8228 */
union _dbl
{
	int lng[2];
	long double dbl;
};

/* 8229 */
struct fenv_t
{
	unsigned int _Fe_ctl;
	unsigned int _Fe_stat;
};

/* 8230 */
struct fenv_get_set
{
	unsigned int _Fe_ctl;
	unsigned int _Fe_stat;
	unsigned int _Fe_pad[5];
};

/* 8231 */
struct TypeDescriptor
{
	unsigned int hash;
	void *spare;
	char name[];
};

/* 8232 */
struct PMD
{
	int mdisp;
	int pdisp;
	int vdisp;
};

/* 8233 */
struct _s_CatchableType
{
	unsigned int properties;
	TypeDescriptor *pType;
	PMD thisDisplacement;
	int sizeOrOffset;
	void (__cdecl *copyFunction)(void *);
};

/* 8234 */
struct _s_CatchableTypeArray
{
	int nCatchableTypes;
	_s_CatchableType *arrayOfCatchableTypes[];
};

/* 8235 */
struct _s_HandlerType
{
	unsigned int adjectives;
	TypeDescriptor *pType;
	int dispCatchObj;
	void *addressOfHandler;
};

/* 8236 */
struct _s_ESTypeList
{
	int nCount;
	_s_HandlerType *pTypeArray;
};

/* 8237 */
struct _s_ThrowInfo
{
	unsigned int attributes;
	void (__cdecl *pmfnUnwind)(void *);
	int (*pForwardCompat)(...);
	_s_CatchableTypeArray *pCatchableTypeArray;
};

/* 8238 */
struct _s_UnwindMapEntry
{
	int toState;
	void (__cdecl *action)();
};

/* 8239 */
struct _s_TryBlockMapEntry
{
	int tryLow;
	int tryHigh;
	int catchHigh;
	int nCatches;
	_s_HandlerType *pHandlerArray;
};

/* 8240 */
struct _s_FuncInfo
{
	unsigned __int32 magicNumber : 29;
	unsigned __int32 bbtFlags : 3;
	int maxState;
	_s_UnwindMapEntry *pUnwindMap;
	unsigned int nTryBlocks;
	_s_TryBlockMapEntry *pTryBlockMap;
	unsigned int nIPMapEntries;
	void *pIPtoStateMap;
	_s_ESTypeList *pESTypeList;
	int EHFlags;
};

/* 8241 */
struct EHExceptionRecord::EHParameters
{
	unsigned int magicNumber;
	void *pExceptionObject;
	_s_ThrowInfo *pThrowInfo;
};

/* 8242 */
struct EHExceptionRecord
{
	unsigned int ExceptionCode;
	unsigned int ExceptionFlags;
	_EXCEPTION_RECORD *ExceptionRecord;
	void *ExceptionAddress;
	unsigned int NumberParameters;
	EHExceptionRecord::EHParameters params;
};

/* 8243 */
struct EHRegistrationNode
{
	EHRegistrationNode *pNext;
	void *frameHandler;
	int state;
};

/* 8244 */
struct CatchGuardRN
{
	EHRegistrationNode *pNext;
	void *pFrameHandler;
	unsigned int RandomCookie;
	_s_FuncInfo *pFuncInfo;
	EHRegistrationNode *pRN;
	int CatchDepth;
};

/* 8245 */
struct TranslatorGuardRN
{
	EHRegistrationNode *pNext;
	void *pFrameHandler;
	unsigned int RandomCookie;
	_s_FuncInfo *pFuncInfo;
	EHRegistrationNode *pRN;
	int CatchDepth;
	EHRegistrationNode *pMarkerRN;
	void *ESP;
	void *EBP;
	int DidUnwind;
};

/* 8246 */
struct FrameInfo
{
	void *pExceptionObject;
	FrameInfo *pNext;
};

/* 8247 */
struct __cppobj _HeapManager::Block
{
	_HeapManager::Block *next;
	char memBlock[4096];
};

/* 8248 */
struct _HeapManager
{
	void *(__cdecl *pOpNew)(unsigned int);
	void (__cdecl *pOpDelete)(void *);
	_HeapManager::Block *head;
	_HeapManager::Block *tail;
	unsigned int blockLeft;
};

/* 8249 */
struct __cppobj DNameNode
{
	DNameNodeVtbl *vfptr;
};

/* 8250 */
struct DNameNodeVtbl
{
	int (__thiscall *length)(DNameNode *this);
	char (__thiscall *getLastChar)(DNameNode *this);
	char *(__thiscall *getString)(DNameNode *this, char *, char *);
};

/* 8251 */
struct __cppobj DName
{
	DNameNode *node;
	__int32 stat : 8;
	unsigned __int32 isIndir : 1;
	unsigned __int32 isAUDC : 1;
	unsigned __int32 isAUDTThunk : 1;
	unsigned __int32 isArrayType : 1;
	unsigned __int32 NoTE : 1;
	unsigned __int32 pinPtr : 1;
	unsigned __int32 comArray : 1;
	unsigned __int32 vcallThunk : 1;
};

/* 8252 */
struct __cppobj Replicator
{
	int index;
	DName *dNameBuffer[10];
};

/* 8253 */
struct __cppobj __declspec(align(4)) charNode : DNameNode
{
	char me;
};

/* 8254 */
struct __cppobj pcharNode : DNameNode
{
	char *me;
	int myLen;
};

/* 8255 */
struct __cppobj UnDecorator
{
	Replicator ArgList;
	Replicator ZNameList;
};

/* 8256 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_15
{
	const void *pVFTable;
	void *spare;
	char name[15];
};

/* 8257 */
struct __cppobj pDNameNode : DNameNode
{
	DName *me;
};

/* 8258 */
struct __cppobj pairNode : DNameNode
{
	DNameNode *left;
	DNameNode *right;
	int myLen;
};

/* 8259 */
struct __cppobj DNameStatusNode : DNameNode
{
	DNameStatus me;
	int myLen;
};

/* 8260 */
struct $_TypeDescriptor$_extraBytes_28
{
	const void *pVFTable;
	void *spare;
	char name[28];
};

/* 8261 */
struct __cppobj std::bad_typeid : std::exception
{
};

/* 8262 */
struct __cppobj std::__non_rtti_object : std::bad_typeid
{
};

/* 8263 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_21
{
	const void *pVFTable;
	void *spare;
	char name[21];
};

/* 8264 */
struct WinRTExceptionInfo
{
	void *description;
	void *restrictedErrorString;
	void *restrictedErrorReference;
	void *capabilitySid;
	int hr;
	void *restrictedInfo;
	_s_ThrowInfo *throwInfo;
	unsigned int size;
	void (__stdcall *PrepareThrow)(void *);
};

/* 8265 */
union _Dval
{
	unsigned __int16 _Sh[8];
	long double _Val;
};

/* 8266 */
union _Fval
{
	unsigned __int16 _Sh[8];
	float _Val;
};

/* 8267 */
union _Lval
{
	unsigned __int16 _Sh[8];
	long double _Val;
};

/* 8268 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_16
{
	_s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
	_BYTE gap10[1];
};

/* 8269 */
struct __cppobj std::_Smanip<int>
{
	void (__cdecl *_Pfun)(std::ios_base *, int);
	int _Manarg;
};

/* 8270 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_50
{
	const void *pVFTable;
	void *spare;
	char name[50];
};

/* 8271 */
struct $_TypeDescriptor$_extraBytes_52
{
	const void *pVFTable;
	void *spare;
	char name[52];
};

/* 8272 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_26
{
	const void *pVFTable;
	void *spare;
	char name[26];
};

/* 8273 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_33
{
	const void *pVFTable;
	void *spare;
	char name[33];
};

/* 8274 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_35
{
	const void *pVFTable;
	void *spare;
	char name[35];
};

/* 8275 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_20
{
	_s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[5];
	_BYTE gap14[1];
};

/* 8276 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_22
{
	const void *pVFTable;
	void *spare;
	char name[22];
};

/* 8277 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_46
{
	const void *pVFTable;
	void *spare;
	char name[46];
};

/* 8278 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_12
{
	_s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[3];
	_BYTE gapC[1];
};

/* 8279 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_25
{
	const void *pVFTable;
	void *spare;
	char name[25];
};

/* 8280 */
struct __cppobj _Init_atexit
{
};

/* 8281 */
struct __cppobj std::codecvt<char,char,int> : std::codecvt_base
{
};

/* 8282 */
struct __cppobj std::_Fac_node
{
	std::_Fac_node *_Next;
	std::_Facet_base *_Facptr;
};

/* 8283 */
struct __cppobj std::_Fac_tidy_reg_t
{
};

/* 8284 */
struct __cppobj std::messages_base : std::locale::facet
{
};

/* 8285 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_118
{
	const void *pVFTable;
	void *spare;
	char name[118];
};

/* 8286 */
struct std::_Win_errtab_t
{
	int _Errcode;
	const char *_Name;
};

/* 8287 */
struct std::_Sys_errtab_t
{
	std::errc _Errcode;
	const char *_Name;
};

/* 8288 */
struct __cppobj std::_Mpunct<wchar_t> : std::money_base
{
	const char *_Grouping;
	wchar_t _Decimalpoint;
	wchar_t _Kseparator;
	const wchar_t *_Currencysign;
	const wchar_t *_Plussign;
	const wchar_t *_Minussign;
	int _Fracdigits;
	std::money_base::pattern _Plusformat;
	std::money_base::pattern _Minusformat;
	bool _International;
	_Cvtvec _Cvt;
};

/* 8289 */
struct __cppobj std::moneypunct<wchar_t,1> : std::_Mpunct<wchar_t>
{
};

/* 8290 */
struct __cppobj std::_Mpunct<unsigned short> : std::money_base
{
	const char *_Grouping;
	unsigned __int16 _Decimalpoint;
	unsigned __int16 _Kseparator;
	const unsigned __int16 *_Currencysign;
	const unsigned __int16 *_Plussign;
	const unsigned __int16 *_Minussign;
	int _Fracdigits;
	std::money_base::pattern _Plusformat;
	std::money_base::pattern _Minusformat;
	bool _International;
	_Cvtvec _Cvt;
};

/* 8291 */
struct __cppobj std::moneypunct<unsigned short,0> : std::_Mpunct<unsigned short>
{
};

/* 8292 */
struct __cppobj std::moneypunct<unsigned short,1> : std::_Mpunct<unsigned short>
{
};

/* 8293 */
struct __cppobj std::money_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
};

/* 8294 */
struct __cppobj std::money_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
};

/* 8295 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 8296 */
struct __cppobj std::_String_const_iterator<std::_String_val<std::_Simple_types<unsigned short> > > : std::_Iterator012<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base0>
{
	const unsigned __int16 *_Ptr;
};

/* 8297 */
struct __cppobj std::time_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::time_base
{
	const unsigned __int16 *_Days;
	const unsigned __int16 *_Months;
	const unsigned __int16 *_Ampm;
	std::time_base::dateorder _Dateorder;
	_Cvtvec _Cvt;
};

/* 8298 */
struct __cppobj std::moneypunct<wchar_t,0> : std::_Mpunct<wchar_t>
{
};

/* 8299 */
struct __cppobj std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
};

/* 8300 */
struct __cppobj std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
	std::_Timevec _Tnames;
};

/* 8301 */
struct __cppobj std::numpunct<unsigned short> : std::locale::facet
{
	const char *_Grouping;
	unsigned __int16 _Dp;
	unsigned __int16 _Kseparator;
	const unsigned __int16 *_Falsename;
	const unsigned __int16 *_Truename;
};

/* 8302 */
struct __cppobj std::messages<unsigned short> : std::messages_base
{
};

/* 8303 */
struct __cppobj std::messages<wchar_t> : std::messages_base
{
};

/* 8304 */
struct __cppobj std::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
};

/* 8305 */
struct __cppobj std::_String_iterator<std::_String_val<std::_Simple_types<unsigned short> > > : std::_String_const_iterator<std::_String_val<std::_Simple_types<unsigned short> > >
{
};

/* 8306 */
struct __cppobj std::collate<wchar_t> : std::locale::facet
{
	_Collvec _Coll;
};

/* 8307 */
struct __cppobj std::time_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
	std::_Timevec _Tnames;
};

/* 8308 */
struct __cppobj std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::time_base
{
	const wchar_t *_Days;
	const wchar_t *_Months;
	const wchar_t *_Ampm;
	std::time_base::dateorder _Dateorder;
	_Cvtvec _Cvt;
};

/* 8309 */
struct __cppobj std::collate<unsigned short> : std::locale::facet
{
	_Collvec _Coll;
};

/* 8310 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_79
{
	const void *pVFTable;
	void *spare;
	char name[79];
};

/* 8311 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_75
{
	const void *pVFTable;
	void *spare;
	char name[75];
};

/* 8312 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_78
{
	const void *pVFTable;
	void *spare;
	char name[78];
};

/* 8313 */
struct $_TypeDescriptor$_extraBytes_76
{
	const void *pVFTable;
	void *spare;
	char name[76];
};

/* 8314 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_77
{
	const void *pVFTable;
	void *spare;
	char name[77];
};

/* 8315 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_30
{
	const void *pVFTable;
	void *spare;
	char name[30];
};

/* 8316 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_29
{
	const void *pVFTable;
	void *spare;
	char name[29];
};

/* 8317 */
struct __cppobj std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
	std::_Timevec _Tnames;
};

/* 8318 */
struct __cppobj std::_Mpunct<char> : std::money_base
{
	const char *_Grouping;
	char _Decimalpoint;
	char _Kseparator;
	const char *_Currencysign;
	const char *_Plussign;
	const char *_Minussign;
	int _Fracdigits;
	std::money_base::pattern _Plusformat;
	std::money_base::pattern _Minusformat;
	bool _International;
	_Cvtvec _Cvt;
};

/* 8319 */
struct __cppobj std::moneypunct<char,0> : std::_Mpunct<char>
{
};

/* 8320 */
struct __cppobj std::moneypunct<char,1> : std::_Mpunct<char>
{
};

/* 8321 */
struct __cppobj std::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
};

/* 8322 */
struct __cppobj std::messages<char> : std::messages_base
{
};

/* 8323 */
struct __cppobj std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : std::time_base
{
	const char *_Days;
	const char *_Months;
	const char *_Ampm;
	std::time_base::dateorder _Dateorder;
	_Cvtvec _Cvt;
};

/* 8324 */
struct __cppobj std::collate<char> : std::locale::facet
{
	_Collvec _Coll;
};

/* 8325 */
struct __cppobj std::money_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
};

/* 8326 */
struct __cppobj std::_Regex_traits_base
{
};

/* 8327 */
struct __cppobj std::_Regex_traits<wchar_t> : std::_Regex_traits_base
{
	std::collate<wchar_t> *_Pcoll;
	std::ctype<wchar_t> *_Pctype;
	std::locale _Loc;
};

/* 8328 */
struct __declspec(align(4)) std::_Cl_names<wchar_t>
{
	const wchar_t *_Ptr;
	unsigned int _Len;
	__int16 _Ctype;
};

/* 8329 */
struct __cppobj std::_Node_base
{
	std::_Node_baseVtbl *vfptr;
	std::_Node_type _Kind;
	std::_Node_flags _Flags;
	std::_Node_base *_Next;
	std::_Node_base *_Prev;
};

/* 8330 */
struct std::_Node_baseVtbl
{
	void *(__thiscall *__vecDelDtor)(std::_Node_base *this, unsigned int);
};

/* 8331 */
struct __cppobj std::_Node_rep : std::_Node_base
{
	const int _Min;
	const int _Max;
	std::_Node_end_rep *_End_rep;
	unsigned int _Loop_number;
	int _Simple_loop;
};

/* 8332 */
struct __cppobj std::_Node_end_rep : std::_Node_base
{
	std::_Node_rep *_Begin_rep;
};

/* 8333 */
struct __cppobj std::regex_traits<wchar_t> : std::_Regex_traits<wchar_t>
{
};

/* 8334 */
struct __cppobj std::_Node_capture : std::_Node_base
{
	unsigned int _Idx;
};

/* 8335 */
struct __cppobj std::_Root_node : std::_Node_base
{
	std::regex_constants::syntax_option_type _Fl;
	unsigned int _Loops;
	unsigned int _Marks;
	unsigned int _Refs;
};

/* 8336 */
struct __cppobj std::_Node_assert : std::_Node_base
{
	std::_Node_base *_Child;
};

/* 8337 */
struct __cppobj std::_Node_end_group : std::_Node_base
{
	std::_Node_base *_Back;
};

/* 8338 */
struct __cppobj std::_Regex_traits<char> : std::_Regex_traits_base
{
	std::collate<char> *_Pcoll;
	std::ctype<char> *_Pctype;
	std::locale _Loc;
};

/* 8339 */
struct __declspec(align(4)) std::_Cl_names<char>
{
	const char *_Ptr;
	unsigned int _Len;
	__int16 _Ctype;
};

/* 8340 */
struct __cppobj std::_Node_back : std::_Node_base
{
	unsigned int _Idx;
};

/* 8341 */
struct __cppobj std::_Node_endif : std::_Node_base
{
};

/* 8342 */
struct __cppobj std::_Node_if : std::_Node_base
{
	std::_Node_endif *_Endif;
	std::_Node_if *_Child;
};

/* 8343 */
struct __cppobj std::_Bitmap
{
	char _Chrs[32];
};

/* 8344 */
struct __cppobj std::regex_traits<char> : std::_Regex_traits<char>
{
};

/* 8345 */
struct __cppobj std::regex_error : std::runtime_error
{
	std::regex_constants::error_type _Err;
};

/* 8346 */
struct $_s__CatchableTypeArray$_extraBytes_12
{
	int nCatchableTypes;
	_s__CatchableType *arrayOfCatchableTypes[3];
};

/* 8347 */
struct D3D10_TEXCUBE_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8348 */
struct D3D10_TEX1D_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8349 */
struct D3D10_TEX1D_ARRAY_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8350 */
struct DWRITE_FONT_FEATURE
{
	DWRITE_FONT_FEATURE_TAG nameTag;
	unsigned int parameter;
};

/* 8351 */
struct D3D10_TEX2D_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8352 */
struct D3D10_TEX1D_RTV
{
	unsigned int MipSlice;
};

/* 8353 */
union $545C80804CFDAA65132ED5A8382CA602
{
	unsigned int FirstElement;
	unsigned int ElementOffset;
};

/* 8354 */
union $44D74FBD1C023638CFA48FB7FF47174A
{
	unsigned int NumElements;
	unsigned int ElementWidth;
};

/* 8355 */
struct D3D10_BUFFER_SRV
{
	$545C80804CFDAA65132ED5A8382CA602 ___u0;
	$44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 8356 */
struct D3D10_TEX1D_ARRAY_DSV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8357 */
struct D3D10_TEX1D_ARRAY_RTV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8358 */
struct D3D10_TEX2DMS_SRV
{
	unsigned int UnusedField_NothingToDefine;
};

/* 8359 */
struct D3D10_MAPPED_TEXTURE3D
{
	void *pData;
	unsigned int RowPitch;
	unsigned int DepthPitch;
};

/* 8360 */
struct D3D10_BUFFER_RTV
{
	$545C80804CFDAA65132ED5A8382CA602 ___u0;
	$44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 8361 */
struct D3D10_MAPPED_TEXTURE2D
{
	void *pData;
	unsigned int RowPitch;
};

/* 8362 */
struct D3D10_TEX3D_RTV
{
	unsigned int MipSlice;
	unsigned int FirstWSlice;
	unsigned int WSize;
};

/* 8363 */
struct D3D10_TEX2DMS_ARRAY_SRV
{
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8364 */
struct D3D10_TEX2DMS_DSV
{
	unsigned int UnusedField_NothingToDefine;
};

/* 8365 */
struct D3D10_TEX1D_DSV
{
	unsigned int MipSlice;
};

/* 8366 */
struct __cppobj ID3D10DeviceChild : IUnknown
{
};

/* 8367 */
struct __cppobj ID3D10PixelShader : ID3D10DeviceChild
{
};

/* 8368 */
struct D3D10_TEX3D_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8369 */
struct D3D10_TEX2D_RTV
{
	unsigned int MipSlice;
};

/* 8370 */
struct D3D11_MAPPED_SUBRESOURCE
{
	void *pData;
	unsigned int RowPitch;
	unsigned int DepthPitch;
};

/* 8371 */
struct __cppobj ID3D10Resource : ID3D10DeviceChild
{
};

/* 8372 */
struct __cppobj ID3D10Texture3D : ID3D10Resource
{
};

/* 11267 */
enum D3D10_USAGE
{
	D3D10_USAGE_DEFAULT = 0x0,
	D3D10_USAGE_IMMUTABLE = 0x1,
	D3D10_USAGE_DYNAMIC = 0x2,
	D3D10_USAGE_STAGING = 0x3,
};

/* 8373 */
struct D3D10_TEXTURE3D_DESC
{
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int MipLevels;
	DXGI_FORMAT Format;
	D3D10_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8374 */
struct __cppobj IDWriteLocalizedStrings : IUnknown
{
};

/* 8375 */
struct __cppobj ID3D11DeviceChild : IUnknown
{
};

/* 8376 */
struct __cppobj ID3D11CommandList : ID3D11DeviceChild
{
};

/* 11268 */
enum D3D10_FILL_MODE
{
	D3D10_FILL_WIREFRAME = 0x2,
	D3D10_FILL_SOLID = 0x3,
};

/* 11269 */
enum D3D10_CULL_MODE
{
	D3D10_CULL_NONE = 0x1,
	D3D10_CULL_FRONT = 0x2,
	D3D10_CULL_BACK = 0x3,
};

/* 8377 */
struct D3D10_RASTERIZER_DESC
{
	D3D10_FILL_MODE FillMode;
	D3D10_CULL_MODE CullMode;
	int FrontCounterClockwise;
	int DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	int DepthClipEnable;
	int ScissorEnable;
	int MultisampleEnable;
	int AntialiasedLineEnable;
};

/* 8378 */
struct D3D10_TEX2D_ARRAY_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8379 */
struct __cppobj ID3D10InputLayout : ID3D10DeviceChild
{
};

/* 11270 */
enum D3D10_STENCIL_OP
{
	D3D10_STENCIL_OP_KEEP = 0x1,
	D3D10_STENCIL_OP_ZERO = 0x2,
	D3D10_STENCIL_OP_REPLACE = 0x3,
	D3D10_STENCIL_OP_INCR_SAT = 0x4,
	D3D10_STENCIL_OP_DECR_SAT = 0x5,
	D3D10_STENCIL_OP_INVERT = 0x6,
	D3D10_STENCIL_OP_INCR = 0x7,
	D3D10_STENCIL_OP_DECR = 0x8,
};

/* 11271 */
enum D3D10_COMPARISON_FUNC
{
	D3D10_COMPARISON_NEVER = 0x1,
	D3D10_COMPARISON_LESS = 0x2,
	D3D10_COMPARISON_EQUAL = 0x3,
	D3D10_COMPARISON_LESS_EQUAL = 0x4,
	D3D10_COMPARISON_GREATER = 0x5,
	D3D10_COMPARISON_NOT_EQUAL = 0x6,
	D3D10_COMPARISON_GREATER_EQUAL = 0x7,
	D3D10_COMPARISON_ALWAYS = 0x8,
};

/* 8380 */
struct D3D10_DEPTH_STENCILOP_DESC
{
	D3D10_STENCIL_OP StencilFailOp;
	D3D10_STENCIL_OP StencilDepthFailOp;
	D3D10_STENCIL_OP StencilPassOp;
	D3D10_COMPARISON_FUNC StencilFunc;
};

/* 8381 */
struct DWRITE_GLYPH_METRICS
{
	int leftSideBearing;
	unsigned int advanceWidth;
	int rightSideBearing;
	int topSideBearing;
	unsigned int advanceHeight;
	int bottomSideBearing;
	int verticalOriginY;
};

/* 8382 */
struct D3D11_CLASS_INSTANCE_DESC
{
	unsigned int InstanceId;
	unsigned int InstanceIndex;
	unsigned int TypeId;
	unsigned int ConstantBuffer;
	unsigned int BaseConstantBufferOffset;
	unsigned int BaseTexture;
	unsigned int BaseSampler;
	int Created;
};

/* 8383 */
struct D3D10_TEX2D_ARRAY_RTV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 11272 */
enum D3D10_DEPTH_WRITE_MASK
{
	D3D10_DEPTH_WRITE_MASK_ZERO = 0x0,
	D3D10_DEPTH_WRITE_MASK_ALL = 0x1,
};

/* 8384 */
struct D3D10_DEPTH_STENCIL_DESC
{
	int DepthEnable;
	D3D10_DEPTH_WRITE_MASK DepthWriteMask;
	D3D10_COMPARISON_FUNC DepthFunc;
	int StencilEnable;
	char StencilReadMask;
	char StencilWriteMask;
	D3D10_DEPTH_STENCILOP_DESC FrontFace;
	D3D10_DEPTH_STENCILOP_DESC BackFace;
};

/* 8385 */
struct D3D10_TEX2DMS_ARRAY_DSV
{
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8386 */
struct __cppobj IDWriteFontFileStream : IUnknown
{
};

/* 8387 */
struct __cppobj ID3D10Texture1D : ID3D10Resource
{
};

/* 8388 */
struct D3D10_TEXTURE1D_DESC
{
	unsigned int Width;
	unsigned int MipLevels;
	unsigned int ArraySize;
	DXGI_FORMAT Format;
	D3D10_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8389 */
struct __cppobj ID3D10Asynchronous : ID3D10DeviceChild
{
};

/* 8390 */
struct __cppobj ID3D10Query : ID3D10Asynchronous
{
};

/* 8391 */
struct __cppobj ID3D10Predicate : ID3D10Query
{
};

/* 8392 */
struct __cppobj IDWriteFontList : IUnknown
{
};

/* 8393 */
struct __cppobj IDWriteFontCollection : IUnknown
{
};

/* 8394 */
struct __cppobj IDWriteFont : IUnknown
{
};

/* 11273 */
enum D3D10_COUNTER
{
	D3D10_COUNTER_GPU_IDLE = 0x0,
	D3D10_COUNTER_VERTEX_PROCESSING = 0x1,
	D3D10_COUNTER_GEOMETRY_PROCESSING = 0x2,
	D3D10_COUNTER_PIXEL_PROCESSING = 0x3,
	D3D10_COUNTER_OTHER_GPU_PROCESSING = 0x4,
	D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 0x5,
	D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 0x6,
	D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 0x7,
	D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 0x8,
	D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 0x9,
	D3D10_COUNTER_VS_MEMORY_LIMITED = 0xA,
	D3D10_COUNTER_VS_COMPUTATION_LIMITED = 0xB,
	D3D10_COUNTER_GS_MEMORY_LIMITED = 0xC,
	D3D10_COUNTER_GS_COMPUTATION_LIMITED = 0xD,
	D3D10_COUNTER_PS_MEMORY_LIMITED = 0xE,
	D3D10_COUNTER_PS_COMPUTATION_LIMITED = 0xF,
	D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 0x10,
	D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 0x11,
	D3D10_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};

/* 8395 */
struct __declspec(align(4)) D3D10_COUNTER_INFO
{
	D3D10_COUNTER LastDeviceDependentCounter;
	unsigned int NumSimultaneousCounters;
	char NumDetectableParallelUnits;
};

/* 8396 */
struct DWRITE_UNDERLINE
{
	float width;
	float thickness;
	float offset;
	float runHeight;
	DWRITE_READING_DIRECTION readingDirection;
	DWRITE_FLOW_DIRECTION flowDirection;
	const wchar_t *localeName;
	DWRITE_MEASURING_MODE measuringMode;
};

/* 8397 */
union $BBA547F9A29E3396C1BC472CF0ADE826
{
	D3D10_BUFFER_SRV Buffer;
	D3D10_TEX1D_SRV Texture1D;
	D3D10_TEX1D_ARRAY_SRV Texture1DArray;
	D3D10_TEX2D_SRV Texture2D;
	D3D10_TEX2D_ARRAY_SRV Texture2DArray;
	D3D10_TEX2DMS_SRV Texture2DMS;
	D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
	D3D10_TEX3D_SRV Texture3D;
	D3D10_TEXCUBE_SRV TextureCube;
};

/* 8398 */
struct D3D10_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D_SRV_DIMENSION ViewDimension;
	$BBA547F9A29E3396C1BC472CF0ADE826 ___u2;
};

/* 8399 */
struct __declspec(align(2)) D3D10_SO_DECLARATION_ENTRY
{
	const char *SemanticName;
	unsigned int SemanticIndex;
	char StartComponent;
	char ComponentCount;
	char OutputSlot;
};

/* 8400 */
struct D3D10_TEX2DMS_ARRAY_RTV
{
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8401 */
struct __cppobj ID3D10View : ID3D10DeviceChild
{
};

/* 8402 */
struct __cppobj ID3D10RenderTargetView : ID3D10View
{
};

/* 8403 */
struct D3D10_TEX2DMS_RTV
{
	unsigned int UnusedField_NothingToDefine;
};

/* 8404 */
union $3265100EB453DEFB814357C8798E6052
{
	D3D10_BUFFER_RTV Buffer;
	D3D10_TEX1D_RTV Texture1D;
	D3D10_TEX1D_ARRAY_RTV Texture1DArray;
	D3D10_TEX2D_RTV Texture2D;
	D3D10_TEX2D_ARRAY_RTV Texture2DArray;
	D3D10_TEX2DMS_RTV Texture2DMS;
	D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
	D3D10_TEX3D_RTV Texture3D;
};

/* 11274 */
enum D3D10_RTV_DIMENSION
{
	D3D10_RTV_DIMENSION_UNKNOWN = 0x0,
	D3D10_RTV_DIMENSION_BUFFER = 0x1,
	D3D10_RTV_DIMENSION_TEXTURE1D = 0x2,
	D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 0x3,
	D3D10_RTV_DIMENSION_TEXTURE2D = 0x4,
	D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 0x5,
	D3D10_RTV_DIMENSION_TEXTURE2DMS = 0x6,
	D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
	D3D10_RTV_DIMENSION_TEXTURE3D = 0x8,
};

/* 8405 */
struct D3D10_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D10_RTV_DIMENSION ViewDimension;
	$3265100EB453DEFB814357C8798E6052 ___u2;
};

/* 8406 */
struct __cppobj ID3D10Buffer : ID3D10Resource
{
};

/* 8407 */
struct D3D10_BUFFER_DESC
{
	unsigned int ByteWidth;
	D3D10_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8408 */
struct __cppobj ID3D10Texture2D : ID3D10Resource
{
};

/* 8409 */
struct D3D10_TEXTURE2D_DESC
{
	unsigned int Width;
	unsigned int Height;
	unsigned int MipLevels;
	unsigned int ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D10_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8410 */
struct D3D10_COUNTER_DESC
{
	D3D10_COUNTER Counter;
	unsigned int MiscFlags;
};

/* 8411 */
struct __cppobj IDWriteTypography : IUnknown
{
};

/* 8412 */
struct D3D10_TEX2D_ARRAY_DSV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8413 */
struct __cppobj ID3D11View : ID3D11DeviceChild
{
};

/* 8414 */
struct __cppobj ID3D11DepthStencilView : ID3D11View
{
};

/* 8415 */
struct D3D11_TEX1D_DSV
{
	unsigned int MipSlice;
};

/* 8416 */
struct D3D11_TEX1D_ARRAY_DSV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8417 */
struct D3D11_TEX2D_DSV
{
	unsigned int MipSlice;
};

/* 8418 */
struct D3D11_TEX2D_ARRAY_DSV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8419 */
struct D3D11_TEX2DMS_DSV
{
	unsigned int UnusedField_NothingToDefine;
};

/* 8420 */
struct D3D11_TEX2DMS_ARRAY_DSV
{
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8421 */
union $CB550659A97F448DC68450512247BC62
{
	D3D11_TEX1D_DSV Texture1D;
	D3D11_TEX1D_ARRAY_DSV Texture1DArray;
	D3D11_TEX2D_DSV Texture2D;
	D3D11_TEX2D_ARRAY_DSV Texture2DArray;
	D3D11_TEX2DMS_DSV Texture2DMS;
	D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
};

/* 8422 */
struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D11_DSV_DIMENSION ViewDimension;
	unsigned int Flags;
	$CB550659A97F448DC68450512247BC62 ___u3;
};

/* 8423 */
struct __cppobj ID3D11VertexShader : ID3D11DeviceChild
{
};

/* 8424 */
struct D3D10_VIEWPORT
{
	int TopLeftX;
	int TopLeftY;
	unsigned int Width;
	unsigned int Height;
	float MinDepth;
	float MaxDepth;
};

/* 8425 */
struct D3D10_TEX2D_DSV
{
	unsigned int MipSlice;
};

/* 8426 */
struct __cppobj ID3D11UnorderedAccessView : ID3D11View
{
};

/* 8427 */
struct D3D11_BUFFER_UAV
{
	unsigned int FirstElement;
	unsigned int NumElements;
	unsigned int Flags;
};

/* 8428 */
struct D3D11_TEX1D_UAV
{
	unsigned int MipSlice;
};

/* 8429 */
struct D3D11_TEX1D_ARRAY_UAV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8430 */
struct D3D11_TEX2D_UAV
{
	unsigned int MipSlice;
};

/* 8431 */
struct D3D11_TEX2D_ARRAY_UAV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8432 */
struct D3D11_TEX3D_UAV
{
	unsigned int MipSlice;
	unsigned int FirstWSlice;
	unsigned int WSize;
};

/* 8433 */
union $F8A1E267866C0A009D665D290059F980
{
	D3D11_BUFFER_UAV Buffer;
	D3D11_TEX1D_UAV Texture1D;
	D3D11_TEX1D_ARRAY_UAV Texture1DArray;
	D3D11_TEX2D_UAV Texture2D;
	D3D11_TEX2D_ARRAY_UAV Texture2DArray;
	D3D11_TEX3D_UAV Texture3D;
};

/* 8434 */
struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D11_UAV_DIMENSION ViewDimension;
	$F8A1E267866C0A009D665D290059F980 ___u2;
};

/* 8435 */
struct DWRITE_FONT_METRICS
{
	unsigned __int16 designUnitsPerEm;
	unsigned __int16 ascent;
	unsigned __int16 descent;
	__int16 lineGap;
	unsigned __int16 capHeight;
	unsigned __int16 xHeight;
	__int16 underlinePosition;
	unsigned __int16 underlineThickness;
	__int16 strikethroughPosition;
	unsigned __int16 strikethroughThickness;
};

/* 8436 */
struct __cppobj IDWriteFontFileLoader : IUnknown
{
};

/* 11275 */
enum D3D10_INPUT_CLASSIFICATION
{
	D3D10_INPUT_PER_VERTEX_DATA = 0x0,
	D3D10_INPUT_PER_INSTANCE_DATA = 0x1,
};

/* 8437 */
struct D3D10_INPUT_ELEMENT_DESC
{
	const char *SemanticName;
	unsigned int SemanticIndex;
	DXGI_FORMAT Format;
	unsigned int InputSlot;
	unsigned int AlignedByteOffset;
	D3D10_INPUT_CLASSIFICATION InputSlotClass;
	unsigned int InstanceDataStepRate;
};

/* 8438 */
struct DWRITE_TEXT_METRICS
{
	float left;
	float top;
	float width;
	float widthIncludingTrailingWhitespace;
	float height;
	float layoutWidth;
	float layoutHeight;
	unsigned int maxBidiReorderingDepth;
	unsigned int lineCount;
};

/* 8439 */
struct DWRITE_LINE_METRICS
{
	unsigned int length;
	unsigned int trailingWhitespaceLength;
	unsigned int newlineLength;
	float height;
	float baseline;
	int isTrimmed;
};

/* 8440 */
struct __cppobj ID3D11BlendState : ID3D11DeviceChild
{
};

/* 8441 */
struct __declspec(align(4)) D3D11_RENDER_TARGET_BLEND_DESC
{
	int BlendEnable;
	D3D11_BLEND SrcBlend;
	D3D11_BLEND DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND SrcBlendAlpha;
	D3D11_BLEND DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	char RenderTargetWriteMask;
};

/* 8442 */
struct D3D11_BLEND_DESC
{
	int AlphaToCoverageEnable;
	int IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
};

/* 8443 */
union $9F4EB710753B38D0CC4A461855376437
{
	D3D10_TEX1D_DSV Texture1D;
	D3D10_TEX1D_ARRAY_DSV Texture1DArray;
	D3D10_TEX2D_DSV Texture2D;
	D3D10_TEX2D_ARRAY_DSV Texture2DArray;
	D3D10_TEX2DMS_DSV Texture2DMS;
	D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
};

/* 11276 */
enum D3D10_DSV_DIMENSION
{
	D3D10_DSV_DIMENSION_UNKNOWN = 0x0,
	D3D10_DSV_DIMENSION_TEXTURE1D = 0x1,
	D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 0x2,
	D3D10_DSV_DIMENSION_TEXTURE2D = 0x3,
	D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 0x4,
	D3D10_DSV_DIMENSION_TEXTURE2DMS = 0x5,
	D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 0x6,
};

/* 8444 */
struct D3D10_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D10_DSV_DIMENSION ViewDimension;
	$9F4EB710753B38D0CC4A461855376437 ___u2;
};

/* 8445 */
struct XAUDIO2_VOICE_DETAILS
{
	unsigned int CreationFlags;
	unsigned int InputChannels;
	unsigned int InputSampleRate;
};

/* 8446 */
struct __cppobj IXAudio2Voice
{
	IXAudio2VoiceVtbl *vfptr;
};

/* 8452 */
struct IXAudio2VoiceVtbl
{
	void (__stdcall *GetVoiceDetails)(IXAudio2Voice *this, XAUDIO2_VOICE_DETAILS *);
	_BYTE gap4[8];
	HRESULT (__stdcall *EnableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
	HRESULT (__stdcall *DisableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
	void (__stdcall *GetEffectState)(IXAudio2Voice *this, unsigned int, int *);
	HRESULT (__stdcall *SetEffectParameters)(IXAudio2Voice *this, unsigned int, const void *, unsigned int, unsigned int);
	HRESULT (__stdcall *GetEffectParameters)(IXAudio2Voice *this, unsigned int, void *, unsigned int);
	HRESULT (__stdcall *SetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *, unsigned int);
	void (__stdcall *GetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *);
	HRESULT (__stdcall *SetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *, unsigned int);
	void (__stdcall *GetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *);
	HRESULT (__stdcall *SetVolume)(IXAudio2Voice *this, float, unsigned int);
	void (__stdcall *GetVolume)(IXAudio2Voice *this, float *);
	HRESULT (__stdcall *SetChannelVolumes)(IXAudio2Voice *this, unsigned int, const float *, unsigned int);
	void (__stdcall *GetChannelVolumes)(IXAudio2Voice *this, unsigned int, float *);
	HRESULT (__stdcall *SetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, const float *, unsigned int);
	void (__stdcall *GetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, float *);
	void (__stdcall *DestroyVoice)(IXAudio2Voice *this);
};

/* 8451 */
const struct XAUDIO2_FILTER_PARAMETERS
{
	XAUDIO2_FILTER_TYPE Type;
	float Frequency;
	float OneOverQ;
};

/* 8447 */
struct XAUDIO2_SEND_DESCRIPTOR
{
	unsigned int Flags;
	IXAudio2Voice *pOutputVoice;
};

/* 8448 */
const struct XAUDIO2_VOICE_SENDS
{
	unsigned int SendCount;
	XAUDIO2_SEND_DESCRIPTOR *pSends;
};

/* 8449 */
struct XAUDIO2_EFFECT_DESCRIPTOR
{
	IUnknown *pEffect;
	int InitialState;
	unsigned int OutputChannels;
};

/* 8450 */
const struct XAUDIO2_EFFECT_CHAIN
{
	unsigned int EffectCount;
	XAUDIO2_EFFECT_DESCRIPTOR *pEffectDescriptors;
};

/* 8453 */
struct DWRITE_GLYPH_OFFSET
{
	float advanceOffset;
	float ascenderOffset;
};

/* 8454 */
struct __cppobj ID2D1SimplifiedGeometrySink : IUnknown
{
};

/* 8455 */
struct D2D_POINT_2F
{
	float x;
	float y;
};

/* 8456 */
struct D2D1_BEZIER_SEGMENT
{
	D2D_POINT_2F point1;
	D2D_POINT_2F point2;
	D2D_POINT_2F point3;
};

/* 8457 */
struct XAUDIO2_BUFFER_WMA
{
	const unsigned int *pDecodedPacketCumulativeBytes;
	unsigned int PacketCount;
};

/* 8458 */
struct __cppobj ID3D10SamplerState : ID3D10DeviceChild
{
};

/* 11277 */
enum D3D10_FILTER
{
	D3D10_FILTER_MIN_MAG_MIP_POINT = 0x0,
	D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	D3D10_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	D3D10_FILTER_ANISOTROPIC = 0x55,
	D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	D3D10_FILTER_COMPARISON_ANISOTROPIC = 0xD5,
	D3D10_FILTER_TEXT_1BIT = 0x80000000,
};

/* 11278 */
enum D3D10_TEXTURE_ADDRESS_MODE
{
	D3D10_TEXTURE_ADDRESS_WRAP = 0x1,
	D3D10_TEXTURE_ADDRESS_MIRROR = 0x2,
	D3D10_TEXTURE_ADDRESS_CLAMP = 0x3,
	D3D10_TEXTURE_ADDRESS_BORDER = 0x4,
	D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 0x5,
};

/* 8459 */
struct D3D10_SAMPLER_DESC
{
	D3D10_FILTER Filter;
	D3D10_TEXTURE_ADDRESS_MODE AddressU;
	D3D10_TEXTURE_ADDRESS_MODE AddressV;
	D3D10_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	unsigned int MaxAnisotropy;
	D3D10_COMPARISON_FUNC ComparisonFunc;
	float BorderColor[4];
	float MinLOD;
	float MaxLOD;
};

/* 8460 */
struct __cppobj ID3D10RasterizerState : ID3D10DeviceChild
{
};

/* 8461 */
struct __cppobj ID3D11PixelShader : ID3D11DeviceChild
{
};

/* 8462 */
struct __cppobj ID3D10DepthStencilState : ID3D10DeviceChild
{
};

/* 11279 */
enum D3D10_QUERY
{
	D3D10_QUERY_EVENT = 0x0,
	D3D10_QUERY_OCCLUSION = 0x1,
	D3D10_QUERY_TIMESTAMP = 0x2,
	D3D10_QUERY_TIMESTAMP_DISJOINT = 0x3,
	D3D10_QUERY_PIPELINE_STATISTICS = 0x4,
	D3D10_QUERY_OCCLUSION_PREDICATE = 0x5,
	D3D10_QUERY_SO_STATISTICS = 0x6,
	D3D10_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
};

/* 8463 */
struct D3D10_QUERY_DESC
{
	D3D10_QUERY Query;
	unsigned int MiscFlags;
};

/* 8464 */
struct D3D10_SUBRESOURCE_DATA
{
	const void *pSysMem;
	unsigned int SysMemPitch;
	unsigned int SysMemSlicePitch;
};

/* 8465 */
struct __cppobj ID3D10Device : IUnknown
{
};

/* 8466 */
union $C7B45A521DD9425F10AF23801AD4919D
{
	unsigned __int16 wValidBitsPerSample;
	unsigned __int16 wSamplesPerBlock;
	unsigned __int16 wReserved;
};

/* 8467 */
struct WAVEFORMATEXTENSIBLE
{
	tWAVEFORMATEX Format;
	$C7B45A521DD9425F10AF23801AD4919D Samples;
	unsigned int dwChannelMask;
	_GUID SubFormat;
};

/* 8468 */
struct DWRITE_TEXT_RANGE
{
	unsigned int startPosition;
	unsigned int length;
};

/* 8469 */
struct __cppobj ID3D10VertexShader : ID3D10DeviceChild
{
};

/* 8470 */
struct __cppobj ID3D11ClassInstance : ID3D11DeviceChild
{
};

/* 8471 */
struct __cppobj ID3D11ClassLinkage : ID3D11DeviceChild
{
};

/* 8472 */
struct D3D11_SUBRESOURCE_DATA
{
	const void *pSysMem;
	unsigned int SysMemPitch;
	unsigned int SysMemSlicePitch;
};

/* 8473 */
struct __cppobj ID3D10DepthStencilView : ID3D10View
{
};

/* 8474 */
struct __cppobj IDWriteFontFamily : IDWriteFontList
{
};

/* 8475 */
struct __cppobj IDWriteFontFace : IUnknown
{
};

/* 8476 */
struct __cppobj IDWritePixelSnapping : IUnknown
{
};

/* 8477 */
struct DWRITE_MATRIX
{
	float m11;
	float m12;
	float m21;
	float m22;
	float dx;
	float dy;
};

/* 8478 */
struct __cppobj ID3D11RasterizerState : ID3D11DeviceChild
{
};

/* 8479 */
struct D3D11_RASTERIZER_DESC
{
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	int FrontCounterClockwise;
	int DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	int DepthClipEnable;
	int ScissorEnable;
	int MultisampleEnable;
	int AntialiasedLineEnable;
};

/* 8480 */
struct __cppobj ID3D11Asynchronous : ID3D11DeviceChild
{
};

/* 8481 */
struct DWRITE_GLYPH_RUN_DESCRIPTION
{
	const wchar_t *localeName;
	const wchar_t *string;
	unsigned int stringLength;
	const unsigned __int16 *clusterMap;
	unsigned int textPosition;
};

/* 8482 */
struct __cppobj ID3D11Query : ID3D11Asynchronous
{
};

/* 8483 */
struct D3D11_QUERY_DESC
{
	D3D11_QUERY Query;
	unsigned int MiscFlags;
};

/* 8484 */
struct __cppobj ID3D11Counter : ID3D11Asynchronous
{
};

/* 8485 */
struct D3D11_COUNTER_DESC
{
	D3D11_COUNTER Counter;
	unsigned int MiscFlags;
};

/* 8486 */
struct __cppobj ID3D10Counter : ID3D10Asynchronous
{
};

/* 8487 */
struct DWRITE_HIT_TEST_METRICS
{
	unsigned int textPosition;
	unsigned int length;
	float left;
	float top;
	float width;
	float height;
	unsigned int bidiLevel;
	int isText;
	int isTrimmed;
};

/* 11280 */
enum D3D10_BLEND
{
	D3D10_BLEND_ZERO = 0x1,
	D3D10_BLEND_ONE = 0x2,
	D3D10_BLEND_SRC_COLOR = 0x3,
	D3D10_BLEND_INV_SRC_COLOR = 0x4,
	D3D10_BLEND_SRC_ALPHA = 0x5,
	D3D10_BLEND_INV_SRC_ALPHA = 0x6,
	D3D10_BLEND_DEST_ALPHA = 0x7,
	D3D10_BLEND_INV_DEST_ALPHA = 0x8,
	D3D10_BLEND_DEST_COLOR = 0x9,
	D3D10_BLEND_INV_DEST_COLOR = 0xA,
	D3D10_BLEND_SRC_ALPHA_SAT = 0xB,
	D3D10_BLEND_BLEND_FACTOR = 0xE,
	D3D10_BLEND_INV_BLEND_FACTOR = 0xF,
	D3D10_BLEND_SRC1_COLOR = 0x10,
	D3D10_BLEND_INV_SRC1_COLOR = 0x11,
	D3D10_BLEND_SRC1_ALPHA = 0x12,
	D3D10_BLEND_INV_SRC1_ALPHA = 0x13,
};

/* 11281 */
enum D3D10_BLEND_OP
{
	D3D10_BLEND_OP_ADD = 0x1,
	D3D10_BLEND_OP_SUBTRACT = 0x2,
	D3D10_BLEND_OP_REV_SUBTRACT = 0x3,
	D3D10_BLEND_OP_MIN = 0x4,
	D3D10_BLEND_OP_MAX = 0x5,
};

/* 8488 */
struct D3D10_BLEND_DESC
{
	int AlphaToCoverageEnable;
	int BlendEnable[8];
	D3D10_BLEND SrcBlend;
	D3D10_BLEND DestBlend;
	D3D10_BLEND_OP BlendOp;
	D3D10_BLEND SrcBlendAlpha;
	D3D10_BLEND DestBlendAlpha;
	D3D10_BLEND_OP BlendOpAlpha;
	char RenderTargetWriteMask[8];
};

/* 8489 */
struct __cppobj ID3D10BlendState : ID3D10DeviceChild
{
};

/* 8490 */
struct __cppobj ID3D10GeometryShader : ID3D10DeviceChild
{
};

/* 8491 */
struct __cppobj ID3D11ShaderResourceView : ID3D11View
{
};

/* 8492 */
struct D3D11_BUFFER_SRV
{
	$545C80804CFDAA65132ED5A8382CA602 ___u0;
	$44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 8493 */
struct D3D11_TEX1D_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8494 */
struct D3D11_TEX1D_ARRAY_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8495 */
struct D3D11_TEX2D_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8496 */
struct D3D11_TEX2D_ARRAY_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8497 */
struct D3D11_TEX2DMS_SRV
{
	unsigned int UnusedField_NothingToDefine;
};

/* 8498 */
struct D3D11_TEX2DMS_ARRAY_SRV
{
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8499 */
struct D3D11_TEX3D_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8500 */
struct D3D11_TEXCUBE_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
};

/* 8501 */
struct D3D11_TEXCUBE_ARRAY_SRV
{
	unsigned int MostDetailedMip;
	unsigned int MipLevels;
	unsigned int First2DArrayFace;
	unsigned int NumCubes;
};

/* 8502 */
struct D3D11_BUFFEREX_SRV
{
	unsigned int FirstElement;
	unsigned int NumElements;
	unsigned int Flags;
};

/* 8503 */
union $8E6AD6C90CCAC50486BE7FBAA26FB678
{
	D3D11_BUFFER_SRV Buffer;
	D3D11_TEX1D_SRV Texture1D;
	D3D11_TEX1D_ARRAY_SRV Texture1DArray;
	D3D11_TEX2D_SRV Texture2D;
	D3D11_TEX2D_ARRAY_SRV Texture2DArray;
	D3D11_TEX2DMS_SRV Texture2DMS;
	D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
	D3D11_TEX3D_SRV Texture3D;
	D3D11_TEXCUBE_SRV TextureCube;
	D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
	D3D11_BUFFEREX_SRV BufferEx;
};

/* 8504 */
struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D_SRV_DIMENSION ViewDimension;
	$8E6AD6C90CCAC50486BE7FBAA26FB678 ___u2;
};

/* 8505 */
struct __cppobj ID2D1Resource : IUnknown
{
};

/* 8506 */
struct __cppobj ID2D1RenderTarget : ID2D1Resource
{
};

/* 8507 */
struct __cppobj ID2D1DCRenderTarget : ID2D1RenderTarget
{
};

/* 8508 */
struct D2D_SIZE_F
{
	float width;
	float height;
};

/* 8509 */
struct __cppobj ID2D1Layer : ID2D1Resource
{
};

/* 8510 */
struct D2D_MATRIX_3X2_F
{
	float _11;
	float _12;
	float _21;
	float _22;
	float _31;
	float _32;
};

/* 8511 */
struct D2D1_PIXEL_FORMAT
{
	DXGI_FORMAT format;
	D2D1_ALPHA_MODE alphaMode;
};

/* 8512 */
struct D2D1_BITMAP_PROPERTIES
{
	D2D1_PIXEL_FORMAT pixelFormat;
	float dpiX;
	float dpiY;
};

/* 8513 */
struct __cppobj ID3D10ShaderResourceView : ID3D10View
{
};

/* 8514 */
struct D3D10_BOX
{
	unsigned int left;
	unsigned int top;
	unsigned int front;
	unsigned int right;
	unsigned int bottom;
	unsigned int back;
};

/* 8515 */
struct __cppobj ID3D11Resource : ID3D11DeviceChild
{
};

/* 8516 */
struct __cppobj IXAudio2 : IUnknown
{
};

/* 8517 */
struct XAUDIO2_DEVICE_DETAILS
{
	wchar_t DeviceID[256];
	wchar_t DisplayName[256];
	XAUDIO2_DEVICE_ROLE Role;
	WAVEFORMATEXTENSIBLE OutputFormat;
};

/* 8518 */
struct __cppobj IXAudio2EngineCallback
{
	IXAudio2EngineCallbackVtbl *vfptr;
};

/* 8519 */
struct IXAudio2EngineCallbackVtbl
{
	void (__stdcall *OnProcessingPassStart)(IXAudio2EngineCallback *this);
	void (__stdcall *OnProcessingPassEnd)(IXAudio2EngineCallback *this);
	void (__stdcall *OnCriticalError)(IXAudio2EngineCallback *this, HRESULT);
};

/* 8520 */
struct __cppobj IXAudio2SourceVoice : IXAudio2Voice
{
};

/* 8521 */
struct __cppobj IXAudio2VoiceCallback
{
	IXAudio2VoiceCallbackVtbl *vfptr;
};

/* 8522 */
struct IXAudio2VoiceCallbackVtbl
{
	void (__stdcall *OnVoiceProcessingPassStart)(IXAudio2VoiceCallback *this, unsigned int);
	void (__stdcall *OnVoiceProcessingPassEnd)(IXAudio2VoiceCallback *this);
	void (__stdcall *OnStreamEnd)(IXAudio2VoiceCallback *this);
	void (__stdcall *OnBufferStart)(IXAudio2VoiceCallback *this, void *);
	void (__stdcall *OnBufferEnd)(IXAudio2VoiceCallback *this, void *);
	void (__stdcall *OnLoopEnd)(IXAudio2VoiceCallback *this, void *);
	void (__stdcall *OnVoiceError)(IXAudio2VoiceCallback *this, void *, HRESULT);
};

/* 8523 */
struct __cppobj IXAudio2SubmixVoice : IXAudio2Voice
{
};

/* 8524 */
struct __cppobj IXAudio2MasteringVoice : IXAudio2Voice
{
};

/* 8525 */
struct XAUDIO2_PERFORMANCE_DATA
{
	unsigned __int64 AudioCyclesSinceLastQuery;
	unsigned __int64 TotalCyclesSinceLastQuery;
	unsigned int MinimumCyclesPerQuantum;
	unsigned int MaximumCyclesPerQuantum;
	unsigned int MemoryUsageInBytes;
	unsigned int CurrentLatencyInSamples;
	unsigned int GlitchesSinceEngineStarted;
	unsigned int ActiveSourceVoiceCount;
	unsigned int TotalSourceVoiceCount;
	unsigned int ActiveSubmixVoiceCount;
	unsigned int ActiveResamplerCount;
	unsigned int ActiveMatrixMixCount;
	unsigned int ActiveXmaSourceVoices;
	unsigned int ActiveXmaStreams;
};

/* 8526 */
struct XAUDIO2_DEBUG_CONFIGURATION
{
	unsigned int TraceMask;
	unsigned int BreakMask;
	int LogThreadID;
	int LogFileline;
	int LogFunctionName;
	int LogTiming;
};

/* 8527 */
struct D2D_SIZE_U
{
	unsigned int width;
	unsigned int height;
};

/* 8528 */
struct D2D_RECT_F
{
	float left;
	float top;
	float right;
	float bottom;
};

/* 8529 */
struct D2D1_ROUNDED_RECT
{
	D2D_RECT_F rect;
	float radiusX;
	float radiusY;
};

/* 8530 */
struct __cppobj IDWriteFontFile : IUnknown
{
};

/* 8531 */
struct __cppobj ID3D11DeviceContext : ID3D11DeviceChild
{
};

/* 8532 */
struct __cppobj ID3D11Buffer : ID3D11Resource
{
};

/* 8533 */
struct __cppobj ID3D11SamplerState : ID3D11DeviceChild
{
};

/* 8534 */
struct __cppobj ID3D11InputLayout : ID3D11DeviceChild
{
};

/* 8535 */
struct __cppobj ID3D11GeometryShader : ID3D11DeviceChild
{
};

/* 8536 */
struct __cppobj ID3D11Predicate : ID3D11Query
{
};

/* 8537 */
struct __cppobj ID3D11RenderTargetView : ID3D11View
{
};

/* 8538 */
struct __cppobj ID3D11DepthStencilState : ID3D11DeviceChild
{
};

/* 8539 */
struct D3D11_VIEWPORT
{
	float TopLeftX;
	float TopLeftY;
	float Width;
	float Height;
	float MinDepth;
	float MaxDepth;
};

/* 8540 */
struct D3D11_BOX
{
	unsigned int left;
	unsigned int top;
	unsigned int front;
	unsigned int right;
	unsigned int bottom;
	unsigned int back;
};

/* 8541 */
struct __cppobj ID3D11HullShader : ID3D11DeviceChild
{
};

/* 8542 */
struct __cppobj ID3D11DomainShader : ID3D11DeviceChild
{
};

/* 8543 */
struct __cppobj ID3D11ComputeShader : ID3D11DeviceChild
{
};

/* 8544 */
struct __cppobj ID3D11Texture2D : ID3D11Resource
{
};

/* 8545 */
struct D3D11_TEXTURE2D_DESC
{
	unsigned int Width;
	unsigned int Height;
	unsigned int MipLevels;
	unsigned int ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D11_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8546 */
struct D3D11_DEPTH_STENCILOP_DESC
{
	D3D11_STENCIL_OP StencilFailOp;
	D3D11_STENCIL_OP StencilDepthFailOp;
	D3D11_STENCIL_OP StencilPassOp;
	D3D11_COMPARISON_FUNC StencilFunc;
};

/* 8547 */
struct D3D11_DEPTH_STENCIL_DESC
{
	int DepthEnable;
	D3D11_DEPTH_WRITE_MASK DepthWriteMask;
	D3D11_COMPARISON_FUNC DepthFunc;
	int StencilEnable;
	char StencilReadMask;
	char StencilWriteMask;
	D3D11_DEPTH_STENCILOP_DESC FrontFace;
	D3D11_DEPTH_STENCILOP_DESC BackFace;
};

/* 8548 */
struct __cppobj _D3DX11_TEXTURE_LOAD_INFO
{
	D3D11_BOX *pSrcBox;
	D3D11_BOX *pDstBox;
	unsigned int SrcFirstMip;
	unsigned int DstFirstMip;
	unsigned int NumMips;
	unsigned int SrcFirstElement;
	unsigned int DstFirstElement;
	unsigned int NumElements;
	unsigned int Filter;
	unsigned int MipFilter;
};

/* 8549 */
struct __cppobj CD3D11_BLEND_DESC : D3D11_BLEND_DESC
{
};

/* 8550 */
struct __cppobj CD3D11_DEFAULT
{
};

/* 11282 */
enum D3D10_RESOURCE_DIMENSION
{
	D3D10_RESOURCE_DIMENSION_UNKNOWN = 0x0,
	D3D10_RESOURCE_DIMENSION_BUFFER = 0x1,
	D3D10_RESOURCE_DIMENSION_TEXTURE1D = 0x2,
	D3D10_RESOURCE_DIMENSION_TEXTURE2D = 0x3,
	D3D10_RESOURCE_DIMENSION_TEXTURE3D = 0x4,
};

/* 8551 */
struct D3DX10_IMAGE_INFO
{
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int ArraySize;
	unsigned int MipLevels;
	unsigned int MiscFlags;
	DXGI_FORMAT Format;
	D3D10_RESOURCE_DIMENSION ResourceDimension;
	D3DX10_IMAGE_FILE_FORMAT ImageFileFormat;
};

/* 8552 */
struct __cppobj D3DX10_IMAGE_LOAD_INFO
{
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int FirstMipLevel;
	unsigned int MipLevels;
	D3D10_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CpuAccessFlags;
	unsigned int MiscFlags;
	DXGI_FORMAT Format;
	unsigned int Filter;
	unsigned int MipFilter;
	D3DX10_IMAGE_INFO *pSrcInfo;
};

/* 8553 */
struct D3D11_TEXTURE3D_DESC
{
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int MipLevels;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8554 */
struct WICRect
{
	int X;
	int Y;
	int Width;
	int Height;
};

/* 8555 */
struct _D3DX10_FONT_DESCA
{
	int Height;
	unsigned int Width;
	unsigned int Weight;
	unsigned int MipLevels;
	int Italic;
	char CharSet;
	char OutputPrecision;
	char Quality;
	char PitchAndFamily;
	char FaceName[32];
};

/* 8556 */
struct __cppobj D2D1::ColorF : _D3DCOLORVALUE
{
};

/* 8557 */
struct __cppobj D2D1::Matrix3x2F : D2D_MATRIX_3X2_F
{
};

/* 8558 */
struct _D3DX10_FONT_DESCW
{
	int Height;
	unsigned int Width;
	unsigned int Weight;
	unsigned int MipLevels;
	int Italic;
	char CharSet;
	char OutputPrecision;
	char Quality;
	char PitchAndFamily;
	wchar_t FaceName[32];
};

/* 8559 */
struct D3D11_SAMPLER_DESC
{
	D3D11_FILTER Filter;
	D3D11_TEXTURE_ADDRESS_MODE AddressU;
	D3D11_TEXTURE_ADDRESS_MODE AddressV;
	D3D11_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	unsigned int MaxAnisotropy;
	D3D11_COMPARISON_FUNC ComparisonFunc;
	float BorderColor[4];
	float MinLOD;
	float MaxLOD;
};

/* 8560 */
struct XMA2WAVEFORMATEX
{
	tWAVEFORMATEX wfx;
	unsigned __int16 NumStreams;
	unsigned int ChannelMask;
	unsigned int SamplesEncoded;
	unsigned int BytesPerBlock;
	unsigned int PlayBegin;
	unsigned int PlayLength;
	unsigned int LoopBegin;
	unsigned int LoopLength;
	char LoopCount;
	char EncoderVersion;
	unsigned __int16 BlockCount;
};

/* 8561 */
struct __cppobj ID2D1DrawingStateBlock : ID2D1Resource
{
};

/* 8562 */
struct D2D1_DRAWING_STATE_DESCRIPTION
{
	D2D1_ANTIALIAS_MODE antialiasMode;
	D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
	unsigned __int64 tag1;
	unsigned __int64 tag2;
	D2D_MATRIX_3X2_F transform;
};

/* 8563 */
struct __cppobj IDWriteRenderingParams : IUnknown
{
};

/* 8564 */
struct D2D1_ELLIPSE
{
	D2D_POINT_2F point;
	float radiusX;
	float radiusY;
};

/* 8565 */
struct D2D_RECT_U
{
	unsigned int left;
	unsigned int top;
	unsigned int right;
	unsigned int bottom;
};

/* 8566 */
struct D3D11_TEX2DMS_RTV
{
	unsigned int UnusedField_NothingToDefine;
};

/* 8567 */
struct __cppobj ID3D11Texture1D : ID3D11Resource
{
};

/* 8568 */
struct D3D11_TEXTURE1D_DESC
{
	unsigned int Width;
	unsigned int MipLevels;
	unsigned int ArraySize;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
};

/* 8569 */
struct D3D11_BUFFER_DESC
{
	unsigned int ByteWidth;
	D3D11_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CPUAccessFlags;
	unsigned int MiscFlags;
	unsigned int StructureByteStride;
};

/* 8570 */
struct __cppobj CD3D11_BUFFER_DESC : D3D11_BUFFER_DESC
{
};

/* 8571 */
struct __cppobj ID2D1StrokeStyle : ID2D1Resource
{
};

/* 8572 */
struct __cppobj ID2D1BitmapRenderTarget : ID2D1RenderTarget
{
};

/* 8573 */
struct __cppobj ID2D1Bitmap : ID2D1Resource
{
};

/* 8574 */
struct __cppobj ID3D11Device : IUnknown
{
};

/* 8575 */
struct __cppobj CD3D11_TEXTURE1D_DESC : D3D11_TEXTURE1D_DESC
{
};

/* 8576 */
struct D3D11_INPUT_ELEMENT_DESC
{
	const char *SemanticName;
	unsigned int SemanticIndex;
	DXGI_FORMAT Format;
	unsigned int InputSlot;
	unsigned int AlignedByteOffset;
	D3D11_INPUT_CLASSIFICATION InputSlotClass;
	unsigned int InstanceDataStepRate;
};

/* 8577 */
struct __cppobj CD3D11_RECT : tagRECT
{
};

/* 8578 */
struct __cppobj CD3D11_BOX : D3D11_BOX
{
};

/* 8579 */
struct D3D11_TEX1D_ARRAY_RTV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8580 */
struct __cppobj ID2D1Geometry : ID2D1Resource
{
};

/* 8581 */
struct __cppobj ID2D1PathGeometry : ID2D1Geometry
{
};

/* 8582 */
struct __cppobj ID2D1GeometrySink : ID2D1SimplifiedGeometrySink
{
};

/* 8583 */
struct D3D11_TEX1D_RTV
{
	unsigned int MipSlice;
};

/* 8584 */
struct __cppobj IDWriteTextFormat : IUnknown
{
};

/* 8585 */
struct DWRITE_TRIMMING
{
	DWRITE_TRIMMING_GRANULARITY granularity;
	unsigned int delimiter;
	unsigned int delimiterCount;
};

/* 8586 */
struct __cppobj IDWriteInlineObject : IUnknown
{
};

/* 8587 */
struct DWRITE_STRIKETHROUGH
{
	float width;
	float thickness;
	float offset;
	DWRITE_READING_DIRECTION readingDirection;
	DWRITE_FLOW_DIRECTION flowDirection;
	const wchar_t *localeName;
	DWRITE_MEASURING_MODE measuringMode;
};

/* 8588 */
struct __declspec(align(4)) D3D11_COUNTER_INFO
{
	D3D11_COUNTER LastDeviceDependentCounter;
	unsigned int NumSimultaneousCounters;
	char NumDetectableParallelUnits;
};

/* 8589 */
struct DWRITE_GLYPH_RUN
{
	IDWriteFontFace *fontFace;
	float fontEmSize;
	unsigned int glyphCount;
	const unsigned __int16 *glyphIndices;
	const float *glyphAdvances;
	DWRITE_GLYPH_OFFSET *glyphOffsets;
	int isSideways;
	unsigned int bidiLevel;
};

/* 8590 */
struct __cppobj ID2D1Brush : ID2D1Resource
{
};

/* 8591 */
struct __cppobj ID2D1RadialGradientBrush : ID2D1Brush
{
};

/* 8592 */
struct __cppobj ID2D1GradientStopCollection : ID2D1Resource
{
};

/* 8593 */
struct D3D11_TEX2DMS_ARRAY_RTV
{
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8594 */
struct __cppobj CD3D11_SHADER_RESOURCE_VIEW_DESC : D3D11_SHADER_RESOURCE_VIEW_DESC
{
};

/* 8595 */
struct __cppobj ID3D11Texture3D : ID3D11Resource
{
};

/* 8596 */
struct DWRITE_CLUSTER_METRICS
{
	float width;
	unsigned __int16 length;
	unsigned __int16 canWrapLineAfter : 1;
	unsigned __int16 isWhitespace : 1;
	unsigned __int16 isNewline : 1;
	unsigned __int16 isSoftHyphen : 1;
	unsigned __int16 isRightToLeft : 1;
	unsigned __int16 padding : 11;
};

/* 8597 */
struct __cppobj IWICPalette : IUnknown
{
};

/* 8598 */
struct __cppobj IWICBitmapSource : IUnknown
{
};

/* 8599 */
struct __cppobj _D3DX10_SPRITE
{
	D3DXMATRIX matWorld;
	D3DXVECTOR2 TexCoord;
	D3DXVECTOR2 TexSize;
	D3DXCOLOR ColorModulate;
	ID3D10ShaderResourceView *pTexture;
	unsigned int TextureIndex;
};

/* 8600 */
struct D3DX11_IMAGE_INFO
{
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int ArraySize;
	unsigned int MipLevels;
	unsigned int MiscFlags;
	DXGI_FORMAT Format;
	D3D11_RESOURCE_DIMENSION ResourceDimension;
	D3DX11_IMAGE_FILE_FORMAT ImageFileFormat;
};

/* 8601 */
struct __cppobj ID3DX10Font : IUnknown
{
};

/* 8602 */
struct __cppobj ID3DX10Sprite : IUnknown
{
};

/* 8603 */
struct __cppobj CD3D11_DEPTH_STENCIL_VIEW_DESC : D3D11_DEPTH_STENCIL_VIEW_DESC
{
};

/* 8604 */
struct __cppobj ID2D1HwndRenderTarget : ID2D1RenderTarget
{
};

/* 8605 */
struct __cppobj CD3D11_TEXTURE3D_DESC : D3D11_TEXTURE3D_DESC
{
};

/* 8606 */
struct __cppobj IDWriteTextRenderer : IDWritePixelSnapping
{
};

/* 8607 */
struct __cppobj ID2D1RectangleGeometry : ID2D1Geometry
{
};

/* 8608 */
struct D2D1_HWND_RENDER_TARGET_PROPERTIES
{
	HWND__ *hwnd;
	D2D_SIZE_U pixelSize;
	D2D1_PRESENT_OPTIONS presentOptions;
};

/* 8609 */
struct XAUDIO2_VOICE_STATE
{
	void *pCurrentBufferContext;
	unsigned int BuffersQueued;
	unsigned __int64 SamplesPlayed;
};

/* 8610 */
struct __cppobj IDWriteTextLayout : IDWriteTextFormat
{
};

/* 8611 */
struct DWRITE_OVERHANG_METRICS
{
	float left;
	float top;
	float right;
	float bottom;
};

/* 8612 */
struct __cppobj _D3DX10_TEXTURE_LOAD_INFO
{
	D3D10_BOX *pSrcBox;
	D3D10_BOX *pDstBox;
	unsigned int SrcFirstMip;
	unsigned int DstFirstMip;
	unsigned int NumMips;
	unsigned int SrcFirstElement;
	unsigned int DstFirstElement;
	unsigned int NumElements;
	unsigned int Filter;
	unsigned int MipFilter;
};

/* 8613 */
struct __cppobj D3DX11_IMAGE_LOAD_INFO
{
	unsigned int Width;
	unsigned int Height;
	unsigned int Depth;
	unsigned int FirstMipLevel;
	unsigned int MipLevels;
	D3D11_USAGE Usage;
	unsigned int BindFlags;
	unsigned int CpuAccessFlags;
	unsigned int MiscFlags;
	DXGI_FORMAT Format;
	unsigned int Filter;
	unsigned int MipFilter;
	D3DX11_IMAGE_INFO *pSrcInfo;
};

/* 8614 */
struct __declspec(align(2)) D3D11_SO_DECLARATION_ENTRY
{
	unsigned int Stream;
	const char *SemanticName;
	unsigned int SemanticIndex;
	char StartComponent;
	char ComponentCount;
	char OutputSlot;
};

/* 8615 */
struct D3D11_BUFFER_RTV
{
	$545C80804CFDAA65132ED5A8382CA602 ___u0;
	$44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 8616 */
struct D3D11_TEX2D_RTV
{
	unsigned int MipSlice;
};

/* 8617 */
struct D3D11_TEX2D_ARRAY_RTV
{
	unsigned int MipSlice;
	unsigned int FirstArraySlice;
	unsigned int ArraySize;
};

/* 8618 */
struct D3D11_TEX3D_RTV
{
	unsigned int MipSlice;
	unsigned int FirstWSlice;
	unsigned int WSize;
};

/* 8619 */
union $BCA77F7806FF34FF44E300106BE36872
{
	D3D11_BUFFER_RTV Buffer;
	D3D11_TEX1D_RTV Texture1D;
	D3D11_TEX1D_ARRAY_RTV Texture1DArray;
	D3D11_TEX2D_RTV Texture2D;
	D3D11_TEX2D_ARRAY_RTV Texture2DArray;
	D3D11_TEX2DMS_RTV Texture2DMS;
	D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
	D3D11_TEX3D_RTV Texture3D;
};

/* 8620 */
struct D3D11_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D11_RTV_DIMENSION ViewDimension;
	$BCA77F7806FF34FF44E300106BE36872 ___u2;
};

/* 8621 */
struct D2D1_BRUSH_PROPERTIES
{
	float opacity;
	D2D_MATRIX_3X2_F transform;
};

/* 8622 */
struct __cppobj ID2D1Factory : IUnknown
{
};

/* 8623 */
struct __cppobj ID2D1RoundedRectangleGeometry : ID2D1Geometry
{
};

/* 8624 */
struct __cppobj ID2D1EllipseGeometry : ID2D1Geometry
{
};

/* 8625 */
struct __cppobj ID2D1GeometryGroup : ID2D1Geometry
{
};

/* 8626 */
struct __cppobj ID2D1TransformedGeometry : ID2D1Geometry
{
};

/* 8627 */
struct D2D1_STROKE_STYLE_PROPERTIES
{
	D2D1_CAP_STYLE startCap;
	D2D1_CAP_STYLE endCap;
	D2D1_CAP_STYLE dashCap;
	D2D1_LINE_JOIN lineJoin;
	float miterLimit;
	D2D1_DASH_STYLE dashStyle;
	float dashOffset;
};

/* 8628 */
struct __cppobj IWICBitmap : IWICBitmapSource
{
};

/* 8629 */
struct D2D1_RENDER_TARGET_PROPERTIES
{
	D2D1_RENDER_TARGET_TYPE type;
	D2D1_PIXEL_FORMAT pixelFormat;
	float dpiX;
	float dpiY;
	D2D1_RENDER_TARGET_USAGE usage;
	D2D1_FEATURE_LEVEL minLevel;
};

/* 8630 */
struct __cppobj CD3D11_QUERY_DESC : D3D11_QUERY_DESC
{
};

/* 8631 */
struct __cppobj CD3D11_VIEWPORT : D3D11_VIEWPORT
{
};

/* 8632 */
struct D2D1_BITMAP_BRUSH_PROPERTIES
{
	D2D1_EXTEND_MODE extendModeX;
	D2D1_EXTEND_MODE extendModeY;
	D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
};

/* 8633 */
struct __cppobj IWICBitmapLock : IUnknown
{
};

/* 8634 */
struct __cppobj CD3D11_DEPTH_STENCIL_DESC : D3D11_DEPTH_STENCIL_DESC
{
};

/* 8635 */
struct D2D1_TRIANGLE
{
	D2D_POINT_2F point1;
	D2D_POINT_2F point2;
	D2D_POINT_2F point3;
};

/* 8636 */
struct XAUDIO2_BUFFER
{
	unsigned int Flags;
	unsigned int AudioBytes;
	const char *pAudioData;
	unsigned int PlayBegin;
	unsigned int PlayLength;
	unsigned int LoopBegin;
	unsigned int LoopLength;
	unsigned int LoopCount;
	void *pContext;
};

/* 8637 */
struct __cppobj ID2D1TessellationSink : IUnknown
{
};

/* 8638 */
struct DWRITE_INLINE_OBJECT_METRICS
{
	float width;
	float height;
	float baseline;
	int supportsSideways;
};

/* 8639 */
struct D2D_POINT_2U
{
	unsigned int x;
	unsigned int y;
};

/* 8640 */
struct __cppobj ID2D1SolidColorBrush : ID2D1Brush
{
};

/* 8641 */
struct __cppobj CD3D11_SAMPLER_DESC : D3D11_SAMPLER_DESC
{
};

/* 8642 */
struct D2D1_QUADRATIC_BEZIER_SEGMENT
{
	D2D_POINT_2F point1;
	D2D_POINT_2F point2;
};

/* 8643 */
struct D2D1_ARC_SEGMENT
{
	D2D_POINT_2F point;
	D2D_SIZE_F size;
	float rotationAngle;
	D2D1_SWEEP_DIRECTION sweepDirection;
	D2D1_ARC_SIZE arcSize;
};

/* 8644 */
struct __cppobj ID2D1BitmapBrush : ID2D1Brush
{
};

/* 8645 */
struct D2D1_GRADIENT_STOP
{
	float position;
	_D3DCOLORVALUE color;
};

/* 8646 */
struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
{
	D2D_POINT_2F startPoint;
	D2D_POINT_2F endPoint;
};

/* 8647 */
struct __cppobj ID2D1LinearGradientBrush : ID2D1Brush
{
};

/* 8648 */
struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
{
	D2D_POINT_2F center;
	D2D_POINT_2F gradientOriginOffset;
	float radiusX;
	float radiusY;
};

/* 8649 */
struct __cppobj ID2D1Mesh : ID2D1Resource
{
};

/* 8650 */
struct D2D1_LAYER_PARAMETERS
{
	D2D_RECT_F contentBounds;
	ID2D1Geometry *geometricMask;
	D2D1_ANTIALIAS_MODE maskAntialiasMode;
	D2D_MATRIX_3X2_F maskTransform;
	float opacity;
	ID2D1Brush *opacityBrush;
	D2D1_LAYER_OPTIONS layerOptions;
};

/* 8651 */
struct __cppobj CD3D10_TEXTURE3D_DESC : D3D10_TEXTURE3D_DESC
{
};

/* 8652 */
struct __cppobj CD3D10_TEXTURE2D_DESC : D3D10_TEXTURE2D_DESC
{
};

/* 8653 */
struct D2D1_FACTORY_OPTIONS
{
	D2D1_DEBUG_LEVEL debugLevel;
};

/* 8654 */
struct __cppobj CD3D11_RENDER_TARGET_VIEW_DESC : D3D11_RENDER_TARGET_VIEW_DESC
{
};

/* 8655 */
struct __cppobj CD3D11_TEXTURE2D_DESC : D3D11_TEXTURE2D_DESC
{
};

/* 8656 */
struct __cppobj CD3D10_TEXTURE1D_DESC : D3D10_TEXTURE1D_DESC
{
};

/* 8657 */
struct __cppobj CD3D11_COUNTER_DESC : D3D11_COUNTER_DESC
{
};

/* 8658 */
struct __cppobj CD3D10_BUFFER_DESC : D3D10_BUFFER_DESC
{
};

/* 8659 */
struct __cppobj CD3D11_UNORDERED_ACCESS_VIEW_DESC : D3D11_UNORDERED_ACCESS_VIEW_DESC
{
};

/* 8660 */
struct __cppobj CD3D11_RASTERIZER_DESC : D3D11_RASTERIZER_DESC
{
};

/* 8661 */
typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFYW;

/* 8662 */
typedef tagMSGBOXPARAMSW *PMSGBOXPARAMSW;

/* 8663 */
typedef const void *WFP_ERROR;

/* 8664 */
typedef _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;

/* 8665 */
typedef void (__stdcall *WAITORTIMERCALLBACKFUNC)(void *, char);

/* 8666 */
typedef HDC__ *HDC;

/* 8667 */
typedef int (__cdecl *seek_file_func)(void *, void *, unsigned int, int);

/* 8668 */
typedef tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;

/* 8669 */
typedef char GLcharARB;

/* 8670 */
typedef _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;

/* 8671 */
typedef int (__cdecl *testerror_file_func)(void *, void *);

/* 8672 */
typedef void (__cdecl *ParseTableCallback)(void *);

/* 8673 */
typedef int (__cdecl *SDL_EventFilter)(void *, SDL_Event *);

/* 8674 */
typedef tagEVENTMSG *PEVENTMSGMSG;

/* 8676 */
typedef PPM_THERMAL_POLICY_EVENT *PPPM_THERMAL_POLICY_EVENT;

/* 8677 */
typedef char *LPBYTE;

/* 8678 */
typedef IUnknown *LPUNKNOWN;

/* 8679 */
typedef _DEVICE_OBJECT *PDEVICE_OBJECT;

/* 8680 */
typedef char *pchar_t;

/* 8681 */
typedef _NON_PAGED_DEBUG_INFO *PNON_PAGED_DEBUG_INFO;

/* 8682 */
typedef _TRANSACTION_LIST_ENTRY *PTRANSACTION_LIST_ENTRY;

/* 8683 */
typedef void *(__cdecl *open_file_func)(void *, const char *, int);

/* 8684 */
typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

/* 8685 */
typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFO;

/* 8686 */
typedef sockaddr *PSOCKADDR;

/* 8687 */
typedef _TRANSACTION_NOTIFICATION *PTRANSACTION_NOTIFICATION;

/* 8688 */
typedef tagEMRLINETO *PEMRLINETO;

/* 8689 */
typedef unsigned __int16 stbrp_coord;

/* 8690 */
typedef tagEVENTMSG *PEVENTMSG;

/* 8691 */
typedef HKEY__ **PHKEY;

/* 8692 */
typedef const char *LPCTCH;

/* 8693 */
typedef tagHIGHCONTRASTA *LPHIGHCONTRASTA;

/* 8694 */
typedef int (__cdecl *p_send)(void *, const char *, unsigned int, unsigned int *, t_timeout_ *);

/* 8695 */
typedef unsigned __int16 PROPVAR_PAD2;

/* 8696 */
typedef _RIP_INFO *LPRIP_INFO;

/* 8697 */
typedef tagKERNINGPAIR *LPKERNINGPAIR;

/* 8698 */
typedef _OSVERSIONINFOW *POSVERSIONINFOW;

/* 8699 */
typedef int (__stdcall *TIMEFMT_ENUMPROCEX)(wchar_t *, int);

/* 8700 */
typedef int *LPFXPT16DOT16;

/* 8701 */
typedef tagHIGHCONTRASTW *LPHIGHCONTRASTW;

/* 8702 */
typedef tagRAWHID *PRAWHID;

/* 8703 */
typedef tagEMRPOLYLINE *PEMRPOLYBEZIER;

/* 8704 */
typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);

/* 8705 */
typedef HWINSTA__ *HWINSTA;

/* 8706 */
typedef _OSVERSIONINFOA *POSVERSIONINFOA;

/* 8707 */
typedef lua_TValue *StkId;

/* 8708 */
typedef unsigned __int64 *PDWORDLONG;

/* 8709 */
typedef char (__stdcall *PFNCREATESYMBOLICLINK)(const wchar_t *, const wchar_t *, unsigned int);

/* 8710 */
typedef _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;

/* 8711 */
typedef tagMINMAXINFO *LPMINMAXINFO;

/* 8712 */
typedef _currencyfmtA *LPCURRENCYFMTA;

/* 8713 */
typedef int (__stdcall *PFNGLGETUNIFORMLOCATIONARBPROC)(unsigned int, const char *);

/* 8714 */
typedef ID3DXEffect *LPD3DXEFFECT;

/* 8715 */
typedef tagEMREXTFLOODFILL *PEMREXTFLOODFILL;

/* 8716 */
typedef _FILEMUIINFO *PFILEMUIINFO;

/* 8717 */
typedef _TRIVERTEX *PTRIVERTEX;

/* 8718 */
typedef void (__stdcall *PFNGLGENFRAMEBUFFERSPROC)(int, unsigned int *);

/* 8719 */
typedef tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;

/* 8720 */
typedef void *LOCALHANDLE;

/* 8721 */
typedef int (__stdcall *FARPROC)();

/* 8722 */
typedef _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;

/* 8723 */
typedef DP_Player *value_type;

/* 8724 */
typedef _SYSTEM_INFO *LPSYSTEM_INFO;

/* 8725 */
typedef DLGTEMPLATE *LPDLGTEMPLATEA;

/* 8726 */
typedef _EXCEPTION_RECORD *LPEXCEPTION_RECORD;

/* 8727 */
typedef SDL_AssertState (__cdecl *SDL_AssertionHandler)(SDL_AssertData *, void *);

/* 8728 */
typedef _RTL_DYNAMIC_HASH_TABLE_CONTEXT *PRTL_DYNAMIC_HASH_TABLE_CONTEXT;

/* 8729 */
typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;

/* 8730 */
typedef int (__stdcall *MiniDumpWriteDumpFunc_t)(void *, unsigned int, void *, _MINIDUMP_TYPE, _MINIDUMP_EXCEPTION_INFORMATION *const, _MINIDUMP_USER_STREAM_INFORMATION *const, _MINIDUMP_CALLBACK_INFORMATION *const);

/* 8731 */
typedef POWER_ACTION *PPOWER_ACTION;

/* 8732 */
typedef tagGUITHREADINFO *LPGUITHREADINFO;

/* 8733 */
typedef void (__cdecl *XML_CommentHandler)(void *, const char *);

/* 8734 */
typedef tagHIGHCONTRASTA *LPHIGHCONTRAST;

/* 8735 */
typedef _RTL_RUN_ONCE *PINIT_ONCE;

/* 8736 */
typedef tagGESTURENOTIFYSTRUCT *PGESTURENOTIFYSTRUCT;

/* 8737 */
typedef tagGCP_RESULTSW *LPGCP_RESULTSW;

/* 8738 */
typedef int (__stdcall *LPDIENUMEFFECTSCALLBACKW)(DIEFFECTINFOW *, void *);

/* 8739 */
typedef _UMS_CREATE_THREAD_ATTRIBUTES *PUMS_CREATE_THREAD_ATTRIBUTES;

/* 8740 */
typedef tagHELPINFO *LPHELPINFO;

/* 8741 */
typedef char *PTCH;

/* 8742 */
typedef tagCANDIDATELIST *PCANDIDATELIST;

/* 8743 */
typedef const char *STRSAFE_PCNZCH;

/* 8744 */
typedef _STARTUPINFOA *LPSTARTUPINFOA;

/* 8745 */
typedef _ACCESS_STATE *PACCESS_STATE;

/* 8746 */
typedef unsigned int NOTIFICATION_MASK;

/* 8747 */
typedef unsigned __int64 *PUINT64;

/* 8748 */
typedef tagBITMAP *NPBITMAP;

/* 8749 */
typedef tagBITMAP *LPBITMAP;

/* 8750 */
typedef unsigned int (__cdecl *getpix_func)(char *);

/* 8751 */
typedef char (__stdcall *PREGISTERCLASSNAMEW)(const wchar_t *);

/* 8752 */
typedef _OSVERSIONINFOA *POSVERSIONINFO;

/* 8753 */
typedef void *HGDIOBJ;

/* 8754 */
typedef int (__stdcall *LPDSENUMCALLBACKW)(_GUID *, const wchar_t *, const wchar_t *, void *);

/* 8755 */
typedef tagINPUT *PINPUT;

/* 8756 */
typedef unsigned __int16 stbtt_uint16;

/* 8757 */
typedef char (__stdcall *PFAST_IO_WRITE_COMPRESSED)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);

/* 8758 */
typedef unsigned int uintp;

/* 8759 */
typedef tagRAWKEYBOARD *LPRAWKEYBOARD;

/* 8760 */
typedef PPM_IDLE_STATE_BUCKET_EX *PPPM_IDLE_STATE_BUCKET_EX;

/* 8761 */
typedef unsigned int HAuthTicket;

/* 8762 */
typedef _IP_ADAPTER_PREFIX_XP *PIP_ADAPTER_PREFIX;

/* 8763 */
typedef tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;

/* 8764 */
typedef _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

/* 8765 */
typedef tagAXISINFOA *PAXISINFOA;

/* 8766 */
typedef _OSVERSIONINFOEXA *POSVERSIONINFOEX;

/* 8767 */
typedef tagSCROLLBARINFO *PSCROLLBARINFO;

/* 8768 */
typedef void (*nestegg_log)(nestegg *, unsigned int, const char *, ...);

/* 8769 */
typedef _ENetListNode *ENetListIterator;

/* 8770 */
typedef int intp;

/* 8771 */
typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRIC;

/* 8772 */
typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;

/* 8773 */
typedef unsigned int *PULONG32;

/* 8774 */
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(unsigned int, wchar_t **);

/* 8775 */
typedef unsigned int NET_IFINDEX;

/* 8776 */
typedef _LOOKASIDE_LIST_EX *PLOOKASIDE_LIST_EX;

/* 8777 */
typedef tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;

/* 8778 */
typedef unsigned int ScreenshotHandle;

/* 8779 */
typedef tagEMRTEXT *PEMRTEXT;

/* 8780 */
typedef int *PBOOL;

/* 8781 */
typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFO;

/* 8782 */
typedef HICON__ *HCURSOR;

/* 8783 */
typedef tagPOINT *PPOINT;

/* 8784 */
typedef int HSteamCall;

/* 8785 */
typedef _IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

/* 8786 */
typedef DIEFFECT *LPCDIEFFECT;

/* 8787 */
typedef float FLOAT;

/* 8788 */
typedef int __stdcall FAST_IO_ACQUIRE_FOR_MOD_WRITE(_FILE_OBJECT *, _LARGE_INTEGER *, _ERESOURCE **, _DEVICE_OBJECT *);

/* 8789 */
typedef bool _Bool;

/* 8790 */
typedef _TOKEN_ORIGIN *PTOKEN_ORIGIN;

/* 8791 */
typedef _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;

/* 8792 */
typedef tagVARIANT *LPVARIANT;

/* 8793 */
typedef _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;

/* 8794 */
typedef char uint8;

/* 8795 */
typedef char UINT8;

/* 8796 */
typedef char Uint8;

/* 8797 */
typedef unsigned int SAVEPOINT_ID;

/* 8798 */
typedef char *PINT8;

/* 8799 */
typedef _OSVERSIONINFOEXW *POSVERSIONINFOEXW;

/* 8800 */
typedef char Sint8;

/* 8801 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

/* 8802 */
typedef _RTL_RUN_ONCE *LPINIT_ONCE;

/* 8803 */
typedef _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;

/* 8804 */
typedef tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;

/* 8805 */
typedef _OSVERSIONINFOEXA *POSVERSIONINFOEXA;

/* 8806 */
typedef tagGESTUREINFO *PCGESTUREINFO;

/* 8807 */
typedef tagEMRGRADIENTFILL *PEMRGRADIENTFILL;

/* 8808 */
typedef _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;

/* 8809 */
typedef float *PFLOAT;

/* 8810 */
typedef void *__stdcall ALLOCATE_FUNCTION(_POOL_TYPE, unsigned int, unsigned int);

/* 8811 */
typedef unsigned int UINT;

/* 8812 */
typedef PPM_WMI_PERF_STATES *PPPM_WMI_PERF_STATES;

/* 8813 */
typedef unsigned int *PULONG;

/* 8814 */
typedef tagLOCALESIGNATURE *PLOCALESIGNATURE;

/* 8815 */
typedef _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;

/* 8816 */
typedef int *PINT;

/* 8817 */
typedef _RATE_QUOTA_LIMIT *PRATE_QUOTA_LIMIT;

/* 8818 */
typedef tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;

/* 8819 */
typedef void (__stdcall *PFNGLLINKPROGRAMARBPROC)(unsigned int);

/* 8820 */
typedef char __C_ASSERT__[1];

/* 8821 */
typedef tagEMRPOLYLINE *PEMRPOLYLINE;

/* 8822 */
typedef _FILE_STREAM_INFO *PFILE_STREAM_INFO;

/* 8823 */
typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;

/* 8824 */
typedef tagLC_STRINGS *LPLC_STRINGS;

/* 8825 */
typedef _GLYPHMETRICS *LPGLYPHMETRICS;

/* 8826 */
typedef char __stdcall FAST_IO_CHECK_IF_POSSIBLE(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, char, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 8827 */
typedef tagPOINTS *PPOINTS;

/* 8828 */
typedef _TP_TIMER *PTP_TIMER;

/* 8829 */
typedef HRGN__ *HRGN;

/* 8830 */
typedef unsigned int EXECUTION_STATE;

/* 8831 */
typedef _POINTL *PPOINTL;

/* 8832 */
typedef tagWNDCLASSEXW *PWNDCLASSEXW;

/* 8833 */
typedef tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;

/* 8834 */
typedef _KLOCK_QUEUE_HANDLE *PKLOCK_QUEUE_HANDLE;

/* 8835 */
typedef int (__stdcall *PFNGETTIMEFORMATEX)(const wchar_t *, unsigned int, _SYSTEMTIME *, const wchar_t *, unsigned __int16 *, int);

/* 8836 */
typedef _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;

/* 8837 */
typedef _numberfmtW *LPNUMBERFMTW;

/* 8838 */
typedef void __stdcall DRIVER_CANCEL(_DEVICE_OBJECT *, _IRP *);

/* 8839 */
typedef _PROCESSOR_GROUP_INFO *PPROCESSOR_GROUP_INFO;

/* 8840 */
typedef _FLOAT128 *PFLOAT128;

/* 8841 */
typedef _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;

/* 8842 */
typedef _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;

/* 8843 */
typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA;

/* 8844 */
typedef char __stdcall FAST_IO_MDL_READ_COMPLETE_COMPRESSED(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);

/* 8845 */
typedef int *LPFXPT2DOT30;

/* 8846 */
typedef void (__cdecl *XML_UnparsedEntityDeclHandler)(void *, const char *, const char *, const char *, const char *, const char *);

/* 8847 */
typedef HMONITOR__ *HMONITOR;

/* 8848 */
typedef tagHELPWININFOA *PHELPWININFOA;

/* 8849 */
typedef HBRUSH__ *HBRUSH;

/* 8850 */
typedef _RGNDATAHEADER *PRGNDATAHEADER;

/* 8851 */
typedef tagIMECHARPOSITION *PIMECHARPOSITION;

/* 8852 */
typedef PPM_WMI_LEGACY_PERFSTATE *PPPM_WMI_LEGACY_PERFSTATE;

/* 8853 */
typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUS;

/* 8854 */
typedef _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

/* 8855 */
typedef _FILE_NAME_INFO *PFILE_NAME_INFO;

/* 8856 */
typedef _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;

/* 8857 */
typedef tagMETAHEADER *PMETAHEADER;

/* 8858 */
typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;

/* 8859 */
typedef int LCSCSTYPE;

/* 8860 */
typedef tagHELPWININFOW *PHELPWININFOW;

/* 8861 */
typedef void (__stdcall *PFNGLGETINFOLOGARBPROC)(unsigned int, int, int *, char *);

/* 8862 */
typedef int LCSGAMUTMATCH;

/* 8863 */
typedef tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;

/* 8864 */
typedef const char *KEY;

/* 8865 */
typedef long double GLdouble;

/* 8866 */
typedef int (__stdcall *HOOKPROC)(int, unsigned int, int);

/* 8867 */
typedef char (__stdcall *PFAST_IO_WRITE)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 8868 */
typedef _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;

/* 8869 */
typedef tagEMRFILLRGN *PEMRFILLRGN;

/* 8870 */
typedef HLSURF__ *HLSURF;

/* 8871 */
typedef tagNEWTEXTMETRICA *PNEWTEXTMETRICA;

/* 8872 */
typedef _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;

/* 8873 */
typedef struct _FILE_GET_QUOTA_INFORMATION *PFILE_GET_QUOTA_INFORMATION;

/* 8874 */
typedef unsigned int _U32;

/* 8875 */
typedef _COMMCONFIG *LPCOMMCONFIG;

/* 8876 */
typedef unsigned __int16 PROPVAR_PAD3;

/* 8877 */
typedef _FILE_STANDARD_INFO *PFILE_STANDARD_INFO;

/* 8878 */
typedef _RGNDATA *LPRGNDATA;

/* 8879 */
typedef _RGNDATA *NPRGNDATA;

/* 8880 */
typedef t_timeout_ *p_timeout;

/* 8881 */
typedef tagNEWTEXTMETRICW *PNEWTEXTMETRICW;

/* 8882 */
typedef _JOBOBJECT_JOBSET_INFORMATION *PJOBOBJECT_JOBSET_INFORMATION;

/* 8883 */
typedef _RTL_UMS_SCHEDULER_REASON *PRTL_UMS_SCHEDULER_REASON;

/* 8884 */
typedef void vorbis_info_residue;

/* 8885 */
typedef unsigned int COLORREF;

/* 8886 */
typedef wchar_t *PWCHAR;

/* 8887 */
typedef unsigned int uint_fast16_t;

/* 8888 */
typedef tagMULTIKEYHELPW *PMULTIKEYHELPW;

/* 8889 */
typedef unsigned int SNetSocket_t;

/* 8890 */
typedef tagHELPWININFOA *PHELPWININFO;

/* 8891 */
typedef IDirect3DDevice9 *LPDIRECT3DDEVICE9;

/* 8892 */
typedef tagEMRPIXELFORMAT *PEMRPIXELFORMAT;

/* 8893 */
typedef _currencyfmtA *LPCURRENCYFMT;

/* 8894 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 8895 */
typedef _WGLSWAP *LPWGLSWAP;

/* 8896 */
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);

/* 8897 */
typedef _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;

/* 8898 */
typedef unsigned __int64 _ULonglong;

/* 8899 */
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION *PASSEMBLY_FILE_DETAILED_INFORMATION;

/* 8900 */
typedef int (__stdcall *PFNFLSFREE)(unsigned int);

/* 8901 */
typedef unsigned __int64 *PULONGLONG;

/* 8902 */
typedef tagSAFEARRAY *LPSAFEARRAY;

/* 8903 */
typedef unsigned __int16 uint_least16_t;

/* 8904 */
typedef DLGTEMPLATE *LPDLGTEMPLATE;

/* 8905 */
typedef void (__stdcall *PFREE_FUNCTION)(void *);

/* 8906 */
typedef tagNEWTEXTMETRICA *PNEWTEXTMETRIC;

/* 8907 */
typedef void (__cdecl *XML_EndElementHandler)(void *, const char *);

/* 8908 */
typedef _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

/* 8909 */
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;

/* 8910 */
typedef int (__cdecl *XML_ExternalEntityRefHandler)(XML_ParserStruct *, const char *, const char *, const char *, const char *);

/* 8911 */
typedef void (__stdcall *PFN_SC_NOTIFY_CALLBACK)(void *);

/* 8912 */
typedef tagACTCTXW *PACTCTXW;

/* 8913 */
typedef SET_POWER_SETTING_VALUE *PSET_POWER_SETTING_VALUE;

/* 8914 */
typedef tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;

/* 8915 */
typedef unsigned __int16 *PUSHORT;

/* 8916 */
typedef _ACL *PACL;

/* 8917 */
typedef void __stdcall DRIVER_UNLOAD(_DRIVER_OBJECT *);

/* 8918 */
typedef void (__stdcall *WAITORTIMERCALLBACK)(void *, char);

/* 8919 */
typedef tagTEXTMETRICA *PTEXTMETRICA;

/* 8920 */
typedef tagEMRGDICOMMENT *PEMRGDICOMMENT;

/* 8921 */
typedef int (__stdcall *ICMENUMPROCA)(char *, int);

/* 8922 */
typedef _STARTUPINFOA *LPSTARTUPINFO;

/* 8923 */
typedef tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;

/* 8924 */
typedef char vec8[16];

/* 8925 */
typedef _KSEMAPHORE *PKSEMAPHORE;

/* 8926 */
typedef tagRAWINPUTDEVICE *PCRAWINPUTDEVICE;

/* 8927 */
typedef __int16 int16;

/* 8928 */
typedef __int16 INT16;

/* 8929 */
typedef _STRING *PSTRING;

/* 8930 */
typedef void __stdcall FAST_IO_DETACH_DEVICE(_DEVICE_OBJECT *, _DEVICE_OBJECT *);

/* 8931 */
typedef tagMENUITEMINFOW *LPCMENUITEMINFOW;

/* 8932 */
typedef unsigned int *PSECURITY_INFORMATION;

/* 8933 */
typedef int _off_t;

/* 8934 */
typedef char (__stdcall *PFAST_IO_CHECK_IF_POSSIBLE)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, char, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 8935 */
typedef void *(__cdecl *Alloc_t)(unsigned int);

/* 8936 */
typedef void (__cdecl *XML_CharacterDataHandler)(void *, const char *, int);

/* 8937 */
typedef unsigned int WICColor;

/* 8938 */
typedef tagHANDLETABLE *LPHANDLETABLE;

/* 8939 */
typedef _IO_STACK_LOCATION *PIO_STACK_LOCATION;

/* 8940 */
typedef tagAXISINFOA *PAXISINFO;

/* 8941 */
typedef _INPUT_RECORD *PINPUT_RECORD;

/* 8942 */
typedef tagRAWINPUTDEVICE *PRAWINPUTDEVICE;

/* 8943 */
typedef void (__cdecl *_inconsistency_function)();

/* 8944 */
typedef _EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

/* 8945 */
typedef int LRESULT;

/* 8946 */
typedef char __stdcall FAST_IO_UNLOCK_ALL(_FILE_OBJECT *, struct _EPROCESS *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 8948 */
typedef unsigned int *PKAFFINITY;

/* 8949 */
typedef _DICONFIGUREDEVICESPARAMSW *LPDICONFIGUREDEVICESPARAMSW;

/* 8950 */
typedef tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;

/* 8951 */
typedef _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;

/* 8952 */
typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCT;

/* 8953 */
typedef HRESULT (__stdcall *fnDirectSoundCreate8)(_GUID *, IDirectSound **, IUnknown *);

/* 8954 */
typedef _FILE_ATTRIBUTE_TAG_INFO *PFILE_ATTRIBUTE_TAG_INFO;

/* 8955 */
typedef int GEOID;

/* 8956 */
typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;

/* 8957 */
typedef int (__stdcall *CODEPAGE_ENUMPROCW)(wchar_t *);

/* 8958 */
typedef void *BREAKPAD_HANDLE;

/* 8959 */
typedef unsigned int *PDWORD;

/* 8960 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;

/* 8961 */
typedef LIST_ENTRY32 *PLIST_ENTRY32;

/* 8962 */
typedef void (__stdcall *PFNSETTHREADPOOLWAIT)(_TP_WAIT *, void *, _FILETIME *);

/* 8963 */
typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;

/* 8964 */
typedef unsigned int LCTYPE;

/* 8965 */
typedef wchar_t *PUNZWCH;

/* 8966 */
typedef _NET_BUFFER_LIST_CONTEXT *PNET_BUFFER_LIST_CONTEXT;

/* 8967 */
typedef char *PUNZTCH;

/* 8968 */
typedef void (__stdcall *PFNGLUNIFORMMATRIX2FVPROC)(int, int, char, const float *);

/* 8969 */
typedef unsigned int *PDWORD32;

/* 8970 */
typedef unsigned int uintptr_t;

/* 8971 */
typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(void *, void *);

/* 8972 */
typedef tagRECONVERTSTRING *PRECONVERTSTRING;

/* 8973 */
typedef tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;

/* 8974 */
typedef __int64 LONG64;

/* 8975 */
typedef const char *STRSAFE_LPCSTR;

/* 8976 */
typedef bool (__cdecl *DP_EnumConnectionsCallback)(DP_ProviderID, const char *, const char *, void *);

/* 8977 */
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

/* 8978 */
typedef _tagADDRESS *LPADDRESS;

/* 8979 */
typedef tagENUMTEXTMETRICA *PENUMTEXTMETRIC;

/* 8980 */
typedef tagWINDOWPLACEMENT *LPWINDOWPLACEMENT;

/* 8981 */
typedef _XSAVE_AREA_HEADER *PXSAVE_AREA_HEADER;

/* 8982 */
typedef tagLOGBRUSH *LPPATTERN;

/* 8983 */
typedef unsigned int (__stdcall *PIcmp6SendEcho2)(void *, void *, int (__stdcall *)(), void *, sockaddr_in6 *, sockaddr_in6 *, void *, unsigned __int16, talk_base::ip_option_information *, void *, unsigned int, unsigned int);

/* 8984 */
typedef tagLOGBRUSH *NPPATTERN;

/* 8985 */
typedef void (__stdcall *PKDEFERRED_ROUTINE)(_KDPC *, void *, void *, void *);

/* 8986 */
typedef tagCURSORSHAPE *LPCURSORSHAPE;

/* 8987 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PCRITICAL_SECTION_DEBUG;

/* 8988 */
typedef void (__stdcall *PRTL_UMS_SCHEDULER_ENTRY_POINT)(_RTL_UMS_SCHEDULER_REASON, unsigned int, void *);

/* 8989 */
typedef _RECTL *PRECTL;

/* 8990 */
typedef int (__stdcall *PFNENUMLOCALESPROCEX)(unsigned __int16 *, unsigned int, int);

/* 8991 */
typedef void (__stdcall *WORKERCALLBACKFUNC)(void *);

/* 8992 */
typedef void (__cdecl *XML_StartDoctypeDeclHandler)(void *, const char *, const char *, const char *, int);

/* 8993 */
typedef unsigned int *PEXECUTION_STATE;

/* 8994 */
typedef tagMONITORINFOEXW *LPMONITORINFOEXW;

/* 8995 */
typedef IDirect3DPixelShader9 *LPDIRECT3DPIXELSHADER9;

/* 8996 */
typedef tagEXTLOGFONTA *PEXTLOGFONT;

/* 8997 */
typedef void (__stdcall *PTP_WIN32_IO_CALLBACK)(struct _TP_CALLBACK_INSTANCE *, void *, void *, unsigned int, unsigned int, _TP_IO *);

/* 8998 */
typedef bool (__cdecl *PFNLegacyKeyInstalled)();

/* 8999 */
typedef struct _EPROCESS *PEPROCESS;

/* 9000 */
typedef _DRIVER_EXTENSION *PDRIVER_EXTENSION;

/* 9001 */
typedef char *va_list;

/* 9002 */
typedef void (__stdcall *WINEVENTPROC)(HWINEVENTHOOK__ *, unsigned int, HWND__ *, int, int, unsigned int, unsigned int);

/* 9003 */
typedef char (__stdcall *PFAST_IO_QUERY_BASIC_INFO)(_FILE_OBJECT *, char, _FILE_BASIC_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9004 */
typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

/* 9005 */
typedef _DOCINFOW *LPDOCINFOW;

/* 9006 */
typedef char *PNZCH;

/* 9007 */
typedef unsigned int PartnerId_t;

/* 9008 */
typedef DP_Player *type;

/* 9009 */
typedef void (__cdecl *SDL_WindowsMessageHook)(void *, void *, unsigned int, unsigned __int64, __int64);

/* 9010 */
typedef int (__cdecl *p_recv)(void *, char *, unsigned int, unsigned int *, t_timeout_ *);

/* 9011 */
typedef PROCESSOR_IDLESTATE_POLICY *PPROCESSOR_IDLESTATE_POLICY;

/* 9012 */
typedef _nlsversioninfoex *LPNLSVERSIONINFOEX;

/* 9013 */
typedef void (__cdecl *PFV)();

/* 9014 */
typedef char (__stdcall *PFAST_IO_MDL_READ_COMPLETE_COMPRESSED)(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);

/* 9015 */
typedef __int16 HALF_PTR;

/* 9016 */
typedef tagWINDOWPOS *LPWINDOWPOS;

/* 9017 */
typedef tagRGBTRIPLE *NPRGBTRIPLE;

/* 9018 */
typedef tagRGBTRIPLE *LPRGBTRIPLE;

/* 9019 */
typedef int (__stdcall *PFNLCMAPSTRINGEX)(const wchar_t *, unsigned int, const wchar_t *, int, unsigned __int16 *, int, _nlsversioninfo *, void *, int);

/* 9020 */
typedef tagBITMAPINFOHEADER *PBITMAPINFOHEADER;

/* 9021 */
typedef _FILE_ALLOCATION_INFO *PFILE_ALLOCATION_INFO;

/* 9022 */
typedef SDL_HitTestResult (__cdecl *SDL_HitTest)(SDL_Window *, SDL_Point *, void *);

/* 9023 */
typedef tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;

/* 9024 */
typedef PPM_PERFSTATE_EVENT *PPPM_PERFSTATE_EVENT;

/* 9025 */
typedef tagPOLYTEXTW *PPOLYTEXTW;

/* 9026 */
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, unsigned int, int, int, const char *, int);

/* 9027 */
typedef const wchar_t *LPCUWCHAR;

/* 9028 */
typedef unsigned int RESID;

/* 9029 */
typedef tagSOUNDSENTRYA *LPSOUNDSENTRY;

/* 9030 */
typedef int (__stdcall *PFAST_IO_ACQUIRE_FOR_MOD_WRITE)(_FILE_OBJECT *, _LARGE_INTEGER *, _ERESOURCE **, _DEVICE_OBJECT *);

/* 9031 */
typedef _TOKEN_ELEVATION *PTOKEN_ELEVATION;

/* 9032 */
typedef HACCEL__ *HACCEL;

/* 9033 */
typedef tagICEXYZTRIPLE *LPCIEXYZTRIPLE;

/* 9034 */
typedef unsigned int KF_DEFINITION_FLAGS;

/* 9035 */
typedef tagSIZE *LPSIZE;

/* 9036 */
typedef char _TCHAR;

/* 9037 */
typedef tagLOGFONTA *NPLOGFONTA;

/* 9038 */
typedef tagLOGFONTA *LPLOGFONTA;

/* 9039 */
typedef _LDT_ENTRY *LPLDT_ENTRY;

/* 9040 */
typedef tagABORTPATH *PEMRBEGINPATH;

/* 9041 */
typedef tagABORTPATH *PEMRFLATTENPATH;

/* 9042 */
typedef _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];

/* 9043 */
typedef const char *PCZZSTR;

/* 9044 */
typedef void *PUMS_COMPLETION_LIST;

/* 9045 */
typedef void *XmppIqCookie;

/* 9046 */
typedef int (__stdcall *PFNISVALIDLOCALENAME)(const wchar_t *);

/* 9047 */
typedef _IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

/* 9048 */
typedef tagABORTPATH *PEMRWIDENPATH;

/* 9049 */
typedef _TP_TIMER *(__stdcall *PFNCREATETHREADPOOLTIMER)(void (__stdcall *)(struct _TP_CALLBACK_INSTANCE *, void *, _TP_TIMER *), void *, _TP_CALLBACK_ENVIRON_V1 *);

/* 9050 */
typedef _IMAGE_SYMBOL *PIMAGE_SYMBOL;

/* 9051 */
typedef _FILE_COMPRESSION_INFO *PFILE_COMPRESSION_INFO;

/* 9052 */
typedef _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;

/* 9053 */
typedef int (__stdcall *PFNGETLOCALEINFOEX)(const wchar_t *, unsigned int, unsigned __int16 *, int);

/* 9054 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 9055 */
typedef _TRANSACTIONMANAGER_OLDEST_INFORMATION *PTRANSACTIONMANAGER_OLDEST_INFORMATION;

/* 9056 */
typedef ID3DXInclude *LPD3DXINCLUDE;

/* 9057 */
typedef POWER_ACTION_POLICY *PPOWER_ACTION_POLICY;

/* 9058 */
typedef tagWCRANGE *LPWCRANGE;

/* 9059 */
typedef void *(__cdecl *AudioOpenFunc)(char *, char *);

/* 9060 */
typedef tagRAWINPUTDEVICE *LPRAWINPUTDEVICE;

/* 9061 */
typedef tagSIZE *LPSIZEL;

/* 9062 */
typedef void __stdcall KRUNDOWN_ROUTINE(_KAPC *);

/* 9063 */
typedef _PROCESSOR_POWER_POLICY_INFO *PPROCESSOR_POWER_POLICY_INFO;

/* 9064 */
typedef unsigned int (__stdcall *PRTL_RUN_ONCE_INIT_FN)(_RTL_RUN_ONCE *, void *, void **);

/* 9065 */
typedef char (__stdcall *PFAST_IO_MDL_READ)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9066 */
typedef tagEMRINVERTRGN *PEMRINVERTRGN;

/* 9067 */
typedef char ALCchar;

/* 9068 */
typedef _GUID *LPCGUID;

/* 9069 */
typedef const void *const_void_pointer;

/* 9070 */
typedef DIEFFECTINFOW *LPDIEFFECTINFOW;

/* 9071 */
typedef unsigned int NET_IF_COMPARTMENT_ID;

/* 9072 */
typedef unsigned int *LPCOLORREF;

/* 9073 */
typedef PROCESSOR_IDLESTATE_INFO *PPROCESSOR_IDLESTATE_INFO;

/* 9074 */
typedef tagMENUBARINFO *LPMENUBARINFO;

/* 9075 */
typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDV;

/* 9076 */
typedef void (__stdcall *MSGBOXCALLBACK)(tagHELPINFO *);

/* 9077 */
typedef _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;

/* 9078 */
typedef int FXPT16DOT16;

/* 9079 */
typedef unsigned int z_size_t;

/* 9080 */
typedef tagRGBTRIPLE *PRGBTRIPLE;

/* 9081 */
typedef void DispatcherContext;

/* 9082 */
typedef tagWINDOWPOS *PWINDOWPOS;

/* 9083 */
typedef int (__stdcall *PGET_MODULE_HANDLE_EXA)(unsigned int, const char *, HINSTANCE__ **);

/* 9084 */
typedef void *(__stdcall *PIcmpCreateFile)();

/* 9085 */
typedef char BYTE;

/* 9086 */
typedef char byte;

/* 9087 */
typedef void (__stdcall *LPFIBER_START_ROUTINE)(void *);

/* 9088 */
typedef void (__stdcall *PFNGLDELETEFRAMEBUFFERSEXTPROC)(int, const unsigned int *);

/* 9089 */
typedef void (__cdecl *rotate_wxh_func)(const char *, int, char *, int, int, int);

/* 9090 */
typedef SHELLHOOKINFO *LPSHELLHOOKINFO;

/* 9091 */
typedef void (__cdecl *rotate_wx8_func)(const char *, int, char *, int, int);

/* 9092 */
typedef _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

/* 9093 */
typedef _KEVENT *PRKEVENT;

/* 9094 */
typedef _RTL_SRWLOCK *PRTL_SRWLOCK;

/* 9095 */
typedef tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX;

/* 9096 */
typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 9097 */
typedef tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;

/* 9098 */
typedef t_opt *p_opt;

/* 9099 */
typedef int lua_Integer;

/* 9100 */
typedef HPEN__ *HPEN;

/* 9101 */
typedef unsigned int *PSID_HASH_ENTRY;

/* 9102 */
typedef _IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;

/* 9103 */
typedef tagTITLEBARINFOEX *PTITLEBARINFOEX;

/* 9104 */
typedef _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;

/* 9106 */
typedef _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS;

/* 9107 */
typedef _TRANSACTIONMANAGER_RECOVERY_INFORMATION *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

/* 9108 */
typedef void (__stdcall *PFNGLSHADERSOURCEPROC)(unsigned int, int, const char *const *, const int *);

/* 9109 */
typedef void (__stdcall *PFNGLACTIVETEXTUREPROC)(unsigned int);

/* 9110 */
typedef unsigned int uint32;

/* 9111 */
typedef unsigned int UINT32;

/* 9112 */
typedef unsigned int Uint32;

/* 9113 */
typedef tagMOUSEINPUT *PMOUSEINPUT;

/* 9114 */
typedef BITMAPV4HEADER *PBITMAPV4HEADER;

/* 9115 */
typedef BITMAPV5HEADER *PBITMAPV5HEADER;

/* 9116 */
typedef int *PINT32;

/* 9117 */
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURE2DPROC)(unsigned int, unsigned int, unsigned int, unsigned int, int);

/* 9118 */
typedef _SERVICE_PRESHUTDOWN_INFO *LPSERVICE_PRESHUTDOWN_INFO;

/* 9119 */
typedef int Sint32;

/* 9120 */
typedef _CERT_EXTENSION *PCERT_EXTENSION;

/* 9121 */
typedef tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;

/* 9122 */
typedef void (__stdcall *PFNGLUNIFORM4FVPROC)(int, int, const float *);

/* 9123 */
typedef ISteamUser *(__cdecl *PFNSTEAM_USER)();

/* 9124 */
typedef IDirect3DTexture9 *LPDIRECT3DTEXTURE9;

/* 9125 */
typedef void (__stdcall *PFNGLUNIFORM2FVPROC)(int, int, const float *);

/* 9126 */
typedef int (__stdcall *EDITWORDBREAKPROC)(char *, int, int, int);

/* 9127 */
typedef t_tcp_ *p_tcp;

/* 9128 */
typedef int (__stdcall *ENHMFENUMPROC)(HDC__ *, tagHANDLETABLE *, tagENHMETARECORD *, int, int);

/* 9129 */
typedef void *EGLDisplay;

/* 9130 */
typedef tagEMRSELECTCLIPPATH *PEMRSETICMMODE;

/* 9131 */
typedef _VIDEOPARAMETERS *LPVIDEOPARAMETERS;

/* 9132 */
typedef _WSANETWORKEVENTS *LPWSANETWORKEVENTS;

/* 9133 */
typedef void (__stdcall *PKKERNEL_ROUTINE)(_KAPC *, void (__stdcall **)(void *, void *, void *), void **, void **, void **);

/* 9134 */
typedef int (__stdcall *MFENUMPROC)(HDC__ *, tagHANDLETABLE *, tagMETARECORD *, int, int);

/* 9135 */
typedef const wchar_t *LPCUWSTR;

/* 9136 */
typedef tagCWPSTRUCT *PCWPSTRUCT;

/* 9137 */
typedef PPM_IDLE_STATE_ACCOUNTING *PPPM_IDLE_STATE_ACCOUNTING;

/* 9138 */
typedef const char *LPCUTSTR;

/* 9139 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;

/* 9140 */
typedef tagEMRPOLYLINE16 *PEMRPOLYGON16;

/* 9141 */
typedef PPM_WMI_IDLE_STATES_EX *PPPM_WMI_IDLE_STATES_EX;

/* 9142 */
typedef unsigned int AccountID_t;

/* 9143 */
typedef void (__stdcall *PFNWAITFORTHREADPOOLTIMERCALLBACKS)(_TP_TIMER *, int);

/* 9144 */
typedef void (__stdcall *LINEDDAPROC)(int, int, int);

/* 9145 */
typedef _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;

/* 9146 */
typedef void (__cdecl *SDL_TraversalFunction)(SDL_ShapeTree *, void *);

/* 9147 */
typedef tagFONTSIGNATURE *PFONTSIGNATURE;

/* 9148 */
typedef int (__cdecl *INPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 9149 */
typedef const char **PZPCSTR;

/* 9150 */
typedef int (__stdcall *DATEFMT_ENUMPROCA)(char *);

/* 9151 */
typedef unsigned int (__stdcall *PFNGLCREATEPROGRAMOBJECTARBPROC)();

/* 9152 */
typedef _TOKEN_TYPE *PTOKEN_TYPE;

/* 9153 */
typedef unsigned int (__cdecl *write_file_func)(void *, void *, const void *, unsigned int);

/* 9154 */
typedef _ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

/* 9155 */
typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;

/* 9156 */
typedef int (__stdcall *DATEFMT_ENUMPROCW)(wchar_t *);

/* 9157 */
typedef int (__stdcall *PDRIVER_ADD_DEVICE)(_DRIVER_OBJECT *, _DEVICE_OBJECT *);

/* 9158 */
typedef tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;

/* 9159 */
typedef _FILE_ID_BOTH_DIR_INFO *PFILE_ID_BOTH_DIR_INFO;

/* 9160 */
typedef unsigned int *PUUCSSTR;

/* 9161 */
typedef const wchar_t *LPCWCH;

/* 9162 */
typedef unsigned __int16 PROPVAR_PAD1;

/* 9163 */
typedef _FILE_NETWORK_OPEN_INFORMATION *PFILE_NETWORK_OPEN_INFORMATION;

/* 9164 */
typedef tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;

/* 9165 */
typedef void (__cdecl *DrawLineFunc)(SDL_Surface *, int, int, int, int, unsigned int, SDL_bool);

/* 9166 */
typedef tagSOUNDSENTRYA *LPSOUNDSENTRYA;

/* 9167 */
typedef _RTL_UMS_THREAD_INFO_CLASS *PUMS_THREAD_INFO_CLASS;

/* 9168 */
typedef unsigned int __cdecl QUERYHANDLER(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);

/* 9169 */
typedef _SERVICE_TRIGGER *PSERVICE_TRIGGER;

/* 9170 */
typedef int DISPID;

/* 9171 */
typedef char __stdcall FAST_IO_WRITE_COMPRESSED(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);

/* 9172 */
typedef char (__stdcall *PFAST_IO_READ_COMPRESSED)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);

/* 9173 */
typedef void **PHPOWERNOTIFY;

/* 9174 */
typedef void (__stdcall *PIO_DPC_ROUTINE)(_KDPC *, _DEVICE_OBJECT *, _IRP *, void *);

/* 9175 */
typedef char *PUCHAR;

/* 9176 */
typedef unsigned int _Uint32t;

/* 9177 */
typedef tagLOGFONTA *NPLOGFONT;

/* 9178 */
typedef tagLOGFONTA *LPLOGFONT;

/* 9179 */
typedef void (__stdcall *PIO_APC_ROUTINE)(void *, _IO_STATUS_BLOCK *, unsigned int);

/* 9180 */
typedef tagRID_DEVICE_INFO_KEYBOARD *PRID_DEVICE_INFO_KEYBOARD;

/* 9181 */
typedef IDirect3DVertexDeclaration9 *LPDIRECT3DVERTEXDECLARATION9;

/* 9182 */
typedef wchar_t *STRSAFE_LPWSTR;

/* 9183 */
typedef tagEXTLOGPEN *LPEXTLOGPEN;

/* 9184 */
typedef char tmbchar;

/* 9185 */
typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

/* 9186 */
typedef tagEXTLOGPEN *NPEXTLOGPEN;

/* 9187 */
typedef unsigned __int64 DWORDLONG;

/* 9188 */
typedef DP_Player **reference;

/* 9189 */
typedef int (__stdcall *LOCALE_ENUMPROCA)(char *);

/* 9190 */
typedef void (__stdcall *PFNGLUNIFORM1IPROC)(int, int);

/* 9191 */
typedef _WSABUF *LPWSABUF;

/* 9192 */
typedef tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;

/* 9193 */
typedef _WOW64_DESCRIPTOR_TABLE_ENTRY *PWOW64_DESCRIPTOR_TABLE_ENTRY;

/* 9194 */
typedef _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;

/* 9195 */
typedef unsigned __int64 PublishedFileUpdateHandle_t;

/* 9196 */
typedef _CERT_CONTEXT *PCCERT_CONTEXT;

/* 9197 */
typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCT;

/* 9198 */
typedef _ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;

/* 9199 */
typedef _GROUP_RELATIONSHIP *PGROUP_RELATIONSHIP;

/* 9200 */
typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

/* 9201 */
typedef int LPARAM;

/* 9202 */
typedef const void *LPCVOID;

/* 9203 */
typedef unsigned int (__cdecl *PQUERYHANDLER)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);

/* 9204 */
typedef pvalueA *PPVALUEA;

/* 9205 */
typedef wchar_t *PWCH;

/* 9206 */
typedef void (__cdecl *central_directory_func)(void *, const char *, unsigned int, unsigned int);

/* 9207 */
typedef int *LPINT;

/* 9208 */
typedef _SYSTEMTIME *LPSYSTEMTIME;

/* 9209 */
typedef _IP_ADAPTER_PREFIX_XP *PIP_ADAPTER_PREFIX_XP;

/* 9210 */
typedef void (__stdcall *PFNFLUSHPROCESSWRITEBUFFERS)();

/* 9211 */
typedef tagPAINTSTRUCT *NPPAINTSTRUCT;

/* 9212 */
typedef void (__stdcall *PFNGLDELETEPROGRAMPROC)(unsigned int);

/* 9213 */
typedef tagPAINTSTRUCT *LPPAINTSTRUCT;

/* 9214 */
typedef _SERVICE_FAILURE_ACTIONS_FLAG *LPSERVICE_FAILURE_ACTIONS_FLAG;

/* 9215 */
typedef unsigned int WPARAM;

/* 9216 */
typedef __int64 _Q64;

/* 9217 */
typedef tagPOLYTEXTW *LPPOLYTEXTW;

/* 9218 */
typedef const wchar_t *STRSAFE_LPCWSTR;

/* 9219 */
typedef tagPOLYTEXTW *NPPOLYTEXTW;

/* 9220 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;

/* 9221 */
typedef SYSTEM_POWER_CAPABILITIES *PSYSTEM_POWER_CAPABILITIES;

/* 9222 */
typedef int int32;

/* 9223 */
typedef int INT32;

/* 9224 */
typedef void (__stdcall *PKRUNDOWN_ROUTINE)(_KAPC *);

/* 9225 */
typedef int (__stdcall *LPDIENUMCREATEDEFFECTOBJECTSCALLBACK)(IDirectInputEffect *, void *);

/* 9226 */
typedef _KDHELP *PKDHELP;

/* 9227 */
typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;

/* 9228 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFO;

/* 9229 */
typedef char __stdcall FAST_IO_QUERY_OPEN(_IRP *, _FILE_NETWORK_OPEN_INFORMATION *, _DEVICE_OBJECT *);

/* 9230 */
typedef _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;

/* 9231 */
typedef unsigned __int64 UGCUpdateHandle_t;

/* 9232 */
typedef unsigned int GEOCLASS;

/* 9233 */
typedef tagPOLYTEXTA *NPPOLYTEXTA;

/* 9234 */
typedef char (__stdcall *PFAST_IO_MDL_READ_COMPLETE)(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);

/* 9235 */
typedef DIFILEEFFECT *LPCDIFILEEFFECT;

/* 9236 */
typedef tagPOLYTEXTA *LPPOLYTEXTA;

/* 9237 */
typedef void (__cdecl *PFNSTEAMAPI_SHUTDOWN)();

/* 9238 */
typedef tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;

/* 9240 */
typedef int __stdcall FAST_IO_ACQUIRE_FOR_CCFLUSH(_FILE_OBJECT *, _DEVICE_OBJECT *);

/* 9241 */
typedef _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;

/* 9242 */
typedef value_entA *PVALENTA;

/* 9243 */
typedef tagEMRARC *PEMRPIE;

/* 9244 */
typedef _ICONINFOEXA *PICONINFOEXA;

/* 9245 */
typedef tagAXESLISTW *LPAXESLISTW;

/* 9246 */
typedef _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

/* 9247 */
typedef _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;

/* 9248 */
typedef unsigned int z_uLong;

/* 9249 */
typedef unsigned int MMVERSION;

/* 9250 */
typedef tagRGBQUAD *LPRGBQUAD;

/* 9251 */
typedef void *(__stdcall *PALLOCATE_FUNCTION)(_POOL_TYPE, unsigned int, unsigned int);

/* 9252 */
typedef IDirect3DSurface9 *LPDIRECT3DSURFACE9;

/* 9253 */
typedef tagIMECHARPOSITION *NPIMECHARPOSITION;

/* 9254 */
typedef _RTL_RUN_ONCE *PRTL_RUN_ONCE;

/* 9255 */
typedef unsigned __int64 uint_least64_t;

/* 9256 */
typedef tagSCROLLBARINFO *LPSCROLLBARINFO;

/* 9257 */
typedef tagIMECHARPOSITION *LPIMECHARPOSITION;

/* 9258 */
typedef _SYSTEM_ALARM_CALLBACK_OBJECT_ACE *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;

/* 9259 */
typedef _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;

/* 9260 */
typedef tagAXESLISTA *LPAXESLISTA;

/* 9261 */
typedef unsigned int uint_fast32_t;

/* 9262 */
typedef void (__stdcall *PFNGLCOMPILESHADERPROC)(unsigned int);

/* 9263 */
typedef char (__stdcall *PFAST_IO_DEVICE_CONTROL)(_FILE_OBJECT *, char, void *, unsigned int, void *, unsigned int, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9264 */
typedef unsigned __int64 TxnID_t;

/* 9265 */
typedef void (__stdcall *PFNGLATTACHSHADERPROC)(unsigned int, unsigned int);

/* 9266 */
typedef unsigned int (__stdcall *PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(unsigned int);

/* 9267 */
typedef int (__stdcall *DESKTOPENUMPROC)(char *, int);

/* 9268 */
typedef int NTSTATUS;

/* 9269 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;

/* 9270 */
typedef void (__stdcall *PAPCFUNC)(unsigned int);

/* 9271 */
typedef _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

/* 9272 */
typedef int (__stdcall *NEARPROC)();

/* 9273 */
typedef char *PBOOLEAN;

/* 9274 */
typedef void __stdcall DRIVER_STARTIO(_DEVICE_OBJECT *, _IRP *);

/* 9275 */
typedef _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;

/* 9276 */
typedef tagPOLYTEXTA *NPPOLYTEXT;

/* 9277 */
typedef int SDL_dummy_enum[1];

/* 9278 */
typedef tagDIBSECTION *LPDIBSECTION;

/* 9279 */
typedef tagPOLYTEXTA *LPPOLYTEXT;

/* 9280 */
typedef int HSteamPipe;

/* 9281 */
typedef tagPOINTFX *LPPOINTFX;

/* 9282 */
typedef PPM_IDLE_ACCOUNTING_EX *PPPM_IDLE_ACCOUNTING_EX;

/* 9283 */
typedef int (__stdcall *EDITWORDBREAKPROCA)(char *, int, int, int);

/* 9284 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOW *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

/* 9285 */
typedef tagCWPSTRUCT *NPCWPSTRUCT;

/* 9286 */
typedef void *SC_LOCK;

/* 9287 */
typedef tagCWPSTRUCT *LPCWPSTRUCT;

/* 9288 */
typedef ID3DX10Sprite *LPD3DX10SPRITE;

/* 9289 */
typedef tagICONMETRICSW *LPICONMETRICSW;

/* 9290 */
typedef int __stdcall IO_COMPLETION_ROUTINE(_DEVICE_OBJECT *, _IRP *, void *);

/* 9291 */
typedef void *AudioFile;

/* 9292 */
typedef tagLOGPEN *PLOGPEN;

/* 9293 */
typedef void __cdecl stbi_write_func(void *, void *, int);

/* 9294 */
typedef int (__stdcall *PFNDACOMPARECONST)(const void *, const void *, int);

/* 9295 */
typedef unsigned int *PUUCSCHAR;

/* 9296 */
typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;

/* 9297 */
typedef _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;

/* 9298 */
typedef _GRADIENT_RECT *PGRADIENT_RECT;

/* 9299 */
typedef tagACCESSTIMEOUT *LPACCESSTIMEOUT;

/* 9300 */
typedef int ALenum;

/* 9301 */
typedef _WOW64_LDT_ENTRY *PWOW64_LDT_ENTRY;

/* 9302 */
typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;

/* 9303 */
typedef unsigned int GLenum;

/* 9304 */
typedef unsigned int *LPUINT;

/* 9305 */
typedef tagAXESLISTA *LPAXESLIST;

/* 9306 */
typedef __int64 LONGLONG;

/* 9307 */
typedef _DOCINFOA *LPDOCINFOA;

/* 9308 */
typedef int (__stdcall *DRAWSTATEPROC)(HDC__ *, int, unsigned int, int, int);

/* 9309 */
typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;

/* 9310 */
typedef _NPI_MODULEID *PNPI_MODULEID;

/* 9311 */
typedef _TOKEN_GROUPS_AND_PRIVILEGES *PTOKEN_GROUPS_AND_PRIVILEGES;

/* 9312 */
typedef void (__cdecl *PFNLegacyKeyRegistration)(const char *, const char *);

/* 9313 */
typedef ISteamRemoteStorage *(__cdecl *PFNSTEAM_REMOTE_STORAGE)();

/* 9314 */
typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;

/* 9315 */
typedef _TRANSACTION_PROPERTIES_INFORMATION *PTRANSACTION_PROPERTIES_INFORMATION;

/* 9316 */
typedef sockaddr *LPSOCKADDR;

/* 9317 */
typedef WAV_Header *WAV_Header_t;

/* 9318 */
typedef int (__stdcall *PDRIVER_DISPATCH)(_DEVICE_OBJECT *, _IRP *);

/* 9319 */
typedef char *PZZSTR;

/* 9320 */
typedef _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

/* 9321 */
typedef _TAPE_GET_POSITION *PTAPE_GET_POSITION;

/* 9322 */
typedef unsigned int (__stdcall *LPFNDEVMODE)(HWND__ *, HINSTANCE__ *, _devicemodeA *, char *, char *, _devicemodeA *, char *, unsigned int);

/* 9323 */
typedef tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;

/* 9324 */
typedef int __stdcall FAST_IO_RELEASE_FOR_MOD_WRITE(_FILE_OBJECT *, _ERESOURCE *, _DEVICE_OBJECT *);

/* 9325 */
typedef tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;

/* 9326 */
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

/* 9327 */
typedef tagPOLYTEXTA *PPOLYTEXTA;

/* 9328 */
typedef unsigned __int16 ADDRESS_FAMILY;

/* 9329 */
typedef tagHANDLETABLE *PHANDLETABLE;

/* 9330 */
typedef tagLOGPEN *NPLOGPEN;

/* 9331 */
typedef tagLOGPEN *LPLOGPEN;

/* 9332 */
typedef void (__stdcall *PDRIVER_STARTIO)(_DEVICE_OBJECT *, _IRP *);

/* 9333 */
typedef int (__cdecl *SCANNER)(encoding *, const char *, const char *, const char **);

/* 9334 */
typedef int (__stdcall *WNDENUMPROC)(HWND__ *, int);

/* 9335 */
typedef _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;

/* 9336 */
typedef _STARTUPINFOEXA *LPSTARTUPINFOEX;

/* 9337 */
typedef HWAVEIN__ *HWAVEIN;

/* 9338 */
typedef int (__stdcall *PGENRANDOM)(void *, unsigned int);

/* 9339 */
typedef tagSTICKYKEYS *LPSTICKYKEYS;

/* 9340 */
typedef int (__stdcall *LPDIENUMDEVICEOBJECTSCALLBACKW)(DIDEVICEOBJECTINSTANCEW *, void *);

/* 9341 */
typedef void (__cdecl *SDL_AudioFilter)(SDL_AudioCVT *, unsigned __int16);

/* 9342 */
typedef tagLOGFONTW *LPLOGFONTW;

/* 9343 */
typedef tagLOGFONTA *PLOGFONT;

/* 9344 */
typedef tagLOGFONTW *NPLOGFONTW;

/* 9345 */
typedef unsigned int (__stdcall *XInputGetBatteryInformation_t)(unsigned int, char, XINPUT_BATTERY_INFORMATION_EX *);

/* 9346 */
typedef tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;

/* 9347 */
typedef _OWNER_ENTRY *POWNER_ENTRY;

/* 9348 */
typedef char stbi_uc;

/* 9349 */
typedef DIENVELOPE *LPDIENVELOPE;

/* 9350 */
typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;

/* 9351 */
typedef _POWER_REQUEST_TYPE *PPOWER_REQUEST_TYPE;

/* 9352 */
typedef _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;

/* 9353 */
typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMS;

/* 9354 */
typedef __int64 *PLONGLONG;

/* 9355 */
typedef tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;

/* 9356 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;

/* 9357 */
typedef char SEC_CHAR;

/* 9358 */
typedef unsigned __int64 ULONGLONG;

/* 9359 */
typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 9360 */
typedef void (__cdecl *_purecall_handler)();

/* 9361 */
typedef void *(__stdcall *PFNFLSGETVALUE)(unsigned int);

/* 9362 */
typedef _SID_AND_ATTRIBUTES (*PSID_AND_ATTRIBUTES_ARRAY)[1];

/* 9363 */
typedef unsigned int IF_INDEX;

/* 9364 */
typedef __int64 _Longlong;

/* 9365 */
typedef DIDEVICEINSTANCEW *LPCDIDEVICEINSTANCEW;

/* 9366 */
typedef int (__stdcall *CALINFO_ENUMPROCA)(char *);

/* 9367 */
typedef _TRANSACTION_BASIC_INFORMATION *PTRANSACTION_BASIC_INFORMATION;

/* 9368 */
typedef tagEVENTMSG *NPEVENTMSG;

/* 9369 */
typedef tagMSG *PMSG;

/* 9370 */
typedef _GUID *LPIID;

/* 9371 */
typedef tagLOGFONTW *PLOGFONTW;

/* 9372 */
typedef tagEVENTMSG *LPEVENTMSG;

/* 9373 */
typedef __int64 streamsize;

/* 9374 */
typedef ip_msfilter *PIP_MSFILTER;

/* 9375 */
typedef _NUMA_NODE_RELATIONSHIP *PNUMA_NODE_RELATIONSHIP;

/* 9376 */
typedef unsigned int HANDLE_PTR;

/* 9377 */
typedef _KCRM_MARSHAL_HEADER *PKCRM_MARSHAL_HEADER;

/* 9378 */
typedef _TRANSACTIONMANAGER_BASIC_INFORMATION *PTRANSACTIONMANAGER_BASIC_INFORMATION;

/* 9379 */
typedef char *LPCH;

/* 9380 */
typedef void vorbis_look_floor;

/* 9381 */
typedef _CREATEFILE2_EXTENDED_PARAMETERS *LPCREATEFILE2_EXTENDED_PARAMETERS;

/* 9382 */
typedef _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;

/* 9383 */
typedef tagLOGFONTA *PLOGFONTA;

/* 9384 */
typedef tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;

/* 9385 */
typedef int (__stdcall *CALINFO_ENUMPROCW)(wchar_t *);

/* 9386 */
typedef _IMAGELIST *HIMAGELIST;

/* 9387 */
typedef void **PHDEVNOTIFY;

/* 9388 */
typedef void (__stdcall *PFNCLOSETHREADPOOLTIMER)(_TP_TIMER *);

/* 9389 */
typedef tagSIZE *PSIZE;

/* 9390 */
typedef unsigned int SECURITY_INFORMATION;

/* 9391 */
typedef int (__cdecl *_LIBM_HANDLE_MATHERR_D)(_exception *);

/* 9392 */
typedef void *HGLOBAL;

/* 9393 */
typedef void **LPHANDLE;

/* 9394 */
typedef unsigned int dev_t;

/* 9395 */
typedef void (__stdcall *PDRIVER_CANCEL)(_DEVICE_OBJECT *, _IRP *);

/* 9396 */
typedef void (__cdecl *XML_SkippedEntityHandler)(void *, const char *, int);

/* 9397 */
typedef tagFONTSIGNATURE *LPFONTSIGNATURE;

/* 9398 */
typedef void __stdcall FREE_FUNCTION_EX(void *, _LOOKASIDE_LIST_EX *);

/* 9399 */
typedef _IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

/* 9400 */
typedef unsigned __int16 wint_t;

/* 9401 */
typedef _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

/* 9402 */
typedef tagEMRARC *PEMRARCTO;

/* 9403 */
typedef int (__stdcall *PGET_MODULE_HANDLE_EXW)(unsigned int, const wchar_t *, HINSTANCE__ **);

/* 9404 */
typedef _WOW64_CONTEXT *PWOW64_CONTEXT;

/* 9405 */
typedef tagEXTLOGFONTA *LPEXTLOGFONT;

/* 9406 */
typedef _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;

/* 9407 */
typedef void **SPHANDLE;

/* 9408 */
typedef tagEXTLOGFONTA *NPEXTLOGFONT;

/* 9409 */
typedef IDirectInputDevice8W *LPDIRECTINPUTDEVICE8W;

/* 9410 */
typedef _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;

/* 9411 */
typedef char GLubyte;

/* 9412 */
typedef void *(__stdcall *PFNCREATESEMAPHOREEXW)(_SECURITY_ATTRIBUTES *, int, int, const wchar_t *, unsigned int, unsigned int);

/* 9413 */
typedef tagEMRSELECTOBJECT *PEMRDELETEOBJECT;

/* 9414 */
typedef tagGLYPHSET *PGLYPHSET;

/* 9415 */
typedef _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;

/* 9416 */
typedef void *__ptr64 PVOID64;

/* 9417 */
typedef char stbtt_uint8;

/* 9418 */
typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRIC;

/* 9419 */
typedef _SE_ACCESS_REPLY *PSE_ACCESS_REPLY;

/* 9420 */
typedef char *SockOptArg;

/* 9421 */
typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;

/* 9422 */
typedef struct _KTHREAD *PKTHREAD;

/* 9423 */
typedef unsigned int ACCESS_REASON;

/* 9424 */
typedef void (__cdecl *SDL_HintCallback)(void *, const char *, const char *, const char *);

/* 9425 */
typedef void (__stdcall *TIMERPROC)(HWND__ *, unsigned int, unsigned int, unsigned int);

/* 9426 */
typedef LIST_ENTRY64 *PLIST_ENTRY64;

/* 9427 */
typedef unsigned __int64 D2D1_TAG;

/* 9428 */
typedef tagEMREXTCREATEPEN *PEMREXTCREATEPEN;

/* 9429 */
typedef char XML_LChar;

/* 9430 */
typedef tagEMRCREATEPALETTE *PEMRCREATEPALETTE;

/* 9431 */
typedef unsigned int IFTYPE;

/* 9432 */
typedef void (__cdecl *SteamAPI_PostAPIResultInProcess_t)(unsigned __int64, void *, unsigned int, int);

/* 9433 */
typedef unsigned int stbtt_uint32;

/* 9434 */
typedef _KCRM_MARSHAL_HEADER *PRKCRM_MARSHAL_HEADER;

/* 9435 */
typedef __int64 *PINT64;

/* 9436 */
typedef __int64 Sint64;

/* 9437 */
typedef unsigned __int64 uint64;

/* 9438 */
typedef unsigned __int64 Uint64;

/* 9439 */
typedef unsigned __int64 UINT64;

/* 9440 */
typedef tagEXTLOGFONTW *NPEXTLOGFONTW;

/* 9441 */
typedef tagEXTLOGFONTW *LPEXTLOGFONTW;

/* 9442 */
typedef _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;

/* 9443 */
typedef int (__stdcall *PFAST_IO_RELEASE_FOR_MOD_WRITE)(_FILE_OBJECT *, _ERESOURCE *, _DEVICE_OBJECT *);

/* 9444 */
typedef tagNMHDR *LPNMHDR;

/* 9445 */
typedef tagWINDOWINFO *LPWINDOWINFO;

/* 9446 */
typedef __int64 lint64;

/* 9447 */
typedef tagHARDWAREINPUT *LPHARDWAREINPUT;

/* 9448 */
typedef tagEXTLOGFONTA *LPEXTLOGFONTA;

/* 9449 */
typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRIC;

/* 9450 */
typedef tagEXTLOGFONTA *NPEXTLOGFONTA;

/* 9451 */
typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRIC;

/* 9452 */
typedef const wchar_t *PCUNZWCH;

/* 9453 */
typedef _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;

/* 9454 */
typedef _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;

/* 9455 */
typedef tagICONMETRICSA *LPICONMETRICS;

/* 9456 */
typedef _OFSTRUCT *LPOFSTRUCT;

/* 9457 */
typedef unsigned __int16 ATOM;

/* 9458 */
typedef char __static_assert_t[1];

/* 9459 */
typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;

/* 9460 */
typedef int (__stdcall *PDRIVER_INITIALIZE)(_DRIVER_OBJECT *, _UNICODE_STRING *);

/* 9461 */
typedef IDirectInputDevice8W *LPDIRECTINPUTDEVICE8;

/* 9462 */
typedef int (__stdcall *PFNENUMSYSTEMLOCALESEX)(int (__stdcall *)(unsigned __int16 *, unsigned int, int), unsigned int, int, void *);

/* 9463 */
typedef _DSBCAPS *LPDSBCAPS;

/* 9464 */
typedef tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;

/* 9465 */
typedef threadmbcinfostruct *pthreadmbcinfo;

/* 9466 */
typedef tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;

/* 9467 */
typedef unsigned int (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_W)(wchar_t *, unsigned int);

/* 9468 */
typedef tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;

/* 9469 */
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

/* 9470 */
typedef _DOCINFOA *LPDOCINFO;

/* 9471 */
typedef z_stream_s *z_streamp;

/* 9472 */
typedef HDROP__ *HDROP;

/* 9473 */
typedef _CONSOLE_FONT_INFOEX *PCONSOLE_FONT_INFOEX;

/* 9474 */
typedef DIPROPHEADER *LPDIPROPHEADER;

/* 9475 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 9476 */
typedef tagPOLYTEXTA *PPOLYTEXT;

/* 9477 */
typedef setloc_struct *_psetloc_struct;

/* 9478 */
typedef unsigned int (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_A)(char *, unsigned int);

/* 9479 */
typedef int GLsizeiptr;

/* 9480 */
typedef _LDT_ENTRY *PLDT_ENTRY;

/* 9481 */
typedef void (__stdcall *PTP_WORK_CALLBACK)(struct _TP_CALLBACK_INSTANCE *, void *, _TP_WORK *);

/* 9482 */
typedef unsigned int uint_least32_t;

/* 9483 */
typedef void (__cdecl *XML_DefaultHandler)(void *, const char *, int);

/* 9484 */
typedef tagENHMETAHEADER *PENHMETAHEADER;

/* 9485 */
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

/* 9486 */
typedef const unsigned int *PCUCSSTR;

/* 9487 */
typedef tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;

/* 9488 */
typedef _POINTFLOAT *PPOINTFLOAT;

/* 9489 */
typedef BATTERY_REPORTING_SCALE *PBATTERY_REPORTING_SCALE;

/* 9490 */
typedef tagEMRELLIPSE *PEMRELLIPSE;

/* 9491 */
typedef void (__stdcall *PTIMERAPCROUTINE)(void *, unsigned int, unsigned int);

/* 9492 */
typedef IDirectInputEffect *LPDIRECTINPUTEFFECT;

/* 9493 */
typedef __int16 stbtt_int16;

/* 9494 */
typedef tagSOUNDSENTRYW *LPSOUNDSENTRYW;

/* 9495 */
typedef _TRIVERTEX *LPTRIVERTEX;

/* 9496 */
typedef tagACTCTX_SECTION_KEYED_DATA *PACTCTX_SECTION_KEYED_DATA;

/* 9497 */
typedef DP_Packet ***_Mapptr;

/* 9498 */
typedef _SecHandle *PSecHandle;

/* 9499 */
typedef void (__stdcall *PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(unsigned int, unsigned int, unsigned int, unsigned int, int);

/* 9500 */
typedef PPM_IDLESTATE_EVENT *PPPM_IDLESTATE_EVENT;

/* 9501 */
typedef _HARDWARE_COUNTER_DATA *PHARDWARE_COUNTER_DATA;

/* 9502 */
typedef DIEFFECTINFOW *LPCDIEFFECTINFO;

/* 9503 */
typedef void (__stdcall *PFNGLGENFRAMEBUFFERSEXTPROC)(int, unsigned int *);

/* 9504 */
typedef DIEFFESCAPE *LPDIEFFESCAPE;

/* 9505 */
typedef _SecBuffer *PSecBuffer;

/* 9506 */
typedef char *PZZTSTR;

/* 9507 */
typedef _IP_ADAPTER_DNS_SERVER_ADDRESS_XP *PIP_ADAPTER_DNS_SERVER_ADDRESS_XP;

/* 9508 */
typedef unsigned __int64 ManifestId_t;

/* 9509 */
typedef unsigned int _Atomic_counter_t;

/* 9510 */
typedef void (__cdecl *XML_XmlDeclHandler)(void *, const char *, const char *, int);

/* 9511 */
typedef void (__stdcall *APC_CALLBACK_FUNCTION)(unsigned int, void *, void *);

/* 9512 */
typedef tagKEYBDINPUT *LPKEYBDINPUT;

/* 9513 */
typedef void *PUMS_CONTEXT;

/* 9514 */
typedef char compile_time_assert_type[1];

/* 9515 */
typedef __int16 *PSHORT;

/* 9516 */
typedef unsigned int EGLBoolean;

/* 9517 */
typedef unsigned __int16 WORD;

/* 9518 */
typedef unsigned __int16 word;

/* 9519 */
typedef _TAPE_PREPARE *PTAPE_PREPARE;

/* 9520 */
typedef unsigned __int16 USHORT;

/* 9521 */
typedef _IO_STATUS_BLOCK *PIO_STATUS_BLOCK;

/* 9522 */
typedef char __stdcall FAST_IO_UNLOCK_SINGLE(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9523 */
typedef int (__stdcall *LOCALE_ENUMPROCW)(wchar_t *);

/* 9524 */
typedef _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;

/* 9525 */
typedef __int16 CSHORT;

/* 9526 */
typedef tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;

/* 9527 */
typedef unsigned __int64 JobID_t;

/* 9528 */
typedef unsigned __int16 FSHORT;

/* 9529 */
typedef tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;

/* 9530 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATA;

/* 9531 */
typedef tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;

/* 9532 */
typedef char **PZPSTR;

/* 9533 */
typedef unsigned int ERESOURCE_THREAD;

/* 9534 */
typedef void (__stdcall *PUMS_SCHEDULER_ENTRY_POINT)(_RTL_UMS_SCHEDULER_REASON, unsigned int, void *);

/* 9535 */
typedef tagWINDOWPLACEMENT *PWINDOWPLACEMENT;

/* 9536 */
typedef unsigned __int16 _U16;

/* 9537 */
typedef tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;

/* 9538 */
typedef PROCESSOR_PERFSTATE_POLICY *PPROCESSOR_PERFSTATE_POLICY;

/* 9539 */
typedef pvalueW *PPVALUEW;

/* 9540 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 9541 */
typedef unsigned int HHTMLBrowser;

/* 9542 */
typedef char __stdcall FAST_IO_DEVICE_CONTROL(_FILE_OBJECT *, char, void *, unsigned int, void *, unsigned int, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9543 */
typedef void (__cdecl *XML_EndNamespaceDeclHandler)(void *, const char *);

/* 9544 */
typedef tagRECONVERTSTRING *NPRECONVERTSTRING;

/* 9545 */
typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;

/* 9546 */
typedef tagRECONVERTSTRING *LPRECONVERTSTRING;

/* 9547 */
typedef char XML_Bool;

/* 9548 */
typedef _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;

/* 9549 */
typedef void *(__stdcall *PFNDPAMERGE)(unsigned int, void *, void *, int);

/* 9550 */
typedef _XSAVE_FORMAT *PXSAVE_FORMAT;

/* 9551 */
typedef unsigned int *PUINT32;

/* 9552 */
typedef tagGESTURECONFIG *PGESTURECONFIG;

/* 9553 */
typedef provider_info *PPROVIDER;

/* 9554 */
typedef tagWAVEINCAPSW *LPWAVEINCAPSW;

/* 9555 */
typedef _OSVERSIONINFOW *LPOSVERSIONINFOW;

/* 9556 */
typedef const unsigned int *PCUUCSSTR;

/* 9557 */
typedef _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;

/* 9558 */
typedef int (__stdcall *LPDIENUMDEVICESBYSEMANTICSCBW)(DIDEVICEINSTANCEW *, IDirectInputDevice8W *, unsigned int, unsigned int, void *);

/* 9559 */
typedef _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;

/* 9560 */
typedef tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;

/* 9561 */
typedef int MEMBERID;

/* 9562 */
typedef __int16 nullptr_t;

/* 9563 */
typedef _PROC_THREAD_ATTRIBUTE_LIST *LPPROC_THREAD_ATTRIBUTE_LIST;

/* 9564 */
typedef void *LPVOID;

/* 9565 */
typedef WSAData *LPWSADATA;

/* 9566 */
typedef XML_ParserStruct *XML_Parser;

/* 9567 */
typedef int SHANDLE_PTR;

/* 9568 */
typedef unsigned __int64 uintmax_t;

/* 9569 */
typedef int off_t;

/* 9570 */
typedef _cpinfo *LPCPINFO;

/* 9571 */
typedef value_entW *PVALENTW;

/* 9572 */
typedef unsigned __int16 *LPWORD;

/* 9573 */
typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;

/* 9574 */
typedef _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION;

/* 9575 */
typedef _COORD *PCOORD;

/* 9576 */
typedef tagEMRSELECTOBJECT *PEMRSELECTOBJECT;

/* 9577 */
typedef tagMENUITEMINFOA *LPMENUITEMINFOA;

/* 9578 */
typedef _ICONINFOEXW *PICONINFOEXW;

/* 9579 */
typedef void (__cdecl *PFNSTEAMAPI_WRITE_MINI_DUMP)(int, void *, int);

/* 9580 */
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION *PACTIVATION_CONTEXT_BASIC_INFORMATION;

/* 9581 */
typedef IDirect3DVertexShader9 *LPDIRECT3DVERTEXSHADER9;

/* 9582 */
typedef int HServerQuery;

/* 9583 */
typedef tagEMRFILLPATH *PEMRFILLPATH;

/* 9584 */
typedef tagDESIGNVECTOR *PDESIGNVECTOR;

/* 9585 */
typedef tagMENUITEMINFOW *LPMENUITEMINFOW;

/* 9586 */
typedef _SERVICE_TRIGGER_INFO *PSERVICE_TRIGGER_INFO;

/* 9587 */
typedef HFONT__ *HFONT;

/* 9588 */
typedef unsigned __int64 (__stdcall *PFNGETTICKCOUNT64)();

/* 9589 */
typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;

/* 9590 */
typedef tagEMREOF *PEMREOF;

/* 9591 */
typedef IDirectInput8W *LPDIRECTINPUT8;

/* 9592 */
typedef void (__cdecl *SDL_LogOutputFunction)(void *, int, SDL_LogPriority, const char *);

/* 9593 */
typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUS;

/* 9594 */
typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;

/* 9595 */
typedef int LONG;

/* 9596 */
typedef int *LPLONG;

/* 9597 */
typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 9598 */
typedef tagMENUINFO *LPMENUINFO;

/* 9599 */
typedef unsigned int CALID;

/* 9600 */
typedef int (__cdecl *_PNH)(unsigned int);

/* 9601 */
typedef unsigned __int16 enet_uint16;

/* 9602 */
typedef tagEMRLINETO *PEMRMOVETOEX;

/* 9603 */
typedef PPM_WMI_PERF_STATES_EX *PPPM_WMI_PERF_STATES_EX;

/* 9604 */
typedef int (__stdcall *EDITWORDBREAKPROCW)(wchar_t *, int, int, int);

/* 9605 */
typedef tagICONMETRICSA *LPICONMETRICSA;

/* 9606 */
typedef _CONSOLE_FONT_INFO *PCONSOLE_FONT_INFO;

/* 9607 */
typedef tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;

/* 9608 */
typedef tagMENUITEMINFOA *LPMENUITEMINFO;

/* 9609 */
typedef _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;

/* 9610 */
typedef tagEMRPOLYLINE *PEMRPOLYBEZIERTO;

/* 9611 */
typedef unsigned int ENetVersion;

/* 9612 */
typedef const unsigned int *PCUCSCHAR;

/* 9613 */
typedef __int64 time_t;

/* 9614 */
typedef int (__cdecl *XML_UnknownEncodingHandler)(void *, const char *, XML_Encoding *);

/* 9615 */
typedef tagCURSORINFO *PCURSORINFO;

/* 9616 */
typedef _TOKEN_GROUPS *PTOKEN_GROUPS;

/* 9617 */
typedef threadlocaleinfostruct *pthreadlocinfo;

/* 9618 */
typedef HDC__ *NativeDisplayType;

/* 9619 */
typedef t_udp_ *p_udp;

/* 9620 */
typedef unsigned int (__stdcall *PFNFLSALLOC)(void (__stdcall *)(void *));

/* 9621 */
typedef unsigned __int16 SECURITY_DESCRIPTOR_CONTROL;

/* 9622 */
typedef tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;

/* 9623 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFYA;

/* 9624 */
typedef tagMSGBOXPARAMSA *PMSGBOXPARAMSA;

/* 9625 */
typedef tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;

/* 9626 */
typedef void *EGLConfig;

/* 9627 */
typedef unsigned __int64 *PULONG64;

/* 9628 */
typedef _FILE_DISPOSITION_INFO *PFILE_DISPOSITION_INFO;

/* 9629 */
typedef char (__stdcall *PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED)(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);

/* 9630 */
typedef ISteamUGC *(__cdecl *PFNSTEAM_UGC)();

/* 9631 */
typedef _TRANSACTIONMANAGER_LOGPATH_INFORMATION *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

/* 9632 */
typedef _FILETIME *LPFILETIME;

/* 9633 */
typedef unsigned int (__stdcall *XInputGetCapabilities_t)(unsigned int, unsigned int, _XINPUT_CAPABILITIES *);

/* 9634 */
typedef char KIRQL;

/* 9635 */
typedef _RTL_MRSW_LOCK *PRTL_MRSW_LOCK;

/* 9636 */
typedef _FILE_STANDARD_INFORMATION *PFILE_STANDARD_INFORMATION;

/* 9637 */
typedef _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

/* 9638 */
typedef char CHAR;

/* 9639 */
typedef float vec_t;

/* 9640 */
typedef tagRAWINPUTDEVICELIST *PRAWINPUTDEVICELIST;

/* 9641 */
typedef tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;

/* 9642 */
typedef tagINPUT *LPINPUT;

/* 9643 */
typedef _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;

/* 9644 */
typedef int (__cdecl *tell_file_func)(void *, void *);

/* 9645 */
typedef int (__stdcall *WINSTAENUMPROC)(char *, int);

/* 9646 */
typedef _RTL_SRWLOCK *PSRWLOCK;

/* 9647 */
typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

/* 9648 */
typedef unsigned int __stdcall RTL_RUN_ONCE_INIT_FN(_RTL_RUN_ONCE *, void *, void **);

/* 9649 */
typedef _MODEMDEVCAPS *LPMODEMDEVCAPS;

/* 9650 */
typedef void (__cdecl *_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);

/* 9651 */
typedef _COMMPROP *LPCOMMPROP;

/* 9652 */
typedef tagSTYLESTRUCT *LPSTYLESTRUCT;

/* 9653 */
typedef tagMULTIKEYHELPA *PMULTIKEYHELP;

/* 9654 */
typedef void **PHANDLE;

/* 9655 */
typedef _QUOTA_LIMITS *PQUOTA_LIMITS;

/* 9656 */
typedef _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;

/* 9657 */
typedef tagPAINTSTRUCT *PPAINTSTRUCT;

/* 9658 */
typedef char IPSEC_AUTH_CONFIG;

/* 9659 */
typedef wchar_t *PZZWSTR;

/* 9660 */
typedef _currencyfmtW *LPCURRENCYFMTW;

/* 9661 */
typedef int __stdcall DRIVER_ADD_DEVICE(_DRIVER_OBJECT *, _DEVICE_OBJECT *);

/* 9662 */
typedef char (__stdcall *PFAST_IO_QUERY_NETWORK_OPEN_INFO)(_FILE_OBJECT *, char, _FILE_NETWORK_OPEN_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9663 */
typedef char *(__cdecl *GetParameter_t)(int);

/* 9664 */
typedef unsigned int *PTP_VERSION;

/* 9665 */
typedef tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;

/* 9666 */
typedef HKL__ **LPHKL;

/* 9667 */
typedef _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;

/* 9668 */
typedef tagFILTERKEYS *LPFILTERKEYS;

/* 9669 */
typedef void (__stdcall *PFNGLATTACHOBJECTARBPROC)(unsigned int, unsigned int);

/* 9670 */
typedef char int_least8_t;

/* 9671 */
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

/* 9672 */
typedef talk_base::ip_option_information *PIP_OPTION_INFORMATION;

/* 9673 */
typedef tagEMREXTESCAPE *PEMREXTESCAPE;

/* 9674 */
typedef tagBITMAPFILEHEADER *PBITMAPFILEHEADER;

/* 9675 */
typedef int (__stdcall *MINIDUMP_CALLBACK_ROUTINE)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);

/* 9676 */
typedef _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;

/* 9677 */
typedef char (__stdcall *PFAST_IO_QUERY_OPEN)(_IRP *, _FILE_NETWORK_OPEN_INFORMATION *, _DEVICE_OBJECT *);

/* 9678 */
typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY;

/* 9679 */
typedef DIDEVICEINSTANCEW *LPDIDEVICEINSTANCEW;

/* 9680 */
typedef unsigned int (__stdcall *LPHANDLER_FUNCTION_EX)(unsigned int, unsigned int, void *, void *);

/* 9681 */
typedef tagEMRGLSRECORD *PEMRGLSRECORD;

/* 9682 */
typedef ID3DXBuffer *LPD3DXBUFFER;

/* 9683 */
typedef tagABORTPATH *PEMRCLOSEFIGURE;

/* 9684 */
typedef int (__stdcall *WINSTAENUMPROCA)(char *, int);

/* 9685 */
typedef tagGCP_RESULTSA *LPGCP_RESULTSA;

/* 9686 */
typedef char __stdcall FAST_IO_PREPARE_MDL_WRITE(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9687 */
typedef tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT;

/* 9688 */
typedef unsigned int *PUINT;

/* 9689 */
typedef int (__stdcall *LANGUAGEGROUP_ENUMPROCA)(unsigned int, char *, char *, unsigned int, int);

/* 9690 */
typedef _STARTUPINFOW *LPSTARTUPINFOW;

/* 9691 */
typedef void (__stdcall *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(unsigned int);

/* 9692 */
typedef int (__stdcall *PFNDACOMPARE)(void *, void *, int);

/* 9693 */
typedef _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;

/* 9694 */
typedef _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;

/* 9695 */
typedef _KCRM_PROTOCOL_BLOB *PKCRM_PROTOCOL_BLOB;

/* 9696 */
typedef unsigned __int64 uint_fast64_t;

/* 9697 */
typedef int (__stdcall *LANGUAGEGROUP_ENUMPROCW)(unsigned int, wchar_t *, wchar_t *, unsigned int, int);

/* 9698 */
typedef void (__stdcall *PFNGLSHADERSOURCEARBPROC)(unsigned int, int, const char **, const int *);

/* 9699 */
typedef _IP_ADAPTER_UNICAST_ADDRESS_LH *PIP_ADAPTER_UNICAST_ADDRESS_LH;

/* 9700 */
typedef _MINIDUMP_CALLBACK_INFORMATION *PMINIDUMP_CALLBACK_INFORMATION;

/* 9701 */
typedef int (__stdcall *WINSTAENUMPROCW)(wchar_t *, int);

/* 9702 */
typedef _ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

/* 9703 */
typedef tagPOINTS *LPPOINTS;

/* 9704 */
typedef __int64 int64;

/* 9705 */
typedef __int64 INT64;

/* 9706 */
typedef _TAPE_SET_POSITION *PTAPE_SET_POSITION;

/* 9707 */
typedef tagBITMAPCOREINFO *PBITMAPCOREINFO;

/* 9708 */
typedef _NETINFOSTRUCT *LPNETINFOSTRUCT;

/* 9709 */
typedef tagXFORM *PXFORM;

/* 9710 */
typedef tagAXISINFOW *PAXISINFOW;

/* 9711 */
typedef CM_Power_Data_s *PCM_POWER_DATA;

/* 9712 */
typedef _REASON_CONTEXT *PPOWER_REQUEST_CONTEXT;

/* 9713 */
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

/* 9714 */
typedef void (__stdcall *PFNGLGETSHADERIVPROC)(unsigned int, unsigned int, int *);

/* 9715 */
typedef _NT_TIB *PNT_TIB;

/* 9716 */
typedef tagEMRFORMAT *PEMRFORMAT;

/* 9717 */
typedef tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;

/* 9718 */
typedef int (__stdcall *LPTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 9719 */
typedef void (__cdecl *PFNSTEAMAPI_UNREGISTER_CALL_RESULT)(CCallbackBase *, unsigned __int64);

/* 9720 */
typedef int (__stdcall *GEO_ENUMPROC)(int);

/* 9721 */
typedef unsigned int (__stdcall *PFNGLCREATESHADERPROC)(unsigned int);

/* 9722 */
typedef _PACKEDEVENTINFO *PPACKEDEVENTINFO;

/* 9723 */
typedef int (__stdcall *PROPENUMPROCEXW)(HWND__ *, wchar_t *, void *, unsigned int);

/* 9724 */
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(unsigned int, char **);

/* 9725 */
typedef _ITEMIDLIST *LPCITEMIDLIST;

/* 9726 */
typedef void (__stdcall *PFNGLACTIVETEXTUREARBPROC)(unsigned int);

/* 9727 */
typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;

/* 9728 */
typedef unsigned __int16 *PUHALF_PTR;

/* 9729 */
typedef char (__stdcall *PFAST_IO_LOCK)(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, char, char, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9730 */
typedef int (__stdcall *PROPENUMPROCEXA)(HWND__ *, char *, void *, unsigned int);

/* 9731 */
typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;

/* 9732 */
typedef _PROCESS_INFORMATION *LPPROCESS_INFORMATION;

/* 9733 */
typedef int (__cdecl *XML_NotStandaloneHandler)(void *);

/* 9734 */
typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;

/* 9735 */
typedef unsigned int DXGI_USAGE;

/* 9736 */
typedef _WHEA_ERROR_PACKET_V2 *PWHEA_ERROR_PACKET;

/* 9737 */
typedef _FILE_BASIC_INFO *PFILE_BASIC_INFO;

/* 9738 */
typedef HMETAFILE__ *HMETAFILE;

/* 9739 */
typedef HTOUCHINPUT__ *HTOUCHINPUT;

/* 9740 */
typedef int (__cdecl *SDL_ThreadFunction)(void *);

/* 9741 */
typedef _IP_ADAPTER_ADDRESSES_LH *PIP_ADAPTER_ADDRESSES;

/* 9742 */
typedef int (__stdcall *PFNFLSSETVALUE)(unsigned int, void *);

/* 9743 */
typedef BITMAPV4HEADER *LPBITMAPV4HEADER;

/* 9744 */
typedef unsigned __int16 uint16;

/* 9745 */
typedef unsigned __int16 Uint16;

/* 9746 */
typedef unsigned __int16 UINT16;

/* 9747 */
typedef char *STRSAFE_LPSTR;

/* 9748 */
typedef __int16 Sint16;

/* 9749 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;

/* 9750 */
typedef __int16 *PINT16;

/* 9751 */
typedef unsigned int KSPIN_LOCK;

/* 9752 */
typedef PPM_IDLE_ACCOUNTING *PPPM_IDLE_ACCOUNTING;

/* 9753 */
typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;

/* 9754 */
typedef _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;

/* 9755 */
typedef void *z_voidpf;

/* 9756 */
typedef _UNICODE_STRING *PUNICODE_STRING;

/* 9757 */
typedef _WHEA_ERROR_RECORD *PWHEA_ERROR_RECORD;

/* 9758 */
typedef unsigned int TP_VERSION;

/* 9759 */
typedef tagTOUCHINPUT *PTOUCHINPUT;

/* 9760 */
typedef void (__cdecl *XML_StartNamespaceDeclHandler)(void *, const char *, const char *);

/* 9761 */
typedef void (__cdecl *XML_ProcessingInstructionHandler)(void *, const char *, const char *);

/* 9762 */
typedef tagEMRMASKBLT *PEMRMASKBLT;

/* 9763 */
typedef _SERVICE_DELAYED_AUTO_START_INFO *LPSERVICE_DELAYED_AUTO_START_INFO;

/* 9764 */
typedef _NETIO_NET_BUFFER_CONTEXT *PNETIO_NET_BUFFER_CONTEXT;

/* 9765 */
typedef void (__cdecl *Pfunc)(lua_State *, void *);

/* 9766 */
typedef unsigned __int64 UGCHandle_t;

/* 9767 */
typedef _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;

/* 9768 */
typedef _IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

/* 9769 */
typedef char __stdcall FAST_IO_READ_COMPRESSED(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, void *, _MDL **, _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *, unsigned int, _DEVICE_OBJECT *);

/* 9770 */
typedef tagEMRPOLYLINE16 *PEMRPOLYLINE16;

/* 9771 */
typedef _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;

/* 9772 */
typedef long double DOUBLE;

/* 9773 */
typedef _FAST_IO_DISPATCH *PFAST_IO_DISPATCH;

/* 9774 */
typedef tagWNDCLASSEXA *PWNDCLASSEXA;

/* 9775 */
typedef tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;

/* 9776 */
typedef _MODEMSETTINGS *PMODEMSETTINGS;

/* 9777 */
typedef _TOKEN_LINKED_TOKEN *PTOKEN_LINKED_TOKEN;

/* 9778 */
typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;

/* 9779 */
typedef _numberfmtA *LPNUMBERFMTA;

/* 9780 */
typedef int (__cdecl *lua_CFunction)(lua_State *);

/* 9781 */
typedef int (__stdcall *PROPENUMPROCEX)(HWND__ *, char *, void *, unsigned int);

/* 9782 */
typedef void *HPOWERNOTIFY;

/* 9783 */
typedef char *PSZ;

/* 9784 */
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

/* 9785 */
typedef void (__cdecl *rotate_uv_wxh_func)(const char *, int, char *, int, char *, int, int, int);

/* 9786 */
typedef wchar_t **PZPWSTR;

/* 9787 */
typedef tagMSGBOXPARAMSA *PMSGBOXPARAMS;

/* 9788 */
typedef _TOKEN_USER *PTOKEN_USER;

/* 9789 */
typedef unsigned int (__cdecl *pfnSDL_CurrentBeginThread)(void *, unsigned int, unsigned int (__stdcall *)(void *), void *, unsigned int, unsigned int *);

/* 9790 */
typedef _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;

/* 9791 */
typedef char *PCH;

/* 9792 */
typedef __int64 USN;

/* 9793 */
typedef void *EGLSurface;

/* 9794 */
typedef z_gz_header_s *z_gz_headerp;

/* 9795 */
typedef _MINIDUMP_EXCEPTION_INFORMATION *PMINIDUMP_EXCEPTION_INFORMATION;

/* 9796 */
typedef char uch;

/* 9797 */
typedef int (__stdcall *LOCALE_ENUMPROCEX)(wchar_t *, unsigned int, int);

/* 9798 */
typedef unsigned __int16 ush;

/* 9799 */
typedef unsigned int HELPPOLY;

/* 9800 */
typedef int (__stdcall *PFNGLGETUNIFORMLOCATIONPROC)(unsigned int, const char *);

/* 9801 */
typedef IDirectSound *LPDIRECTSOUND;

/* 9802 */
typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;

/* 9803 */
typedef tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;

/* 9804 */
typedef unsigned int SIZE_T;

/* 9805 */
typedef unsigned int size_t;

/* 9806 */
typedef tagTOGGLEKEYS *LPTOGGLEKEYS;

/* 9807 */
typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;

/* 9808 */
typedef char (__stdcall *PFAST_IO_UNLOCK_SINGLE)(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9809 */
typedef void (__stdcall *PFNGLUNIFORM1IARBPROC)(int, int);

/* 9810 */
typedef _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;

/* 9811 */
typedef int stbtt_int32;

/* 9812 */
typedef _LUID_AND_ATTRIBUTES (*PLUID_AND_ATTRIBUTES_ARRAY)[1];

/* 9813 */
typedef _TOKEN_MANDATORY_POLICY *PTOKEN_MANDATORY_POLICY;

/* 9814 */
typedef tagRID_DEVICE_INFO *LPRID_DEVICE_INFO;

/* 9815 */
typedef tagABORTPATH *PEMRSAVEDC;

/* 9816 */
typedef _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;

/* 9817 */
typedef void (__cdecl *z_free_func)(void *, void *);

/* 9818 */
typedef _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;

/* 9819 */
typedef tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;

/* 9820 */
typedef int __stdcall FAST_IO_RELEASE_FOR_CCFLUSH(_FILE_OBJECT *, _DEVICE_OBJECT *);

/* 9821 */
typedef unsigned int GLbitfield;

/* 9822 */
typedef _REASON_CONTEXT *LPPOWER_REQUEST_CONTEXT;

/* 9823 */
typedef int (__stdcall *PFN_GetCurrentPackageId)(unsigned int *, char *);

/* 9824 */
typedef __int16 VARIANT_BOOL;

/* 9825 */
typedef tagMULTIKEYHELPA *PMULTIKEYHELPA;

/* 9826 */
typedef tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;

/* 9827 */
typedef _IRP *PIRP;

/* 9828 */
typedef void (__cdecl *unexpected_function)();

/* 9829 */
typedef void vorbis_info_mapping;

/* 9830 */
typedef _COMMTIMEOUTS *LPCOMMTIMEOUTS;

/* 9831 */
typedef tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;

/* 9832 */
typedef _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;

/* 9833 */
typedef _ACTIVATION_CONTEXT_QUERY_INDEX *PACTIVATION_CONTEXT_QUERY_INDEX;

/* 9834 */
typedef _FILETIME *PFILETIME;

/* 9835 */
typedef void vorbis_look_transform;

/* 9836 */
typedef void (__cdecl *rotate_uv_wx8_func)(const char *, int, char *, int, char *, int, int);

/* 9837 */
typedef unsigned int (__cdecl *ENetChecksumCallback)(ENetBuffer *, unsigned int);

/* 9838 */
typedef char UC;

/* 9839 */
typedef unsigned int _TINT;

/* 9840 */
typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIG;

/* 9841 */
typedef unsigned __int16 Posf;

/* 9842 */
typedef tagGCP_RESULTSA *LPGCP_RESULTS;

/* 9843 */
typedef void (__stdcall *PTP_WAIT_CALLBACK)(struct _TP_CALLBACK_INSTANCE *, void *, _TP_WAIT *, unsigned int);

/* 9844 */
typedef int HFILE;

/* 9845 */
typedef tagACTCTXA *PACTCTXA;

/* 9846 */
typedef unsigned __int64 *PDWORD64;

/* 9847 */
typedef _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

/* 9848 */
typedef unsigned int RTime32;

/* 9849 */
typedef unsigned int *PUINT_PTR;

/* 9850 */
typedef tagEMRSELECTCLIPPATH *PEMRSETROP2;

/* 9851 */
typedef char *WICInProcPointer;

/* 9852 */
typedef FLASHWINFO *PFLASHWINFO;

/* 9853 */
typedef const char *PCCH;

/* 9854 */
typedef tagTEXTMETRICW *PTEXTMETRICW;

/* 9855 */
typedef int (__stdcall *ICMENUMPROCW)(wchar_t *, int);

/* 9856 */
typedef void (__cdecl *BlendLineFunc)(SDL_Surface *, int, int, int, int, SDL_BlendMode, char, char, char, char, SDL_bool);

/* 9857 */
typedef unsigned __int16 *PUINT16;

/* 9858 */
typedef _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;

/* 9859 */
typedef tagMENUITEMINFOA *LPCMENUITEMINFOA;

/* 9860 */
typedef int (__stdcall *FONTENUMPROC)(tagLOGFONTA *, tagTEXTMETRICA *, unsigned int, int);

/* 9861 */
typedef char SECURITY_CONTEXT_TRACKING_MODE;

/* 9862 */
typedef tagLOGBRUSH *NPLOGBRUSH;

/* 9863 */
typedef _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

/* 9864 */
typedef tagLOGBRUSH *LPLOGBRUSH;

/* 9865 */
typedef _CONTEXT *LPCONTEXT;

/* 9866 */
typedef DIDEVICEOBJECTINSTANCEW *LPDIDEVICEOBJECTINSTANCEW;

/* 9867 */
typedef tagEMRSELECTCLIPPATH *PEMRSETBKMODE;

/* 9868 */
typedef _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;

/* 9869 */
typedef _DSCAPS *LPDSCAPS;

/* 9870 */
typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFO;

/* 9871 */
typedef tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET;

/* 9872 */
typedef tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;

/* 9873 */
typedef int NDIS_STATUS;

/* 9874 */
typedef HIMC__ *HIMC;

/* 9875 */
typedef _RTL_UMS_THREAD_INFO_CLASS *PRTL_UMS_THREAD_INFO_CLASS;

/* 9876 */
typedef void (__stdcall *PFNGLCOMPILESHADERARBPROC)(unsigned int);

/* 9877 */
typedef unsigned __int64 PublishedFileId_t;

/* 9878 */
typedef __int16 SHORT;

/* 9879 */
typedef void (__stdcall *PFIBER_START_ROUTINE)(void *);

/* 9880 */
typedef int GLintptr;

/* 9881 */
typedef tagEXTLOGPEN *PEXTLOGPEN;

/* 9882 */
typedef int (__cdecl *SDL_blit)(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *);

/* 9883 */
typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;

/* 9884 */
typedef wavehdr_tag *LPWAVEHDR;

/* 9885 */
typedef tagMETARECORD *LPMETARECORD;

/* 9886 */
typedef int (__stdcall *CODEPAGE_ENUMPROCA)(char *);

/* 9887 */
typedef int (__stdcall *PHANDLER_ROUTINE)(unsigned int);

/* 9888 */
typedef _SecHandle *PCtxtHandle;

/* 9889 */
typedef _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;

/* 9890 */
typedef unsigned int REGSAM;

/* 9891 */
typedef tagENHMETAHEADER *LPENHMETAHEADER;

/* 9892 */
typedef void (__stdcall *PFNGLDELETEFRAMEBUFFERSPROC)(int, const unsigned int *);

/* 9893 */
typedef unsigned int lu_int32;

/* 9894 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATE;

/* 9895 */
typedef int (__stdcall *FONTENUMPROCA)(tagLOGFONTA *, tagTEXTMETRICA *, unsigned int, int);

/* 9896 */
typedef const char *PCNZTCH;

/* 9897 */
typedef BITMAPV5HEADER *LPBITMAPV5HEADER;

/* 9898 */
typedef const wchar_t *PCNZWCH;

/* 9899 */
typedef wchar_t *const *PCZPWSTR;

/* 9900 */
typedef _tagADDRESS64 *LPADDRESS64;

/* 9901 */
typedef int EGLint;

/* 9902 */
typedef _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;

/* 9903 */
typedef int (__stdcall *IMCENUMPROC)(HIMC__ *, int);

/* 9904 */
typedef int (__stdcall *FONTENUMPROCW)(tagLOGFONTW *, tagTEXTMETRICW *, unsigned int, int);

/* 9905 */
typedef int LONG32;

/* 9906 */
typedef unsigned int enet_uint32;

/* 9907 */
typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;

/* 9908 */
typedef _KDPC *PKDPC;

/* 9909 */
typedef tagALTTABINFO *LPALTTABINFO;

/* 9910 */
typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;

/* 9911 */
typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;

/* 9912 */
typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEX;

/* 9913 */
typedef const char *PCUNZTCH;

/* 9914 */
typedef tagEXTLOGPEN32 *PEXTLOGPEN32;

/* 9915 */
typedef _WSAPROTOCOL_INFOW *LPWSAPROTOCOL_INFOW;

/* 9916 */
typedef _PPL_LOOKASIDE_LIST_ARRAY *PPPL_LOOKASIDE_LIST_ARRAY;

/* 9917 */
typedef tagTITLEBARINFO *PTITLEBARINFO;

/* 9918 */
typedef int __cdecl ReadBand_fn(_AudioDecoder *, int, int);

/* 9919 */
typedef _EVENTLOGRECORD *PEVENTLOGRECORD;

/* 9920 */
typedef HIMCC__ *HIMCC;

/* 9921 */
typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

/* 9922 */
typedef _EAXPRESET *LPEAXPRESET;

/* 9923 */
typedef _MANDATORY_LEVEL *PMANDATORY_LEVEL;

/* 9924 */
typedef tagEMRSELECTPALETTE *PEMRSELECTPALETTE;

/* 9925 */
typedef int l_mem;

/* 9926 */
typedef _SID_NAME_USE *PSID_NAME_USE;

/* 9927 */
typedef tagMONITORINFOEXA *LPMONITORINFOEXA;

/* 9928 */
typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTION;

/* 9929 */
typedef _IO_SECURITY_CONTEXT *PIO_SECURITY_CONTEXT;

/* 9930 */
typedef tagCANDIDATELIST *NPCANDIDATELIST;

/* 9931 */
typedef tagCANDIDATELIST *LPCANDIDATELIST;

/* 9932 */
typedef PPM_WMI_IDLE_STATES *PPPM_WMI_IDLE_STATES;

/* 9933 */
typedef tagLOGBRUSH32 *NPLOGBRUSH32;

/* 9934 */
typedef ISteamUserStats *(__cdecl *PFNSTEAM_USER_STATS)();

/* 9935 */
typedef tagLOGBRUSH32 *LPLOGBRUSH32;

/* 9936 */
typedef tagEMRPOLYDRAW *PEMRPOLYDRAW;

/* 9937 */
typedef _strflt *STRFLT;

/* 9938 */
typedef int (__stdcall *GOBJENUMPROC)(void *, int);

/* 9939 */
typedef int (__stdcall *UILANGUAGE_ENUMPROCA)(char *, int);

/* 9940 */
typedef char __stdcall FAST_IO_QUERY_NETWORK_OPEN_INFO(_FILE_OBJECT *, char, _FILE_NETWORK_OPEN_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 9941 */
typedef unsigned int AppId_t;

/* 9942 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 *PIMAGE_LOAD_CONFIG_DIRECTORY64;

/* 9943 */
typedef int (__stdcall *PFNGETLOGICALPROCESSORINFORMATION)(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION *, unsigned int *);

/* 9944 */
typedef int (__stdcall *PFNGETUSERDEFAULTLOCALENAME)(unsigned __int16 *, int);

/* 9945 */
typedef tagEMRANGLEARC *PEMRANGLEARC;

/* 9946 */
typedef tagEMRPLGBLT *PEMRPLGBLT;

/* 9947 */
typedef _SERVICE_NOTIFY_1 *PSERVICE_NOTIFY_1;

/* 9948 */
typedef void *NDIS_HANDLE;

/* 9949 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2;

/* 9950 */
typedef _flt *FLT;

/* 9951 */
typedef unsigned int ulg;

/* 9952 */
typedef char uchf;

/* 9953 */
typedef tagTEXTMETRICA *PTEXTMETRIC;

/* 9954 */
typedef unsigned __int16 ushf;

/* 9955 */
typedef _TOKEN_SOURCE *PTOKEN_SOURCE;

/* 9956 */
typedef int (__stdcall *ENUMRESTYPEPROCA)(HINSTANCE__ *, char *, int);

/* 9957 */
typedef _ACCESS_REASONS *PACCESS_REASONS;

/* 9958 */
typedef _STARTUPINFOEXW *LPSTARTUPINFOEXW;

/* 9959 */
typedef _KDPC *PRKDPC;

/* 9960 */
typedef int (__stdcall *TIMEFMT_ENUMPROCA)(char *);

/* 9961 */
typedef void (__stdcall *PINTERFACE_REFERENCE)(void *);

/* 9962 */
typedef tagWNDCLASSA *LPWNDCLASS;

/* 9963 */
typedef void (__stdcall *PFNGLUNIFORM1FARBPROC)(int, float);

/* 9964 */
typedef value_entA *PVALENT;

/* 9965 */
typedef tagWNDCLASSA *NPWNDCLASS;

/* 9966 */
typedef _GRADIENT_RECT *LPGRADIENT_RECT;

/* 9967 */
typedef int (__stdcall *TIMEFMT_ENUMPROCW)(wchar_t *);

/* 9968 */
typedef _ADMINISTRATOR_POWER_POLICY *PADMINISTRATOR_POWER_POLICY;

/* 9969 */
typedef char __stdcall FAST_IO_MDL_READ_COMPLETE(_FILE_OBJECT *, _MDL *, _DEVICE_OBJECT *);

/* 9970 */
typedef _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER;

/* 9971 */
typedef void (__cdecl *mirror_uv_func)(const char *, char *, char *, int);

/* 9972 */
typedef _devicemodeA *NPDEVMODEA;

/* 9973 */
typedef _SINGLE_LIST_ENTRY *PSLIST_ENTRY32;

/* 9974 */
typedef tagABORTPATH *PEMRENDPATH;

/* 9975 */
typedef _devicemodeA *LPDEVMODEA;

/* 9976 */
typedef int (__stdcall *MONITORENUMPROC)(HMONITOR__ *, HDC__ *, tagRECT *, int);

/* 9977 */
typedef _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;

/* 9978 */
typedef wchar_t *NWPSTR;

/* 9979 */
typedef tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;

/* 9980 */
typedef void (__cdecl *_Prhand)(std::exception *);

/* 9981 */
typedef char *const *PCZPSTR;

/* 9982 */
typedef const wchar_t *LPCOLESTR;

/* 9983 */
typedef tagSectionSizeStruct *SectionSizePtr;

/* 9984 */
typedef int (__stdcall *ENUMRESLANGPROCW)(HINSTANCE__ *, const wchar_t *, const wchar_t *, unsigned __int16, int);

/* 9985 */
typedef sockaddr_in *PSOCKADDR_IN;

/* 9986 */
typedef tagRID_DEVICE_INFO_MOUSE *PRID_DEVICE_INFO_MOUSE;

/* 9987 */
typedef tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;

/* 9988 */
typedef unsigned int *PUCSCHAR;

/* 9989 */
typedef _CONSOLE_SCREEN_BUFFER_INFOEX *PCONSOLE_SCREEN_BUFFER_INFOEX;

/* 9990 */
typedef unsigned int UINT_PTR;

/* 9991 */
typedef tagABORTPATH *PEMRSETMETARGN;

/* 9992 */
typedef int *PINT_PTR;

/* 9993 */
typedef unsigned int *PDWORD_PTR;

/* 9994 */
typedef int (__stdcall *PFNDAENUMCALLBACK)(void *, void *);

/* 9995 */
typedef tagCURSORINFO *LPCURSORINFO;

/* 9996 */
typedef sockaddr_in6 *PSOCKADDR_IN6;

/* 9997 */
typedef PPM_PERFSTATE_DOMAIN_EVENT *PPPM_PERFSTATE_DOMAIN_EVENT;

/* 9998 */
typedef char *PKIRQL;

/* 9999 */
typedef group_filter *PGROUP_FILTER;

/* 10000 */
typedef unsigned int SID_HASH_ENTRY;

/* 10001 */
typedef void *void_pointer;

/* 10002 */
typedef HRAWINPUT__ *HRAWINPUT;

/* 10003 */
typedef tagWNDCLASSA *LPWNDCLASSA;

/* 10004 */
typedef void (__stdcall *PFNSETTHREADPOOLTIMER)(_TP_TIMER *, _FILETIME *, unsigned int, unsigned int);

/* 10005 */
typedef __int16 vec16[8];

/* 10006 */
typedef tagWNDCLASSA *NPWNDCLASSA;

/* 10007 */
typedef tagENHMETARECORD *PENHMETARECORD;

/* 10008 */
typedef _CHAR_INFO *PCHAR_INFO;

/* 10009 */
typedef _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;

/* 10010 */
typedef _TRANSACTION_ENLISTMENT_PAIR *PTRANSACTION_ENLISTMENT_PAIR;

/* 10011 */
typedef void (__cdecl *ENetPacketFreeCallback)(_ENetPacket *);

/* 10012 */
typedef void (__cdecl *terminate_function)();

/* 10013 */
typedef tagSIZE *PSIZEL;

/* 10014 */
typedef tagEMRINVERTRGN *PEMRPAINTRGN;

/* 10015 */
typedef int (__stdcall *PIcmpCloseHandle)(void *);

/* 10016 */
typedef bool (__cdecl *DP_EnumAddressCallback)(const char *, void *);

/* 10017 */
typedef _M128A *PM128A;

/* 10018 */
typedef unsigned int *PACCESS_MASK;

/* 10019 */
typedef char _TSCHAR;

/* 10020 */
typedef tagWNDCLASSW *NPWNDCLASSW;

/* 10021 */
typedef tagWNDCLASSW *LPWNDCLASSW;

/* 10022 */
typedef void (__cdecl *SDL_BlitFunc)(SDL_BlitInfo *);

/* 10023 */
typedef _MINIDUMP_USER_STREAM_INFORMATION *PMINIDUMP_USER_STREAM_INFORMATION;

/* 10024 */
typedef tagRAWINPUT *PRAWINPUT;

/* 10025 */
typedef void (__cdecl *_PVFI)(int);

/* 10026 */
typedef int (__stdcall *PQUERYACTCTXW_FUNC)(unsigned int, void *, void *, unsigned int, void *, unsigned int, unsigned int *);

/* 10027 */
typedef char __stdcall FAST_IO_MDL_WRITE_COMPLETE(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);

/* 10028 */
typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATA;

/* 10029 */
typedef tagWNDCLASSEXA *NPWNDCLASSEXA;

/* 10030 */
typedef DIDEVICEOBJECTINSTANCEW *LPCDIDEVICEOBJECTINSTANCEW;

/* 10031 */
typedef const wchar_t *PCUWCHAR;

/* 10032 */
typedef tagWNDCLASSEXA *LPWNDCLASSEXA;

/* 10033 */
typedef tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;

/* 10034 */
typedef void (__stdcall *LPHANDLER_FUNCTION)(unsigned int);

/* 10035 */
typedef _ENLISTMENT_CRM_INFORMATION *PENLISTMENT_CRM_INFORMATION;

/* 10036 */
typedef tagENUMLOGFONTA *LPENUMLOGFONT;

/* 10037 */
typedef tagWNDCLASSEXW *LPWNDCLASSEXW;

/* 10038 */
typedef void __stdcall FAST_IO_ACQUIRE_FILE(_FILE_OBJECT *);

/* 10039 */
typedef tagWNDCLASSEXW *NPWNDCLASSEXW;

/* 10040 */
typedef tagKEYBDINPUT *PKEYBDINPUT;

/* 10041 */
typedef char int8;

/* 10042 */
typedef char INT8;

/* 10043 */
typedef tagREGISTERWORDA *PREGISTERWORDA;

/* 10044 */
typedef unsigned int CALTYPE;

/* 10045 */
typedef void (__cdecl *_PVFV)();

/* 10046 */
typedef void *_HFILE;

/* 10047 */
typedef void *(__cdecl *z_alloc_func)(void *, unsigned int, unsigned int);

/* 10048 */
typedef NOTIFY_USER_POWER_SETTING *PNOTIFY_USER_POWER_SETTING;

/* 10049 */
typedef tagENHMETARECORD *LPENHMETARECORD;

/* 10050 */
typedef tagWNDCLASSA *PWNDCLASSA;

/* 10051 */
typedef tagEMREXTESCAPE *PEMRDRAWESCAPE;

/* 10052 */
typedef unsigned __int64 SteamLeaderboardEntries_t;

/* 10053 */
typedef int (__stdcall *PFNGLGETATTRIBLOCATIONPROC)(unsigned int, const char *);

/* 10054 */
typedef _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE;

/* 10055 */
typedef tagMONITORINFO *LPMONITORINFO;

/* 10056 */
typedef tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;

/* 10057 */
typedef BSMINFO *PBSMINFO;

/* 10059 */
typedef int (__stdcall *NAMEENUMPROCA)(char *, int);

/* 10060 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;

/* 10061 */
typedef int (__stdcall *PFNDAENUMCALLBACKCONST)(const void *, void *);

/* 10062 */
typedef _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

/* 10063 */
typedef tagEMRARC *PEMRARC;

/* 10064 */
typedef unsigned int KAFFINITY;

/* 10065 */
typedef tagENUMTEXTMETRICA *PENUMTEXTMETRICA;

/* 10066 */
typedef int (__stdcall *NAMEENUMPROCW)(wchar_t *, int);

/* 10067 */
typedef char khronos_uint8_t;

/* 10068 */
typedef char _TUCHAR;

/* 10069 */
typedef unsigned __int16 *PWORD;

/* 10070 */
typedef void __stdcall NETIO_NET_BUFFER_LIST_COMPLETION_ROUTINE(_NET_BUFFER_LIST *, unsigned int, char);

/* 10071 */
typedef void (__stdcall *PFNGLBINDFRAMEBUFFERPROC)(unsigned int, unsigned int);

/* 10072 */
typedef _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;

/* 10073 */
typedef tagDEBUGHOOKINFO *PDEBUGHOOKINFO;

/* 10074 */
typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;

/* 10075 */
typedef HGLRC__ *HGLRC;

/* 10076 */
typedef tagWNDCLASSEXA *NPWNDCLASSEX;

/* 10077 */
typedef float khronos_float_t;

/* 10078 */
typedef _WGLSWAP *PWGLSWAP;

/* 10079 */
typedef tagWNDCLASSEXA *LPWNDCLASSEX;

/* 10080 */
typedef int lua_KContext;

/* 10081 */
typedef _CM_RESOURCE_LIST *PCM_RESOURCE_LIST;

/* 10082 */
typedef void (__stdcall *PFN_EXIT_PROCESS)(unsigned int);

/* 10083 */
typedef void (__stdcall *PTP_TIMER_CALLBACK)(struct _TP_CALLBACK_INSTANCE *, void *, _TP_TIMER *);

/* 10084 */
typedef _NT_TIB64 *PNT_TIB64;

/* 10085 */
typedef ThreadStartParms *pThreadStartParms;

/* 10086 */
typedef _GUID *LPFMTID;

/* 10087 */
typedef _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;

/* 10088 */
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

/* 10089 */
typedef DP_Player *const *const_reference;

/* 10090 */
typedef unsigned int XML_Size;

/* 10091 */
typedef tagUPDATELAYEREDWINDOWINFO *PUPDATELAYEREDWINDOWINFO;

/* 10092 */
typedef HUMPD__ *HUMPD;

/* 10093 */
typedef void __cdecl ad_free(void *);

/* 10094 */
typedef _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;

/* 10095 */
typedef MENUITEMTEMPLATE *PMENUITEMTEMPLATE;

/* 10096 */
typedef void vorbis_info_floor;

/* 10097 */
typedef int (__stdcall *ABORTPROC)(HDC__ *, int);

/* 10098 */
typedef char __stdcall FAST_IO_LOCK(_FILE_OBJECT *, _LARGE_INTEGER *, _LARGE_INTEGER *, struct _EPROCESS *, unsigned int, char, char, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10099 */
typedef unsigned int (__stdcall *PIcmpSendEcho)(void *, unsigned int, void *, unsigned __int16, talk_base::ip_option_information *, void *, unsigned int, unsigned int);

/* 10100 */
typedef tagEMRROUNDRECT *PEMRROUNDRECT;

/* 10101 */
typedef _TOKEN_STATISTICS *PTOKEN_STATISTICS;

/* 10102 */
typedef _DIDEVICEIMAGEINFOHEADERW *LPDIDEVICEIMAGEINFOHEADERW;

/* 10103 */
typedef HRESULT (__stdcall *fnDirectSoundCaptureEnumerateW)(int (__stdcall *)(_GUID *, const wchar_t *, const wchar_t *, void *), void *);

/* 10104 */
typedef _IO_COMPLETION_CONTEXT *PIO_COMPLETION_CONTEXT;

/* 10105 */
typedef unsigned int SDL_threadID;

/* 10106 */
typedef IDirect3D9 *LPDIRECT3D9;

/* 10107 */
typedef _RTL_SCALABLE_MRSW_LOCK *PRTL_SCALABLE_MRSW_LOCK;

/* 10108 */
typedef HINSTANCE__ *HMODULE;

/* 10109 */
typedef _FILE_BASIC_INFORMATION *PFILE_BASIC_INFORMATION;

/* 10110 */
typedef _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;

/* 10111 */
typedef localeinfo_struct *_locale_t;

/* 10112 */
typedef int (__stdcall *ENUMRESNAMEPROCW)(HINSTANCE__ *, const wchar_t *, wchar_t *, int);

/* 10113 */
typedef _TXN_PARAMETER_BLOCK *PTXN_PARAMETER_BLOCK;

/* 10114 */
typedef void *SDL_GLContext;

/* 10115 */
typedef int SDL_dummy_uint64[1];

/* 10116 */
typedef tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;

/* 10117 */
typedef _IO_ALLOCATION_ACTION __stdcall DRIVER_CONTROL(_DEVICE_OBJECT *, _IRP *, void *, void *);

/* 10118 */
typedef void (__stdcall *PNETIO_NET_BUFFER_LIST_COMPLETION_ROUTINE)(_NET_BUFFER_LIST *, unsigned int, char);

/* 10119 */
typedef int (__cdecl *CONVERTER)(void *, const char *);

/* 10120 */
typedef unsigned int (__stdcall *LPTHREAD_START_ROUTINE)(void *);

/* 10121 */
typedef tagEMRARC *PEMRCHORD;

/* 10122 */
typedef tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW;

/* 10123 */
typedef int jmp_buf[16];

/* 10124 */
typedef tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;

/* 10125 */
typedef char _TXCHAR;

/* 10126 */
typedef char __stdcall FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);

/* 10127 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2A;

/* 10128 */
typedef _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;

/* 10129 */
typedef _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;

/* 10130 */
typedef void (__cdecl *XML_StartElementHandler)(void *, const char *, const char **);

/* 10131 */
typedef unsigned int SDL_MouseID;

/* 10132 */
typedef unsigned int *PULONG_PTR;

/* 10133 */
typedef tagCOMPOSITIONFORM *PCOMPOSITIONFORM;

/* 10134 */
typedef const char *PCSTR;

/* 10135 */
typedef _FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

/* 10136 */
typedef _devicemodeA *NPDEVMODE;

/* 10137 */
typedef __int64 ogg_int64_t;

/* 10138 */
typedef unsigned int *PLCID;

/* 10139 */
typedef DP_Player **pointer;

/* 10140 */
typedef _devicemodeA *LPDEVMODE;

/* 10141 */
typedef __int64 SDL_TouchID;

/* 10142 */
typedef _TP_WAIT *PTP_WAIT;

/* 10143 */
typedef char u_char;

/* 10144 */
typedef tagRAWINPUTHEADER *LPRAWINPUTHEADER;

/* 10145 */
typedef long double double_t;

/* 10146 */
typedef DIDEVCAPS *LPDIDEVCAPS;

/* 10147 */
typedef void (__stdcall *NET_BUFFER_FREE_MDL_HANDLER)(_MDL *);

/* 10148 */
typedef tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;

/* 10149 */
typedef int (__cdecl *OUTPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 10150 */
typedef const wchar_t *LPCWCHAR;

/* 10151 */
typedef int int_fast16_t;

/* 10152 */
typedef unsigned int SNetListenSocket_t;

/* 10153 */
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, unsigned int);

/* 10154 */
typedef int (__stdcall *PFNINITIALIZECRITICALSECTIONEX)(_RTL_CRITICAL_SECTION *, unsigned int, unsigned int);

/* 10155 */
typedef _SMALL_RECT *PSMALL_RECT;

/* 10156 */
typedef unsigned int PhysicalItemId_t;

/* 10157 */
typedef _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;

/* 10158 */
typedef _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;

/* 10159 */
typedef tagCHARSETINFO *PCHARSETINFO;

/* 10160 */
typedef __int16 _I16;

/* 10161 */
typedef int (__stdcall *LANGGROUPLOCALE_ENUMPROCW)(unsigned int, unsigned int, wchar_t *, int);

/* 10162 */
typedef char *PBYTE;

/* 10163 */
typedef tagEMRELLIPSE *PEMRRECTANGLE;

/* 10164 */
typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;

/* 10165 */
typedef unsigned __int16 UHALF_PTR;

/* 10166 */
typedef _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;

/* 10167 */
typedef _GUID *LPCLSID;

/* 10168 */
typedef __int16 *PHALF_PTR;

/* 10169 */
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

/* 10170 */
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

/* 10171 */
typedef char z_charf;

/* 10172 */
typedef tagLOGBRUSH *PPATTERN;

/* 10173 */
typedef tagAUDIODESCRIPTION *LPAUDIODESCRIPTION;

/* 10174 */
typedef _STRING *PANSI_STRING;

/* 10175 */
typedef tagEMRFRAMERGN *PEMRFRAMERGN;

/* 10176 */
typedef unsigned __int64 ulint64;

/* 10177 */
typedef unsigned __int16 uint16_t;

/* 10178 */
typedef int (__stdcall *LANGGROUPLOCALE_ENUMPROCA)(unsigned int, unsigned int, char *, int);

/* 10179 */
typedef _EH4_EXCEPTION_REGISTRATION_RECORD *PEH4_EXCEPTION_REGISTRATION_RECORD;

/* 10180 */
typedef tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;

/* 10181 */
typedef _IO_DRIVER_CREATE_CONTEXT *PIO_DRIVER_CREATE_CONTEXT;

/* 10182 */
typedef tagDROPSTRUCT *LPDROPSTRUCT;

/* 10183 */
typedef unsigned __int64 AssetClassId_t;

/* 10184 */
typedef tagENUMLOGFONTA *LPENUMLOGFONTA;

/* 10185 */
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *);

/* 10186 */
typedef char (__stdcall *PFAST_IO_PREPARE_MDL_WRITE)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10187 */
typedef unsigned int *LPDWORD;

/* 10188 */
typedef void __stdcall KKERNEL_ROUTINE(_KAPC *, void (__stdcall **)(void *, void *, void *), void **, void **, void **);

/* 10189 */
typedef int PLAYER_ID;

/* 10190 */
typedef _LIST_ENTRY *PLIST_ENTRY;

/* 10191 */
typedef const unsigned int *PCUUCSCHAR;

/* 10192 */
typedef void GLvoid;

/* 10193 */
typedef tagREGISTERWORDA *PREGISTERWORD;

/* 10194 */
typedef tagEXTLOGPEN32 *LPEXTLOGPEN32;

/* 10195 */
typedef int _Atomic_flag_t;

/* 10196 */
typedef void ALvoid;

/* 10197 */
typedef HCOLORSPACE__ *HCOLORSPACE;

/* 10198 */
typedef tagEXTLOGPEN32 *NPEXTLOGPEN32;

/* 10199 */
typedef int LSTATUS;

/* 10200 */
typedef void (__stdcall *SEC_GET_KEY_FN)(void *, void *, unsigned int, void **, int *);

/* 10201 */
typedef DIPROPHEADER *LPCDIPROPHEADER;

/* 10202 */
typedef _GROUP_AFFINITY *PGROUP_AFFINITY;

/* 10203 */
typedef _EVENT_DESCRIPTOR *PEVENT_DESCRIPTOR;

/* 10204 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSW *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

/* 10205 */
typedef _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;

/* 10206 */
typedef tagICONMETRICSA *PICONMETRICS;

/* 10207 */
typedef char uvec8[16];

/* 10208 */
typedef _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;

/* 10209 */
typedef unsigned __int64 ULONG64;

/* 10210 */
typedef unsigned int DWORD_PTR;

/* 10211 */
typedef _ICONINFOEXA *PICONINFOEX;

/* 10212 */
typedef _TRANSACTION_LIST_INFORMATION *PTRANSACTION_LIST_INFORMATION;

/* 10213 */
typedef __int64 *PLONG64;

/* 10214 */
typedef tagWNDCLASSA *PWNDCLASS;

/* 10215 */
typedef tagTPMPARAMS *LPTPMPARAMS;

/* 10216 */
typedef unsigned int *intrnman;

/* 10217 */
typedef _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;

/* 10218 */
typedef _MDL *(__stdcall *NET_BUFFER_ALLOCATE_MDL_HANDLER)(unsigned int *);

/* 10219 */
typedef tagBITMAPINFO *LPBITMAPINFO;

/* 10220 */
typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

/* 10221 */
typedef void (__stdcall *PFNFREELIBRARYWHENCALLBACKRETURNS)(struct _TP_CALLBACK_INSTANCE *, HINSTANCE__ *);

/* 10222 */
typedef char (__stdcall *PFAST_IO_UNLOCK_ALL)(_FILE_OBJECT *, struct _EPROCESS *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10223 */
typedef tagPELARRAY *PPELARRAY;

/* 10224 */
typedef unsigned int SDL_TLSID;

/* 10225 */
typedef unsigned int t_socket;

/* 10226 */
typedef void (__cdecl *XML_EndDoctypeDeclHandler)(void *);

/* 10227 */
typedef tagEMRSETPIXELV *PEMRSETPIXELV;

/* 10228 */
typedef unsigned int *p_socket;

/* 10229 */
typedef void __stdcall KNORMAL_ROUTINE(void *, void *, void *);

/* 10230 */
typedef int (__stdcall *PFAST_IO_ACQUIRE_FOR_CCFLUSH)(_FILE_OBJECT *, _DEVICE_OBJECT *);

/* 10231 */
typedef unsigned int stbiw_uint32;

/* 10232 */
typedef int SDL_dummy_sint64[1];

/* 10233 */
typedef unsigned int stbi__uint32;

/* 10234 */
typedef _TOKEN_AUDIT_POLICY *PTOKEN_AUDIT_POLICY;

/* 10235 */
typedef tagRID_DEVICE_INFO_HID *PRID_DEVICE_INFO_HID;

/* 10236 */
typedef _QUOTA_LIMITS_EX *PQUOTA_LIMITS_EX;

/* 10237 */
typedef tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;

/* 10238 */
typedef __int64 int64_t;

/* 10239 */
typedef int (__cdecl *AudioReadFunc)(void *, int, int, void *);

/* 10240 */
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, wchar_t *, int *);

/* 10241 */
typedef _SE_SECURITY_DESCRIPTOR *PSE_SECURITY_DESCRIPTOR;

/* 10242 */
typedef tagBITMAPCOREINFO *LPBITMAPCOREINFO;

/* 10243 */
typedef int __time32_t;

/* 10244 */
typedef tagICONMETRICSA *PICONMETRICSA;

/* 10245 */
typedef unsigned int lua_Unsigned;

/* 10246 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO64;

/* 10247 */
typedef tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;

/* 10248 */
typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;

/* 10249 */
typedef _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];

/* 10250 */
typedef tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;

/* 10251 */
typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

/* 10252 */
typedef _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;

/* 10253 */
typedef _MEMORY_BASIC_INFORMATION32 *PMEMORY_BASIC_INFORMATION32;

/* 10254 */
typedef _MINIDUMP_CALLBACK_INPUT *PMINIDUMP_CALLBACK_INPUT;

/* 10255 */
typedef tagICONMETRICSW *PICONMETRICSW;

/* 10256 */
typedef DIEFFECT *LPDIEFFECT;

/* 10257 */
typedef _VPB *PVPB;

/* 10258 */
typedef _APPLICATIONLAUNCH_SETTING_VALUE *PAPPLICATIONLAUNCH_SETTING_VALUE;

/* 10259 */
typedef char uint_fast8_t;

/* 10260 */
typedef DP_Player *const *const_pointer;

/* 10261 */
typedef tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;

/* 10262 */
typedef unsigned __int64 UGCQueryHandle_t;

/* 10263 */
typedef void (__stdcall *PFNGLVERTEXATTRIB4FVPROC)(unsigned int, const float *);

/* 10264 */
typedef _IO_RESOURCE_REQUIREMENTS_LIST *PIO_RESOURCE_REQUIREMENTS_LIST;

/* 10265 */
typedef tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;

/* 10266 */
typedef int INT;

/* 10267 */
typedef _MINIDUMP_CALLBACK_OUTPUT *PMINIDUMP_CALLBACK_OUTPUT;

/* 10268 */
typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESS;

/* 10269 */
typedef wchar_t **SNB;

/* 10270 */
typedef char (__stdcall *PSECURE_MEMORY_CACHE_CALLBACK)(void *, unsigned int);

/* 10271 */
typedef bool (__cdecl *eventCaptureFunc)(uiMenu *, SDL_Rect *, SDL_Event *);

/* 10272 */
typedef tagEMRPOLYLINE *PEMRPOLYGON;

/* 10273 */
typedef tagMETAFILEPICT *LPMETAFILEPICT;

/* 10274 */
typedef _MINIDUMP_USER_STREAM *PMINIDUMP_USER_STREAM;

/* 10275 */
typedef _FILE_END_OF_FILE_INFO *PFILE_END_OF_FILE_INFO;

/* 10276 */
typedef unsigned int LCID;

/* 10277 */
typedef HICON__ *HICON;

/* 10278 */
typedef tagACCEL *LPACCEL;

/* 10279 */
typedef char *LPSTR;

/* 10280 */
typedef __int64 int_least64_t;

/* 10281 */
typedef tagBITMAP *PBITMAP;

/* 10282 */
typedef char *NPSTR;

/* 10283 */
typedef char GLchar;

/* 10284 */
typedef int (__stdcall *PFNCOMPARESTRINGEX)(const wchar_t *, unsigned int, const wchar_t *, int, const wchar_t *, int, _nlsversioninfo *, void *, int);

/* 10285 */
typedef HWINEVENTHOOK__ *HWINEVENTHOOK;

/* 10286 */
typedef _PROCESSOR_RELATIONSHIP *PPROCESSOR_RELATIONSHIP;

/* 10287 */
typedef bool (__cdecl *VerificationCallback)(void *);

/* 10288 */
typedef HBITMAP__ *HBITMAP;

/* 10289 */
typedef void *PSID;

/* 10290 */
typedef int SDL_TimerID;

/* 10291 */
typedef void (__stdcall *PFNGLENABLEVERTEXATTRIBARRAYPROC)(unsigned int);

/* 10292 */
typedef _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;

/* 10293 */
typedef _TP_IO *PTP_IO;

/* 10294 */
typedef _JOB_SET_ARRAY *PJOB_SET_ARRAY;

/* 10295 */
typedef unsigned int (__cdecl *SteamAPI_CheckCallbackRegistered_t)(int);

/* 10296 */
typedef unsigned __int64 SteamLeaderboard_t;

/* 10297 */
typedef _nlsversioninfo *LPNLSVERSIONINFO;

/* 10298 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILE;

/* 10299 */
typedef void (__cdecl *XML_EntityDeclHandler)(void *, const char *, int, const char *, int, const char *, const char *, const char *, const char *);

/* 10300 */
typedef int khronos_intptr_t;

/* 10301 */
typedef void (__stdcall *PFNGLDEBUGMESSAGECALLBACKARBPROC)(void (__stdcall *)(unsigned int, unsigned int, unsigned int, unsigned int, int, const char *, const void *), const void *);

/* 10302 */
typedef _IP_ADAPTER_MULTICAST_ADDRESS_XP *PIP_ADAPTER_MULTICAST_ADDRESS_XP;

/* 10303 */
typedef char IPSEC_CIPHER_CONFIG;

/* 10304 */
typedef unsigned int TP_WAIT_RESULT;

/* 10305 */
typedef void (__stdcall *PFNGLDELETESHADERPROC)(unsigned int);

/* 10306 */
typedef unsigned int SDL_AudioDeviceID;

/* 10307 */
typedef void (__stdcall *PFNGLCLIENTACTIVETEXTUREARBPROC)(unsigned int);

/* 10308 */
typedef tagRAWKEYBOARD *PRAWKEYBOARD;

/* 10309 */
typedef unsigned int (__stdcall *PFE_IMPORT_FUNC)(char *, void *, unsigned int *);

/* 10310 */
typedef _NETRESOURCEW *LPNETRESOURCEW;

/* 10311 */
typedef _RTL_CRITICAL_SECTION_DEBUG *LPCRITICAL_SECTION_DEBUG;

/* 10312 */
typedef __int64 intmax_t;

/* 10313 */
typedef tagRAWHID *LPRAWHID;

/* 10314 */
typedef _RGNDATA *PRGNDATA;

/* 10315 */
typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;

/* 10316 */
typedef tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;

/* 10317 */
typedef _CACHE_DESCRIPTOR *PCACHE_DESCRIPTOR;

/* 10318 */
typedef int z_intf;

/* 10319 */
typedef tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE;

/* 10320 */
typedef tagAXESLISTW *PAXESLISTW;

/* 10321 */
typedef _SecHandle *PCredHandle;

/* 10322 */
typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;

/* 10323 */
typedef wchar_t *LPOLESTR;

/* 10324 */
typedef _SERVICE_PREFERRED_NODE_INFO *LPSERVICE_PREFERRED_NODE_INFO;

/* 10325 */
typedef _FILE_ID_TYPE *PFILE_ID_TYPE;

/* 10326 */
typedef tagEXTLOGFONTA *PEXTLOGFONTA;

/* 10327 */
typedef tagHELPWININFOW *LPHELPWININFOW;

/* 10328 */
typedef tagINPUTCONTEXT2 *LPINPUTCONTEXT2;

/* 10329 */
typedef _EXCEPTION_DISPOSITION __stdcall EXCEPTION_ROUTINE(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 10330 */
typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

/* 10331 */
typedef unsigned int EGLenum;

/* 10332 */
typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;

/* 10333 */
typedef __int16 vorbis_fpu_control;

/* 10334 */
typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;

/* 10335 */
typedef unsigned int GLhandleARB;

/* 10336 */
typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCT;

/* 10337 */
typedef _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;

/* 10338 */
typedef void (__cdecl *SteamAPIWarningMessageHook_t)(int, const char *);

/* 10339 */
typedef const char *pcchar_t;

/* 10340 */
typedef long double DATE;

/* 10341 */
typedef tagWCRANGE *PWCRANGE;

/* 10342 */
typedef tagCWPRETSTRUCT *PCWPRETSTRUCT;

/* 10343 */
typedef unsigned int (__stdcall *PTHREAD_START_ROUTINE)(void *);

/* 10344 */
typedef _SYSTEMTIME *PSYSTEMTIME;

/* 10345 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;

/* 10346 */
typedef tagSTYLEBUFA *NPSTYLEBUF;

/* 10347 */
typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(void *);

/* 10348 */
typedef tagSTYLEBUFA *LPSTYLEBUF;

/* 10349 */
typedef char GLboolean;

/* 10350 */
typedef int (__stdcall *DESKTOPENUMPROCA)(char *, int);

/* 10351 */
typedef int (__cdecl *PEXCEPTION_FILTER)();

/* 10352 */
typedef char ALboolean;

/* 10353 */
typedef HHOOK__ *HHOOK;

/* 10354 */
typedef tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE;

/* 10355 */
typedef struct _ETHREAD *PETHREAD;

/* 10356 */
typedef int SCODE;

/* 10357 */
typedef wchar_t *PUWSTR;

/* 10358 */
typedef _FILE_OBJECT *PFILE_OBJECT;

/* 10359 */
typedef ID3DXEffectPool *LPD3DXEFFECTPOOL;

/* 10360 */
typedef HDC__ *EGLNativeDisplayType;

/* 10361 */
typedef __int64 fpos_t;

/* 10362 */
typedef unsigned int lu_mem;

/* 10363 */
typedef tagEMR *PEMR;

/* 10364 */
typedef _TRANSACTION_BIND_INFORMATION *PTRANSACTION_BIND_INFORMATION;

/* 10365 */
typedef setloc_downlevel_struct *_psetloc_downlevel_struct;

/* 10366 */
typedef int (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 10367 */
typedef long double lua_Number;

/* 10368 */
typedef int (__cdecl *close_file_func)(void *, void *);

/* 10369 */
typedef unsigned __int64 UGCFileWriteStreamHandle_t;

/* 10370 */
typedef _PROCESSOR_NUMBER *PPROCESSOR_NUMBER;

/* 10371 */
typedef pvalueA *PPVALUE;

/* 10372 */
typedef _CERT_INFO *PCERT_INFO;

/* 10373 */
typedef tagSTYLEBUFW *LPSTYLEBUFW;

/* 10374 */
typedef tagSTYLEBUFW *NPSTYLEBUFW;

/* 10375 */
typedef tagANIMATIONINFO *LPANIMATIONINFO;

/* 10376 */
typedef tagCWPRETSTRUCT *NPCWPRETSTRUCT;

/* 10377 */
typedef tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX;

/* 10378 */
typedef tagCWPRETSTRUCT *LPCWPRETSTRUCT;

/* 10379 */
typedef unsigned int DepotId_t;

/* 10380 */
typedef _VIDEOPARAMETERS *PVIDEOPARAMETERS;

/* 10381 */
typedef char __stdcall FAST_IO_QUERY_BASIC_INFO(_FILE_OBJECT *, char, _FILE_BASIC_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10382 */
typedef unsigned __int64 GID_t;

/* 10383 */
typedef tagMENUINFO *LPCMENUINFO;

/* 10384 */
typedef void __stdcall KDEFERRED_ROUTINE(_KDPC *, void *, void *, void *);

/* 10385 */
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

/* 10386 */
typedef char *PUTSTR;

/* 10387 */
typedef XML_Error __cdecl Processor(XML_ParserStruct *, const char *, const char *, const char **);

/* 10388 */
typedef int s_long;

/* 10389 */
typedef tagSTYLEBUFA *NPSTYLEBUFA;

/* 10390 */
typedef unsigned int u_long;

/* 10391 */
typedef void (__cdecl *XML_AttlistDeclHandler)(void *, const char *, const char *, const char *, const char *, int);

/* 10392 */
typedef tagSTYLEBUFA *LPSTYLEBUFA;

/* 10393 */
typedef void *z_voidp;

/* 10394 */
typedef _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;

/* 10395 */
typedef tagCOMBOBOXINFO *LPCOMBOBOXINFO;

/* 10396 */
typedef _EH4_SCOPETABLE *PEH4_SCOPETABLE;

/* 10397 */
typedef _ABCFLOAT *NPABCFLOAT;

/* 10398 */
typedef tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;

/* 10399 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

/* 10400 */
typedef _ABCFLOAT *LPABCFLOAT;

/* 10401 */
typedef _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;

/* 10402 */
typedef unsigned int _dev_t;

/* 10403 */
typedef _ABCFLOAT *PABCFLOAT;

/* 10404 */
typedef _CONTEXT *PCONTEXT;

/* 10405 */
typedef int (__stdcall *PFNGETDATEFORMATEX)(const wchar_t *, unsigned int, _SYSTEMTIME *, const wchar_t *, unsigned __int16 *, int, const wchar_t *);

/* 10406 */
typedef t_buffer_ *p_buffer;

/* 10407 */
typedef unsigned int TfClientId;

/* 10408 */
typedef void (__stdcall *PFNGLGETSHADERINFOLOGPROC)(unsigned int, int, int *, char *);

/* 10409 */
typedef _XSTATE_FEATURE *PXSTATE_FEATURE;

/* 10410 */
typedef tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;

/* 10411 */
typedef SYSTEM_POWER_LEVEL *PSYSTEM_POWER_LEVEL;

/* 10412 */
typedef void *HDWP;

/* 10413 */
typedef unsigned int TfEditCookie;

/* 10414 */
typedef _ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

/* 10415 */
typedef tagPELARRAY *LPPELARRAY;

/* 10416 */
typedef unsigned __int16 Pos;

/* 10417 */
typedef int (__cdecl *_onexit_t)();

/* 10418 */
typedef tagPELARRAY *NPPELARRAY;

/* 10419 */
typedef tagMOUSEKEYS *LPMOUSEKEYS;

/* 10420 */
typedef _DIACTIONW *LPDIACTIONW;

/* 10421 */
typedef tagTEXTMETRICA *NPTEXTMETRIC;

/* 10422 */
typedef tagTEXTMETRICA *LPTEXTMETRIC;

/* 10423 */
typedef _XSTATE_CONTEXT *PXSTATE_CONTEXT;

/* 10424 */
typedef float _FP32;

/* 10425 */
typedef _EVENT_DESCRIPTOR *PCEVENT_DESCRIPTOR;

/* 10426 */
typedef _DPA *HDPA;

/* 10427 */
typedef tagMETAHEADER *LPMETAHEADER;

/* 10428 */
typedef _TRANSACTIONMANAGER_LOG_INFORMATION *PTRANSACTIONMANAGER_LOG_INFORMATION;

/* 10429 */
typedef HSPRITE__ *HSPRITE;

/* 10430 */
typedef tagXFORM *LPXFORM;

/* 10431 */
typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA;

/* 10432 */
typedef unsigned int rsize_t;

/* 10433 */
typedef int SSIZE_T;

/* 10434 */
typedef unsigned int *PSIZE_T;

/* 10435 */
typedef _OFSTRUCT *POFSTRUCT;

/* 10436 */
typedef tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;

/* 10437 */
typedef tagMINMAXINFO *PMINMAXINFO;

/* 10438 */
typedef HGESTUREINFO__ *HGESTUREINFO;

/* 10439 */
typedef POWERBROADCAST_SETTING *PPOWERBROADCAST_SETTING;

/* 10440 */
typedef tagSERIALKEYSW *LPSERIALKEYSW;

/* 10441 */
typedef int SDL_dummy_sint16[1];

/* 10442 */
typedef _LIST_ENTRY *PRLIST_ENTRY;

/* 10443 */
typedef const wchar_t *STRSAFE_PCNZWCH;

/* 10444 */
typedef _HARDWARE_COUNTER_TYPE *PHARDWARE_COUNTER_TYPE;

/* 10445 */
typedef _UMS_SCHEDULER_STARTUP_INFO *PUMS_SCHEDULER_STARTUP_INFO;

/* 10446 */
typedef _RTL_CONDITION_VARIABLE *PRTL_CONDITION_VARIABLE;

/* 10447 */
typedef void *PACCESS_TOKEN;

/* 10448 */
typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;

/* 10449 */
typedef _DEVICE_CAPABILITIES *PDEVICE_CAPABILITIES;

/* 10450 */
typedef tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE;

/* 10451 */
typedef char __stdcall FAST_IO_UNLOCK_ALL_BY_KEY(_FILE_OBJECT *, void *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10452 */
typedef tagGESTUREINFO *PGESTUREINFO;

/* 10453 */
typedef tagSERIALKEYSA *LPSERIALKEYSA;

/* 10454 */
typedef tagMDINEXTMENU *PMDINEXTMENU;

/* 10455 */
typedef int (__stdcall *DATEFMT_ENUMPROCEXA)(char *, unsigned int);

/* 10456 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEA;

/* 10457 */
typedef _TP_WORK *PTP_WORK;

/* 10458 */
typedef _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;

/* 10459 */
typedef tagTEXTMETRICW *LPTEXTMETRICW;

/* 10460 */
typedef _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;

/* 10461 */
typedef tagTEXTMETRICW *NPTEXTMETRICW;

/* 10462 */
typedef __int64 int_fast64_t;

/* 10463 */
typedef void *unzFile;

/* 10464 */
typedef tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;

/* 10465 */
typedef tagTITLEBARINFO *LPTITLEBARINFO;

/* 10466 */
typedef unsigned __int16 VARTYPE;

/* 10467 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;

/* 10468 */
typedef tagTEXTMETRICA *NPTEXTMETRICA;

/* 10469 */
typedef tagEMRCREATEPEN *PEMRCREATEPEN;

/* 10470 */
typedef tagTEXTMETRICA *LPTEXTMETRICA;

/* 10471 */
typedef tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;

/* 10472 */
typedef int (__stdcall *DATEFMT_ENUMPROCEXW)(wchar_t *, unsigned int);

/* 10473 */
typedef void (*SteamLogger_t)(const char *, ...);

/* 10474 */
typedef _IP_ADAPTER_UNICAST_ADDRESS_LH *PIP_ADAPTER_UNICAST_ADDRESS;

/* 10475 */
typedef int (__cdecl *lua_Writer)(lua_State *, const void *, unsigned int, void *);

/* 10476 */
typedef int (__cdecl *_PIFV)();

/* 10477 */
typedef HTASK__ *HTASK;

/* 10478 */
typedef unsigned __int16 PacketLength;

/* 10479 */
typedef tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE;

/* 10480 */
typedef _EH4_SCOPETABLE_RECORD *PEH4_SCOPETABLE_RECORD;

/* 10481 */
typedef _PPL_LOOKASIDE_LIST *PPPL_LOOKASIDE_LIST;

/* 10482 */
typedef _SUPPORTED_OS_INFO *PSUPPORTED_OS_INFO;

/* 10483 */
typedef unsigned int D3DCOLOR;

/* 10484 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFO;

/* 10485 */
typedef int vpx_codec_flags_t;

/* 10486 */
typedef void __stdcall FREE_FUNCTION(void *);

/* 10487 */
typedef tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;

/* 10488 */
typedef _PRIVILEGE_SET *PPRIVILEGE_SET;

/* 10489 */
typedef tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE;

/* 10490 */
typedef ID3DXSprite *LPD3DXSPRITE;

/* 10491 */
typedef int SECURITY_STATUS;

/* 10492 */
typedef PPM_WMI_PERF_STATE *PPPM_WMI_PERF_STATE;

/* 10493 */
typedef __int16 s_short;

/* 10494 */
typedef unsigned __int64 SteamAPICall_t;

/* 10495 */
typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDV;

/* 10496 */
typedef unsigned __int16 u_short;

/* 10497 */
typedef void *HDEVNOTIFY;

/* 10498 */
typedef unsigned __int64 uint64_t;

/* 10499 */
typedef _DSA *HDSA;

/* 10500 */
typedef tagSERIALKEYSA *LPSERIALKEYS;

/* 10501 */
typedef void (__cdecl *PFNSTEAMAPI_REGISTER_CALL_RESULT)(CCallbackBase *, unsigned __int64);

/* 10502 */
typedef unsigned int char32_t;

/* 10503 */
typedef tagSTYLEBUFW *PSTYLEBUFW;

/* 10504 */
typedef tagGUITHREADINFO *PGUITHREADINFO;

/* 10505 */
typedef _SERVICE_STATUS *LPSERVICE_STATUS;

/* 10506 */
typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFO;

/* 10507 */
typedef unsigned int _fsize_t;

/* 10508 */
typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFO;

/* 10509 */
typedef tagEMRPOLYLINE16 *PEMRPOLYLINETO16;

/* 10510 */
typedef int mbstate_t;

/* 10511 */
typedef tagMULTIKEYHELPA *LPMULTIKEYHELPA;

/* 10512 */
typedef _CONSOLE_HISTORY_INFO *PCONSOLE_HISTORY_INFO;

/* 10513 */
typedef tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;

/* 10514 */
typedef tagCBT_CREATEWNDA *LPCBT_CREATEWND;

/* 10515 */
typedef tagVersionedStream *LPVERSIONEDSTREAM;

/* 10516 */
typedef int INT_PTR;

/* 10517 */
typedef tagMULTIKEYHELPW *LPMULTIKEYHELPW;

/* 10518 */
typedef _DEBUG_EVENT *LPDEBUG_EVENT;

/* 10519 */
typedef _NPAGED_LOOKASIDE_LIST *PNPAGED_LOOKASIDE_LIST;

/* 10520 */
typedef _SERVICE_TIMECHANGE_INFO *PSERVICE_TIMECHANGE_INFO;

/* 10521 */
typedef tagTITLEBARINFOEX *LPTITLEBARINFOEX;

/* 10522 */
typedef void (__cdecl *PFNSTEAMAPI_RUN_CALLBACKS)();

/* 10523 */
typedef struct _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE;

/* 10524 */
typedef _COMSTAT *LPCOMSTAT;

/* 10525 */
typedef unsigned int ALG_ID;

/* 10526 */
typedef _SecBufferDesc *PSecBufferDesc;

/* 10527 */
typedef _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;

/* 10528 */
typedef void *SYS_ThreadHandle;

/* 10529 */
typedef tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;

/* 10530 */
typedef void (__stdcall *PFAST_IO_RELEASE_FILE)(_FILE_OBJECT *);

/* 10531 */
typedef void (__cdecl *terminate_handler)();

/* 10532 */
typedef tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;

/* 10533 */
typedef _TOKEN_MANDATORY_LABEL *PTOKEN_MANDATORY_LABEL;

/* 10534 */
typedef HPALETTE__ *HPALETTE;

/* 10535 */
typedef int FXPT2DOT30;

/* 10536 */
typedef _ENLISTMENT_BASIC_INFORMATION *PENLISTMENT_BASIC_INFORMATION;

/* 10537 */
typedef int (__stdcall *PFNMessageBoxW)(HWND__ *, const wchar_t *, const wchar_t *, unsigned int);

/* 10538 */
typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;

/* 10539 */
typedef unsigned int DWORD32;

/* 10540 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

/* 10541 */
typedef int (__stdcall *OLDFONTENUMPROCW)(tagLOGFONTW *, tagTEXTMETRICW *, unsigned int, int);

/* 10542 */
typedef void (__stdcall *PKNORMAL_ROUTINE)(void *, void *, void *);

/* 10543 */
typedef wchar_t *PUZZWSTR;

/* 10544 */
typedef _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;

/* 10545 */
typedef void (__cdecl *lua_Hook)(lua_State *, lua_Debug *);

/* 10546 */
typedef char *PUZZTSTR;

/* 10547 */
typedef HRESULT (__stdcall *fnDirectSoundEnumerateW)(int (__stdcall *)(_GUID *, const wchar_t *, const wchar_t *, void *), void *);

/* 10548 */
typedef tagMULTIKEYHELPA *LPMULTIKEYHELP;

/* 10549 */
typedef DIEFFECTINFOW *LPCDIEFFECTINFOW;

/* 10550 */
typedef HENHMETAFILE__ *HENHMETAFILE;

/* 10551 */
typedef tagRAWINPUT *LPRAWINPUT;

/* 10552 */
typedef tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;

/* 10553 */
typedef tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;

/* 10554 */
typedef _LUID *PLUID;

/* 10555 */
typedef tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;

/* 10556 */
typedef HDESK__ *HDESK;

/* 10557 */
typedef int socklen_t;

/* 10558 */
typedef int (__stdcall *DATEFMT_ENUMPROCEXEX)(wchar_t *, unsigned int, int);

/* 10559 */
typedef int SDL_dummy_uint16[1];

/* 10560 */
typedef unsigned int HTTPRequestHandle;

/* 10561 */
typedef char (__stdcall *PFAST_IO_READ)(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10562 */
typedef SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

/* 10563 */
typedef _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;

/* 10564 */
typedef tagRAWMOUSE *LPRAWMOUSE;

/* 10565 */
typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICE;

/* 10566 */
typedef int khronos_int32_t;

/* 10567 */
typedef void (__cdecl *_PMFN)(void *);

/* 10568 */
typedef char __stdcall FAST_IO_WRITE(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10569 */
typedef _RECTL *LPCRECTL;

/* 10570 */
typedef _OVERLAPPED *LPWSAOVERLAPPED;

/* 10571 */
typedef PPM_IDLE_STATE_ACCOUNTING_EX *PPPM_IDLE_STATE_ACCOUNTING_EX;

/* 10572 */
typedef unsigned int __cdecl ReadFunction(void *, void *, unsigned int);

/* 10573 */
typedef int khronos_ssize_t;

/* 10574 */
typedef tagLOCALESIGNATURE *LPLOCALESIGNATURE;

/* 10575 */
typedef tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;

/* 10576 */
typedef _IO_COUNTERS *PIO_COUNTERS;

/* 10577 */
typedef void (__stdcall *PFNGLVERTEXATTRIB2FVPROC)(unsigned int, const float *);

/* 10578 */
typedef _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;

/* 10579 */
typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;

/* 10580 */
typedef tagTTPOLYCURVE *LPTTPOLYCURVE;

/* 10581 */
typedef MENUITEMTEMPLATEHEADER *PMENUITEMTEMPLATEHEADER;

/* 10582 */
typedef long double l_uacNumber;

/* 10583 */
typedef _REFERENCE_OBJECT *PREFERENCE_OBJECT;

/* 10584 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY;

/* 10585 */
typedef int lua_Object;

/* 10586 */
typedef int __stdcall DRIVER_INITIALIZE(_DRIVER_OBJECT *, _UNICODE_STRING *);

/* 10587 */
typedef void (__stdcall *PFNPREPARE_FOR_THROW)(void *);

/* 10588 */
typedef block_state (__cdecl *compress_func)(z_internal_state *, int);

/* 10589 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY;

/* 10590 */
typedef unsigned int size_type;

/* 10591 */
typedef _LARGE_INTEGER *PLARGE_INTEGER;

/* 10592 */
typedef long double max_align_t;

/* 10593 */
typedef int (__stdcall *CALINFO_ENUMPROCEXA)(char *, unsigned int);

/* 10594 */
typedef int ogg_int32_t;

/* 10595 */
typedef void *__cdecl ad_malloc(unsigned int);

/* 10596 */
typedef void __stdcall FAST_IO_RELEASE_FILE(_FILE_OBJECT *);

/* 10597 */
typedef _DIDEVICEIMAGEINFOW *LPDIDEVICEIMAGEINFOW;

/* 10598 */
typedef _CACHE_RELATIONSHIP *PCACHE_RELATIONSHIP;

/* 10599 */
typedef int (__stdcall *CALINFO_ENUMPROCEXW)(wchar_t *, unsigned int);

/* 10600 */
typedef char stbtt_int8;

/* 10601 */
typedef int (__stdcall *GRAYSTRINGPROC)(HDC__ *, int, int);

/* 10602 */
typedef unsigned int SOCKET;

/* 10603 */
typedef _devicemodeA *PDEVMODE;

/* 10604 */
typedef void *EGLContext;

/* 10605 */
typedef int XML_Index;

/* 10606 */
typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;

/* 10607 */
typedef void (__stdcall *GLDEBUGPROCARB)(unsigned int, unsigned int, unsigned int, unsigned int, int, const char *, const void *);

/* 10608 */
typedef unsigned int NLS_FUNCTION;

/* 10609 */
typedef _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT;

/* 10610 */
typedef void (__stdcall *PFNGLUNIFORM1FPROC)(int, float);

/* 10611 */
typedef tagCIEXYZ *LPCIEXYZ;

/* 10612 */
typedef _FILE_RENAME_INFO *PFILE_RENAME_INFO;

/* 10613 */
typedef _SERVICE_SID_INFO *LPSERVICE_SID_INFO;

/* 10614 */
typedef PPM_WMI_IDLE_STATE *PPPM_WMI_IDLE_STATE;

/* 10615 */
typedef void (__cdecl *SDL_AudioCallback)(void *, char *, int);

/* 10616 */
typedef _OVERLAPPED_ENTRY *LPOVERLAPPED_ENTRY;

/* 10617 */
typedef HINSTANCE__ *HINSTANCE;

/* 10618 */
typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFO;

/* 10619 */
typedef void (__stdcall *PFNGLGETOBJECTPARAMETERIVARBPROC)(unsigned int, unsigned int, int *);

/* 10620 */
typedef _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;

/* 10621 */
typedef _NETRESOURCEA *LPNETRESOURCEA;

/* 10622 */
typedef const char *LPCTSTR;

/* 10623 */
typedef _SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

/* 10624 */
typedef _devicemodeW *PDEVMODEW;

/* 10625 */
typedef int (__cdecl *WOUTPUTFN)(_iobuf *, const wchar_t *, localeinfo_struct *, char *);

/* 10626 */
typedef unsigned int u_int;

/* 10627 */
typedef _IP_ADAPTER_ANYCAST_ADDRESS_XP *PIP_ADAPTER_ANYCAST_ADDRESS_XP;

/* 10628 */
typedef tagAXESLISTA *PAXESLISTA;

/* 10629 */
typedef tWAVEFORMATEX *LPCWAVEFORMATEX;

/* 10630 */
typedef _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;

/* 10631 */
typedef tagEXTLOGFONTW *PEXTLOGFONTW;

/* 10632 */
typedef tagHELPWININFOA *LPHELPWININFOA;

/* 10633 */
typedef _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;

/* 10634 */
typedef int (__stdcall *LPDIENUMDEVICESCALLBACKW)(DIDEVICEINSTANCEW *, void *);

/* 10635 */
typedef tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;

/* 10636 */
typedef _devicemodeA *PDEVMODEA;

/* 10637 */
typedef const wchar_t **PZPCWSTR;

/* 10638 */
typedef tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;

/* 10639 */
typedef int (__stdcall *CALINFO_ENUMPROCEXEX)(wchar_t *, unsigned int, wchar_t *, int);

/* 10640 */
typedef tagEMRSELECTCLIPPATH *PEMRSETLAYOUT;

/* 10641 */
typedef tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;

/* 10642 */
typedef tagRAWINPUTHEADER *PRAWINPUTHEADER;

/* 10643 */
typedef _IP_ADAPTER_DNS_SUFFIX *PIP_ADAPTER_DNS_SUFFIX;

/* 10644 */
typedef tagACTCTX_SECTION_KEYED_DATA_2600 *PACTCTX_SECTION_KEYED_DATA_2600;

/* 10645 */
typedef int _Mbstatet;

/* 10646 */
typedef _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;

/* 10647 */
typedef unsigned int ACCESS_MASK;

/* 10648 */
typedef tagSTYLEBUFA *PSTYLEBUF;

/* 10649 */
typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;

/* 10650 */
typedef int __ehstate_t;

/* 10651 */
typedef const char *PCNZCH;

/* 10652 */
typedef tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;

/* 10653 */
typedef HWAVEOUT__ *HWAVEOUT;

/* 10654 */
typedef HWND__ *NativeWindowType;

/* 10655 */
typedef int (__stdcall *DESKTOPENUMPROCW)(wchar_t *, int);

/* 10656 */
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

/* 10657 */
typedef _SLIST_HEADER *PSLIST_HEADER;

/* 10658 */
typedef _CONSOLE_READCONSOLE_CONTROL *PCONSOLE_READCONSOLE_CONTROL;

/* 10659 */
typedef int *PLONG32;

/* 10660 */
typedef _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;

/* 10661 */
typedef void (__stdcall *PINTERFACE_DEREFERENCE)(void *);

/* 10662 */
typedef _TOKEN_ACCESS_INFORMATION *PTOKEN_ACCESS_INFORMATION;

/* 10663 */
typedef unsigned int ULONG32;

/* 10664 */
typedef _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

/* 10665 */
typedef unsigned __int16 ino_t;

/* 10666 */
typedef _TOKEN_OWNER *PTOKEN_OWNER;

/* 10667 */
typedef _DIDATAFORMAT *LPCDIDATAFORMAT;

/* 10668 */
typedef const wchar_t *PCWSTR;

/* 10669 */
typedef _KCRM_TRANSACTION_BLOB *PKCRM_TRANSACTION_BLOB;

/* 10670 */
typedef _REASON_CONTEXT *PREASON_CONTEXT;

/* 10671 */
typedef tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;

/* 10672 */
typedef char enet_uint8;

/* 10673 */
typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(struct _TP_CALLBACK_INSTANCE *, void *);

/* 10674 */
typedef _TRANSACTION_ENLISTMENTS_INFORMATION *PTRANSACTION_ENLISTMENTS_INFORMATION;

/* 10675 */
typedef char int8_t;

/* 10676 */
typedef _RASTERIZER_STATUS *LPRASTERIZER_STATUS;

/* 10677 */
typedef char Salt_t[8];

/* 10678 */
typedef unsigned __int16 COLOR16;

/* 10679 */
typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICS;

/* 10680 */
typedef _XSTATE_CONFIGURATION *PXSTATE_CONFIGURATION;

/* 10681 */
typedef int (__cdecl *AudioSeekFunc)(void *, int, int);

/* 10682 */
typedef _ACE_HEADER *PACE_HEADER;

/* 10683 */
typedef const char *PCTSTR;

/* 10684 */
typedef _SCATTER_GATHER_LIST *PSCATTER_GATHER_LIST;

/* 10685 */
typedef _TP_CALLBACK_ENVIRON_V3 *PTP_CALLBACK_ENVIRON;

/* 10686 */
typedef unsigned int fexcept_t;

/* 10687 */
typedef int int32_t;

/* 10688 */
typedef tagABORTPATH *PEMRREALIZEPALETTE;

/* 10689 */
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

/* 10690 */
typedef void *(__cdecl *lua_Alloc)(void *, void *, unsigned int, unsigned int);

/* 10691 */
typedef tagRID_DEVICE_INFO *PRID_DEVICE_INFO;

/* 10692 */
typedef tagCANDIDATEFORM *LPCANDIDATEFORM;

/* 10693 */
typedef void (__cdecl *XML_ElementDeclHandler)(void *, const char *, XML_cp *);

/* 10694 */
typedef val_context *PVALCONTEXT;

/* 10695 */
typedef tagCANDIDATEFORM *NPCANDIDATEFORM;

/* 10696 */
typedef char lu_byte;

/* 10697 */
typedef unsigned int z_uInt;

/* 10698 */
typedef tagMDINEXTMENU *LPMDINEXTMENU;

/* 10699 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;

/* 10700 */
typedef _LARGE_INTEGER *PTimeStamp;

/* 10701 */
typedef _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;

/* 10702 */
typedef unsigned int b_uint;

/* 10703 */
typedef void (__cdecl *unexpected_handler)();

/* 10704 */
typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;

/* 10705 */
typedef IMAGE_COR20_HEADER *PIMAGE_COR20_HEADER;

/* 10706 */
typedef tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;

/* 10707 */
typedef unsigned int GEOTYPE;

/* 10708 */
typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);

/* 10709 */
typedef int (__stdcall *PROC)();

/* 10710 */
typedef _ICONINFO *PICONINFO;

/* 10711 */
typedef void *HMETAFILEPICT;

/* 10712 */
typedef _MEMORY_BASIC_INFORMATION64 *PMEMORY_BASIC_INFORMATION64;

/* 10713 */
typedef tagWNDCLASSEXA *PWNDCLASSEX;

/* 10714 */
typedef _NET_BUFFER *PNET_BUFFER;

/* 10715 */
typedef tagLOGBRUSH *PLOGBRUSH;

/* 10716 */
typedef char *PNZTCH;

/* 10717 */
typedef _KTMOBJECT_CURSOR *PKTMOBJECT_CURSOR;

/* 10718 */
typedef unsigned int _Atomic_integral_t;

/* 10719 */
typedef void *(__cdecl *realloc_t)(void *, unsigned int);

/* 10720 */
typedef void *zipFile;

/* 10721 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATE;

/* 10722 */
typedef void (__fastcall *PTERMINATION_HANDLER)(int);

/* 10723 */
typedef _WIN32_STREAM_ID *LPWIN32_STREAM_ID;

/* 10724 */
typedef _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;

/* 10725 */
typedef tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;

/* 10726 */
typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICS;

/* 10727 */
typedef bool (__cdecl *DP_EnumPlayersCallback)(int, int, const char *, unsigned int, void *);

/* 10728 */
typedef _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW;

/* 10729 */
typedef unsigned int LGRPID;

/* 10730 */
typedef _SYSTEM_ALARM_CALLBACK_ACE *PSYSTEM_ALARM_CALLBACK_ACE;

/* 10731 */
typedef _RTL_DYNAMIC_HASH_TABLE *PRTL_DYNAMIC_HASH_TABLE;

/* 10732 */
typedef int ALCint;

/* 10733 */
typedef tagCOMBOBOXINFO *PCOMBOBOXINFO;

/* 10734 */
typedef tagWTSSESSION_NOTIFICATION *PWTSSESSION_NOTIFICATION;

/* 10735 */
typedef int _I32;

/* 10736 */
typedef void (__cdecl *new_handler)();

/* 10737 */
typedef DLGTEMPLATE *LPCDLGTEMPLATE;

/* 10738 */
typedef _KTMOBJECT_TYPE *PKTMOBJECT_TYPE;

/* 10739 */
typedef _KCRM_TRANSACTION_BLOB *PRKCRM_TRANSACTION_BLOB;

/* 10740 */
typedef wchar_t *PWSTR;

/* 10741 */
typedef const char *LPCSTR;

/* 10742 */
typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;

/* 10743 */
typedef tagLOGPALETTE *LPLOGPALETTE;

/* 10744 */
typedef _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;

/* 10745 */
typedef unsigned __int16 CLIPFORMAT;

/* 10746 */
typedef tagLOGPALETTE *NPLOGPALETTE;

/* 10747 */
typedef t_io_ *p_io;

/* 10748 */
typedef char __stdcall FAST_IO_QUERY_STANDARD_INFO(_FILE_OBJECT *, char, _FILE_STANDARD_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10749 */
typedef _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;

/* 10750 */
typedef void (__cdecl *XML_NotationDeclHandler)(void *, const char *, const char *, const char *, const char *);

/* 10751 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEW;

/* 10752 */
typedef void *(__stdcall *PALLOCATE_FUNCTION_EX)(_POOL_TYPE, unsigned int, unsigned int, _LOOKASIDE_LIST_EX *);

/* 10753 */
typedef tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;

/* 10754 */
typedef int errno_t;

/* 10755 */
typedef unsigned int z_uLongf;

/* 10756 */
typedef tagDIBSECTION *PDIBSECTION;

/* 10757 */
typedef _TOKEN_ELEVATION_TYPE *PTOKEN_ELEVATION_TYPE;

/* 10758 */
typedef void (__stdcall *PFAST_IO_ACQUIRE_FILE)(_FILE_OBJECT *);

/* 10759 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

/* 10760 */
typedef int LONG_PTR;

/* 10761 */
typedef int int_fast32_t;

/* 10762 */
typedef tagDESIGNVECTOR *LPDESIGNVECTOR;

/* 10763 */
typedef SYSTEM_BATTERY_STATE *PSYSTEM_BATTERY_STATE;

/* 10764 */
typedef void (__stdcall *PFNCLOSETHREADPOOLWAIT)(_TP_WAIT *);

/* 10765 */
typedef const char *(__cdecl *lua_Reader)(lua_State *, void *, unsigned int *);

/* 10766 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;

/* 10767 */
typedef int (__stdcall *PVECTORED_EXCEPTION_HANDLER)(_EXCEPTION_POINTERS *);

/* 10768 */
typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;

/* 10769 */
typedef const void *vpx_codec_iter_t;

/* 10770 */
typedef _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;

/* 10771 */
typedef _PAGED_LOOKASIDE_LIST *PPAGED_LOOKASIDE_LIST;

/* 10772 */
typedef tagBITMAPCOREHEADER *PBITMAPCOREHEADER;

/* 10773 */
typedef tagACTCTXA *PACTCTX;

/* 10774 */
typedef int (__stdcall *PFNSETTHREADSTACKGUARANTEE)(unsigned int *);

/* 10775 */
typedef tagAXESLISTA *PAXESLIST;

/* 10776 */
typedef unsigned __int64 ClientUnifiedMessageHandle;

/* 10777 */
typedef tagPALETTEENTRY *PPALETTEENTRY;

/* 10778 */
typedef _NETRESOURCEA *LPNETRESOURCE;

/* 10779 */
typedef DLGTEMPLATE *LPCDLGTEMPLATEA;

/* 10780 */
typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;

/* 10781 */
typedef tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;

/* 10782 */
typedef _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;

/* 10783 */
typedef __int16 int_least16_t;

/* 10784 */
typedef _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;

/* 10785 */
typedef tagHELPWININFOA *LPHELPWININFO;

/* 10786 */
typedef unsigned int (__cdecl *SDL_TimerCallback)(unsigned int, void *);

/* 10787 */
typedef _SDL_iconv_t *SDL_iconv_t;

/* 10788 */
typedef char *(__cdecl *AudioGetStrFunc)(char *, int, void *);

/* 10789 */
typedef _numberfmtA *LPNUMBERFMT;

/* 10790 */
typedef unsigned int (__stdcall *LPPROGRESS_ROUTINE)(_LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, unsigned int, unsigned int, void *, void *, void *);

/* 10791 */
typedef _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;

/* 10792 */
typedef float GLclampf;

/* 10793 */
typedef int intptr_t;

/* 10794 */
typedef tagRECT *LPCRECT;

/* 10795 */
typedef void (__stdcall *PFNGLLINKPROGRAMPROC)(unsigned int);

/* 10796 */
typedef unsigned int uint32_t;

/* 10797 */
typedef char uint_least8_t;

/* 10798 */
typedef DLGTEMPLATE *LPCDLGTEMPLATEW;

/* 10799 */
typedef void *HANDLE;

/* 10800 */
typedef void (__cdecl *PFNPreMinidumpCallback)(void *);

/* 10801 */
typedef unsigned int (__cdecl *Transform)(char *, unsigned int, const char *, unsigned int);

/* 10802 */
typedef tagSTYLEBUFA *PSTYLEBUFA;

/* 10803 */
typedef int (__stdcall *WNDPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 10804 */
typedef int difference_type;

/* 10805 */
typedef _BLENDFUNCTION *PBLENDFUNCTION;

/* 10806 */
typedef _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;

/* 10807 */
typedef unsigned __int16 stbi__uint16;

/* 10808 */
typedef _MODEMSETTINGS *LPMODEMSETTINGS;

/* 10809 */
typedef tagACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

/* 10810 */
typedef _XSAVE_AREA *PXSAVE_AREA;

/* 10811 */
typedef _MDL *PMDL;

/* 10812 */
typedef int (__stdcall *PINIT_ONCE_FN)(_RTL_RUN_ONCE *, void *, void **);

/* 10813 */
typedef _FILE_IO_PRIORITY_HINT_INFO *PFILE_IO_PRIORITY_HINT_INFO;

/* 10814 */
typedef unsigned int ogg_uint32_t;

/* 10815 */
typedef const char *PCUZZTSTR;

/* 10816 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 10817 */
typedef tagCHANGEFILTERSTRUCT *PCHANGEFILTERSTRUCT;

/* 10818 */
typedef unsigned __int16 *PSECURITY_DESCRIPTOR_CONTROL;

/* 10819 */
typedef _FILE_REMOTE_PROTOCOL_INFO *PFILE_REMOTE_PROTOCOL_INFO;

/* 10820 */
typedef tagEMRSTRETCHBLT *PEMRSTRETCHBLT;

/* 10821 */
typedef void (__cdecl *INI_EnumSectionCallback)(const char *, const char *, void *);

/* 10822 */
typedef _GUID *LPGUID;

/* 10823 */
typedef _ULARGE_INTEGER *PULARGE_INTEGER;

/* 10824 */
typedef const char *PCUTSTR;

/* 10825 */
typedef _cpinfoexA *LPCPINFOEXA;

/* 10826 */
typedef wchar_t *LPWCH;

/* 10827 */
typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;

/* 10828 */
typedef _DIACTIONFORMATW *LPDIACTIONFORMATW;

/* 10829 */
typedef wchar_t *LPUWSTR;

/* 10830 */
typedef tagACTCTXA *PCACTCTX;

/* 10831 */
typedef unsigned int SFGAOF;

/* 10832 */
typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;

/* 10833 */
typedef _POWER_SEQUENCE *PPOWER_SEQUENCE;

/* 10834 */
typedef _IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;

/* 10835 */
typedef tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;

/* 10836 */
typedef _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

/* 10837 */
typedef char __stdcall FAST_IO_READ(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, char, unsigned int, void *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 10838 */
typedef char XML_Char;

/* 10839 */
typedef _cpinfoexW *LPCPINFOEXW;

/* 10840 */
typedef tagEMRFILLPATH *PEMRSTROKEPATH;

/* 10841 */
typedef void vorbis_look_residue;

/* 10842 */
typedef int (__stdcall *OLDFONTENUMPROCA)(tagLOGFONTA *, tagTEXTMETRICA *, unsigned int, int);

/* 10843 */
typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

/* 10844 */
typedef void __stdcall IO_DPC_ROUTINE(_KDPC *, _DEVICE_OBJECT *, _IRP *, void *);

/* 10845 */
typedef _TAPE_WMI_OPERATIONS *PTAPE_WMI_OPERATIONS;

/* 10846 */
typedef _IMAGE_RELOCATION *PIMAGE_RELOCATION;

/* 10847 */
typedef void (__stdcall *PFNGLBINDATTRIBLOCATIONPROC)(unsigned int, unsigned int, const char *);

/* 10848 */
typedef void (__stdcall *PFNGLBINDFRAMEBUFFEREXTPROC)(unsigned int, unsigned int);

/* 10849 */
typedef const char *PCZZTSTR;

/* 10850 */
typedef _NT_TIB32 *PNT_TIB32;

/* 10851 */
typedef const wchar_t *PCZZWSTR;

/* 10852 */
typedef int SDL_SpinLock;

/* 10853 */
typedef _MDL *PMDLX;

/* 10854 */
typedef tagDROPSTRUCT *PDROPSTRUCT;

/* 10855 */
typedef void (__cdecl *pfnSDL_CurrentEndThread)(unsigned int);

/* 10856 */
typedef char *LPTCH;

/* 10857 */
typedef float GLfloat;

/* 10858 */
typedef float ALfloat;

/* 10859 */
typedef unsigned int _Uint4_t;

/* 10860 */
typedef void (__stdcall *PFNGLUNIFORM1IVPROC)(int, int, const int *);

/* 10861 */
typedef char SCRIPTNAME[32];

/* 10862 */
typedef char KPROCESSOR_MODE;

/* 10863 */
typedef unsigned int (__stdcall *XInputSetState_t)(unsigned int, _XINPUT_VIBRATION *);

/* 10864 */
typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEX;

/* 10865 */
typedef _OVERLAPPED *LPOVERLAPPED;

/* 10866 */
typedef bool (__cdecl *PFNSTEAMAPI_INIT)();

/* 10867 */
typedef tagRECT *PRECT;

/* 10868 */
typedef tagACTCTXW *PCACTCTXW;

/* 10869 */
typedef _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

/* 10870 */
typedef __int64 streamoff;

/* 10871 */
typedef HWAVEIN__ **LPHWAVEIN;

/* 10872 */
typedef _cpinfoexA *LPCPINFOEX;

/* 10873 */
typedef int (__stdcall *LPDIENUMEFFECTSINFILECALLBACK)(DIFILEEFFECT *, void *);

/* 10874 */
typedef tagACTCTXA *PCACTCTXA;

/* 10875 */
typedef int clock_t;

/* 10876 */
typedef tagMONITORINFOEXA *LPMONITORINFOEX;

/* 10877 */
typedef void (__stdcall *PFNGLUSEPROGRAMPROC)(unsigned int);

/* 10878 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO;

/* 10879 */
typedef void (__stdcall *PFNGLUSEPROGRAMOBJECTARBPROC)(unsigned int);

/* 10880 */
typedef _SECTION_OBJECT_POINTERS *PSECTION_OBJECT_POINTERS;

/* 10881 */
typedef _PERFORMANCE_DATA *PPERFORMANCE_DATA;

/* 10882 */
typedef HGLRC__ *(__stdcall *PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC__ *, HGLRC__ *, const int *);

/* 10883 */
typedef struct _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP;

/* 10884 */
typedef wchar_t *PNZWCH;

/* 10885 */
typedef unsigned int (__stdcall *LPFNDEVCAPS)(char *, char *, unsigned int, char *, _devicemodeA *);

/* 10886 */
typedef unsigned int _Vbase;

/* 10887 */
typedef _DRAWPATRECT *PDRAWPATRECT;

/* 10888 */
typedef unsigned int FWPS_IPSEC_FLAGS;

/* 10889 */
typedef _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;

/* 10890 */
typedef int (__stdcall *UILANGUAGE_ENUMPROCW)(wchar_t *, int);

/* 10891 */
typedef int (__stdcall *REGISTERWORDENUMPROCA)(const char *, unsigned int, const char *, void *);

/* 10892 */
typedef const char *D3DXHANDLE;

/* 10893 */
typedef unsigned int STRREF;

/* 10894 */
typedef tagSCROLLINFO *LPCSCROLLINFO;

/* 10895 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY32;

/* 10896 */
typedef _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;

/* 10897 */
typedef addrinfo *PADDRINFOA;

/* 10898 */
typedef long double _FP64;

/* 10899 */
typedef tagLOGBRUSH32 *PLOGBRUSH32;

/* 10900 */
typedef tagMETARECORD *PMETARECORD;

/* 10901 */
typedef struct _IO_TIMER *PIO_TIMER;

/* 10902 */
typedef tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;

/* 10903 */
typedef _SYSTEM_POWER_POLICY *PSYSTEM_POWER_POLICY;

/* 10904 */
typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;

/* 10905 */
typedef int (__stdcall *LPDICONFIGUREDEVICESCALLBACK)(IUnknown *, void *);

/* 10906 */
typedef _RESOURCEMANAGER_COMPLETION_INFORMATION *PRESOURCEMANAGER_COMPLETION_INFORMATION;

/* 10907 */
typedef int (__stdcall *REGISTERWORDENUMPROCW)(const wchar_t *, unsigned int, const wchar_t *, void *);

/* 10908 */
typedef __int64 SDL_GestureID;

/* 10909 */
typedef int (__stdcall *ENUMRESTYPEPROCW)(HINSTANCE__ *, wchar_t *, int);

/* 10910 */
typedef _STARTUPINFOEXA *LPSTARTUPINFOEXA;

/* 10911 */
typedef void (__stdcall *PFAST_IO_DETACH_DEVICE)(_DEVICE_OBJECT *, _DEVICE_OBJECT *);

/* 10912 */
typedef _SID *PISID;

/* 10913 */
typedef float vec3_t[3];

/* 10914 */
typedef tagSCROLLINFO *LPSCROLLINFO;

/* 10915 */
typedef SC_HANDLE__ *SC_HANDLE;

/* 10916 */
typedef _SID_AND_ATTRIBUTES_HASH *PSID_AND_ATTRIBUTES_HASH;

/* 10917 */
typedef char *PTSTR;

/* 10918 */
typedef _NET_BUFFER_SHARED_MEMORY *PNET_BUFFER_SHARED_MEMORY;

/* 10919 */
typedef __int16 ogg_int16_t;

/* 10920 */
typedef _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

/* 10921 */
typedef _GUID *__rcGUID_t;

/* 10922 */
typedef HRSRC__ *HRSRC;

/* 10923 */
typedef tagCANDIDATEFORM *PCANDIDATEFORM;

/* 10924 */
typedef _devicemodeW *LPDEVMODEW;

/* 10925 */
typedef _devicemodeW *NPDEVMODEW;

/* 10926 */
typedef char *PSECURITY_CONTEXT_TRACKING_MODE;

/* 10927 */
typedef int (__stdcall *ENUMRESLANGPROCA)(HINSTANCE__ *, const char *, const char *, unsigned __int16, int);

/* 10928 */
typedef tagMENUBARINFO *PMENUBARINFO;

/* 10929 */
typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;

/* 10930 */
typedef unsigned int (__stdcall *PFNGETCURRENTPROCESSORNUMBER)();

/* 10931 */
typedef _ABC *PABC;

/* 10932 */
typedef _INTERFACE *PINTERFACE;

/* 10933 */
typedef _WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

/* 10934 */
typedef tagCOPYDATASTRUCT *PCOPYDATASTRUCT;

/* 10935 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 10936 */
typedef unsigned int z_crc_t;

/* 10937 */
typedef tagEMRALPHABLEND *PEMRALPHABLEND;

/* 10938 */
typedef int HSteamUser;

/* 10939 */
typedef int ALsizei;

/* 10940 */
typedef HWND__ *EGLNativeWindowType;

/* 10941 */
typedef _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;

/* 10942 */
typedef _ABC *LPABC;

/* 10943 */
typedef char *PUINT8;

/* 10944 */
typedef unsigned __int16 wctype_t;

/* 10945 */
typedef _ABC *NPABC;

/* 10946 */
typedef int GLsizei;

/* 10947 */
typedef _KCRM_PROTOCOL_BLOB *PRKCRM_PROTOCOL_BLOB;

/* 10948 */
typedef _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;

/* 10949 */
typedef _ITEMIDLIST *LPITEMIDLIST;

/* 10950 */
typedef void *HCERTSTORE;

/* 10951 */
typedef unsigned int *PUCSSTR;

/* 10952 */
typedef tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;

/* 10953 */
typedef __int64 SDL_FingerID;

/* 10954 */
typedef IDirect3DBaseTexture9 *LPDIRECT3DBASETEXTURE9;

/* 10955 */
typedef void (__stdcall *PFNGLVERTEXATTRIBPOINTERPROC)(unsigned int, int, unsigned int, char, int, const void *);

/* 10956 */
typedef int *PSSIZE_T;

/* 10957 */
typedef _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;

/* 10958 */
typedef _DSBUFFERDESC *LPCDSBUFFERDESC;

/* 10959 */
typedef unsigned int (__stdcall *APPLICATION_RECOVERY_CALLBACK)(void *);

/* 10960 */
typedef int (__cdecl *AudioCloseFunc)(void *);

/* 10961 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMS;

/* 10962 */
typedef tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;

/* 10963 */
typedef unsigned int POINTER_64_INT;

/* 10964 */
typedef tagREGISTERWORDW *PREGISTERWORDW;

/* 10965 */
typedef unsigned int ENetSocket;

/* 10966 */
typedef const wchar_t *PCUZZWSTR;

/* 10967 */
typedef _TAPE_ERASE *PTAPE_ERASE;

/* 10968 */
typedef _RESOURCEMANAGER_BASIC_INFORMATION *PRESOURCEMANAGER_BASIC_INFORMATION;

/* 10969 */
typedef _CONTEXT_CHUNK *PCONTEXT_CHUNK;

/* 10970 */
typedef tagWNDCLASSW *PWNDCLASSW;

/* 10971 */
typedef tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;

/* 10972 */
typedef unsigned int HREFTYPE;

/* 10973 */
typedef tagMOUSEINPUT *LPMOUSEINPUT;

/* 10974 */
typedef void *PSECURITY_DESCRIPTOR;

/* 10975 */
typedef const void *(__stdcall *PFNDPAMERGECONST)(unsigned int, const void *, const void *, int);

/* 10976 */
typedef const wchar_t *PCUWSTR;

/* 10977 */
typedef void *HLOCAL;

/* 10978 */
typedef HKEY__ *HKEY;

/* 10979 */
typedef const wchar_t *PCWCH;

/* 10980 */
typedef _CONSOLE_SELECTION_INFO *PCONSOLE_SELECTION_INFO;

/* 10981 */
typedef int (__stdcall *PFNSETFILEINFORMATIONBYHANDLE)(void *, _FILE_INFO_BY_HANDLE_CLASS, void *, unsigned int);

/* 10982 */
typedef char *LPUTSTR;

/* 10983 */
typedef int (__stdcall *PROPENUMPROC)(HWND__ *, const char *, void *);

/* 10984 */
typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICE;

/* 10985 */
typedef _FILE_INFO_BY_HANDLE_CLASS *PFILE_INFO_BY_HANDLE_CLASS;

/* 10986 */
typedef tagENUMTEXTMETRICW *PENUMTEXTMETRICW;

/* 10987 */
typedef tagGLYPHSET *LPGLYPHSET;

/* 10988 */
typedef _EXCEPTION_DISPOSITION (__stdcall *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 10989 */
typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRY;

/* 10990 */
typedef unsigned __int64 DWORD64;

/* 10991 */
typedef _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;

/* 10992 */
typedef tagACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

/* 10993 */
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

/* 10994 */
typedef int *PLONG_PTR;

/* 10995 */
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

/* 10996 */
typedef _PSINJECTDATA *PPSINJECTDATA;

/* 10997 */
typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;

/* 10998 */
typedef const char *(__cdecl *p_error)(void *, int);

/* 10999 */
typedef unsigned int ULONG_PTR;

/* 11000 */
typedef tagALTTABINFO *PALTTABINFO;

/* 11001 */
typedef tagWINDOWINFO *PWINDOWINFO;

/* 11002 */
typedef unsigned int MMRESULT;

/* 11003 */
typedef tagEVENTMSG *NPEVENTMSGMSG;

/* 11004 */
typedef tagEVENTMSG *LPEVENTMSGMSG;

/* 11005 */
typedef HWND__ *HWND;

/* 11006 */
typedef int _Once_t;

/* 11007 */
typedef const char *PCTCH;

/* 11008 */
typedef _SE_ACCESS_REQUEST *PSE_ACCESS_REQUEST;

/* 11009 */
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

/* 11010 */
typedef _TOKEN_CONTROL *PTOKEN_CONTROL;

/* 11011 */
typedef _SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

/* 11012 */
typedef _IO_ALLOCATION_ACTION (__stdcall *PDRIVER_CONTROL)(_DEVICE_OBJECT *, _IRP *, void *, void *);

/* 11013 */
typedef __int16 int16_t;

/* 11014 */
typedef tagMSG *NPMSG;

/* 11015 */
typedef int (__stdcall *PROPENUMPROCW)(HWND__ *, const wchar_t *, void *);

/* 11016 */
typedef unsigned int IPos;

/* 11017 */
typedef tagMSG *LPMSG;

/* 11018 */
typedef unsigned __int16 SDL_AudioFormat;

/* 11019 */
typedef int BOOL;

/* 11020 */
typedef int (__stdcall *PROPENUMPROCA)(HWND__ *, const char *, void *);

/* 11021 */
typedef _MAT2 *LPMAT2;

/* 11022 */
typedef ID3DXEffectStateManager *LPD3DXEFFECTSTATEMANAGER;

/* 11023 */
typedef _IP_ADAPTER_WINS_SERVER_ADDRESS_LH *PIP_ADAPTER_WINS_SERVER_ADDRESS_LH;

/* 11024 */
typedef void *(__stdcall *PFN_CreateFile2)(const wchar_t *, unsigned int, unsigned int, unsigned int, _CREATEFILE2_EXTENDED_PARAMETERS *);

/* 11025 */
typedef _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;

/* 11026 */
typedef tagAXISINFOA *LPAXISINFOA;

/* 11027 */
typedef int SDL_dummy_sint8[1];

/* 11028 */
typedef wchar_t (__cdecl *CharacterTransformation)(wchar_t);

/* 11029 */
typedef char z_Byte;

/* 11030 */
typedef int (__stdcall *ENUMRESNAMEPROCA)(HINSTANCE__ *, const char *, char *, int);

/* 11031 */
typedef FILE_ID_DESCRIPTOR *LPFILE_ID_DESCRIPTOR;

/* 11032 */
typedef tagPOINT *NPPOINT;

/* 11033 */
typedef int *LPBOOL;

/* 11034 */
typedef void (__cdecl *_PHNDLR)(int);

/* 11035 */
typedef tagPOINT *LPPOINT;

/* 11036 */
typedef HKL__ *HKL;

/* 11037 */
typedef _SC_ACTION *LPSC_ACTION;

/* 11038 */
typedef void *(__stdcall *PIcmp6CreateFile)();

/* 11039 */
typedef tagRECT *LPRECT;

/* 11040 */
typedef tagRECT *NPRECT;

/* 11041 */
typedef tagAXISINFOW *LPAXISINFOW;

/* 11042 */
typedef _MODEMDEVCAPS *PMODEMDEVCAPS;

/* 11043 */
typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFY_2W;

/* 11044 */
typedef _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;

/* 11045 */
typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACE;

/* 11046 */
typedef in6_addr *PIN6_ADDR;

/* 11047 */
typedef tagTOUCHINPUT *PCTOUCHINPUT;

/* 11048 */
typedef void *(__stdcall *PGETWINRT_OOM_EXCEPTION)();

/* 11049 */
typedef const char *LPCCH;

/* 11050 */
typedef PPM_THERMALCHANGE_EVENT *PPPM_THERMALCHANGE_EVENT;

/* 11051 */
typedef _EVENT_DATA_DESCRIPTOR *PEVENT_DATA_DESCRIPTOR;

/* 11052 */
typedef char (__stdcall *PFAST_IO_MDL_WRITE_COMPLETE)(_FILE_OBJECT *, _LARGE_INTEGER *, _MDL *, _DEVICE_OBJECT *);

/* 11053 */
typedef float vec2_t[2];

/* 11054 */
typedef char RESREF[8];

/* 11055 */
typedef tagBITMAPINFO *PBITMAPINFO;

/* 11056 */
typedef tagABORTPATH *PEMRABORTPATH;

/* 11057 */
typedef unsigned int (__stdcall *PFNGLCREATESHADEROBJECTARBPROC)(unsigned int);

/* 11058 */
typedef int (__stdcall *PFAST_IO_RELEASE_FOR_CCFLUSH)(_FILE_OBJECT *, _DEVICE_OBJECT *);

/* 11059 */
typedef void *__stdcall ALLOCATE_FUNCTION_EX(_POOL_TYPE, unsigned int, unsigned int, _LOOKASIDE_LIST_EX *);

/* 11060 */
typedef char __stdcall FAST_IO_MDL_READ(_FILE_OBJECT *, _LARGE_INTEGER *, unsigned int, unsigned int, _MDL **, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 11061 */
typedef tagEMRRESTOREDC *PEMRRESTOREDC;

/* 11062 */
typedef _NET_BUFFER_LIST *PNET_BUFFER_LIST;

/* 11063 */
typedef tagAXISINFOA *LPAXISINFO;

/* 11064 */
typedef char z_Bytef;

/* 11065 */
typedef char *PCHAR;

/* 11066 */
typedef SC_HANDLE__ **LPSC_HANDLE;

/* 11067 */
typedef __int64 __time64_t;

/* 11068 */
typedef unsigned int (__stdcall *XInputGetState_t)(unsigned int, XINPUT_STATE_EX *);

/* 11069 */
typedef char UCHAR;

/* 11070 */
typedef unsigned int (__stdcall *PFE_EXPORT_FUNC)(char *, void *, unsigned int);

/* 11071 */
typedef type_info *__RTtypeidReturnType;

/* 11072 */
typedef char ICHAR;

/* 11073 */
typedef char BCHAR;

/* 11074 */
typedef char CCHAR;

/* 11075 */
typedef _RECTL *LPRECTL;

/* 11076 */
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;

/* 11077 */
typedef char FCHAR;

/* 11078 */
typedef _GUID *PCRM_PROTOCOL_ID;

/* 11079 */
typedef _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;

/* 11080 */
typedef _IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

/* 11081 */
typedef _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;

/* 11082 */
typedef tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;

/* 11083 */
typedef tagPANOSE *LPPANOSE;

/* 11084 */
typedef void *GLOBALHANDLE;

/* 11085 */
typedef const wchar_t *LPCWSTR;

/* 11086 */
typedef tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;

/* 11087 */
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

/* 11088 */
typedef tagCOLORADJUSTMENT *PCOLORADJUSTMENT;

/* 11089 */
typedef int SDL_dummy_sint32[1];

/* 11090 */
typedef tagMENUITEMINFOA *LPCMENUITEMINFO;

/* 11091 */
typedef tagEMRBITBLT *PEMRBITBLT;

/* 11092 */
typedef unsigned int *PSAVEPOINT_ID;

/* 11093 */
typedef _IP_ADAPTER_GATEWAY_ADDRESS_LH *PIP_ADAPTER_GATEWAY_ADDRESS_LH;

/* 11094 */
typedef unsigned int UCSCHAR;

/* 11095 */
typedef long double GLclampd;

/* 11096 */
typedef _GENERIC_MAPPING *PGENERIC_MAPPING;

/* 11097 */
typedef tagLOGPALETTE *PLOGPALETTE;

/* 11098 */
typedef int GLint;

/* 11099 */
typedef unsigned int CellID_t;

/* 11100 */
typedef int ALint;

/* 11101 */
typedef _FPO_DATA *PFPO_DATA;

/* 11102 */
typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;

/* 11103 */
typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX;

/* 11104 */
typedef tagREGISTERWORDA *LPREGISTERWORD;

/* 11105 */
typedef tagHARDWAREINPUT *PHARDWAREINPUT;

/* 11106 */
typedef unsigned int (__cdecl *read_file_func)(void *, void *, void *, unsigned int);

/* 11107 */
typedef tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;

/* 11108 */
typedef tagREGISTERWORDA *NPREGISTERWORD;

/* 11109 */
typedef _PROCESSOR_POWER_POLICY *PPROCESSOR_POWER_POLICY;

/* 11110 */
typedef unsigned __int16 LANGID;

/* 11111 */
typedef char *PSTR;

/* 11112 */
typedef unsigned __int16 _ino_t;

/* 11113 */
typedef tagENUMLOGFONTW *LPENUMLOGFONTW;

/* 11114 */
typedef unsigned __int16 char16_t;

/* 11115 */
typedef unsigned int (__stdcall *PFNGLCREATEPROGRAMPROC)();

/* 11116 */
typedef char (__stdcall *PFAST_IO_UNLOCK_ALL_BY_KEY)(_FILE_OBJECT *, void *, unsigned int, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 11117 */
typedef _COMPATIBILITY_CONTEXT_ELEMENT *PCOMPATIBILITY_CONTEXT_ELEMENT;

/* 11118 */
typedef tagCHARSETINFO *LPCHARSETINFO;

/* 11119 */
typedef tagCHARSETINFO *NPCHARSETINFO;

/* 11120 */
typedef DIFILEEFFECT *LPDIFILEEFFECT;

/* 11121 */
typedef void (__stdcall *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(unsigned int, int, unsigned int, int, int, int, int, const void *);

/* 11122 */
typedef DIDEVICEOBJECTINSTANCEW *LPCDIDEVICEOBJECTINSTANCE;

/* 11123 */
typedef _FAST_MUTEX *PFAST_MUTEX;

/* 11124 */
typedef _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;

/* 11125 */
typedef _MEMORYSTATUS *LPMEMORYSTATUS;

/* 11126 */
typedef void (__stdcall *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *, unsigned int);

/* 11127 */
typedef wchar_t *BSTR;

/* 11128 */
typedef _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;

/* 11129 */
typedef unsigned int *PKSPIN_LOCK;

/* 11130 */
typedef int SDL_JoystickID;

/* 11131 */
typedef tagLASTINPUTINFO *PLASTINPUTINFO;

/* 11132 */
typedef HSTR__ *HSTR;

/* 11133 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;

/* 11134 */
typedef _KDHELP64 *PKDHELP64;

/* 11135 */
typedef void *HServerListRequest;

/* 11136 */
typedef void __stdcall RTL_UMS_SCHEDULER_ENTRY_POINT(_RTL_UMS_SCHEDULER_REASON, unsigned int, void *);

/* 11137 */
typedef void (__thiscall *func_t)(CSteam *this, SteamUGCQueryCompleted_t *, bool);

/* 11138 */
typedef char uint8_t;

/* 11139 */
typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

/* 11140 */
typedef void (__cdecl *PEXCEPTION_HANDLER)();

/* 11141 */
typedef tagCREATESTRUCTW *LPCREATESTRUCTW;

/* 11142 */
typedef void MENUTEMPLATEA;

/* 11143 */
typedef _TIME_DYNAMIC_ZONE_INFORMATION *PDYNAMIC_TIME_ZONE_INFORMATION;

/* 11144 */
typedef wchar_t *LPWSTR;

/* 11145 */
typedef void *LPMENUTEMPLATEA;

/* 11146 */
typedef _WIN32_FIND_STREAM_DATA *PWIN32_FIND_STREAM_DATA;

/* 11147 */
typedef _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;

/* 11148 */
typedef char ALCboolean;

/* 11149 */
typedef int SDL_Keycode;

/* 11150 */
typedef int SDL_dummy_uint32[1];

/* 11151 */
typedef unsigned int FLONG;

/* 11152 */
typedef _KEVENT *PKEVENT;

/* 11153 */
typedef char int_fast8_t;

/* 11154 */
typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;

/* 11155 */
typedef void (__stdcall *PFREE_FUNCTION_EX)(void *, _LOOKASIDE_LIST_EX *);

/* 11156 */
typedef _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;

/* 11157 */
typedef void *LPMENUTEMPLATEW;

/* 11158 */
typedef _SLIST_HEADER *PSLIST_HEADER32;

/* 11159 */
typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONS;

/* 11160 */
typedef void MENUTEMPLATEW;

/* 11161 */
typedef _TP_POOL_STACK_INFORMATION *PTP_POOL_STACK_INFORMATION;

/* 11162 */
typedef _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

/* 11163 */
typedef tagCREATESTRUCTA *LPCREATESTRUCTA;

/* 11164 */
typedef int *PLONG;

/* 11165 */
typedef _PROCESS_INFORMATION *PPROCESS_INFORMATION;

/* 11166 */
typedef _RTL_CONDITION_VARIABLE *PCONDITION_VARIABLE;

/* 11167 */
typedef _CRYPT_OID_INFO *PCCRYPT_OID_INFO;

/* 11168 */
typedef unsigned int ULONG;

/* 11169 */
typedef DIDEVICEOBJECTDATA *LPCDIDEVICEOBJECTDATA;

/* 11170 */
typedef tagEMRPOLYLINE *PEMRPOLYLINETO;

/* 11171 */
typedef _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST;

/* 11172 */
typedef tagREGISTERWORDA *LPREGISTERWORDA;

/* 11173 */
typedef void *(__stdcall *PFNCREATEEVENTEXW)(_SECURITY_ATTRIBUTES *, const wchar_t *, unsigned int, unsigned int);

/* 11174 */
typedef tagREGISTERWORDA *NPREGISTERWORDA;

/* 11175 */
typedef int SDL_dummy_uint8[1];

/* 11176 */
typedef char *LPTSTR;

/* 11177 */
typedef int __cdecl PROLOG_HANDLER(prolog_state *, int, const char *, const char *, encoding *);

/* 11178 */
typedef _DCB *LPDCB;

/* 11179 */
typedef void (__stdcall *PFNGLDELETEOBJECTARBPROC)(unsigned int);

/* 11180 */
typedef _MONITOR_DISPLAY_STATE *PMONITOR_DISPLAY_STATE;

/* 11181 */
typedef unsigned int PackageId_t;

/* 11182 */
typedef tagRAWMOUSE *PRAWMOUSE;

/* 11183 */
typedef void (__stdcall *PDRIVER_UNLOAD)(_DRIVER_OBJECT *);

/* 11184 */
typedef tagREGISTERWORDW *NPREGISTERWORDW;

/* 11185 */
typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRIC;

/* 11186 */
typedef void (__cdecl *PMFN)(void *);

/* 11187 */
typedef tagREGISTERWORDW *LPREGISTERWORDW;

/* 11188 */
typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRIC;

/* 11189 */
typedef int ptrdiff_t;

/* 11190 */
typedef char (__stdcall *PFAST_IO_QUERY_STANDARD_INFO)(_FILE_OBJECT *, char, _FILE_STANDARD_INFORMATION *, _IO_STATUS_BLOCK *, _DEVICE_OBJECT *);

/* 11191 */
typedef int __stdcall DRIVER_DISPATCH(_DEVICE_OBJECT *, _IRP *);

/* 11192 */
typedef tag_sound *Sound;

/* 11193 */
typedef void MENUTEMPLATE;

/* 11194 */
typedef float float_t;

/* 11195 */
typedef int (__stdcall *PFNGETFILEINFORMATIONBYHANDLEEX)(void *, _FILE_INFO_BY_HANDLE_CLASS, void *, unsigned int);

/* 11196 */
typedef void *LPMENUTEMPLATE;

/* 11197 */
typedef int (__stdcall *PIO_COMPLETION_ROUTINE)(_DEVICE_OBJECT *, _IRP *, void *);

/* 11198 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;

/* 11199 */
typedef int int_least32_t;

/* 11200 */
typedef unsigned int SICHINTF;

/* 11201 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO32;

/* 11202 */
typedef _IMAGE_LINENUMBER *PIMAGE_LINENUMBER;

/* 11203 */
typedef char BOOLEAN;

/* 11204 */
typedef _tiddata *_ptiddata;

/* 11205 */
typedef unsigned int ALuint;

/* 11206 */
typedef _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;

/* 11207 */
typedef void (__cdecl *Free_t)(void *);

/* 11208 */
typedef const wchar_t *PCWCHAR;

/* 11209 */
typedef unsigned int GLuint;

/* 11210 */
typedef tagCREATESTRUCTA *LPCREATESTRUCT;

/* 11211 */
typedef void (__stdcall *SENDASYNCPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 11212 */
typedef void (__cdecl *XML_StartCdataSectionHandler)(void *);

/* 11213 */
typedef HMENU__ *HMENU;

/* 11214 */
typedef int (__stdcall *DLGPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 11215 */
typedef void (__cdecl *XML_EndCdataSectionHandler)(void *);

/* 11216 */
typedef _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;

/* 11217 */
typedef HWAVEOUT__ **LPHWAVEOUT;

/* 11218 */
typedef _TP_WAIT *(__stdcall *PFNCREATETHREADPOOLWAIT)(void (__stdcall *)(struct _TP_CALLBACK_INSTANCE *, void *, _TP_WAIT *, unsigned int), void *, _TP_CALLBACK_ENVIRON_V1 *);

/* 11219 */
typedef struct _TP_POOL *PTP_POOL;

/* 11220 */
typedef _GUID *PUOW;

/* 11221 */
typedef _CONTEXT_EX *PCONTEXT_EX;

/* 11222 */
struct FuncInfo
{
	int magicNumber;
	int maxState;
	void *pUnwindMap;
	int nTryBlocks;
	void *pTryBlockMap;
	int nIPMapEntries;
	void *pIPtoStateMap;
	void *pESTypeList;
	int EHFlags;
};

/* 11223 */
struct UnwindMapEntry
{
	int toState;
	void *action;
};

/* 11224 */
struct TryBlockMapEntry
{
	int tryLow;
	int tryHigh;
	int catchHigh;
	int nCatches;
	void *pHandlerArray;
};

/* 11225 */
struct HandlerType
{
	int adjectives;
	void *pType;
	int dispCatchObj;
	void *addressOfHandler;
};

/* 11234 */
typedef _GUID GUID;

/* 11236 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 11237 */
struct CPPEH_RECORD
{
	DWORD old_esp;
	EXCEPTION_POINTERS *exc_ptr;
	struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 11239 */
enum MACRO_OVERFLOW
{
	OVERFLOW = 3,
	UNDERFLOW = 4,
};

